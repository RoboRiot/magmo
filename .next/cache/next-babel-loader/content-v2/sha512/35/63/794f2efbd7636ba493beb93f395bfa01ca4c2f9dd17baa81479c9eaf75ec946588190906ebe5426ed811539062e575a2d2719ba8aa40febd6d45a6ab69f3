{"ast":null,"code":"import _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Modal, Form, Button, Card, Container, Row, Col } from \"react-bootstrap\";\nimport firebase from \"../../context/Firebase\";\nimport styles from \"../../styles/Home.module.css\";\nimport Link from \"next/link\"; // import { useAuth } from \"../context/AuthUserContext\";\n// import LoggedIn from \"./LoggedIn\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n}\n\nfunction LoadingButton(type, name, route) {\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    if (isLoading) {\n      simulateNetworkRequest().then(function () {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  var handleClick = function handleClick() {\n    return setLoading(true);\n  }; // Guard against falsy route values\n\n\n  if (!route) return null;\n  var isExternal = route.startsWith(\"http://\") || route.startsWith(\"https://\");\n\n  if (isExternal) {\n    return __jsx(\"a\", {\n      href: route,\n      className: \"btn btn-\".concat(type),\n      disabled: isLoading,\n      onClick: !isLoading ? handleClick : null\n    }, isLoading ? \"Loading…\" : name);\n  } else {\n    return __jsx(Link, {\n      href: route\n    }, __jsx(\"a\", {\n      className: \"btn btn-\".concat(type),\n      disabled: isLoading,\n      onClick: !isLoading ? handleClick : null\n    }, isLoading ? \"Loading…\" : name));\n  }\n}\n\nexport default function interview() {\n  var _useState2 = useState({}),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var today = new Date().toISOString().split(\"T\")[0];\n\n  var _useState3 = useState(false),\n      modalShow = _useState3[0],\n      setModalShow = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      selectedTimeSlot = _useState4[0],\n      setSelectedTimeSlot = _useState4[1];\n\n  var router = useRouter();\n  var db = firebase.firestore();\n\n  var _useState5 = useState([]),\n      dates = _useState5[0],\n      setDates = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      name = _useState6[0],\n      setName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      email = _useState7[0],\n      setEmail = _useState7[1];\n\n  var handleModalClose = function handleModalClose() {\n    return setModalShow(false);\n  };\n\n  var handleModalShow = function handleModalShow(timeSlot) {\n    setSelectedTimeSlot(timeSlot);\n    setModalShow(true);\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    // event.preventDefault();\n    alert(\"Your timeslot has been saved \\nYou will recieve an email confirmation once the interview is confirmed\");\n    var dateToSend = {\n      name: name,\n      email: email,\n      date: new Date().toISOString(),\n      Position: selectedTimeSlot\n    };\n    console.log(\"Name:\", name, \"Email:\", email);\n    console.log(\"submit\");\n    db.collection('Dates').doc(generateId(20)).set(dateToSend).then(function () {\n      return console.log('date sent');\n    })[\"catch\"](function (error) {\n      return console.error('Error sending date:', error);\n    });\n  }; //generate and id to send\n\n\n  function generateId(length) {\n    return _toConsumableArray(Array(length)).map(function () {\n      return Math.random().toString(36)[2];\n    }).join('');\n  } // Fetch data when the component mounts or route changes\n\n\n  useEffect(function () {\n    fetchData();\n  }, [router.route]); // Function to fetch dates from Firebase\n\n  function fetchClients() {\n    return _fetchClients.apply(this, arguments);\n  } // Function to initiate fetching of data and setting state\n\n\n  function _fetchClients() {\n    _fetchClients = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var data, id;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = [];\n              id = [];\n              _context.next = 4;\n              return db.collection(\"Dates\").get().then(function (querySnapshot) {\n                querySnapshot.forEach(function (element) {\n                  id.push(element.id);\n                  data.push(element.data());\n                });\n              });\n\n            case 4:\n              return _context.abrupt(\"return\", [data, id]);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchClients.apply(this, arguments);\n  }\n\n  function fetchData() {\n    return _fetchData.apply(this, arguments);\n  }\n\n  function _fetchData() {\n    _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _yield$fetchClients, _yield$fetchClients2, data, id;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetchClients();\n\n            case 2:\n              _yield$fetchClients = _context2.sent;\n              _yield$fetchClients2 = _slicedToArray(_yield$fetchClients, 2);\n              data = _yield$fetchClients2[0];\n              id = _yield$fetchClients2[1];\n              setDates(data.map(function (client, index) {\n                return _objectSpread(_objectSpread({}, client), {}, {\n                  id: id[index]\n                });\n              }));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _fetchData.apply(this, arguments);\n  }\n\n  var dateChangeHandler = function dateChangeHandler(event) {\n    setItems(Object.assign({}, items, {\n      date: event.target.value\n    }));\n  }; //Buttons generate and function\n  // Function to generate buttons\n\n\n  function generateTimeButtons() {\n    console.log(dates);\n    var buttonCount = 10;\n    var selectedDate = items[\"date\"]; // Ensure this date format matches your database\n\n    return __jsx(\"div\", {\n      className: \"d-flex flex-wrap\"\n    }, Array.from({\n      length: buttonCount\n    }, function (_, index) {\n      var timeSlot = \"\".concat(Math.floor(index * 0.5 + 5), \":\").concat(index % 2 === 0 ? \"00\" : \"30\", \" PM - \").concat(Math.floor(index * 0.5 + 5.5), \":\").concat(index % 2 === 0 ? \"30\" : \"00\", \" PM\"); // Adjust this check to also consider the date\n\n      var isDisabled = dates.some(function (date) {\n        return date.Position === index && date.date === selectedDate;\n      });\n      return __jsx(\"div\", {\n        className: \"col-6 my-2\",\n        key: index\n      }, __jsx(Button, {\n        variant: index % 2 === 0 ? \"primary\" : \"secondary\",\n        onClick: function onClick() {\n          return handleModalShow(index);\n        },\n        disabled: isDisabled // Disable button based on position and date match\n\n      }, timeSlot));\n    }));\n  }\n\n  function buttonClicked(pos) {\n    alert(\"Pos: \" + pos);\n  } //   const { signOut } = useAuth();\n\n\n  return (// <LoggedIn>\n    __jsx(React.Fragment, null, __jsx(Modal, {\n      show: modalShow,\n      onHide: handleModalClose\n    }, __jsx(Modal.Header, {\n      closeButton: true\n    }, __jsx(Modal.Title, null, \"Book Time Slot\")), __jsx(Modal.Body, null, __jsx(Form, {\n      onSubmit: handleSubmit\n    }, __jsx(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicName\"\n    }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n      type: \"text\",\n      placeholder: \"Enter name\",\n      value: name,\n      onChange: function onChange(e) {\n        return setName(e.target.value);\n      }\n    })), __jsx(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicEmail\"\n    }, __jsx(Form.Label, null, \"Email address\"), __jsx(Form.Control, {\n      type: \"email\",\n      placeholder: \"Enter email\",\n      value: email,\n      onChange: function onChange(e) {\n        return setEmail(e.target.value);\n      }\n    })), __jsx(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: handleModalClose\n    }, \"Submit\")))), __jsx(Container, {\n      className: \"d-flex align-items-center justify-content-center\",\n      style: {\n        minHeight: \"100vh\"\n      }\n    }, __jsx(\"div\", {\n      className: \"w-100\",\n      style: {\n        maxWidth: \"400px\"\n      }\n    }, __jsx(Card, {\n      className: \"align-items-center justify-content-center\"\n    }, __jsx(Card.Body, null, __jsx(\"h2\", {\n      className: \"text-center mb-4\"\n    }, \"Schedule\"), __jsx(\"h5\", {\n      className: \"text-center mb-4\"\n    }, \"Select a date and a time slot\"), __jsx(\"div\", {\n      \"class\": \"d-grid gap-3\"\n    }, __jsx(Form, null, __jsx(Row, {\n      className: \"mb-3\"\n    }, __jsx(Form.Group, {\n      as: Col,\n      controlId: \"date\"\n    }, __jsx(Form.Control, {\n      type: \"date\",\n      value: items[\"date\"],\n      onChange: dateChangeHandler,\n      min: today\n    }))), items[\"date\"] && generateTimeButtons()))))))) // </LoggedIn>\n\n  );\n}","map":null,"metadata":{},"sourceType":"module"}
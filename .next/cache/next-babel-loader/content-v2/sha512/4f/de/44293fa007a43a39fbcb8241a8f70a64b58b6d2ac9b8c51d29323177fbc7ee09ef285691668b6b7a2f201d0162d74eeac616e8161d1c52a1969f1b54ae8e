{"ast":null,"code":"import _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\client\\\\[id]\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Table, Button, Container, Card, Row, Col, Alert } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport MachineCreationModal from \"../../MachineCreationModal\"; // Import for SSR\n\nvar Client = function Client() {\n  _s();\n\n  var router = useRouter();\n\n  var _useState = useState(null),\n      selectedClient = _useState[0],\n      setSelectedClient = _useState[1];\n\n  var _useState2 = useState([]),\n      machineOptions = _useState2[0],\n      setMachineOptions = _useState2[1];\n\n  var _useState3 = useState(null),\n      error = _useState3[0],\n      setError = _useState3[1]; // State for machine addition modals\n\n\n  var _useState4 = useState(false),\n      showAddMachineModal = _useState4[0],\n      setShowAddMachineModal = _useState4[1];\n\n  var _useState5 = useState(false),\n      showCreateMachineModal = _useState5[0],\n      setShowCreateMachineModal = _useState5[1];\n\n  var _useState6 = useState([]),\n      availableMachines = _useState6[0],\n      setAvailableMachines = _useState6[1];\n\n  useEffect(function () {\n    if (router.isReady) {\n      var clientId = router.query.clientId; // Extract clientId from query or URL path\n\n      var id = clientId || router.asPath.split(\"/\").pop();\n      fetchClientData(id);\n    }\n  }, [router.isReady]);\n\n  var fetchClientData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(clientId) {\n      var db, clientDoc, clientData, machinePromises, machineDocs, machines;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              db = firebase.firestore();\n              _context.next = 4;\n              return db.collection(\"Client\").doc(clientId).get();\n\n            case 4:\n              clientDoc = _context.sent;\n\n              if (!clientDoc.exists) {\n                _context.next = 16;\n                break;\n              }\n\n              clientData = clientDoc.data();\n              setSelectedClient(clientData); // Fetch machine documents referenced in the client's machines array\n\n              machinePromises = clientData.machines.map(function (machineRef) {\n                return machineRef.get();\n              });\n              _context.next = 11;\n              return Promise.all(machinePromises);\n\n            case 11:\n              machineDocs = _context.sent;\n              machines = machineDocs.map(function (machineDoc) {\n                return _objectSpread({\n                  id: machineDoc.id\n                }, machineDoc.data());\n              });\n              setMachineOptions(machines);\n              _context.next = 17;\n              break;\n\n            case 16:\n              setError(\"Client not found\");\n\n            case 17:\n              _context.next = 23;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching client data:\", _context.t0);\n              setError(\"Error fetching client data\");\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 19]]);\n    }));\n\n    return function fetchClientData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Fetch available machines (those not yet assigned to a client)\n\n\n  var fetchAvailableMachines = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var db, snapshot, machines;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              db = firebase.firestore();\n              _context2.next = 4;\n              return db.collection(\"Machine\").where(\"client\", \"==\", null).get();\n\n            case 4:\n              snapshot = _context2.sent;\n              machines = snapshot.docs.map(function (doc) {\n                return _objectSpread({\n                  id: doc.id\n                }, doc.data());\n              });\n              setAvailableMachines(machines);\n              _context2.next = 13;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"Error fetching available machines:\", _context2.t0);\n              setError(\"Failed to fetch available machines.\");\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n\n    return function fetchAvailableMachines() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectMachine = function handleSelectMachine(id, name) {\n    // Navigate to the machine details page if needed\n    router.push(\"../machine/\" + id);\n  }; // When adding an existing machine\n\n\n  var handleAddMachine = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(machine) {\n      var db, clientId;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              db = firebase.firestore();\n              clientId = router.query.clientId || router.asPath.split(\"/\").pop(); // Update client's \"machines\" array with the machine reference\n\n              _context3.next = 5;\n              return db.collection(\"Client\").doc(clientId).update({\n                machines: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Machine\").doc(machine.id))\n              });\n\n            case 5:\n              // Update local state to include the newly added machine\n              setMachineOptions(function (prev) {\n                return [].concat(_toConsumableArray(prev), [machine]);\n              });\n              setShowAddMachineModal(false);\n              _context3.next = 13;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error adding machine to client:\", _context3.t0);\n              setError(\"Failed to add machine to client.\");\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 9]]);\n    }));\n\n    return function handleAddMachine(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // When creating a new machine for the client\n\n\n  var handleCreateMachine = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(newMachine) {\n      var db, clientId, machineId, machineWithId;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              db = firebase.firestore();\n              clientId = router.query.clientId || router.asPath.split(\"/\").pop();\n              machineId = \"AIS\".concat(Math.floor(10000 + Math.random() * 90000));\n              machineWithId = _objectSpread(_objectSpread({}, newMachine), {}, {\n                id: machineId,\n                client: db.collection(\"Client\").doc(clientId)\n              }); // Create the machine document\n\n              _context4.next = 7;\n              return db.collection(\"Machine\").doc(machineId).set(machineWithId);\n\n            case 7:\n              _context4.next = 9;\n              return db.collection(\"Client\").doc(clientId).update({\n                machines: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Machine\").doc(machineId))\n              });\n\n            case 9:\n              // Update local state\n              setMachineOptions(function (prev) {\n                return [].concat(_toConsumableArray(prev), [_objectSpread({\n                  id: machineId\n                }, newMachine)]);\n              });\n              setShowCreateMachineModal(false);\n              _context4.next = 17;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error(\"Error creating and adding machine:\", _context4.t0);\n              setError(\"Failed to create and add machine.\");\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 13]]);\n    }));\n\n    return function handleCreateMachine(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Open the modal to add an existing machine; fetch available machines first\n\n\n  var openAddMachineModal = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetchAvailableMachines();\n\n            case 2:\n              setShowAddMachineModal(true);\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function openAddMachineModal() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Container, {\n    className: \"mt-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    className: \"justify-content-md-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: \"8\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, \"Client Machines\")), __jsx(Card.Body, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, error && __jsx(Alert, {\n    variant: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, error), selectedClient ? __jsx(React.Fragment, null, __jsx(\"h5\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 19\n    }\n  }, \"Client: \", selectedClient.name), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  }, \"Location: \", selectedClient.local), __jsx(\"div\", {\n    className: \"mb-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: openAddMachineModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, \"Add Existing Machine\"), __jsx(Button, {\n    variant: \"secondary\",\n    className: \"ms-2\",\n    onClick: function onClick() {\n      return setShowCreateMachineModal(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }, \"Create New Machine\")), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 19\n    }\n  }, __jsx(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  }, __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 23\n    }\n  }, __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, \"Name\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }, \"Location\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, \"OEM\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, \"Modality\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, \"Select\"))), __jsx(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, machineOptions.map(function (machine) {\n    return __jsx(\"tr\", {\n      key: machine.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 27\n      }\n    }, machine.name), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 27\n      }\n    }, machine.local), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 27\n      }\n    }, machine.OEM), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 27\n      }\n    }, machine.Modality), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 27\n      }\n    }, __jsx(Button, {\n      variant: \"primary\",\n      onClick: function onClick() {\n        return handleSelectMachine(machine.id, machine.name);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    }, \"Select\")));\n  }))), __jsx(Button, {\n    variant: \"primary\",\n    style: {\n      marginTop: \"20px\"\n    },\n    onClick: function onClick() {\n      return router.back();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }\n  }, \"Back\")) : !error && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 27\n    }\n  }, \"Loading client data...\"))))), __jsx(ClientInfoModal, {\n    show: showAddMachineModal,\n    handleClose: function handleClose() {\n      return setShowAddMachineModal(false);\n    },\n    machineOptions: availableMachines,\n    setSelectedMachine: handleAddMachine,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }), __jsx(MachineCreationModal, {\n    show: showCreateMachineModal,\n    handleClose: function handleClose() {\n      return setShowCreateMachineModal(false);\n    },\n    onCreateMachine: handleCreateMachine,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Client, \"cT/6vZzo+lN+7N2yHVE4zYq7nik=\", false, function () {\n  return [useRouter];\n});\n\n_c = Client;\nexport var __N_SSP = true;\nexport default Client; // Server-side rendering function\n\nvar _c;\n\n$RefreshReg$(_c, \"Client\");","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/client/[id]/index.js"],"names":["React","useEffect","useState","useRouter","Table","Button","Container","Card","Row","Col","Alert","firebase","ClientInfoModal","MachineCreationModal","Client","router","selectedClient","setSelectedClient","machineOptions","setMachineOptions","error","setError","showAddMachineModal","setShowAddMachineModal","showCreateMachineModal","setShowCreateMachineModal","availableMachines","setAvailableMachines","isReady","clientId","query","id","asPath","split","pop","fetchClientData","db","firestore","collection","doc","get","clientDoc","exists","clientData","data","machinePromises","machines","map","machineRef","Promise","all","machineDocs","machineDoc","console","fetchAvailableMachines","where","snapshot","docs","handleSelectMachine","name","push","handleAddMachine","machine","update","FieldValue","arrayUnion","prev","handleCreateMachine","newMachine","machineId","Math","floor","random","machineWithId","client","set","openAddMachineModal","local","OEM","Modality","marginTop","back"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport {\n  Table,\n  Button,\n  Container,\n  Card,\n  Row,\n  Col,\n  Alert,\n} from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport MachineCreationModal from \"../../MachineCreationModal\";\n\n// Import for SSR\nimport { adminDb } from \"../../../../context/FirebaseAdmin\";\n\nconst Client = () => {\n  const router = useRouter();\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [machineOptions, setMachineOptions] = useState([]);\n  const [error, setError] = useState(null);\n\n  // State for machine addition modals\n  const [showAddMachineModal, setShowAddMachineModal] = useState(false);\n  const [showCreateMachineModal, setShowCreateMachineModal] = useState(false);\n  const [availableMachines, setAvailableMachines] = useState([]);\n\n  useEffect(() => {\n    if (router.isReady) {\n      const { clientId } = router.query;\n      // Extract clientId from query or URL path\n      const id = clientId || router.asPath.split(\"/\").pop();\n      fetchClientData(id);\n    }\n  }, [router.isReady]);\n\n  const fetchClientData = async (clientId) => {\n    try {\n      const db = firebase.firestore();\n      const clientDoc = await db.collection(\"Client\").doc(clientId).get();\n      if (clientDoc.exists) {\n        const clientData = clientDoc.data();\n        setSelectedClient(clientData);\n\n        // Fetch machine documents referenced in the client's machines array\n        const machinePromises = clientData.machines.map((machineRef) =>\n          machineRef.get()\n        );\n        const machineDocs = await Promise.all(machinePromises);\n        const machines = machineDocs.map((machineDoc) => ({\n          id: machineDoc.id,\n          ...machineDoc.data(),\n        }));\n        setMachineOptions(machines);\n      } else {\n        setError(\"Client not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n      setError(\"Error fetching client data\");\n    }\n  };\n\n  // Fetch available machines (those not yet assigned to a client)\n  const fetchAvailableMachines = async () => {\n    try {\n      const db = firebase.firestore();\n      const snapshot = await db\n        .collection(\"Machine\")\n        .where(\"client\", \"==\", null)\n        .get();\n      const machines = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setAvailableMachines(machines);\n    } catch (error) {\n      console.error(\"Error fetching available machines:\", error);\n      setError(\"Failed to fetch available machines.\");\n    }\n  };\n\n  const handleSelectMachine = (id, name) => {\n    // Navigate to the machine details page if needed\n    router.push(\"../machine/\" + id);\n  };\n\n  // When adding an existing machine\n  const handleAddMachine = async (machine) => {\n    try {\n      const db = firebase.firestore();\n      const clientId = router.query.clientId || router.asPath.split(\"/\").pop();\n\n      // Update client's \"machines\" array with the machine reference\n      await db\n        .collection(\"Client\")\n        .doc(clientId)\n        .update({\n          machines: firebase.firestore.FieldValue.arrayUnion(\n            db.collection(\"Machine\").doc(machine.id)\n          ),\n        });\n\n      // Update local state to include the newly added machine\n      setMachineOptions((prev) => [...prev, machine]);\n      setShowAddMachineModal(false);\n    } catch (error) {\n      console.error(\"Error adding machine to client:\", error);\n      setError(\"Failed to add machine to client.\");\n    }\n  };\n\n  // When creating a new machine for the client\n  const handleCreateMachine = async (newMachine) => {\n    try {\n      const db = firebase.firestore();\n      const clientId = router.query.clientId || router.asPath.split(\"/\").pop();\n      const machineId = `AIS${Math.floor(10000 + Math.random() * 90000)}`;\n      const machineWithId = {\n        ...newMachine,\n        id: machineId,\n        client: db.collection(\"Client\").doc(clientId),\n      };\n      // Create the machine document\n      await db.collection(\"Machine\").doc(machineId).set(machineWithId);\n      // Add the machine reference to the client\n      await db\n        .collection(\"Client\")\n        .doc(clientId)\n        .update({\n          machines: firebase.firestore.FieldValue.arrayUnion(\n            db.collection(\"Machine\").doc(machineId)\n          ),\n        });\n      // Update local state\n      setMachineOptions((prev) => [...prev, { id: machineId, ...newMachine }]);\n      setShowCreateMachineModal(false);\n    } catch (error) {\n      console.error(\"Error creating and adding machine:\", error);\n      setError(\"Failed to create and add machine.\");\n    }\n  };\n\n  // Open the modal to add an existing machine; fetch available machines first\n  const openAddMachineModal = async () => {\n    await fetchAvailableMachines();\n    setShowAddMachineModal(true);\n  };\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">\n          <Card>\n            <Card.Header>\n              <h4>Client Machines</h4>\n            </Card.Header>\n            <Card.Body>\n              {error && <Alert variant=\"danger\">{error}</Alert>}\n              {selectedClient ? (\n                <>\n                  <h5>Client: {selectedClient.name}</h5>\n                  <p>Location: {selectedClient.local}</p>\n                  <div className=\"mb-3\">\n                    <Button variant=\"primary\" onClick={openAddMachineModal}>\n                      Add Existing Machine\n                    </Button>\n                    <Button\n                      variant=\"secondary\"\n                      className=\"ms-2\"\n                      onClick={() => setShowCreateMachineModal(true)}\n                    >\n                      Create New Machine\n                    </Button>\n                  </div>\n                  <Table striped bordered hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>Location</th>\n                        <th>OEM</th>\n                        <th>Modality</th>\n                        <th>Select</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {machineOptions.map((machine) => (\n                        <tr key={machine.id}>\n                          <td>{machine.name}</td>\n                          <td>{machine.local}</td>\n                          <td>{machine.OEM}</td>\n                          <td>{machine.Modality}</td>\n                          <td>\n                            <Button\n                              variant=\"primary\"\n                              onClick={() =>\n                                handleSelectMachine(machine.id, machine.name)\n                              }\n                            >\n                              Select\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </Table>\n                  <Button\n                    variant=\"primary\"\n                    style={{ marginTop: \"20px\" }}\n                    onClick={() => router.back()}\n                  >\n                    Back\n                  </Button>\n                </>\n              ) : (\n                !error && <p>Loading client data...</p>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Modal to add an existing machine to the client */}\n      <ClientInfoModal\n        show={showAddMachineModal}\n        handleClose={() => setShowAddMachineModal(false)}\n        machineOptions={availableMachines}\n        setSelectedMachine={handleAddMachine}\n      />\n\n      {/* Modal to create a new machine and attach it to the client */}\n      <MachineCreationModal\n        show={showCreateMachineModal}\n        handleClose={() => setShowCreateMachineModal(false)}\n        onCreateMachine={handleCreateMachine}\n      />\n    </Container>\n  );\n};\n\nexport default Client;\n\n// Server-side rendering function\nexport async function getServerSideProps(context) {\n  const { id } = context.params;\n\n  try {\n    // Fetch client data from Firestore using Admin SDK\n    const clientDoc = await adminDb.collection(\"Client\").doc(id).get();\n\n    if (!clientDoc.exists) {\n      return {\n        notFound: true, // This will show a 404 page\n      };\n    }\n\n    const clientData = clientDoc.data();\n\n    // Fetch machine documents referenced in the client's machines array\n    let machines = [];\n    if (clientData.machines && Array.isArray(clientData.machines)) {\n      try {\n        const machinePromises = clientData.machines\n          .map((machineRef) => {\n            if (machineRef.path) {\n              return adminDb.doc(machineRef.path).get();\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        const machineDocs = await Promise.all(machinePromises);\n        machines = machineDocs.map((machineDoc) => {\n          const machineData = machineDoc.data();\n          // Extract only serializable data, remove any Firestore references\n          const serializedMachine = {\n            id: machineDoc.id,\n            name: machineData.name || \"\",\n            local: machineData.local || \"\",\n            OEM: machineData.OEM || \"\",\n            Modality: machineData.Modality || \"\",\n            Model: machineData.Model || \"\",\n            // Add other fields as needed, but ensure they're serializable\n          };\n\n          // If there's a client reference, extract just the client name\n          if (machineData.client && machineData.client.path) {\n            try {\n              const clientDoc = adminDb.doc(machineData.client.path).get();\n              if (clientDoc.exists) {\n                serializedMachine.clientName = clientDoc.data().name || \"\";\n              }\n            } catch (error) {\n              console.error(\"Error fetching client name:\", error);\n            }\n          }\n\n          return serializedMachine;\n        });\n      } catch (error) {\n        console.error(\"Error fetching machine data:\", error);\n      }\n    }\n\n    // Serialize the client data, removing any non-serializable fields\n    const serializedClient = {\n      id,\n      name: clientData.name || \"\",\n      local: clientData.local || \"\",\n      // Add other client fields as needed, but ensure they're serializable\n    };\n\n    return {\n      props: {\n        initialClient: serializedClient,\n        initialMachines: machines,\n      },\n    };\n  } catch (error) {\n    console.error(\"Error in getServerSideProps:\", error);\n    return {\n      props: {\n        error: \"Failed to load client data\",\n      },\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
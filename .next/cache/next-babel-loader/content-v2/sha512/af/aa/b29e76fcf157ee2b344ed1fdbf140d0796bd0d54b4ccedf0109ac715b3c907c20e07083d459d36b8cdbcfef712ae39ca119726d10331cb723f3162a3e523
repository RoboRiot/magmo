{"ast":null,"code":"import _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col, Modal, FormControl, Collapse, InputGroup, ButtonGroup, Spinner } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport dynamic from \"next/dynamic\";\nimport { useAuth } from \"../../../context/AuthUserContext\";\nimport firebase from \"../../../context/Firebase\";\nimport LoggedIn from \"../../LoggedIn\";\nimport { useRouter } from \"next/router\";\nimport { fetchClients } from \"../../../utils/fetchAssociations\";\nimport ClientTable from \"../../../utils/ClientTable\";\nimport ClientInfoModal from \"../ClientInfoModal\";\nimport ParentModal from \"./parentModal\";\nimport MachineSelectionModal from \"../item/[id]/MachineSelectionModal\";\nimport InfoModal from \"../InfoModal\"; // Load BarcodeScannerComponent only on the client-side.\n\nvar BarcodeScannerComponent = dynamic(function () {\n  return import(\"react-qr-barcode-scanner\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"react-qr-barcode-scanner\")];\n    },\n    modules: [\"NewSearch\\\\AddItem\\\\NewItem.js -> \" + \"react-qr-barcode-scanner\"]\n  }\n}); // Simulate network delay.\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n} // Custom LoadingButton component.\n\n\nfunction LoadingButton(_ref) {\n  var type = _ref.type,\n      name = _ref.name,\n      route = _ref.route;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    if (isLoading) {\n      simulateNetworkRequest().then(function () {\n        return setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  var handleClick = function handleClick() {\n    return setLoading(true);\n  };\n\n  return __jsx(Link, {\n    href: \"/\".concat(route)\n  }, __jsx(\"a\", {\n    className: \"btn btn-\".concat(type),\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null\n  }, isLoading ? \"Loading…\" : name));\n}\n\nexport default function NewItem() {\n  var _descriptions$selecte, _descriptions$selecte2;\n\n  var router = useRouter();\n\n  var _useAuth = useAuth(),\n      signOut = _useAuth.signOut; // Initialize item state – for a new item, these start empty.\n  // We store PN and SN as arrays.\n\n\n  var _useState2 = useState({\n    name: \"\",\n    pn: [\"\"],\n    sn: [\"\"],\n    // This will be overridden on submit.\n    localSN: \"\",\n    // NEW FIELD: holds user input for a local serial number.\n    price: \"\",\n    status: \"\",\n    poNumber: \"\",\n    length: \"\",\n    width: \"\",\n    height: \"\",\n    arrival_date: \"\",\n    // NEW FIELD: Arrival Date\n    visible: true\n  }),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState(true),\n      editingPn = _useState3[0],\n      setEditingPn = _useState3[1]; // const [newPn, setNewPn] = useState(\"\"); // for the input value when editing\n\n\n  var _useState4 = useState(true),\n      editingSn = _useState4[0],\n      setEditingSn = _useState4[1]; // const [newSn, setNewSn] = useState(\"\");\n  // DOM is the Date of Manufacture input (user provided).\n\n\n  var _useState5 = useState(\"\"),\n      DOM = _useState5[0],\n      setDOM = _useState5[1]; // OEM, Modality, Model fields.\n\n\n  var _useState6 = useState(\"\"),\n      oem = _useState6[0],\n      setOem = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      modality = _useState7[0],\n      setModality = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      model = _useState8[0],\n      setModel = _useState8[1]; // Local location states.\n\n\n  var _useState9 = useState(\"\"),\n      localLocFrom = _useState9[0],\n      setLocalLocFrom = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      localLocCurrent = _useState10[0],\n      setLocalLocCurrent = _useState10[1]; // Other states.\n\n\n  var _useState11 = useState([]),\n      pnOptions = _useState11[0],\n      setPnOptions = _useState11[1];\n\n  var _useState12 = useState([]),\n      snOptions = _useState12[0],\n      setSnOptions = _useState12[1];\n\n  var _useState13 = useState([{\n    description: \"\",\n    date: \"\"\n  }]),\n      descriptions = _useState13[0],\n      setDescriptions = _useState13[1];\n\n  var _useState14 = useState([{\n    workOrder: \"\",\n    date: \"\"\n  }]),\n      workOrders = _useState14[0],\n      setWorkOrders = _useState14[1];\n\n  var _useState15 = useState([]),\n      clients = _useState15[0],\n      setClients = _useState15[1];\n\n  var _useState16 = useState([]),\n      photos = _useState16[0],\n      setPhotos = _useState16[1];\n\n  var _useState17 = useState(false),\n      show = _useState17[0],\n      setShow = _useState17[1]; // error modal for missing required fields\n\n\n  var _useState18 = useState(false),\n      showErr = _useState18[0],\n      setShowErr = _useState18[1];\n\n  var _useState19 = useState(\"Missing required field: Name and Description\"),\n      Err = _useState19[0],\n      setErr = _useState19[1];\n\n  var _useState20 = useState(false),\n      showDescModal = _useState20[0],\n      setShowDescModal = _useState20[1];\n\n  var _useState21 = useState(false),\n      showWoModal = _useState21[0],\n      setShowWoModal = _useState21[1];\n\n  var _useState22 = useState(false),\n      showClientModal = _useState22[0],\n      setShowClientModal = _useState22[1];\n\n  var _useState23 = useState(false),\n      showMachineModal = _useState23[0],\n      setShowMachineModal = _useState23[1];\n\n  var _useState24 = useState(false),\n      showParentModal = _useState24[0],\n      setShowParentModal = _useState24[1];\n\n  var _useState25 = useState(false),\n      showCameraModal = _useState25[0],\n      setShowCameraModal = _useState25[1];\n\n  var _useState26 = useState(false),\n      showSaveModal = _useState26[0],\n      setShowSaveModal = _useState26[1];\n\n  var _useState27 = useState(false),\n      machineSelectionModal = _useState27[0],\n      setMachineSelectionModal = _useState27[1];\n\n  var _useState28 = useState(0),\n      selectedDesc = _useState28[0],\n      setSelectedDesc = _useState28[1];\n\n  var _useState29 = useState(null),\n      selectedClient = _useState29[0],\n      setSelectedClient = _useState29[1];\n\n  var _useState30 = useState(null),\n      selectedMachine = _useState30[0],\n      setSelectedMachine = _useState30[1];\n\n  var _useState31 = useState(null),\n      selectedCurrentMachine = _useState31[0],\n      setSelectedCurrentMachine = _useState31[1];\n\n  var _useState32 = useState(null),\n      selectedParent = _useState32[0],\n      setSelectedParent = _useState32[1];\n\n  var _useState33 = useState(null),\n      TheMachine = _useState33[0],\n      setTheMachine = _useState33[1];\n\n  var _useState34 = useState([]),\n      machineOptions = _useState34[0],\n      setMachineOptions = _useState34[1];\n\n  var _useState35 = useState(\"\"),\n      search = _useState35[0],\n      setSearch = _useState35[1];\n\n  var _useState36 = useState(null),\n      capturedPhoto = _useState36[0],\n      setCapturedPhoto = _useState36[1];\n\n  var _useState37 = useState(\"environment\"),\n      cameraFacing = _useState37[0],\n      setCameraFacing = _useState37[1];\n\n  var _useState38 = useState(false),\n      addToWebsite = _useState38[0],\n      setAddToWebsite = _useState38[1];\n\n  var _useState39 = useState(false),\n      machinePick = _useState39[0],\n      setMachinePick = _useState39[1];\n\n  var _useState40 = useState(0),\n      freqItem = _useState40[0],\n      setFreqItem = _useState40[1];\n\n  var _useState41 = useState(0),\n      usagePastYear = _useState41[0],\n      setUsagePastYear = _useState41[1];\n\n  var _useState42 = useState(0),\n      machineFrequency = _useState42[0],\n      setMachineFrequency = _useState42[1]; // For extra (dimensions/price/DOM) section collapse.\n\n\n  var _useState43 = useState(false),\n      showExtra = _useState43[0],\n      setShowExtra = _useState43[1]; // For PN/SN \"add new\" functionality.\n\n\n  var _useState44 = useState(false),\n      addingNewPn = _useState44[0],\n      setAddingNewPn = _useState44[1];\n\n  var _useState45 = useState(\"\"),\n      newPn = _useState45[0],\n      setNewPn = _useState45[1];\n\n  var _useState46 = useState(false),\n      addingNewSn = _useState46[0],\n      setAddingNewSn = _useState46[1];\n\n  var _useState47 = useState(\"\"),\n      newSn = _useState47[0],\n      setNewSn = _useState47[1]; // For browsing photos.\n\n\n  var browseInputRef = useRef(null); // Inside your NewItem component:\n\n  var _useState48 = useState(false),\n      loading = _useState48[0],\n      setLoading = _useState48[1];\n\n  if (!router.isReady) {\n    return null; // or a loading indicator\n  } // -------------------- Since this is \"add\" mode, we do not fetch an existing document.\n  // However, we still fetch global PN and SN options and clients for selection.\n\n\n  useEffect(function () {\n    function fetchClientsData() {\n      return _fetchClientsData.apply(this, arguments);\n    }\n\n    function _fetchClientsData() {\n      _fetchClientsData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var clientsData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetchClients();\n\n              case 3:\n                clientsData = _context.sent;\n                console.log(\"Clients:\", clientsData);\n                setClients(clientsData);\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Error fetching clients: \", _context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n      return _fetchClientsData.apply(this, arguments);\n    }\n\n    fetchClientsData();\n  }, []);\n  useEffect(function () {\n    function fetchPnSn() {\n      return _fetchPnSn.apply(this, arguments);\n    }\n\n    function _fetchPnSn() {\n      _fetchPnSn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var db, snapshot, pnSet, snSet;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                db = firebase.firestore();\n                _context2.next = 3;\n                return db.collection(\"Test\").get();\n\n              case 3:\n                snapshot = _context2.sent;\n                pnSet = new Set();\n                snSet = new Set();\n                snapshot.forEach(function (doc) {\n                  var data = doc.data();\n                  if (data.pn) pnSet.add(data.pn);\n                  if (data.sn) snSet.add(data.sn);\n                });\n                setPnOptions(_toConsumableArray(pnSet));\n                setSnOptions(_toConsumableArray(snSet));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _fetchPnSn.apply(this, arguments);\n    }\n\n    fetchPnSn();\n  }, []);\n\n  var _useState49 = useState(false),\n      machineFieldsInitialized = _useState49[0],\n      setMachineFieldsInitialized = _useState49[1];\n\n  useEffect(function () {\n    if (!machineFieldsInitialized && (TheMachine || selectedCurrentMachine || selectedMachine)) {\n      var updatedFields = updateMachineFields(TheMachine, selectedCurrentMachine, selectedMachine); // Only set fields if they are empty or \"N/A\"\n\n      if (!oem || oem === \"N/A\") setOem(updatedFields.oem);\n      if (!modality || modality === \"N/A\") setModality(updatedFields.modality);\n      if (!model || model === \"N/A\") setModel(updatedFields.model);\n      setMachineFieldsInitialized(true);\n    }\n  }, [TheMachine, selectedCurrentMachine, selectedMachine, machineFieldsInitialized]);\n\n  var _useState50 = useState(null),\n      signal = _useState50[0],\n      setSignal = _useState50[1];\n\n  useEffect(function () {\n    if (router.isReady) {\n      setSignal(router.query.signal || null);\n    }\n  }, [router.isReady, router.query.signal]); // -------------------- Handlers for PN and SN dropdowns\n  // PN: when a user selects an existing PN value.\n\n  var handlePnSelect = function handlePnSelect(e) {\n    var selected = e.target.value;\n    setItems(function (prev) {\n      var updatedPn = Array.isArray(prev.pn) ? _toConsumableArray(prev.pn) : [];\n      updatedPn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: updatedPn\n      });\n    });\n  };\n\n  var handlePnChange = function handlePnChange(index, value) {\n    setItems(function (prev) {\n      var newPn = _toConsumableArray(prev.pn);\n\n      newPn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: newPn\n      });\n    });\n  };\n\n  var addPn = function addPn() {\n    if (newPn.trim() !== \"\") {\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          pn: [].concat(_toConsumableArray(prev.pn), [newPn.trim()])\n        });\n      });\n    }\n\n    setNewPn(\"\");\n    setAddingNewPn(false);\n  }; // SN: when a user selects an existing SN value.\n\n\n  var handleSnSelect = function handleSnSelect(e) {\n    var selected = e.target.value;\n    setItems(function (prev) {\n      var updatedSn = Array.isArray(prev.sn) ? _toConsumableArray(prev.sn) : [];\n      updatedSn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: updatedSn\n      });\n    });\n  };\n\n  var handleSnChange = function handleSnChange(index, value) {\n    setItems(function (prev) {\n      var newSn = _toConsumableArray(prev.sn);\n\n      newSn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: newSn\n      });\n    });\n  };\n\n  var addSn = function addSn() {\n    if (newSn.trim() !== \"\") {\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          sn: [].concat(_toConsumableArray(prev.sn), [newSn.trim()])\n        });\n      });\n    }\n\n    setNewSn(\"\");\n    setAddingNewSn(false);\n  }; // -------------------- Photo Browse Handlers\n\n\n  var handleBrowsePhotos = function handleBrowsePhotos() {\n    if (browseInputRef.current) {\n      browseInputRef.current.click();\n    }\n  };\n\n  var handleFilesSelected = function handleFilesSelected(e) {\n    var files = e.target.files;\n\n    if (files.length) {\n      var newPhotos = [];\n\n      for (var i = 0; i < files.length; i++) {\n        newPhotos.push({\n          file: files[i],\n          url: URL.createObjectURL(files[i])\n        });\n      }\n\n      setPhotos(function (prevPhotos) {\n        return [].concat(_toConsumableArray(prevPhotos), newPhotos);\n      });\n    }\n\n    e.target.value = \"\";\n  }; // -------------------- Photo Capture Handlers remain as in your index.js\n\n\n  var handleCapture = function handleCapture(err, result) {\n    if (result) {\n      setCapturedPhoto(result);\n    }\n  };\n\n  var capturePhoto = function capturePhoto() {\n    var video = document.querySelector(\"video\");\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    var context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    canvas.toBlob(function (blob) {\n      setCapturedPhoto(blob);\n    }, \"image/png\");\n  };\n\n  var savePhoto = function savePhoto() {\n    setPhotos(function (prevPhotos) {\n      return [].concat(_toConsumableArray(prevPhotos), [{\n        file: capturedPhoto,\n        url: URL.createObjectURL(capturedPhoto)\n      }]);\n    });\n    setCapturedPhoto(null);\n    setShowCameraModal(false);\n  };\n\n  var removePhoto = function removePhoto(index) {\n    setPhotos(photos.filter(function (_, i) {\n      return i !== index;\n    }));\n  }; // -------------------- Modal Handlers\n\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  var handleCloseErr = function handleCloseErr() {\n    return setShowErr(false);\n  };\n\n  var handleShowErr = function handleShowErr() {\n    return setShowErr(true);\n  };\n\n  var handleCloseSaveModal = function handleCloseSaveModal() {\n    return setShowSaveModal(false);\n  };\n\n  var handleShowSaveModal = function handleShowSaveModal() {\n    return setShowSaveModal(true);\n  };\n\n  var handleCloseDescModal = function handleCloseDescModal() {\n    return setShowDescModal(false);\n  };\n\n  var handleShowDescModal = function handleShowDescModal() {\n    return setShowDescModal(true);\n  };\n\n  var handleCloseWoModal = function handleCloseWoModal() {\n    return setShowWoModal(false);\n  };\n\n  var handleShowWoModal = function handleShowWoModal() {\n    return setShowWoModal(true);\n  };\n\n  var handleCloseClientModal = function handleCloseClientModal() {\n    return setShowClientModal(false);\n  };\n\n  var handleShowClientModal = function handleShowClientModal() {\n    return setShowClientModal(true);\n  };\n\n  var handleCloseMachineModal = function handleCloseMachineModal() {\n    return setShowMachineModal(false);\n  };\n\n  var handleShowMachineModal = function handleShowMachineModal() {\n    setShowMachineModal(true);\n    setShowClientModal(false);\n  };\n\n  var handleCloseParentModal = function handleCloseParentModal() {\n    return setShowParentModal(false);\n  };\n\n  var handleShowParentModal = function handleShowParentModal() {\n    return setShowParentModal(true);\n  }; // -------------------- Work Orders / Descriptions Handlers (unchanged)\n\n\n  var addDescription = function addDescription() {\n    setDescriptions([].concat(_toConsumableArray(descriptions), [{\n      description: \"\",\n      date: \"\"\n    }]));\n  };\n\n  var removeDescription = function removeDescription(index) {\n    setDescriptions(descriptions.filter(function (_, i) {\n      return i !== index;\n    }));\n  };\n\n  var handleDescriptionChange = function handleDescriptionChange(index, field, value) {\n    var newDescriptions = descriptions.map(function (desc, i) {\n      return i === index ? _objectSpread(_objectSpread({}, desc), {}, _defineProperty({}, field, value)) : desc;\n    });\n    setDescriptions(newDescriptions);\n  };\n\n  var addWorkOrder = function addWorkOrder() {\n    setWorkOrders([].concat(_toConsumableArray(workOrders), [{\n      workOrder: \"\",\n      date: \"\"\n    }]));\n  };\n\n  var removeWorkOrder = function removeWorkOrder(index) {\n    setWorkOrders(workOrders.filter(function (_, i) {\n      return i !== index;\n    }));\n  };\n\n  var handleWorkOrderChange = function handleWorkOrderChange(index, field, value) {\n    var newWorkOrders = workOrders.map(function (wo, i) {\n      return i === index ? _objectSpread(_objectSpread({}, wo), {}, _defineProperty({}, field, value)) : wo;\n    });\n    setWorkOrders(newWorkOrders);\n  };\n\n  var listDescriptions = function listDescriptions() {\n    setShowDescModal(true);\n  };\n\n  var selectDescription = function selectDescription(index) {\n    setSelectedDesc(index);\n    setShowDescModal(false);\n  }; // -------------------- Machine Selection (unchanged)\n\n\n  var handleClientInfo = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(clientId) {\n      var db, clientDoc, clientData, machinePromises, machineDocs, machines;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Clear any previously selected machine/local loc for the branch\n              if (machinePick) {\n                setSelectedMachine(null);\n                setShowLocalLocFrom(false);\n              } else {\n                setSelectedCurrentMachine(null);\n                setShowLocalLocCurrent(false);\n              }\n\n              db = firebase.firestore();\n              _context3.next = 4;\n              return db.collection(\"Client\").doc(clientId).get();\n\n            case 4:\n              clientDoc = _context3.sent;\n\n              if (!clientDoc.exists) {\n                _context3.next = 15;\n                break;\n              }\n\n              clientData = clientDoc.data();\n\n              if (machinePick) {\n                setSelectedClientFrom(_objectSpread({\n                  id: clientDoc.id\n                }, clientData));\n              } else {\n                setSelectedClientCurrent(_objectSpread({\n                  id: clientDoc.id\n                }, clientData));\n              } // Fetch machines for this client:\n\n\n              machinePromises = clientData.machines.map(function (machineRef) {\n                return machineRef.get();\n              });\n              _context3.next = 11;\n              return Promise.all(machinePromises);\n\n            case 11:\n              machineDocs = _context3.sent;\n              machines = machineDocs.map(function (machineDoc) {\n                return _objectSpread({\n                  id: machineDoc.id\n                }, machineDoc.data());\n              });\n              setMachineOptions(machines);\n              handleCloseClientModal();\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleClientInfo(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var fetchMachine = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(machineId) {\n      var db, doc, machineData, machinesSnapshot;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              db = firebase.firestore();\n              _context4.next = 3;\n              return db.collection(\"Machine\").doc(machineId).get();\n\n            case 3:\n              doc = _context4.sent;\n\n              if (!doc.exists) {\n                _context4.next = 16;\n                break;\n              }\n\n              machineData = doc.data();\n              setTheMachine(machineData); // Ensure OEM, Modality, and Model update properly only if necessary\n\n              if (!oem || oem === \"N/A\") setOem(machineData.oem || machineData.OEM || \"\");\n              if (!modality || modality === \"N/A\") setModality(machineData.modality || machineData.Modality || \"\");\n              if (!model || model === \"N/A\") setModel(machineData.model || machineData.Model || \"\"); // Set machine frequency count\n\n              _context4.next = 12;\n              return db.collection(\"Machine\").where(\"Model\", \"==\", machineData.Model || machineData.model).get();\n\n            case 12:\n              machinesSnapshot = _context4.sent;\n              setMachineFrequency(machinesSnapshot.size);\n              _context4.next = 17;\n              break;\n\n            case 16:\n              console.error(\"Machine not found\");\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function fetchMachine(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // -------------------- Frequency/Usage (unchanged)\n\n\n  var calculateItemFrequencyAndUsage = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(pn) {\n      var db, currentDate, oneYearAgo, itemsSnapshot, usagePastYear;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              db = firebase.firestore();\n              currentDate = new Date();\n              oneYearAgo = new Date();\n              oneYearAgo.setFullYear(currentDate.getFullYear() - 1);\n              _context5.next = 6;\n              return db.collection(\"Test\").where(\"pn\", \"==\", pn).get();\n\n            case 6:\n              itemsSnapshot = _context5.sent;\n              setFreqItem(itemsSnapshot.size);\n              usagePastYear = 0;\n              itemsSnapshot.forEach(function (doc) {\n                var itemData = doc.data();\n                itemData.workOrders.forEach(function (workOrder) {\n                  var workOrderDate = new Date(workOrder.date);\n\n                  if (workOrderDate >= oneYearAgo && workOrderDate <= currentDate) {\n                    usagePastYear++;\n                  }\n                });\n              });\n              setUsagePastYear(usagePastYear);\n\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function calculateItemFrequencyAndUsage(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // -------------------- Photo Upload (unchanged)\n\n\n  var uploadPhotos = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(docID) {\n      var storageRef, i, photoRef, metadata, url;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              storageRef = firebase.storage().ref();\n              i = 0;\n\n            case 2:\n              if (!(i < photos.length)) {\n                _context6.next = 15;\n                break;\n              }\n\n              if (!photos[i].file) {\n                _context6.next = 12;\n                break;\n              }\n\n              photoRef = storageRef.child(\"Parts/\".concat(docID, \"/\").concat(docID).concat(i === 0 ? \".jpg\" : \".\".concat(i + 1, \".jpg\")));\n              metadata = {\n                contentType: \"image/png\"\n              };\n              _context6.next = 8;\n              return photoRef.put(photos[i].file, metadata);\n\n            case 8:\n              _context6.next = 10;\n              return photoRef.getDownloadURL();\n\n            case 10:\n              url = _context6.sent;\n              photos[i].url = url;\n\n            case 12:\n              i++;\n              _context6.next = 2;\n              break;\n\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function uploadPhotos(_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }(); // -------------------- Submission Handler\n  // For NewItem, only require Name and Description.\n\n\n  function handleSubmit(_x5) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(event) {\n      var _descriptions$;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              event.preventDefault();\n\n              if (!(!items.name || !((_descriptions$ = descriptions[0]) !== null && _descriptions$ !== void 0 && _descriptions$.description))) {\n                _context9.next = 5;\n                break;\n              }\n\n              handleShow();\n              _context9.next = 17;\n              break;\n\n            case 5:\n              setLoading(true); // start loading before async work\n\n              _context9.prev = 6;\n              _context9.next = 9;\n              return toSend();\n\n            case 9:\n              _context9.next = 14;\n              break;\n\n            case 11:\n              _context9.prev = 11;\n              _context9.t0 = _context9[\"catch\"](6);\n              console.error(_context9.t0);\n\n            case 14:\n              _context9.prev = 14;\n              setLoading(false); // end loading after async work completes\n\n              return _context9.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[6, 11, 14, 17]]);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function toSend() {\n    return _toSend.apply(this, arguments);\n  } // -------------------- Info Modal Handlers (unchanged)\n\n\n  function _toSend() {\n    _toSend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var redirect,\n          id,\n          db,\n          currentUser,\n          userEmail,\n          machineData,\n          formattedItems,\n          docId,\n          newDocId,\n          machineRef,\n          machineDoc,\n          currentMachineRef,\n          currentMachineDoc,\n          cleanFormattedItems,\n          _machineRef,\n          _machineDoc,\n          _currentMachineRef,\n          _currentMachineDoc,\n          _machineRef2,\n          _machineDoc2,\n          _currentMachineRef2,\n          _currentMachineDoc2,\n          _args10 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              redirect = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : true;\n              id = router.query.id; // Ensure id is defined (it may be undefined for a new item)\n\n              db = firebase.firestore(); // Get the current authenticated user\n\n              currentUser = firebase.auth().currentUser;\n              userEmail = currentUser ? currentUser.email : \"unknown\"; // Always use the current state values for OEM, modality, and model.\n\n              machineData = _objectSpread(_objectSpread({}, TheMachine || {}), {}, {\n                oem: oem,\n                modality: modality,\n                model: model\n              });\n              formattedItems = _objectSpread(_objectSpread({}, items), {}, {\n                descriptions: descriptions,\n                workOrders: workOrders\n              }); // Remove any unused fields.\n\n              formattedItems.status = items.status || \"\";\n              formattedItems.DOM = DOM; // Date of Manufacture\n\n              formattedItems.localLocFrom = localLocFrom || \"\";\n              formattedItems.localLocCurrent = localLocCurrent || \"\";\n              formattedItems.date = items.date || \"\";\n              formattedItems.arrival_date = items.arrival_date || \"\"; // NEW: Arrival Date\n\n              formattedItems.poNumber = items.poNumber || \"\";\n              formattedItems.trackingNumber = items.trackingNumber || \"\";\n              formattedItems.TheMachine = machineData || {};\n              formattedItems.addedToWebsite = addToWebsite;\n              formattedItems.visible = items.visible; // Add the current user's email under the \"user\" field\n\n              formattedItems.user = userEmail; // Clean pn and sn arrays to replace undefined values with an empty string.\n\n              formattedItems.pn = (items.pn || []).map(function (value) {\n                return value === undefined ? \"\" : value;\n              });\n              formattedItems.sn = (items.sn || []).map(function (value) {\n                return value === undefined ? \"\" : value;\n              }); // Set machine references for each branch.\n\n              if (selectedMachine && selectedMachine.id) {\n                formattedItems.MachineFrom = db.collection(\"Machine\").doc(selectedMachine.id);\n              }\n\n              if (selectedCurrentMachine && selectedCurrentMachine.id) {\n                formattedItems.MachineCurrent = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              } // ***** NEW: Set client references for each branch *****\n\n\n              if (selectedClientFrom && selectedClientFrom.id) {\n                formattedItems.ClientFrom = db.collection(\"Client\").doc(selectedClientFrom.id);\n              }\n\n              if (selectedClientCurrent && selectedClientCurrent.id) {\n                formattedItems.ClientCurrent = db.collection(\"Client\").doc(selectedClientCurrent.id);\n              } // ******************************************************\n\n\n              if (selectedParent && selectedParent.id) {\n                formattedItems.Parent = db.collection(\"Test\").doc(selectedParent.id);\n              } // Only add dateCreated if this is a new document\n\n\n              if (!id) {\n                formattedItems.dateCreated = new Date().toISOString().split(\"T\")[0]; // \"YYYY-MM-DD\"\n              } // --- LOCAL SN LOGIC ---\n\n\n              docId = id || null;\n              _context10.prev = 28;\n\n              if (!docId) {\n                _context10.next = 76;\n                break;\n              }\n\n              // Check if a localSN is provided and if it differs from the current docId.\n              newDocId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : docId;\n\n              if (!(docId !== newDocId)) {\n                _context10.next = 55;\n                break;\n              }\n\n              _context10.next = 34;\n              return db.collection(\"Test\").doc(newDocId).set(formattedItems);\n\n            case 34:\n              if (!(selectedMachine && selectedMachine.id)) {\n                _context10.next = 42;\n                break;\n              }\n\n              machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n              _context10.next = 38;\n              return machineRef.get();\n\n            case 38:\n              machineDoc = _context10.sent;\n\n              if (!machineDoc.exists) {\n                _context10.next = 42;\n                break;\n              }\n\n              _context10.next = 42;\n              return machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n\n            case 42:\n              if (!(selectedCurrentMachine && selectedCurrentMachine.id)) {\n                _context10.next = 50;\n                break;\n              }\n\n              currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              _context10.next = 46;\n              return currentMachineRef.get();\n\n            case 46:\n              currentMachineDoc = _context10.sent;\n\n              if (!currentMachineDoc.exists) {\n                _context10.next = 50;\n                break;\n              }\n\n              _context10.next = 50;\n              return currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n\n            case 50:\n              _context10.next = 52;\n              return db.collection(\"Test\").doc(docId)[\"delete\"]();\n\n            case 52:\n              // Set docId to the new document ID.\n              docId = newDocId;\n              _context10.next = 74;\n              break;\n\n            case 55:\n              // Deep-clean the formattedItems to remove any undefined nested values.\n              cleanFormattedItems = shallowClean(formattedItems);\n              _context10.next = 58;\n              return db.collection(\"Test\").doc(docId).update(cleanFormattedItems);\n\n            case 58:\n              if (!(selectedMachine && selectedMachine.id)) {\n                _context10.next = 66;\n                break;\n              }\n\n              _machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n              _context10.next = 62;\n              return _machineRef.get();\n\n            case 62:\n              _machineDoc = _context10.sent;\n\n              if (!_machineDoc.exists) {\n                _context10.next = 66;\n                break;\n              }\n\n              _context10.next = 66;\n              return _machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 66:\n              if (!(selectedCurrentMachine && selectedCurrentMachine.id)) {\n                _context10.next = 74;\n                break;\n              }\n\n              _currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              _context10.next = 70;\n              return _currentMachineRef.get();\n\n            case 70:\n              _currentMachineDoc = _context10.sent;\n\n              if (!_currentMachineDoc.exists) {\n                _context10.next = 74;\n                break;\n              }\n\n              _context10.next = 74;\n              return _currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 74:\n              _context10.next = 95;\n              break;\n\n            case 76:\n              // For a new item, if localSN is provided, use it; otherwise, generate a custom ID.\n              docId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : generateCustomID();\n              _context10.next = 79;\n              return db.collection(\"Test\").doc(docId).set(formattedItems);\n\n            case 79:\n              if (!(selectedMachine && selectedMachine.id)) {\n                _context10.next = 87;\n                break;\n              }\n\n              _machineRef2 = db.collection(\"Machine\").doc(selectedMachine.id);\n              _context10.next = 83;\n              return _machineRef2.get();\n\n            case 83:\n              _machineDoc2 = _context10.sent;\n\n              if (!_machineDoc2.exists) {\n                _context10.next = 87;\n                break;\n              }\n\n              _context10.next = 87;\n              return _machineRef2.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 87:\n              if (!(selectedCurrentMachine && selectedCurrentMachine.id)) {\n                _context10.next = 95;\n                break;\n              }\n\n              _currentMachineRef2 = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              _context10.next = 91;\n              return _currentMachineRef2.get();\n\n            case 91:\n              _currentMachineDoc2 = _context10.sent;\n\n              if (!_currentMachineDoc2.exists) {\n                _context10.next = 95;\n                break;\n              }\n\n              _context10.next = 95;\n              return _currentMachineRef2.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 95:\n              _context10.next = 97;\n              return uploadPhotos(docId);\n\n            case 97:\n              console.log(\"Item saved and associatedParts updated!\"); // Redirect to the new URL using the new document id.\n\n              if (redirect) {\n                router.push(\"/NewSearch/item/\".concat(docId));\n              } else {\n                setRedirect(true);\n              } // Optionally, show a save confirmation modal.\n\n\n              handleShowSaveModal();\n              _context10.next = 105;\n              break;\n\n            case 102:\n              _context10.prev = 102;\n              _context10.t0 = _context10[\"catch\"](28);\n              console.error(\"Error saving data:\", _context10.t0);\n\n            case 105:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[28, 102]]);\n    }));\n    return _toSend.apply(this, arguments);\n  }\n\n  var _useState51 = useState(false),\n      showInfoModal = _useState51[0],\n      setShowInfoModal = _useState51[1];\n\n  var _useState52 = useState(\"\"),\n      itemName = _useState52[0],\n      setItemName = _useState52[1];\n\n  var handleShowInfoModal = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var db, doc, data;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              db = firebase.firestore();\n              _context7.prev = 1;\n              _context7.next = 4;\n              return db.collection(\"Test\").doc(id).get();\n\n            case 4:\n              doc = _context7.sent;\n\n              if (doc.exists) {\n                data = doc.data();\n                setItemName(data.name || \"N/A\");\n                setShowInfoModal(true);\n              } else {\n                console.error(\"Item not found\");\n              }\n\n              _context7.next = 11;\n              break;\n\n            case 8:\n              _context7.prev = 8;\n              _context7.t0 = _context7[\"catch\"](1);\n              console.error(\"Error fetching item info:\", _context7.t0);\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[1, 8]]);\n    }));\n\n    return function handleShowInfoModal() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var handleCloseInfoModal = function handleCloseInfoModal() {\n    return setShowInfoModal(false);\n  };\n\n  var handleCloseCameraModal = function handleCloseCameraModal() {\n    setShowCameraModal(false);\n    setCapturedPhoto(null);\n  };\n\n  var handleChange = function handleChange(field) {\n    return function (event) {\n      var value = event.target ? event.target.value : event.value;\n      setItems(function (prevItems) {\n        return _objectSpread(_objectSpread({}, prevItems), {}, _defineProperty({}, field, value));\n      });\n    };\n  };\n\n  var mostRecentWorkOrder = workOrders && workOrders.length > 0 ? workOrders.reduce(function (latest, current) {\n    var latestDate = new Date(latest.date);\n    var currentDate = new Date(current.date);\n    return currentDate > latestDate ? current : latest;\n  }, workOrders[0]) : {};\n\n  var handleShowCameraModal = function handleShowCameraModal() {\n    setShowCameraModal(true);\n  };\n\n  var generateCustomID = function generateCustomID() {\n    var randomNum = Math.floor(10000 + Math.random() * 90000);\n    return \"AIS\".concat(randomNum);\n  };\n\n  var handlePrint = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var printId, payload, response, result;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (items.name) {\n                _context8.next = 3;\n                break;\n              }\n\n              alert(\"Missing name\");\n              return _context8.abrupt(\"return\");\n\n            case 3:\n              // In addItem mode, there is no existing id so generate one\n              printId = generateCustomID();\n              payload = {\n                name: items.name,\n                pn: items.pn,\n                sn: items.sn,\n                wo: workOrders && workOrders.length > 0 ? workOrders[0].workOrder : \"\",\n                status: items.status,\n                local_sn: printId,\n                // Use the generated custom ID\n                descriptions: descriptions,\n                date: items.date || new Date().toISOString().split(\"T\")[0],\n                DOM: DOM,\n                oem: oem,\n                modality: modality,\n                model: model\n              };\n              console.log(\"Payload for printing:\", payload);\n              _context8.prev = 6;\n              _context8.next = 9;\n              return fetch(\"https://cc7e-174-76-22-138.ngrok-free.app/print-label\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n              });\n\n            case 9:\n              response = _context8.sent;\n              _context8.next = 12;\n              return response.json();\n\n            case 12:\n              result = _context8.sent;\n              console.log(\"Print result:\", result);\n              _context8.next = 19;\n              break;\n\n            case 16:\n              _context8.prev = 16;\n              _context8.t0 = _context8[\"catch\"](6);\n              console.error(\"Error printing label:\", _context8.t0);\n\n            case 19:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[6, 16]]);\n    }));\n\n    return function handlePrint() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var handleAddNewPn = function handleAddNewPn() {\n    if (newPn.trim() !== \"\") {\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          pn: [].concat(_toConsumableArray(prev.pn), [newPn.trim()])\n        });\n      });\n    }\n\n    setNewPn(\"\");\n    setAddingNewPn(false);\n  };\n\n  var handleAddNewSn = function handleAddNewSn() {\n    if (newSn.trim() !== \"\") {\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          sn: [].concat(_toConsumableArray(prev.sn), [newSn.trim()])\n        });\n      });\n    }\n\n    setNewSn(\"\");\n    setAddingNewSn(false);\n  };\n\n  function getPriorityMachineField(field, currentValue, theMachine, currentMachine, fromMachine) {\n    // If the field is already filled in by the user, return it unchanged.\n    if (currentValue && currentValue.trim() !== \"\" && currentValue.trim() !== \"N/A\") {\n      return currentValue;\n    } // Otherwise, prioritize the best available value.\n\n\n    if (theMachine && theMachine[field] && theMachine[field].trim() !== \"\" && theMachine[field] !== \"N/A\") {\n      return theMachine[field];\n    }\n\n    if (currentMachine && currentMachine[field] && currentMachine[field].trim() !== \"\" && currentMachine[field] !== \"N/A\") {\n      return currentMachine[field];\n    }\n\n    if (fromMachine && fromMachine[field] && fromMachine[field].trim() !== \"\" && fromMachine[field] !== \"N/A\") {\n      return fromMachine[field];\n    }\n\n    return currentValue; // Default to keeping the current value\n  }\n\n  function updateMachineFields(theMachine, currentMachine, fromMachine) {\n    return {\n      oem: getValidMachineField(\"oem\", theMachine, currentMachine, fromMachine),\n      modality: getValidMachineField(\"modality\", theMachine, currentMachine, fromMachine),\n      model: getValidMachineField(\"model\", theMachine, currentMachine, fromMachine)\n    };\n  }\n\n  function getValidMachineField(field, theMachine, currentMachine, fromMachine) {\n    if (theMachine && theMachine[field] && theMachine[field].trim() !== \"\" && theMachine[field] !== \"N/A\") {\n      return theMachine[field];\n    }\n\n    if (currentMachine && currentMachine[field] && currentMachine[field].trim() !== \"\" && currentMachine[field] !== \"N/A\") {\n      return currentMachine[field];\n    }\n\n    if (fromMachine && fromMachine[field] && fromMachine[field].trim() !== \"\" && fromMachine[field] !== \"N/A\") {\n      return fromMachine[field];\n    }\n\n    return \"\"; // Keep it empty if no valid data exists\n  }\n\n  var _useState53 = useState(false),\n      showLocalLocFrom = _useState53[0],\n      setShowLocalLocFrom = _useState53[1];\n\n  var _useState54 = useState(false),\n      showLocalLocCurrent = _useState54[0],\n      setShowLocalLocCurrent = _useState54[1];\n\n  function handleClone() {\n    return _handleClone.apply(this, arguments);\n  }\n\n  function _handleClone() {\n    _handleClone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var _descriptions$2;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              event.preventDefault();\n\n              if (!(!items.name || !((_descriptions$2 = descriptions[0]) !== null && _descriptions$2 !== void 0 && _descriptions$2.description))) {\n                _context11.next = 4;\n                break;\n              }\n\n              handleShow(); // your existing error modal\n\n              return _context11.abrupt(\"return\");\n\n            case 4:\n              setLoading(true);\n              _context11.prev = 5;\n              _context11.next = 8;\n              return toSend(false);\n\n            case 8:\n              _context11.next = 13;\n              break;\n\n            case 10:\n              _context11.prev = 10;\n              _context11.t0 = _context11[\"catch\"](5);\n              console.error(_context11.t0);\n\n            case 13:\n              _context11.prev = 13;\n              setLoading(false);\n              return _context11.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[5, 10, 13, 16]]);\n    }));\n    return _handleClone.apply(this, arguments);\n  }\n\n  var condition = function condition(name) {\n    return name && name.toLowerCase() === \"interior socal\";\n  };\n\n  var handleSetSelectedMachine = function handleSetSelectedMachine(machine) {\n    var condition = function condition(name) {\n      return name && name.toLowerCase() === \"interior socal\";\n    };\n\n    if (machinePick) {\n      setSelectedMachine({\n        id: machine.id,\n        name: machine.name\n      }); // For \"from\", show the local loc input if condition met.\n\n      setShowLocalLocFrom(condition(machine.name));\n    } else {\n      setSelectedCurrentMachine({\n        id: machine.id,\n        name: machine.name\n      }); // For \"current\", you might also want a local loc input:\n\n      setShowLocalLocCurrent(condition(machine.name));\n    }\n\n    fetchMachine(machine.id);\n    setShowMachineModal(false);\n  };\n\n  var _useState55 = useState(0),\n      currentPnIndex = _useState55[0],\n      setCurrentPnIndex = _useState55[1];\n\n  var _useState56 = useState(false),\n      showDropdown = _useState56[0],\n      setShowDropdown = _useState56[1];\n\n  var _useState57 = useState(0),\n      currentSnIndex = _useState57[0],\n      setCurrentSnIndex = _useState57[1];\n\n  var _useState58 = useState(false),\n      showSnDropdown = _useState58[0],\n      setShowSnDropdown = _useState58[1];\n\n  var handleAddNewClient = function handleAddNewClient() {\n    // Generate a random client number as part of the URL.\n    var randomNum = Math.floor(10000 + Math.random() * 90000); // When pushing, include a query parameter (from=item) and the current item id if available.\n\n    router.push(\"/NewSearch/client/AIS\".concat(randomNum, \"/addClient?from=addItem\"));\n  };\n\n  var _useState59 = useState(false),\n      showMachineSelect = _useState59[0],\n      setShowMachineSelect = _useState59[1];\n\n  var _useState60 = useState(null),\n      selectedClientFrom = _useState60[0],\n      setSelectedClientFrom = _useState60[1];\n\n  var _useState61 = useState(null),\n      selectedClientCurrent = _useState61[0],\n      setSelectedClientCurrent = _useState61[1];\n\n  return __jsx(LoggedIn, null, __jsx(MachineSelectionModal, {\n    show: machineSelectionModal,\n    handleClose: function handleClose() {\n      return setMachineSelectionModal(false);\n    },\n    setMachine: handleSetSelectedMachine,\n    machineOptions: machineOptions // if your modal needs the list of machines\n\n  }), __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, \"Missing required field: Name and Description\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showErr,\n    onHide: handleCloseErr\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, Err), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseErr\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showSaveModal,\n    onHide: handleCloseSaveModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Save Confirmation\")), __jsx(Modal.Body, null, \"Data has been saved successfully.\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseSaveModal\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showDescModal,\n    onHide: handleCloseDescModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Descriptions\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addDescription\n  }, \"Add Description\"), descriptions.map(function (desc, index) {\n    return __jsx(Row, {\n      key: index,\n      className: \"mb-3\"\n    }, __jsx(Button, {\n      variant: \"outline-secondary\",\n      className: \"w-100\",\n      onClick: function onClick() {\n        return selectDescription(index);\n      },\n      style: {\n        cursor: \"pointer\"\n      }\n    }, __jsx(\"div\", {\n      className: \"d-flex justify-content-between\"\n    }, __jsx(\"span\", null, desc.description || \"Description\"), __jsx(\"span\", {\n      style: {\n        borderLeft: \"1px solid #ccc\",\n        paddingLeft: \"10px\"\n      }\n    }, desc.date || \"Date\"))));\n  }), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseDescModal\n  }, \"OK\"))), __jsx(Modal, {\n    show: showWoModal,\n    onHide: handleCloseWoModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Work Orders\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addWorkOrder,\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, \"Add Work Order\"), workOrders.map(function (wo, index) {\n    return __jsx(Row, {\n      key: index,\n      className: \"mb-3\"\n    }, __jsx(Col, null, __jsx(Form.Control, {\n      type: \"text\",\n      placeholder: \"Work Order\",\n      value: wo.workOrder,\n      onChange: function onChange(e) {\n        return handleWorkOrderChange(index, \"workOrder\", e.target.value);\n      },\n      style: {\n        marginBottom: \"0.5rem\"\n      }\n    })), __jsx(Col, null, __jsx(Form.Control, {\n      type: \"date\",\n      placeholder: \"Date\",\n      value: wo.date,\n      onChange: function onChange(e) {\n        return handleWorkOrderChange(index, \"date\", e.target.value);\n      }\n    })), __jsx(Col, null, __jsx(Button, {\n      variant: \"danger\",\n      onClick: function onClick() {\n        return removeWorkOrder(index);\n      }\n    }, \"Remove\")));\n  }), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseWoModal\n  }, \"OK\"))), __jsx(ClientInfoModal, {\n    show: showMachineModal,\n    handleClose: handleCloseMachineModal,\n    selectedClient: selectedClient,\n    machineOptions: machineOptions,\n    setSelectedMachine: handleSetSelectedMachine\n  }), __jsx(Modal, {\n    show: showClientModal,\n    onHide: handleCloseClientModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Client\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: search,\n    onChange: function onChange(e) {\n      return setSearch(e.target.value);\n    }\n  }), __jsx(ClientTable, {\n    clients: clients.filter(function (client) {\n      return client.name.toLowerCase().includes(search.toLowerCase());\n    }),\n    onSelectClient: handleClientInfo,\n    onInfoClick: handleClientInfo,\n    clearSelection: function clearSelection() {\n      return handleClientInfo(null);\n    },\n    onAddClient: handleAddNewClient // new prop\n\n  }))), __jsx(ParentModal, {\n    show: showParentModal,\n    handleClose: handleCloseParentModal,\n    setSelectedParent: setSelectedParent\n  }), __jsx(MachineSelectionModal, {\n    show: machineSelectionModal,\n    handleClose: function handleClose() {\n      return setMachineSelectionModal(false);\n    },\n    setMachine: setTheMachine\n  }), __jsx(Modal, {\n    show: showCameraModal,\n    onHide: handleCloseCameraModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Take a Photo\")), __jsx(Modal.Body, null, __jsx(\"div\", {\n    className: \"camera\"\n  }, !capturedPhoto ? __jsx(BarcodeScannerComponent, {\n    width: \"100%\",\n    height: 300,\n    onUpdate: handleCapture,\n    facingMode: cameraFacing\n  }) : __jsx(\"div\", {\n    className: \"photo-preview\"\n  }, __jsx(\"img\", {\n    src: URL.createObjectURL(capturedPhoto),\n    alt: \"captured\",\n    style: {\n      width: \"100%\"\n    }\n  })))), __jsx(Modal.Footer, null, !capturedPhoto ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: capturePhoto,\n    style: {\n      borderRadius: \"50%\",\n      width: \"60px\",\n      height: \"60px\",\n      position: \"absolute\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      bottom: \"10px\"\n    }\n  }, \"\\uD83D\\uDCF7\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setCameraFacing(function (prev) {\n        return prev === \"environment\" ? \"user\" : \"environment\";\n      });\n    }\n  }, \"Flip Camera\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseCameraModal\n  }, \"Cancel\")) : __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: function onClick() {\n      return setCapturedPhoto(null);\n    }\n  }, \"Retake\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: savePhoto\n  }, \"OK\")))), __jsx(Modal, {\n    show: showDescModal,\n    onHide: handleCloseDescModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Descriptions\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addDescription\n  }, \"Add Description\"), descriptions.map(function (desc, index) {\n    return __jsx(Row, {\n      key: index,\n      className: \"mb-3\"\n    }, __jsx(Button, {\n      variant: \"outline-secondary\",\n      className: \"w-100\",\n      onClick: function onClick() {\n        return selectDescription(index);\n      },\n      style: {\n        cursor: \"pointer\"\n      }\n    }, __jsx(\"div\", {\n      className: \"d-flex justify-content-between\"\n    }, __jsx(\"span\", null, desc.description || \"Description\"), __jsx(\"span\", {\n      style: {\n        borderLeft: \"1px solid #ccc\",\n        paddingLeft: \"10px\"\n      }\n    }, desc.date || \"Date\"))));\n  }), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseDescModal\n  }, \"OK\"))), __jsx(InfoModal, {\n    show: showInfoModal,\n    handleClose: handleCloseInfoModal,\n    itemName: items.name,\n    dimensions: \"\".concat(items.length, \",\").concat(items.width, \",\").concat(items.height),\n    price: items.price,\n    freqI: freqItem,\n    freqM: machineFrequency,\n    usage: usagePastYear\n  }), loading && __jsx(\"div\", {\n    style: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"rgba(255, 255, 255, 0.7)\",\n      backdropFilter: \"blur(5px)\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      zIndex: 9999 // Make sure it's above everything else\n\n    }\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    variant: \"primary\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"visually-hidden\"\n  }, \"Loading...\"))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"600px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Add New Item\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"name\"\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items.name,\n    onChange: handleChange(\"name\")\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"pn\"\n  }, __jsx(Form.Label, null, \"Product Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.pn[currentPnIndex] || \"\",\n    onChange: function onChange(e) {\n      return handlePnChange(currentPnIndex, e.target.value);\n    }\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowDropdown(!showDropdown);\n    }\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setAddingNewPn(true);\n    }\n  }, \"+\"))), showDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, items.pn.map(function (pnOption, idx) {\n    return __jsx(\"div\", {\n      key: idx,\n      style: {\n        padding: \"8px\",\n        cursor: \"pointer\"\n      },\n      onClick: function onClick() {\n        setCurrentPnIndex(idx);\n        setShowDropdown(false);\n      }\n    }, pnOption);\n  }))), addingNewPn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new PN\",\n    value: newPn,\n    onChange: function onChange(e) {\n      return setNewPn(e.target.value);\n    },\n    onBlur: handleAddNewPn,\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === \"Enter\") {\n        handleAddNewPn();\n      }\n    }\n  })))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"sn\"\n  }, __jsx(Form.Label, null, \"Serial Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.sn[currentSnIndex] || \"\",\n    onChange: function onChange(e) {\n      return handleSnChange(currentSnIndex, e.target.value);\n    }\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowSnDropdown(!showSnDropdown);\n    }\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setAddingNewSn(true);\n    }\n  }, \"+\"))), showSnDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, items.sn.map(function (snOption, idx) {\n    return __jsx(\"div\", {\n      key: idx,\n      style: {\n        padding: \"8px\",\n        cursor: \"pointer\"\n      },\n      onClick: function onClick() {\n        setCurrentSnIndex(idx);\n        setShowSnDropdown(false);\n      }\n    }, snOption);\n  }))), addingNewSn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new SN\",\n    value: newSn,\n    onChange: function onChange(e) {\n      return setNewSn(e.target.value);\n    },\n    onBlur: handleAddNewSn,\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === \"Enter\") {\n        handleAddNewSn();\n      }\n    }\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"status\"\n  }, __jsx(Form.Label, null, \"Status\"), __jsx(Form.Select, {\n    value: items.status || \"\",\n    onChange: handleChange(\"status\")\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select status\"), __jsx(\"option\", {\n    value: \"Good\"\n  }, \"Good\"), __jsx(\"option\", {\n    value: \"Bad\"\n  }, \"Bad\"), __jsx(\"option\", {\n    value: \"Unknown\"\n  }, \"Unknown\"))))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"oem\"\n  }, __jsx(Form.Label, null, \"OEM\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"OEM\",\n    value: oem,\n    onChange: function onChange(e) {\n      return setOem(e.target.value);\n    }\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"modality\"\n  }, __jsx(Form.Label, null, \"Modality\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Modality\",\n    value: modality,\n    onChange: function onChange(e) {\n      return setModality(e.target.value);\n    }\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"model\"\n  }, __jsx(Form.Label, null, \"Model\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Model\",\n    value: model,\n    onChange: function onChange(e) {\n      return setModel(e.target.value);\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\",\n      marginTop: \"1rem\"\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowWoModal,\n    className: \"me-2\"\n  }, \"Manage Work Orders\"), workOrders.length > 0 && __jsx(\"div\", {\n    className: \"d-flex flex-column align-items-start\"\n  }, __jsx(Form.Label, null, \"Work Order\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Most Recent Work Order\",\n    value: (mostRecentWorkOrder === null || mostRecentWorkOrder === void 0 ? void 0 : mostRecentWorkOrder.workOrder) || \"\",\n    onChange: function onChange(e) {\n      return handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"workOrder\", e.target.value);\n    },\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Label, null, \"Date\"), __jsx(Form.Control, {\n    type: \"date\",\n    placeholder: \"Work Order Date\",\n    value: (mostRecentWorkOrder === null || mostRecentWorkOrder === void 0 ? void 0 : mostRecentWorkOrder.date) || \"\",\n    onChange: function onChange(e) {\n      return handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"date\", e.target.value);\n    },\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Form.Group, {\n    controlId: \"desc\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: listDescriptions,\n    className: \"mb-2 me-2\"\n  }, \"List Descriptions\"), __jsx(Form.Control, {\n    as: \"textarea\",\n    rows: 3,\n    placeholder: \"Enter description\",\n    value: ((_descriptions$selecte = descriptions[selectedDesc]) === null || _descriptions$selecte === void 0 ? void 0 : _descriptions$selecte.description) || \"\",\n    onChange: function onChange(e) {\n      return handleDescriptionChange(selectedDesc, \"description\", e.target.value);\n    },\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Control, {\n    type: \"date\",\n    value: ((_descriptions$selecte2 = descriptions[selectedDesc]) === null || _descriptions$selecte2 === void 0 ? void 0 : _descriptions$selecte2.date) || \"\",\n    onChange: function onChange(e) {\n      return handleDescriptionChange(selectedDesc, \"date\", e.target.value);\n    },\n    style: {\n      marginTop: \"0.5rem\",\n      marginBottom: \"0.5rem\"\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      setMachinePick(true);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select From\"), selectedClientFrom && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (From):\"), \" \", selectedClientFrom.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowMachineModal(true);\n    }\n  }, \"Select Machine for \", selectedClientFrom.name), selectedMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (From):\"), \" \", selectedMachine.name), showLocalLocFrom && __jsx(Form.Group, {\n    controlId: \"localLocFrom\",\n    className: \"mt-2\"\n  }, __jsx(Form.Label, null, \"Local Loc (From)\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: localLocFrom,\n    onChange: function onChange(e) {\n      return setLocalLocFrom(e.target.value);\n    }\n  })))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      setMachinePick(false);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select Current\"), selectedClientCurrent && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (Current):\"), \" \", selectedClientCurrent.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowMachineModal(true);\n    }\n  }, \"Select Machine for \", selectedClientCurrent.name), selectedCurrentMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (Current):\"), \" \", selectedCurrentMachine.name), showLocalLocCurrent && __jsx(Form.Group, {\n    controlId: \"localLocCurrent\",\n    className: \"mt-2\"\n  }, __jsx(Form.Label, null, \"Local Loc (Current)\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: localLocCurrent,\n    onChange: function onChange(e) {\n      return setLocalLocCurrent(e.target.value);\n    }\n  })))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowParentModal,\n    className: \"me-2\"\n  }, \"Select Parent\"), selectedParent && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Selected Parent\",\n    value: selectedParent.name,\n    readOnly: true,\n    style: {\n      cursor: \"default\",\n      marginTop: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, {\n    xs: 6\n  }, __jsx(ButtonGroup, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowCameraModal\n  }, \"Take Photo\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleBrowsePhotos\n  }, \"Browse\"))), __jsx(Col, {\n    xs: 6,\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: addToWebsite ? \"primary\" : \"outline-primary\",\n    onClick: function onClick() {\n      return setAddToWebsite(function (prev) {\n        return !prev;\n      });\n    }\n  }, addToWebsite ? \"✓ Add to Website\" : \"Add to Website\"), __jsx(Form.Check, {\n    type: \"checkbox\",\n    id: \"hide-checkbox\",\n    label: \"Hide\" // box is checked when we want visible = false\n    ,\n    checked: !items.visible,\n    onChange: function onChange(e) {\n      // grab checked immediately\n      var isHidden = e.currentTarget.checked;\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          visible: !isHidden\n        });\n      });\n    },\n    className: \"ms-3\"\n  }))), __jsx(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    multiple: true,\n    ref: browseInputRef,\n    style: {\n      display: \"none\"\n    },\n    onChange: handleFilesSelected\n  })), __jsx(\"div\", {\n    className: \"mt-3 d-flex flex-wrap\"\n  }, photos.map(function (photo, index) {\n    return __jsx(\"div\", {\n      key: index,\n      className: \"d-flex flex-column align-items-center mb-2 me-2\",\n      style: {\n        width: \"100px\",\n        height: \"100px\",\n        position: \"relative\"\n      }\n    }, __jsx(\"img\", {\n      src: photo.url,\n      alt: \"Photo \".concat(index + 1),\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\"\n      }\n    }), photo.file && __jsx(Button, {\n      variant: \"danger\",\n      size: \"sm\",\n      style: {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        padding: \"0 5px\"\n      },\n      onClick: function onClick() {\n        return removePhoto(index);\n      }\n    }, \"X\"));\n  })), __jsx(\"div\", {\n    className: \"mt-3 d-flex flex-wrap align-items-center\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"Save\"), __jsx(Button, {\n    variant: \"info\",\n    onClick: handleClone,\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"Clone\"), __jsx(LoadingButton, {\n    type: \"secondary\",\n    name: \"Back\",\n    route: \"NewSearch/mainSearch\"\n  }), __jsx(Button, {\n    variant: \"info\",\n    onClick: handlePrint,\n    style: {\n      marginLeft: \"auto\"\n    }\n  }, \"Print Label\")), __jsx(\"div\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"1rem 0\"\n    }\n  }, __jsx(Button, {\n    variant: \"link\",\n    style: {\n      textDecoration: \"none\",\n      color: \"black\",\n      fontSize: \"24px\"\n    },\n    onClick: function onClick() {\n      return setShowExtra(!showExtra);\n    }\n  }, \"\\u25BC\")), __jsx(Collapse, {\n    \"in\": showExtra\n  }, __jsx(\"div\", {\n    id: \"extra-collapse\",\n    className: \"mt-3\"\n  }, __jsx(Row, null, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"dimensions\"\n  }, __jsx(Form.Label, null, \"Dimensions (L x W x H)\"), __jsx(Row, null, __jsx(Col, null, __jsx(Form.Control, {\n    placeholder: \"Length\",\n    type: \"text\",\n    value: items.length,\n    onChange: handleChange(\"length\")\n  })), \"x\", __jsx(Col, null, __jsx(Form.Control, {\n    placeholder: \"Width\",\n    type: \"text\",\n    value: items.width,\n    onChange: handleChange(\"width\")\n  })), \"x\", __jsx(Col, null, __jsx(Form.Control, {\n    placeholder: \"Height\",\n    type: \"text\",\n    value: items.height,\n    onChange: handleChange(\"height\")\n  })))), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"price\"\n  }, __jsx(Form.Label, null, \"Price\"), __jsx(Form.Control, {\n    placeholder: \"Price\",\n    type: \"text\",\n    value: items.price,\n    onChange: handleChange(\"price\")\n  }))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"DOM\"\n  }, __jsx(Form.Label, null, \"DOM (Date of Manufacture)\"), __jsx(Form.Control, {\n    placeholder: \"Enter DOM\",\n    type: \"date\",\n    value: DOM,\n    onChange: function onChange(e) {\n      return setDOM(e.target.value);\n    }\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"localSN\"\n  }, __jsx(Form.Label, null, \"Local SN\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Local SN\",\n    value: items.localSN || \"\",\n    onChange: handleChange(\"localSN\")\n  }))), __jsx(Row, null, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"poNumber\"\n  }, __jsx(Form.Label, null, \"PO Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"PO Number\",\n    value: items.poNumber || \"\",\n    onChange: handleChange(\"poNumber\")\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"arrivalDate\"\n  }, __jsx(Form.Label, null, \"Arrival Date\"), __jsx(Form.Control, {\n    placeholder: \"Enter Arrival Date\",\n    type: \"date\",\n    value: items.arrival_date,\n    onChange: function onChange(e) {\n      var value = e.target.value;\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          arrival_date: value\n        });\n      });\n    }\n  })))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useRouter } from \"next/router\";\nimport dynamic from \"next/dynamic\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Table } from \"react-bootstrap\";\nimport styles from \"../../styles/Home.module.css\"; // import PdfViewer from '../../components/PdfViewer';\n\nimport Link from \"next/link\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport firebase from \"../../context/Firebase\";\nimport LoggedIn from \"./../LoggedIn\";\nconst DynamicPdfViewer = dynamic(() => import(\"../../components/pdfViewer\"), {\n  ssr: false // This disables server-side rendering for PdfViewer\n  ,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"../../components/pdfViewer\")],\n    modules: [\"ServiceDocs\\\\Explorer.js -> \" + \"../../components/pdfViewer\"]\n  }\n});\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton(type, name, route) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState({\n    name: false\n  });\n  useEffect(() => {\n    if (isLoading.name) {\n      simulateNetworkRequest().then(() => {\n        setLoading({\n          name: false\n        });\n      });\n    }\n  }, [isLoading.name]);\n\n  const handleClick = () => setLoading({\n    name: true\n  });\n\n  return __jsx(\"a\", {\n    href: route,\n    className: `btn btn-${type}`,\n    disabled: isLoading.name,\n    onClick: !isLoading.name ? handleClick : null\n  }, isLoading.name ? \"Loading…\" : name);\n}\n\nlet baseURL = \"\";\nexport default function dashboard() {\n  const router = useRouter();\n  const {\n    signOut\n  } = useAuth();\n  const labels = [\"folders\", \"←\"];\n  const fLabels = [\"files\"];\n  const storage = firebase.storage().ref();\n  let directoryRef = storage.child(\"/\"); //this is the file selected to open\n\n  const {\n    0: selectedFile,\n    1: setSelectedFile\n  } = useState(null); // const [baseURL, setURL] = useState(\" \");\n\n  const {\n    0: info,\n    1: setInfo\n  } = useState({});\n  const {\n    0: items,\n    1: setItems\n  } = useState([{}]);\n  useEffect(() => {\n    fetchData(\"\");\n  }, [router.route]);\n\n  const fetchData = async url => {\n    let fileURLs = [];\n    let fileNames = [];\n    let folderNames = []; // setURL(baseURL + url)\n\n    baseURL = baseURL + url;\n    console.log(baseURL);\n    directoryRef = storage.child(baseURL);\n\n    if (baseURL.length < 2) {\n      directoryRef = storage.child(\"/\");\n    }\n\n    await directoryRef.listAll().then(res => {\n      let downloadURLPromises = []; // Get file references and their download URLs\n\n      res.items.forEach(fileRef => {\n        fileNames.push(fileRef.name); // Push the download URL promises into an array\n\n        downloadURLPromises.push(fileRef.getDownloadURL());\n      }); // Get folder names\n\n      res.prefixes.forEach(folderRef => {\n        folderNames.push(folderRef.name);\n      }); // Wait for all download URLs to be fetched\n\n      return Promise.all(downloadURLPromises);\n    }).then(urls => {\n      fileURLs = urls;\n    }).catch(error => {\n      console.log(\"Error getting documents: \", error);\n    });\n    console.log(\"File Names:\", fileNames);\n    console.log(\"File URLs:\", fileURLs);\n    console.log(\"Folder Names:\", folderNames);\n    const toSend = {\n      folders: folderNames.map(name => ({\n        folder: name\n      })),\n      files: fileNames.map(name => ({\n        file: name\n      }))\n    };\n    setInfo(toSend);\n  }; //this is style stuff for the table headers\n\n\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState(null);\n\n  const hoverStyle = index => ({\n    backgroundColor: index === 1 && hoverIndex === index ? \"#ddd\" : \"transparent\",\n    textAlign: \"center\",\n    cursor: \"default\"\n  });\n\n  const goBack = () => {\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf(\"/\"));\n    fetchData(\"\");\n  }; //handle openinng file\n\n\n  const openFile = async index => {\n    let filePath = baseURL + \"/\" + info.files[index].file;\n    console.log(filePath);\n    const url = await getDownloadUrl(filePath);\n\n    if (url) {\n      setSelectedFile(url);\n    } else {\n      console.error(\"Failed to get PDF URL\");\n    } // const fileName = /* extract filename based on index */;\n    // setSelectedFile(fileName);\n\n  };\n\n  const getDownloadUrl = async filePath => {\n    const fileRef = storage.child(filePath);\n\n    try {\n      const url = await fileRef.getDownloadURL();\n      return url;\n    } catch (error) {\n      console.error(\"Error fetching the download URL: \", error);\n      return null;\n    }\n  };\n\n  const closePdfViewer = () => {\n    setSelectedFile(null);\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Explorer\"), __jsx(\"div\", {\n    className: \"d-grid gap-3\"\n  }, selectedFile ? __jsx(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, __jsx(DynamicPdfViewer, {\n    file: selectedFile\n  }), __jsx(\"button\", {\n    style: {\n      position: \"absolute\",\n      top: 10,\n      right: 10,\n      background: \"white\",\n      border: \"none\",\n      fontSize: \"1.5rem\",\n      cursor: \"pointer\"\n    },\n    onClick: closePdfViewer\n  }, \"x\")) : __jsx(React.Fragment, null, __jsx(Table, {\n    style: {\n      width: \"100%\"\n    },\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, labels.map((item, index) => __jsx(\"th\", {\n    style: hoverStyle(index),\n    onMouseOver: () => setHoverIndex(index),\n    onMouseOut: () => setHoverIndex(null),\n    onClick: () => goBack(index)\n  }, item)))), __jsx(\"tbody\", null, info.folders && info.folders.map((item, index) => __jsx(\"tr\", {\n    class: \"clickable-row\",\n    key: index\n  }, __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    onClick: () => fetchData(\"/\" + item.folder)\n  }, item.folder))))), __jsx(Table, {\n    style: {\n      width: \"100%\"\n    },\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, fLabels.map((item, index) => __jsx(\"th\", null, item)))), __jsx(\"tbody\", null, info.files && info.files.map((item, index) => __jsx(\"tr\", {\n    class: \"clickable-row\",\n    key: index\n  }, __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    onClick: () => openFile(index)\n  }, item.file))))), __jsx(Button, {\n    variant: \"link\",\n    onClick: signOut\n  }, \"Sign out\"))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
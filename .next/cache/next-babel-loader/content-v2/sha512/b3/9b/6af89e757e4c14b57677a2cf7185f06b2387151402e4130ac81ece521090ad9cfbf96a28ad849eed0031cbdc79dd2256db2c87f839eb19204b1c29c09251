{"ast":null,"code":"import _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col, Modal, FormControl, Collapse, InputGroup, ButtonGroup } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useAuth } from \"../../../../context/AuthUserContext\";\nimport firebase from \"../../../../context/Firebase\";\nimport LoggedIn from \"../../../LoggedIn\";\nimport { useRouter } from \"next/router\";\nimport { fetchClients } from \"../../../../utils/fetchAssociations\";\nimport ClientTable from \"../../../../utils/ClientTable\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport ParentModal from \"../../AddItem/parentModal\";\nimport dynamic from \"next/dynamic\";\nimport InfoModal from \"../../InfoModal\";\nimport MachineSelectionModal from \"./MachineSelectionModal\";\nimport { addServiceItem } from \"../../../../utils/BluefolderService\";\nimport NewLocal from \"./NewLocal\"; //inflow API\n\nimport InflowAPI from \"../../../../utils/inflowAPI\"; // Import for SSR\n\n// === BUILD A MAP ONLY OF THOSE FIELDS THE USER ACTUALLY PICKED ===\nfunction buildLocalLocObject(loc) {\n  var _loc$section, _loc$section2;\n\n  var o = {};\n  if (loc.region) o.region = loc.region;\n  if ((_loc$section = loc.section) !== null && _loc$section !== void 0 && _loc$section.letter && (_loc$section2 = loc.section) !== null && _loc$section2 !== void 0 && _loc$section2.number) o.section = loc.section; // pick up the new singular fields, too:\n\n  if (loc.bin !== undefined && loc.bin !== \"\") o.bin = loc.bin;\n  if (loc.pallet !== undefined && loc.pallet !== \"\") o.pallet = loc.pallet;\n  return o;\n} // This will only load the component on the client-side.\n\n\nvar BarcodeScannerComponent = dynamic(function () {\n  return import(\"react-qr-barcode-scanner\");\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"react-qr-barcode-scanner\")];\n    },\n    modules: [\"NewSearch\\\\item\\\\[id]\\\\index.js -> \" + \"react-qr-barcode-scanner\"]\n  }\n}); // Simulates a network request delay.\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n} // Custom LoadingButton component.\n\n\nfunction LoadingButton(_ref) {\n  var type = _ref.type,\n      name = _ref.name,\n      route = _ref.route;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    if (isLoading) {\n      simulateNetworkRequest().then(function () {\n        return setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  var handleClick = function handleClick() {\n    return setLoading(true);\n  };\n\n  return __jsx(Link, {\n    href: \"/\".concat(route)\n  }, __jsx(\"a\", {\n    className: \"btn btn-\".concat(type),\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null\n  }, isLoading ? \"Loading…\" : name));\n}\n\nexport var __N_SSP = true;\nexport default function DisplayItem(_ref2) {\n  var _initialItem$visible, _descriptions$selecte3, _descriptions$selecte4, _newLocalFrom$section, _newLocalFrom$section2, _newLocalCurrent$sect, _newLocalCurrent$sect2;\n\n  var initialItem = _ref2.initialItem,\n      initialMachineData = _ref2.initialMachineData,\n      error = _ref2.error;\n  var router = useRouter();\n\n  var _useAuth = useAuth(),\n      signOut = _useAuth.signOut; // const { id } = router.query;\n\n\n  var idFromRouter = router.query.id;\n  var initialId = (initialItem === null || initialItem === void 0 ? void 0 : initialItem.id) || idFromRouter;\n\n  var _useState2 = useState({\n    name: (initialItem === null || initialItem === void 0 ? void 0 : initialItem.name) || \"\",\n    pn: Array.isArray(initialItem === null || initialItem === void 0 ? void 0 : initialItem.pn) ? initialItem.pn : initialItem !== null && initialItem !== void 0 && initialItem.pn ? [initialItem.pn] : [],\n    sn: Array.isArray(initialItem === null || initialItem === void 0 ? void 0 : initialItem.sn) ? initialItem.sn : initialItem !== null && initialItem !== void 0 && initialItem.sn ? [initialItem.sn] : [],\n    price: \"\",\n    status: \"\",\n    length: \"\",\n    width: \"\",\n    height: \"\",\n    poNumber: \"\",\n    trackingNumber: \"\",\n    localSN: (initialItem === null || initialItem === void 0 ? void 0 : initialItem.localSN) || \"\",\n    arrival_date: (initialItem === null || initialItem === void 0 ? void 0 : initialItem.arrival_date) || \"\",\n    visible: (_initialItem$visible = initialItem === null || initialItem === void 0 ? void 0 : initialItem.visible) !== null && _initialItem$visible !== void 0 ? _initialItem$visible : true\n  }),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState({\n    region: \"\",\n    section: {\n      letter: \"\",\n      number: \"\"\n    },\n    bin: \"\",\n    pallet: \"\"\n  }),\n      newLocalFrom = _useState3[0],\n      setNewLocalFrom = _useState3[1];\n\n  var _useState4 = useState({\n    region: \"\",\n    section: {\n      letter: \"\",\n      number: \"\"\n    },\n    bin: \"\",\n    pallet: \"\"\n  }),\n      newLocalCurrent = _useState4[0],\n      setNewLocalCurrent = _useState4[1]; // New states for separate client selections:\n\n\n  var _useState5 = useState(null),\n      selectedClientFrom = _useState5[0],\n      setSelectedClientFrom = _useState5[1];\n\n  var _useState6 = useState(null),\n      selectedClientCurrent = _useState6[0],\n      setSelectedClientCurrent = _useState6[1];\n\n  var _useState7 = useState(null),\n      selectedMachine = _useState7[0],\n      setSelectedMachine = _useState7[1];\n\n  var _useState8 = useState(null),\n      selectedCurrentMachine = _useState8[0],\n      setSelectedCurrentMachine = _useState8[1]; // whenever you pick a new “From” client or machine, clear the old From-loc:\n  // useEffect(() => {\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientFrom, selectedMachine]);\n  // const didMountFrom = useRef(false);\n  // useEffect(() => {\n  //   if (!didMountFrom.current) {\n  //     // first time through (the data-load phase), don’t clear\n  //     didMountFrom.current = true;\n  //     return;\n  //   }\n  //   // thereafter, when the user picks a new client or machine, clear:\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  //   setLocalLocFrom(\"\");\n  // }, [selectedClientFrom, selectedMachine]);\n  // whenever you pick a new “Current” client or machine, clear the old Current-loc:\n  // useEffect(() => {\n  //   setNewLocalCurrent({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientCurrent, selectedCurrentMachine]);\n  // const [didFetch, setDidFetch] = useState(false);\n  // useEffect(() => {\n  //   if (!didFetch) {\n  //     // we’re in the data-load phase, skip clearing\n  //     setDidFetch(true);\n  //     return;\n  //   }\n  //   // only clear on subsequent user changes:\n  //   setNewLocalCurrent({ region: \"\", section: {}, bin: \"\", pallet: \"\" });\n  // }, [selectedClientCurrent, selectedCurrentMachine]);\n  // These arrays will be populated from Firebase.\n\n\n  var _useState9 = useState([]),\n      pnOptions = _useState9[0],\n      setPnOptions = _useState9[1];\n\n  var _useState10 = useState([]),\n      snOptions = _useState10[0],\n      setSnOptions = _useState10[1];\n\n  var _useState11 = useState([{\n    description: \"\",\n    date: \"\"\n  }]),\n      descriptions = _useState11[0],\n      setDescriptions = _useState11[1];\n\n  var _useState12 = useState([{\n    workOrder: \"\",\n    date: \"\"\n  }]),\n      workOrders = _useState12[0],\n      setWorkOrders = _useState12[1];\n\n  var _useState13 = useState([]),\n      clients = _useState13[0],\n      setClients = _useState13[1];\n\n  var _useState14 = useState([]),\n      photos = _useState14[0],\n      setPhotos = _useState14[1];\n\n  var _useState15 = useState(false),\n      show = _useState15[0],\n      setShow = _useState15[1];\n\n  var _useState16 = useState(false),\n      showErr = _useState16[0],\n      setShowErr = _useState16[1];\n\n  var _useState17 = useState(\"N/A\"),\n      Err = _useState17[0],\n      setErr = _useState17[1];\n\n  var _useState18 = useState(false),\n      showDescModal = _useState18[0],\n      setShowDescModal = _useState18[1];\n\n  var _useState19 = useState(false),\n      showWoModal = _useState19[0],\n      setShowWoModal = _useState19[1];\n\n  var _useState20 = useState(false),\n      showClientModal = _useState20[0],\n      setShowClientModal = _useState20[1];\n\n  var _useState21 = useState(false),\n      showMachineModal = _useState21[0],\n      setShowMachineModal = _useState21[1];\n\n  var _useState22 = useState(false),\n      showParentModal = _useState22[0],\n      setShowParentModal = _useState22[1];\n\n  var _useState23 = useState(false),\n      showCameraModal = _useState23[0],\n      setShowCameraModal = _useState23[1];\n\n  var _useState24 = useState(false),\n      showSaveModal = _useState24[0],\n      setShowSaveModal = _useState24[1];\n\n  var _useState25 = useState(false),\n      showPrintModal = _useState25[0],\n      setShowPrintModal = _useState25[1];\n\n  var _useState26 = useState(false),\n      machineSelectionModal = _useState26[0],\n      setMachineSelectionModal = _useState26[1];\n\n  var _useState27 = useState(0),\n      selectedDesc = _useState27[0],\n      setSelectedDesc = _useState27[1];\n\n  var _useState28 = useState(null),\n      selectedClient = _useState28[0],\n      setSelectedClient = _useState28[1];\n\n  var _useState29 = useState(null),\n      selectedParent = _useState29[0],\n      setSelectedParent = _useState29[1];\n\n  var _useState30 = useState(null),\n      TheMachine = _useState30[0],\n      setTheMachine = _useState30[1];\n\n  var _useState31 = useState([]),\n      machineOptions = _useState31[0],\n      setMachineOptions = _useState31[1];\n\n  var _useState32 = useState(\"\"),\n      search = _useState32[0],\n      setSearch = _useState32[1];\n\n  var _useState33 = useState(null),\n      capturedPhoto = _useState33[0],\n      setCapturedPhoto = _useState33[1];\n\n  var _useState34 = useState(\"environment\"),\n      cameraFacing = _useState34[0],\n      setCameraFacing = _useState34[1];\n\n  var _useState35 = useState(false),\n      addToWebsite = _useState35[0],\n      setAddToWebsite = _useState35[1];\n\n  var _useState36 = useState(false),\n      machinePick = _useState36[0],\n      setMachinePick = _useState36[1];\n\n  var _useState37 = useState(0),\n      freqItem = _useState37[0],\n      setFreqItem = _useState37[1];\n\n  var _useState38 = useState(0),\n      usagePastYear = _useState38[0],\n      setUsagePastYear = _useState38[1];\n\n  var _useState39 = useState(0),\n      machineFrequency = _useState39[0],\n      setMachineFrequency = _useState39[1]; // State for the extra (dimensions/price/DOM/PO Number) section.\n\n\n  var _useState40 = useState(false),\n      showExtra = _useState40[0],\n      setShowExtra = _useState40[1]; // State for the local warehouse location inputs.\n\n\n  var _useState41 = useState(\"\"),\n      localLocFrom = _useState41[0],\n      setLocalLocFrom = _useState41[1];\n\n  var _useState42 = useState(\"\"),\n      localLocCurrent = _useState42[0],\n      setLocalLocCurrent = _useState42[1]; // New state for DOM (Date of Manufacture)\n\n\n  var _useState43 = useState(\"\"),\n      DOM = _useState43[0],\n      setDOM = _useState43[1]; // New state for OEM, Modality, and Model.\n\n\n  var _useState44 = useState(\"\"),\n      oem = _useState44[0],\n      setOem = _useState44[1];\n\n  var _useState45 = useState(\"\"),\n      modality = _useState45[0],\n      setModality = _useState45[1];\n\n  var _useState46 = useState(\"\"),\n      model = _useState46[0],\n      setModel = _useState46[1]; // More info modal state.\n\n\n  var _useState47 = useState(false),\n      showInfoModal = _useState47[0],\n      setShowInfoModal = _useState47[1];\n\n  var _useState48 = useState(\"\"),\n      itemName = _useState48[0],\n      setItemName = _useState48[1];\n\n  var _useState49 = useState(false),\n      machineFieldsInitialized = _useState49[0],\n      setMachineFieldsInitialized = _useState49[1]; // near the top of DisplayItem()\n\n\n  var _useState50 = useState(false),\n      showLocalModalFrom = _useState50[0],\n      setShowLocalModalFrom = _useState50[1];\n\n  var _useState51 = useState(false),\n      showLocalModalCurrent = _useState51[0],\n      setShowLocalModalCurrent = _useState51[1];\n\n  var openLocalModalFrom = function openLocalModalFrom() {\n    return setShowLocalModalFrom(true);\n  };\n\n  var closeLocalModalFrom = function closeLocalModalFrom() {\n    return setShowLocalModalFrom(false);\n  };\n\n  var openLocalModalCurrent = function openLocalModalCurrent() {\n    return setShowLocalModalCurrent(true);\n  };\n\n  var closeLocalModalCurrent = function closeLocalModalCurrent() {\n    return setShowLocalModalCurrent(false);\n  }; // at the top of DisplayItem()\n\n\n  var _useState52 = useState(false),\n      showNewLocalModalFrom = _useState52[0],\n      setShowNewLocalModalFrom = _useState52[1];\n\n  var _useState53 = useState(false),\n      showNewLocalModalCurrent = _useState53[0],\n      setShowNewLocalModalCurrent = _useState53[1];\n\n  function formatLoc(loc) {\n    var _loc$section3, _loc$section4;\n\n    if (!loc) return \"\";\n    var parts = [];\n    if (loc.region) parts.push(loc.region);\n    if ((_loc$section3 = loc.section) !== null && _loc$section3 !== void 0 && _loc$section3.letter && (_loc$section4 = loc.section) !== null && _loc$section4 !== void 0 && _loc$section4.number) parts.push(\"\".concat(loc.section.letter).concat(loc.section.number));\n    if (loc.bin) parts.push(\"B\".concat(loc.bin));\n    if (loc.pallet) parts.push(\"P\".concat(loc.pallet));\n    return parts.join(\"–\");\n  } // when the From-client changes, clear any old local-loc\n  // useEffect(() => {\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientFrom]);\n  // // when the From-machine changes, clear any old local-loc\n  // useEffect(() => {\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedMachine]);\n  // same for Current:\n  // useEffect(() => {\n  //   setNewLocalCurrent({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientCurrent, selectedCurrentMachine]);\n\n\n  var handleSendToInflow = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _descriptions$selecte, name, description, imageUrls;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              name = items.name;\n              description = ((_descriptions$selecte = descriptions[selectedDesc]) === null || _descriptions$selecte === void 0 ? void 0 : _descriptions$selecte.description) || \"\"; // gather every photo URL from Firebase Storage\n\n              imageUrls = photos.map(function (p) {\n                return p.url;\n              });\n              _context.next = 6;\n              return InflowAPI.upsertProduct({\n                name: name,\n                description: description,\n                imageUrls: imageUrls\n              });\n\n            case 6:\n              alert(\"Sent to inFlow successfully!\");\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              alert(\"Error sending to inFlow: \" + _context.t0.message);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function handleSendToInflow() {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // const [storedMachine, setStoredMachine] = useState(null);\n  // useEffect(() => {\n  //   // once any of these three change, re-merge:\n  //   if (TheMachine || selectedCurrentMachine || selectedMachine) {\n  //     const merged = updateMachineFields(\n  //       TheMachine,\n  //       selectedCurrentMachine,\n  //       selectedMachine\n  //     );\n  //     setOem(merged.oem);\n  //     setModality(merged.modality);\n  //     setModel(merged.model);\n  //   }\n  // }, [TheMachine, selectedCurrentMachine, selectedMachine]);\n  // whenever the “From” client changes:\n\n\n  useEffect(function () {\n    var _selectedClientFrom$n;\n\n    setShowLocalLocFrom((selectedClientFrom === null || selectedClientFrom === void 0 ? void 0 : (_selectedClientFrom$n = selectedClientFrom.name) === null || _selectedClientFrom$n === void 0 ? void 0 : _selectedClientFrom$n.toLowerCase()) === \"socalwarehouse\");\n  }, [selectedClientFrom]); // whenever the “Current” client changes:\n\n  useEffect(function () {\n    var _selectedClientCurren;\n\n    setShowLocalLocCurrent((selectedClientCurrent === null || selectedClientCurrent === void 0 ? void 0 : (_selectedClientCurren = selectedClientCurrent.name) === null || _selectedClientCurren === void 0 ? void 0 : _selectedClientCurren.toLowerCase()) === \"socalwarehouse\");\n  }, [selectedClientCurrent]); // Fetch clients data.\n\n  useEffect(function () {\n    function fetchClientsData() {\n      return _fetchClientsData.apply(this, arguments);\n    }\n\n    function _fetchClientsData() {\n      _fetchClientsData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var clientsData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return fetchClients();\n\n              case 3:\n                clientsData = _context2.sent;\n                console.log(clientsData);\n                setClients(clientsData);\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error(\"Error fetching clients: \", _context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 8]]);\n      }));\n      return _fetchClientsData.apply(this, arguments);\n    }\n\n    fetchClientsData();\n  }, []); // Fetch PN and SN options from Firebase.\n\n  useEffect(function () {\n    function fetchPnSn() {\n      return _fetchPnSn.apply(this, arguments);\n    }\n\n    function _fetchPnSn() {\n      _fetchPnSn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var db, snapshot, pnSet, snSet, pnArray, snArray;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                db = firebase.firestore();\n                _context3.next = 3;\n                return db.collection(\"Test\").get();\n\n              case 3:\n                snapshot = _context3.sent;\n                pnSet = new Set();\n                snSet = new Set();\n                snapshot.forEach(function (doc) {\n                  var data = doc.data();\n                  if (data.pn) pnSet.add(data.pn);\n                  if (data.sn) snSet.add(data.sn);\n                });\n                pnArray = _toConsumableArray(pnSet);\n                snArray = _toConsumableArray(snSet);\n                setPnOptions(pnArray);\n                setSnOptions(snArray);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return _fetchPnSn.apply(this, arguments);\n    }\n\n    fetchPnSn();\n  }, []);\n  useEffect(function () {\n    if (!initialItem && idFromRouter) {\n      fetchData();\n    }\n  }, [initialItem, idFromRouter]);\n\n  function resolveClientFromMachine(_x, _x2, _x3) {\n    return _resolveClientFromMachine.apply(this, arguments);\n  }\n\n  function _resolveClientFromMachine() {\n    _resolveClientFromMachine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(machineRef, setClient, setMachine) {\n      var isFrom,\n          machineDoc,\n          _machineData$name,\n          machineData,\n          clientDoc,\n          clientName,\n          isSocalInterior,\n          shouldShow,\n          _clientDoc2,\n          _args14 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              isFrom = _args14.length > 3 && _args14[3] !== undefined ? _args14[3] : true;\n              _context14.next = 3;\n              return machineRef.get();\n\n            case 3:\n              machineDoc = _context14.sent;\n\n              if (!machineDoc.exists) {\n                _context14.next = 24;\n                break;\n              }\n\n              machineData = machineDoc.data();\n              setMachine(_objectSpread({\n                id: machineDoc.id\n              }, machineData)); // Determine if the machine is \"interior socal\"\n              // const isSocalInterior = machineData.name && machineData.name.toLowerCase() === \"interior socal\";\n              // if (isSocalInterior) {\n              //   if (isFrom) {\n              //     setShowLocalLocFrom(true);\n              //   } else {\n              //     setShowLocalLocCurrent(true);\n              //   }\n              // } else {\n              // Optionally clear the flag if it is not \"interior socal\"\n              // if (isFrom) {\n              //   setShowLocalLocFrom(false);\n              // } else {\n              //   setShowLocalLocCurrent(false);\n              // }\n              // }\n              // new: fetch client name and combine both checks\n\n              if (!(machineData.client && typeof machineData.client.get === \"function\")) {\n                _context14.next = 13;\n                break;\n              }\n\n              _context14.next = 10;\n              return machineData.client.get();\n\n            case 10:\n              _context14.t0 = _context14.sent;\n              _context14.next = 14;\n              break;\n\n            case 13:\n              _context14.t0 = null;\n\n            case 14:\n              clientDoc = _context14.t0;\n              clientName = clientDoc && clientDoc.exists ? clientDoc.data().name : null;\n              isSocalInterior = ((_machineData$name = machineData.name) === null || _machineData$name === void 0 ? void 0 : _machineData$name.toLowerCase()) === \"interior socal\";\n              shouldShow = isSocalInterior || clientName === \"SoCalWarehouse\";\n\n              if (isFrom) {\n                setShowLocalLocFrom(shouldShow);\n              } else {\n                setShowLocalLocCurrent(shouldShow);\n              }\n\n              if (!(machineData.client && typeof machineData.client.get === \"function\")) {\n                _context14.next = 24;\n                break;\n              }\n\n              _context14.next = 22;\n              return machineData.client.get();\n\n            case 22:\n              _clientDoc2 = _context14.sent;\n\n              if (_clientDoc2.exists) {\n                setClient(_objectSpread({\n                  id: _clientDoc2.id\n                }, _clientDoc2.data()));\n              }\n\n            case 24:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _resolveClientFromMachine.apply(this, arguments);\n  }\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var id, db, doc, _machineFromData, _machineFromData$name, _machineCurrentData, _machineCurrentData$n, _selectedClientFrom$n2, _selectedClientCurren2, data, normalizedPN, normalizedSN, clientFromDoc, clientCurrentDoc, machineFromData, machineCurrentData, _doc, _doc2, nameFrom, nameCurrent, theMachineData, _theMachineData$oem, _theMachineData$modal, _theMachineData$model, OEM, Modality, Model, merged, parentDoc;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              id = (initialItem === null || initialItem === void 0 ? void 0 : initialItem.id) || idFromRouter; // <- make sure id exists here\n\n              db = firebase.firestore();\n              _context4.next = 4;\n              return db.collection(\"Test\").doc(id).get();\n\n            case 4:\n              doc = _context4.sent;\n\n              if (!doc.exists) {\n                _context4.next = 76;\n                break;\n              }\n\n              console.log(\"test\");\n              data = doc.data();\n              normalizedPN = Array.isArray(data.pn) ? data.pn : [data.pn];\n              normalizedSN = Array.isArray(data.sn) ? data.sn : [data.sn];\n              setItems(_objectSpread(_objectSpread({}, data), {}, {\n                pn: normalizedPN,\n                sn: normalizedSN\n              }));\n              setDescriptions(data.descriptions || []);\n              setWorkOrders(data.workOrders || []);\n              if (data.localLocFrom) setLocalLocFrom(data.localLocFrom);\n              if (data.localLocCurrent) setLocalLocCurrent(data.localLocCurrent);\n\n              if (data.DOM) {\n                setDOM(data.DOM);\n              } // …after you do setItems, setDescriptions, etc.\n              // load the “newLocal” maps\n\n\n              if (data.newLocalFrom) setNewLocalFrom(data.newLocalFrom);\n              if (data.newLocalCurrent) setNewLocalCurrent(data.newLocalCurrent); // Load PO Number if it exists.\n\n              if (data.poNumber) {\n                setItems(function (prev) {\n                  return _objectSpread(_objectSpread({}, prev), {}, {\n                    poNumber: data.poNumber\n                  });\n                });\n              }\n\n              if (!data.ClientFrom) {\n                _context4.next = 24;\n                break;\n              }\n\n              _context4.next = 22;\n              return data.ClientFrom.get();\n\n            case 22:\n              clientFromDoc = _context4.sent;\n\n              if (clientFromDoc.exists) {\n                setSelectedClientFrom(_objectSpread({\n                  id: clientFromDoc.id\n                }, clientFromDoc.data()));\n              }\n\n            case 24:\n              if (!data.ClientCurrent) {\n                _context4.next = 29;\n                break;\n              }\n\n              _context4.next = 27;\n              return data.ClientCurrent.get();\n\n            case 27:\n              clientCurrentDoc = _context4.sent;\n\n              if (clientCurrentDoc.exists) {\n                setSelectedClientCurrent(_objectSpread({\n                  id: clientCurrentDoc.id\n                }, clientCurrentDoc.data()));\n              }\n\n            case 29:\n              if (!(!data.ClientFrom && data.Machine && typeof data.Machine.get === \"function\")) {\n                _context4.next = 33;\n                break;\n              }\n\n              console.log(\"Entered resolveClientFromMachine for Machine (old style for From)\");\n              _context4.next = 33;\n              return resolveClientFromMachine(data.Machine, setSelectedClientFrom, setSelectedMachine, true);\n\n            case 33:\n              if (!(!data.ClientCurrent && data.CurrentMachine && typeof data.CurrentMachine.get === \"function\")) {\n                _context4.next = 37;\n                break;\n              }\n\n              console.log(\"Entered resolveClientFromMachine for CurrentMachine (old style for Current)\");\n              _context4.next = 37;\n              return resolveClientFromMachine(data.CurrentMachine, setSelectedClientCurrent, setSelectedCurrentMachine, false);\n\n            case 37:\n              machineFromData = null;\n              machineCurrentData = null;\n\n              if (!data.MachineFrom) {\n                _context4.next = 45;\n                break;\n              }\n\n              _context4.next = 42;\n              return data.MachineFrom.get();\n\n            case 42:\n              _doc = _context4.sent;\n              machineFromData = _doc.exists ? _doc.data() : null;\n              setSelectedMachine(_objectSpread({\n                id: _doc.id\n              }, _doc.data()));\n\n            case 45:\n              if (!data.MachineCurrent) {\n                _context4.next = 51;\n                break;\n              }\n\n              _context4.next = 48;\n              return data.MachineCurrent.get();\n\n            case 48:\n              _doc2 = _context4.sent;\n              machineCurrentData = _doc2.exists ? _doc2.data() : null;\n              setSelectedCurrentMachine(_objectSpread({\n                id: _doc2.id\n              }, _doc2.data()));\n\n            case 51:\n              nameFrom = (_machineFromData = machineFromData) === null || _machineFromData === void 0 ? void 0 : (_machineFromData$name = _machineFromData.name) === null || _machineFromData$name === void 0 ? void 0 : _machineFromData$name.toLowerCase();\n              nameCurrent = (_machineCurrentData = machineCurrentData) === null || _machineCurrentData === void 0 ? void 0 : (_machineCurrentData$n = _machineCurrentData.name) === null || _machineCurrentData$n === void 0 ? void 0 : _machineCurrentData$n.toLowerCase(); // If the machine’s name is “interior socal”, show that branch:\n              // setShowLocalLocFrom(nameFrom === \"interior socal\");\n              // // Or if your Firestore already has a value for localLocFrom, show it anyway:\n              // if (data.localLocFrom) setShowLocalLocFrom(true);\n              // setShowLocalLocCurrent(nameCurrent === \"interior socal\");\n              // if (data.localLocCurrent) setShowLocalLocCurrent(true);\n              // new: combine machine-name OR client-name check, keep existing-data\n\n              setShowLocalLocFrom(nameFrom === \"interior socal\" || (selectedClientFrom === null || selectedClientFrom === void 0 ? void 0 : (_selectedClientFrom$n2 = selectedClientFrom.name) === null || _selectedClientFrom$n2 === void 0 ? void 0 : _selectedClientFrom$n2.toLowerCase()) === \"socalwarehouse\" || Boolean(data.localLocFrom));\n              setShowLocalLocCurrent(nameCurrent === \"interior socal\" || (selectedClientCurrent === null || selectedClientCurrent === void 0 ? void 0 : (_selectedClientCurren2 = selectedClientCurrent.name) === null || _selectedClientCurren2 === void 0 ? void 0 : _selectedClientCurren2.toLowerCase()) === \"socalwarehouse\" || Boolean(data.localLocCurrent));\n              theMachineData = data.TheMachine || null;\n              setTheMachine(theMachineData);\n\n              if (theMachineData) {\n                // pull both variants, prefer lowercase if it exists\n                OEM = (_theMachineData$oem = theMachineData.oem) !== null && _theMachineData$oem !== void 0 ? _theMachineData$oem : theMachineData.OEM;\n                Modality = (_theMachineData$modal = theMachineData.modality) !== null && _theMachineData$modal !== void 0 ? _theMachineData$modal : theMachineData.Modality;\n                Model = (_theMachineData$model = theMachineData.model) !== null && _theMachineData$model !== void 0 ? _theMachineData$model : theMachineData.Model;\n                setTheMachine(_objectSpread(_objectSpread({}, theMachineData), {}, {\n                  OEM: OEM,\n                  Modality: Modality,\n                  Model: Model\n                }));\n              } // setStoredMachine(theMachineData);\n              // **right here** merge from the three sources you just fetched:\n\n\n              merged = updateMachineFields(theMachineData, machineCurrentData, machineFromData);\n              setOem(merged.oem);\n              setModality(merged.modality);\n              setModel(merged.model);\n              console.log(\"SelectedMachine:\", selectedMachine, \"SelectedCurrentMachine:\", selectedCurrentMachine); // Show local loc inputs if applicable\n              // if (\n              //   selectedMachine &&\n              //   selectedMachine.name &&\n              //   selectedMachine.name.toLowerCase() === \"interior socal\"\n              // ) {\n              //   setShowLocalLocFrom(true);\n              // }\n              // if (\n              //   selectedCurrentMachine &&\n              //   selectedCurrentMachine.name &&\n              //   selectedCurrentMachine.name.toLowerCase() === \"interior socal\"\n              // ) {\n              //   setShowLocalLocCurrent(true);\n              // }\n\n              if (!data.Parent) {\n                _context4.next = 68;\n                break;\n              }\n\n              _context4.next = 66;\n              return data.Parent.get();\n\n            case 66:\n              parentDoc = _context4.sent;\n              setSelectedParent(_objectSpread({\n                id: parentDoc.id\n              }, parentDoc.data()));\n\n            case 68:\n              _context4.next = 70;\n              return fetchPhotos(id);\n\n            case 70:\n              _context4.next = 72;\n              return checkIfAddedToWebsite(id);\n\n            case 72:\n              _context4.next = 74;\n              return calculateItemFrequencyAndUsage(data.pn);\n\n            case 74:\n              _context4.next = 77;\n              break;\n\n            case 76:\n              router.push({\n                pathname: \"../AddItem/NewItem\",\n                query: {\n                  signal: id\n                }\n              });\n\n            case 77:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function fetchData() {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Returns the value for a given field from the highest-priority source.\n\n\n  function getPriorityMachineField(field, theMachine, currentMachine, fromMachine) {\n    console.log(\"the machine: \", theMachine, \"field: \", field);\n\n    if (theMachine && theMachine[field] && theMachine[field] !== \"N/A\" && theMachine[field].trim() !== \"\") {\n      return theMachine[field];\n    }\n\n    if (currentMachine && currentMachine[field] && currentMachine[field] !== \"N/A\" && currentMachine[field].trim() !== \"\") {\n      return currentMachine[field];\n    }\n\n    if (fromMachine && fromMachine[field] && fromMachine[field] !== \"N/A\" && fromMachine[field].trim() !== \"\") {\n      return fromMachine[field];\n    }\n\n    return \"\";\n  } // Returns an object with updated OEM, modality, and model fields.\n\n\n  function updateMachineFields(theMachine, currentMachine, fromMachine) {\n    return {\n      oem: getPriorityMachineField(\"OEM\", theMachine, currentMachine, fromMachine),\n      modality: getPriorityMachineField(\"Modality\", theMachine, currentMachine, fromMachine),\n      model: getPriorityMachineField(\"Model\", theMachine, currentMachine, fromMachine)\n    };\n  }\n\n  var calculateItemFrequencyAndUsage = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(pn) {\n      var db, currentDate, oneYearAgo, normalizedPN, itemsSnapshot, usagePastYear;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              db = firebase.firestore();\n              currentDate = new Date();\n              oneYearAgo = new Date();\n              oneYearAgo.setFullYear(currentDate.getFullYear() - 1);\n              normalizedPN = pn !== undefined ? pn : \"\";\n              _context5.next = 7;\n              return db.collection(\"Test\").where(\"pn\", \"==\", normalizedPN).get();\n\n            case 7:\n              itemsSnapshot = _context5.sent;\n              setFreqItem(itemsSnapshot.size);\n              usagePastYear = 0;\n              itemsSnapshot.forEach(function (doc) {\n                var itemData = doc.data();\n                itemData.workOrders.forEach(function (workOrder) {\n                  var workOrderDate = new Date(workOrder.date);\n\n                  if (workOrderDate >= oneYearAgo && workOrderDate <= currentDate) {\n                    usagePastYear++;\n                  }\n                });\n              });\n              setUsagePastYear(usagePastYear);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function calculateItemFrequencyAndUsage(_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var fetchMachine = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(machineId) {\n      var db, doc, machineData, merged, machinesSnapshot;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              db = firebase.firestore();\n              _context6.next = 3;\n              return db.collection(\"Machine\").doc(machineId).get();\n\n            case 3:\n              doc = _context6.sent;\n\n              if (!doc.exists) {\n                _context6.next = 17;\n                break;\n              }\n\n              machineData = doc.data();\n              setTheMachine(machineData); // re-merge all three sources with correct priority:\n\n              merged = updateMachineFields(machineData, selectedCurrentMachine, selectedMachine);\n              setOem(merged.oem);\n              setModality(merged.modality);\n              setModel(merged.model);\n              _context6.next = 13;\n              return db.collection(\"Machine\").where(\"Model\", \"==\", machineData.Model || machineData.model).get();\n\n            case 13:\n              machinesSnapshot = _context6.sent;\n              setMachineFrequency(machinesSnapshot.size);\n              _context6.next = 18;\n              break;\n\n            case 17:\n              console.error(\"Machine not found\");\n\n            case 18:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function fetchMachine(_x5) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var fetchPhotos = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(docID) {\n      var storageRef, listRef, res, urls;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              storageRef = firebase.storage().ref();\n              listRef = storageRef.child(\"Parts/\".concat(docID));\n              _context7.prev = 2;\n              _context7.next = 5;\n              return listRef.listAll();\n\n            case 5:\n              res = _context7.sent;\n              _context7.next = 8;\n              return Promise.all(res.items.map(function (item) {\n                return item.getDownloadURL();\n              }));\n\n            case 8:\n              urls = _context7.sent;\n              console.log(\"Fetched photo URLs:\", urls);\n              setPhotos(urls.map(function (url) {\n                return {\n                  url: url,\n                  file: null\n                };\n              }));\n              _context7.next = 16;\n              break;\n\n            case 13:\n              _context7.prev = 13;\n              _context7.t0 = _context7[\"catch\"](2);\n              console.error(\"Error fetching photos: \", _context7.t0);\n\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[2, 13]]);\n    }));\n\n    return function fetchPhotos(_x6) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var checkIfAddedToWebsite = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(docID) {\n      var db, partsDoc;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              db = firebase.firestore();\n              _context8.next = 3;\n              return db.collection(\"Parts\").doc(docID).get();\n\n            case 3:\n              partsDoc = _context8.sent;\n\n              if (partsDoc.exists) {\n                setAddToWebsite(true);\n              }\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function checkIfAddedToWebsite(_x7) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  var handleCloseErr = function handleCloseErr() {\n    return setShowErr(false);\n  };\n\n  var handleShowErr = function handleShowErr() {\n    return setShowErr(true);\n  };\n\n  var handleCloseSaveModal = function handleCloseSaveModal() {\n    return setShowSaveModal(false);\n  };\n\n  var handleClosePrintModal = function handleClosePrintModal() {\n    return setShowPrintModal(false);\n  };\n\n  var handleShowSaveModal = function handleShowSaveModal() {\n    return setShowSaveModal(true);\n  };\n\n  var handleShowPrintModal = function handleShowPrintModal() {\n    return setShowPrintModal(true);\n  };\n\n  var handleMachineSelectionModal = function handleMachineSelectionModal() {\n    return setMachineSelectionModal(false);\n  };\n\n  var handleCloseDescModal = function handleCloseDescModal() {\n    return setShowDescModal(false);\n  };\n\n  var handleShowDescModal = function handleShowDescModal() {\n    return setShowDescModal(true);\n  };\n\n  var handleCloseWoModal = function handleCloseWoModal() {\n    return setShowWoModal(false);\n  };\n\n  var handleShowWoModal = function handleShowWoModal() {\n    return setShowWoModal(true);\n  };\n\n  var handleCloseClientModal = function handleCloseClientModal() {\n    return setShowClientModal(false);\n  };\n\n  var handleShowClientModal = function handleShowClientModal() {\n    return setShowClientModal(true);\n  };\n\n  var handleCloseMachineModal = function handleCloseMachineModal() {\n    return setShowMachineModal(false);\n  };\n\n  var handleShowMachineModal = function handleShowMachineModal() {\n    setShowMachineModal(true);\n    setShowClientModal(false);\n  };\n\n  var handleCloseParentModal = function handleCloseParentModal() {\n    return setShowParentModal(false);\n  };\n\n  var handleShowParentModal = function handleShowParentModal() {\n    return setShowParentModal(true);\n  }; // When a client is selected from the client table.\n\n\n  var handleClientInfo = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(clientId) {\n      var db, clientDoc, clientData, machinePromises, machineDocs, machines;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              // Clear any previously selected machine and local loc info for this branch.\n              if (machinePick) {\n                setSelectedMachine(null);\n                setShowLocalLocFrom(false);\n              } else {\n                setSelectedCurrentMachine(null);\n                setShowLocalLocCurrent(false);\n              }\n\n              db = firebase.firestore();\n              _context9.next = 4;\n              return db.collection(\"Client\").doc(clientId).get();\n\n            case 4:\n              clientDoc = _context9.sent;\n\n              if (!clientDoc.exists) {\n                _context9.next = 16;\n                break;\n              }\n\n              clientData = _objectSpread({\n                id: clientDoc.id\n              }, clientDoc.data());\n\n              if (machinePick) {\n                setSelectedClientFrom(clientData);\n              } else {\n                setSelectedClientCurrent(clientData);\n              } // after setting selectedClientFrom/Current:\n\n\n              if (clientData.name === \"SoCalWarehouse\") {\n                if (machinePick) setShowLocalLocFrom(true);else setShowLocalLocCurrent(true);\n              } // Fetch machines for this client:\n\n\n              machinePromises = clientData.machines.map(function (machineRef) {\n                return machineRef.get();\n              });\n              _context9.next = 12;\n              return Promise.all(machinePromises);\n\n            case 12:\n              machineDocs = _context9.sent;\n              machines = machineDocs.map(function (machineDoc) {\n                return _objectSpread({\n                  id: machineDoc.id\n                }, machineDoc.data());\n              });\n              setMachineOptions(machines); // Close the client modal\n\n              handleCloseClientModal();\n\n            case 16:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function handleClientInfo(_x8) {\n      return _ref9.apply(this, arguments);\n    };\n  }(); // Reordering function for dropdowns.\n\n\n  var reorderArray = function reorderArray(arr, selectedValue) {\n    var newArr = arr.filter(function (val) {\n      return val !== selectedValue;\n    });\n    return [selectedValue].concat(_toConsumableArray(newArr));\n  };\n\n  var _useState54 = useState(false),\n      addingNewPn = _useState54[0],\n      setAddingNewPn = _useState54[1];\n\n  var _useState55 = useState(\"\"),\n      newPn = _useState55[0],\n      setNewPn = _useState55[1];\n\n  var _useState56 = useState(false),\n      addingNewSn = _useState56[0],\n      setAddingNewSn = _useState56[1];\n\n  var _useState57 = useState(\"\"),\n      newSn = _useState57[0],\n      setNewSn = _useState57[1];\n\n  var handlePnSelect = function handlePnSelect(e) {\n    var selected = e.target.value;\n    setItems(function (prev) {\n      var updatedPn = Array.isArray(prev.pn) ? _toConsumableArray(prev.pn) : [];\n      updatedPn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: updatedPn\n      });\n    });\n  };\n\n  var handleSnSelect = function handleSnSelect(e) {\n    var selected = e.target.value;\n    setItems(function (prev) {\n      var updatedSn = Array.isArray(prev.sn) ? _toConsumableArray(prev.sn) : [];\n      updatedSn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: updatedSn\n      });\n    });\n  };\n\n  var handleAddNewPn = function handleAddNewPn() {\n    if (newPn.trim() !== \"\") {\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          pn: [].concat(_toConsumableArray(prev.pn), [newPn.trim()])\n        });\n      });\n    }\n\n    setNewPn(\"\");\n    setAddingNewPn(false);\n  };\n\n  var handleAddNewSn = function handleAddNewSn() {\n    if (newSn.trim() !== \"\") {\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          sn: [].concat(_toConsumableArray(prev.sn), [newSn.trim()])\n        });\n      });\n    }\n\n    setNewSn(\"\");\n    setAddingNewSn(false);\n  }; // Generate custom document ID if needed.\n\n\n  var generateCustomID = function generateCustomID() {\n    var randomNum = Math.floor(10000 + Math.random() * 90000);\n    return \"AIS\".concat(randomNum);\n  };\n\n  function shallowClean(obj) {\n    var newObj = {};\n\n    for (var key in obj) {\n      console.log(key, obj[key]);\n\n      if (obj.hasOwnProperty(key)) {\n        newObj[key] = obj[key] === undefined ? \"\" : obj[key];\n      }\n    }\n\n    return newObj;\n  }\n\n  function toSend() {\n    return _toSend.apply(this, arguments);\n  } // Additional state for local warehouse location inputs.\n\n\n  function _toSend() {\n    _toSend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var _fromDetails$section, _fromDetails$section2, _currentDetails$secti, _currentDetails$secti2;\n\n      var db, currentUser, userEmail, machineData, formattedItems, fromDetails, currentDetails, docId, newDocId, machineRef, machineDoc, currentMachineRef, currentMachineDoc, cleanFormattedItems, _machineRef, _machineDoc, _currentMachineRef, _currentMachineDoc, _machineRef2, _machineDoc2, _currentMachineRef2, _currentMachineDoc2;\n\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              db = firebase.firestore();\n              currentUser = firebase.auth().currentUser;\n              userEmail = currentUser ? currentUser.email : \"unknown\"; // Always use the current state values for OEM, modality, and model.\n\n              machineData = _objectSpread(_objectSpread({}, TheMachine || {}), {}, {\n                oem: oem,\n                modality: modality,\n                model: model\n              });\n              formattedItems = _objectSpread(_objectSpread({}, items), {}, {\n                descriptions: descriptions,\n                workOrders: workOrders\n              }); // Remove any unused fields.\n\n              formattedItems.status = items.status || \"\";\n              formattedItems.DOM = DOM; // Date of Manufacture\n\n              formattedItems.localLocFrom = localLocFrom || \"\";\n              formattedItems.localLocCurrent = localLocCurrent || \"\";\n              formattedItems.date = items.date || \"\";\n              formattedItems.arrival_date = items.arrival_date || \"\"; // NEW: Arrival Date\n\n              formattedItems.poNumber = items.poNumber || \"\";\n              formattedItems.trackingNumber = items.trackingNumber || \"\";\n              formattedItems.TheMachine = machineData || {};\n              formattedItems.addedToWebsite = addToWebsite; // NEW: Add the user's email under the field \"user\"\n\n              formattedItems.lastEdited = userEmail; // Clean pn and sn arrays to replace undefined values with an empty string.\n\n              formattedItems.pn = (items.pn || []).map(function (value) {\n                return value === undefined ? \"\" : value;\n              });\n              formattedItems.sn = (items.sn || []).map(function (value) {\n                return value === undefined ? \"\" : value;\n              });\n              fromDetails = buildLocalLocObject(newLocalFrom);\n              currentDetails = buildLocalLocObject(newLocalCurrent);\n              console.log(\"From Details: \" + fromDetails.region + \" \" + ((_fromDetails$section = fromDetails.section) === null || _fromDetails$section === void 0 ? void 0 : _fromDetails$section.letter) + ((_fromDetails$section2 = fromDetails.section) === null || _fromDetails$section2 === void 0 ? void 0 : _fromDetails$section2.number) + \" \" + fromDetails.bin + \" \" + fromDetails.pallet);\n              console.log(\"Current Details: \" + currentDetails.region + \" \" + ((_currentDetails$secti = currentDetails.section) === null || _currentDetails$secti === void 0 ? void 0 : _currentDetails$secti.letter) + ((_currentDetails$secti2 = currentDetails.section) === null || _currentDetails$secti2 === void 0 ? void 0 : _currentDetails$secti2.number) + \" \" + currentDetails.bin + \" \" + currentDetails.pallet);\n\n              if (Object.keys(fromDetails).length) {\n                formattedItems.newLocalFrom = fromDetails;\n                formattedItems.localLocFrom = formatLoc(newLocalFrom) || \"\";\n              } else {\n                // all fields empty — force an empty string and remove any stray map\n                console.log(\"entered empty fromDetails else\");\n                formattedItems.localLocFrom = \"\";\n                formattedItems.newLocalFrom = {};\n              }\n\n              if (Object.keys(currentDetails).length) {\n                formattedItems.newLocalCurrent = currentDetails;\n                formattedItems.localLocCurrent = formatLoc(newLocalCurrent) || \"\";\n              } else {\n                // all fields empty — force an empty string and remove any stray map\n                formattedItems.localLocCurrent = \"\";\n                formattedItems.newLocalCurrent = {};\n              }\n\n              if (selectedMachine && selectedMachine.id) {\n                formattedItems.MachineFrom = db.collection(\"Machine\").doc(selectedMachine.id);\n              }\n\n              if (selectedCurrentMachine && selectedCurrentMachine.id) {\n                formattedItems.MachineCurrent = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              }\n\n              if (selectedParent && selectedParent.id) {\n                formattedItems.Parent = db.collection(\"Test\").doc(selectedParent.id);\n              } // NEW: Set separate client references.\n\n\n              if (selectedClientFrom && selectedClientFrom.id) {\n                formattedItems.ClientFrom = db.collection(\"Client\").doc(selectedClientFrom.id);\n              }\n\n              if (selectedClientCurrent && selectedClientCurrent.id) {\n                formattedItems.ClientCurrent = db.collection(\"Client\").doc(selectedClientCurrent.id);\n              } // Only attach the richer “newLocal” map when the user actually filled something in\n\n\n              if (Object.keys(fromDetails).length) {\n                formattedItems.newLocalFrom = fromDetails;\n              }\n\n              if (Object.keys(currentDetails).length) {\n                formattedItems.newLocalCurrent = currentDetails;\n              }\n\n              docId = id;\n              _context15.prev = 32;\n\n              if (!docId) {\n                _context15.next = 80;\n                break;\n              }\n\n              // Check if a localSN is provided and if it differs from the current docId.\n              newDocId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : docId;\n\n              if (!(docId !== newDocId)) {\n                _context15.next = 59;\n                break;\n              }\n\n              _context15.next = 38;\n              return db.collection(\"Test\").doc(newDocId).set(formattedItems);\n\n            case 38:\n              if (!(selectedMachine && selectedMachine.id)) {\n                _context15.next = 46;\n                break;\n              }\n\n              machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n              _context15.next = 42;\n              return machineRef.get();\n\n            case 42:\n              machineDoc = _context15.sent;\n\n              if (!machineDoc.exists) {\n                _context15.next = 46;\n                break;\n              }\n\n              _context15.next = 46;\n              return machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n\n            case 46:\n              if (!(selectedCurrentMachine && selectedCurrentMachine.id)) {\n                _context15.next = 54;\n                break;\n              }\n\n              currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              _context15.next = 50;\n              return currentMachineRef.get();\n\n            case 50:\n              currentMachineDoc = _context15.sent;\n\n              if (!currentMachineDoc.exists) {\n                _context15.next = 54;\n                break;\n              }\n\n              _context15.next = 54;\n              return currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n\n            case 54:\n              _context15.next = 56;\n              return db.collection(\"Test\").doc(docId)[\"delete\"]();\n\n            case 56:\n              // Set docId to the new document ID.\n              docId = newDocId;\n              _context15.next = 78;\n              break;\n\n            case 59:\n              // Deep-clean the formattedItems to remove any undefined nested values.\n              cleanFormattedItems = shallowClean(formattedItems);\n              _context15.next = 62;\n              return db.collection(\"Test\").doc(docId).update(cleanFormattedItems);\n\n            case 62:\n              if (!(selectedMachine && selectedMachine.id)) {\n                _context15.next = 70;\n                break;\n              }\n\n              _machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n              _context15.next = 66;\n              return _machineRef.get();\n\n            case 66:\n              _machineDoc = _context15.sent;\n\n              if (!_machineDoc.exists) {\n                _context15.next = 70;\n                break;\n              }\n\n              _context15.next = 70;\n              return _machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 70:\n              if (!(selectedCurrentMachine && selectedCurrentMachine.id)) {\n                _context15.next = 78;\n                break;\n              }\n\n              _currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              _context15.next = 74;\n              return _currentMachineRef.get();\n\n            case 74:\n              _currentMachineDoc = _context15.sent;\n\n              if (!_currentMachineDoc.exists) {\n                _context15.next = 78;\n                break;\n              }\n\n              _context15.next = 78;\n              return _currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 78:\n              _context15.next = 99;\n              break;\n\n            case 80:\n              // For a new item, if localSN is provided, use it; otherwise, generate a custom ID.\n              docId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : generateCustomID();\n              _context15.next = 83;\n              return db.collection(\"Test\").doc(docId).set(formattedItems);\n\n            case 83:\n              if (!(selectedMachine && selectedMachine.id)) {\n                _context15.next = 91;\n                break;\n              }\n\n              _machineRef2 = db.collection(\"Machine\").doc(selectedMachine.id);\n              _context15.next = 87;\n              return _machineRef2.get();\n\n            case 87:\n              _machineDoc2 = _context15.sent;\n\n              if (!_machineDoc2.exists) {\n                _context15.next = 91;\n                break;\n              }\n\n              _context15.next = 91;\n              return _machineRef2.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 91:\n              if (!(selectedCurrentMachine && selectedCurrentMachine.id)) {\n                _context15.next = 99;\n                break;\n              }\n\n              _currentMachineRef2 = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n              _context15.next = 95;\n              return _currentMachineRef2.get();\n\n            case 95:\n              _currentMachineDoc2 = _context15.sent;\n\n              if (!_currentMachineDoc2.exists) {\n                _context15.next = 99;\n                break;\n              }\n\n              _context15.next = 99;\n              return _currentMachineRef2.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n\n            case 99:\n              _context15.next = 101;\n              return uploadPhotos(docId);\n\n            case 101:\n              console.log(\"Item saved and associatedParts updated!\"); // Redirect to the new URL using the new document id.\n\n              router.push(\"/NewSearch/item/\".concat(docId)); // Optionally, you can also show a save confirmation modal:\n\n              handleShowSaveModal();\n              _context15.next = 109;\n              break;\n\n            case 106:\n              _context15.prev = 106;\n              _context15.t0 = _context15[\"catch\"](32);\n              console.error(\"Error saving data:\", _context15.t0);\n\n            case 109:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, null, [[32, 106]]);\n    }));\n    return _toSend.apply(this, arguments);\n  }\n\n  var _useState58 = useState(false),\n      showLocalLocFrom = _useState58[0],\n      setShowLocalLocFrom = _useState58[1];\n\n  var _useState59 = useState(false),\n      showLocalLocCurrent = _useState59[0],\n      setShowLocalLocCurrent = _useState59[1]; // When a machine is selected from the modal.\n\n\n  var handleSetSelectedMachine = function handleSetSelectedMachine(machine) {\n    var _machine$name;\n\n    // const condition = (name) => name && name.toLowerCase() === \"interior socal\";\n    var isSocalInterior = ((_machine$name = machine.name) === null || _machine$name === void 0 ? void 0 : _machine$name.toLowerCase()) === \"interior socal\";\n\n    if (machinePick) {\n      var _selectedClientFrom$n3;\n\n      setSelectedMachine({\n        id: machine.id,\n        name: machine.name\n      });\n      setShowLocalLocFrom(isSocalInterior || (selectedClientFrom === null || selectedClientFrom === void 0 ? void 0 : (_selectedClientFrom$n3 = selectedClientFrom.name) === null || _selectedClientFrom$n3 === void 0 ? void 0 : _selectedClientFrom$n3.toLowerCase()) === \"socalwarehouse\");\n    } else {\n      var _selectedClientCurren3;\n\n      setSelectedCurrentMachine({\n        id: machine.id,\n        name: machine.name\n      });\n      setShowLocalLocCurrent(isSocalInterior || (selectedClientCurrent === null || selectedClientCurrent === void 0 ? void 0 : (_selectedClientCurren3 = selectedClientCurrent.name) === null || _selectedClientCurren3 === void 0 ? void 0 : _selectedClientCurren3.toLowerCase()) === \"socalwarehouse\");\n    }\n\n    fetchMachine(machine.id); // Close the machine modal (assuming you're using showMachineModal to control it)\n\n    setShowMachineModal(false);\n  };\n\n  var uploadPhotos = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(docID) {\n      var storageRef, i, photoRef, metadata, url;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              storageRef = firebase.storage().ref();\n              i = 0;\n\n            case 2:\n              if (!(i < photos.length)) {\n                _context10.next = 15;\n                break;\n              }\n\n              if (!photos[i].file) {\n                _context10.next = 12;\n                break;\n              }\n\n              photoRef = storageRef.child(\"Parts/\".concat(docID, \"/\").concat(docID).concat(i === 0 ? \".jpg\" : \".\".concat(i + 1, \".jpg\")));\n              metadata = {\n                contentType: \"image/png\"\n              };\n              _context10.next = 8;\n              return photoRef.put(photos[i].file, metadata);\n\n            case 8:\n              _context10.next = 10;\n              return photoRef.getDownloadURL();\n\n            case 10:\n              url = _context10.sent;\n              photos[i].url = url;\n\n            case 12:\n              i++;\n              _context10.next = 2;\n              break;\n\n            case 15:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function uploadPhotos(_x9) {\n      return _ref10.apply(this, arguments);\n    };\n  }(); // Function to handle printing the label.\n\n\n  var handlePrint = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var clientName, machineDoc, machineData, clientDoc, _clientDoc, payload, response, result;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (items.name) {\n                _context11.next = 3;\n                break;\n              }\n\n              alert(\"Missing name\");\n              return _context11.abrupt(\"return\");\n\n            case 3:\n              clientName = \"\"; // Attempt to fetch client name from the Machine document reference.\n\n              if (!(items.Machine && typeof items.Machine.get === \"function\")) {\n                _context11.next = 23;\n                break;\n              }\n\n              _context11.prev = 5;\n              _context11.next = 8;\n              return items.Machine.get();\n\n            case 8:\n              machineDoc = _context11.sent;\n\n              if (!machineDoc.exists) {\n                _context11.next = 16;\n                break;\n              }\n\n              machineData = machineDoc.data();\n\n              if (!(machineData.client && typeof machineData.client.get === \"function\")) {\n                _context11.next = 16;\n                break;\n              }\n\n              _context11.next = 14;\n              return machineData.client.get();\n\n            case 14:\n              clientDoc = _context11.sent;\n\n              if (clientDoc.exists) {\n                clientName = clientDoc.data().name || \"\";\n              }\n\n            case 16:\n              _context11.next = 21;\n              break;\n\n            case 18:\n              _context11.prev = 18;\n              _context11.t0 = _context11[\"catch\"](5);\n              console.error(\"Error fetching machine or client:\", _context11.t0);\n\n            case 21:\n              _context11.next = 24;\n              break;\n\n            case 23:\n              console.warn(\"No Machine reference available in the item\");\n\n            case 24:\n              console.log(clientName, \":\", items.client); // Fallback: if no client name was found, check items.client.\n\n              if (!(!clientName && items.client)) {\n                _context11.next = 40;\n                break;\n              }\n\n              if (!(typeof items.client.get === \"function\")) {\n                _context11.next = 39;\n                break;\n              }\n\n              _context11.prev = 27;\n              _context11.next = 30;\n              return items.client.get();\n\n            case 30:\n              _clientDoc = _context11.sent;\n\n              if (_clientDoc.exists) {\n                clientName = _clientDoc.data().name || \"\";\n              }\n\n              _context11.next = 37;\n              break;\n\n            case 34:\n              _context11.prev = 34;\n              _context11.t1 = _context11[\"catch\"](27);\n              console.error(\"Error fetching client from items.client:\", _context11.t1);\n\n            case 37:\n              _context11.next = 40;\n              break;\n\n            case 39:\n              clientName = items.client;\n\n            case 40:\n              console.log(\"descriptions:\", descriptions[selectedDesc]);\n              payload = {\n                name: items.name,\n                pn: items.pn,\n                sn: items.sn,\n                wo: workOrders && workOrders.length > 0 ? workOrders[0].workOrder : \"\",\n                client: clientName,\n                status: items.status,\n                local_sn: id,\n                descriptions: [descriptions[selectedDesc] || {\n                  description: \"\",\n                  date: \"\"\n                }],\n                date: items.dateCreated || \"\",\n                DOM: DOM,\n                oem: oem,\n                modality: modality,\n                model: model,\n                poNumber: items.poNumber,\n                arrival_date: items.arrival_date // NEW: Include arrival_date\n\n              };\n              console.log(\"Payload for printing:\", payload);\n              _context11.prev = 43;\n              _context11.next = 46;\n              return fetch(\"https://9d70-174-76-22-138.ngrok-free.app/print-label\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n              });\n\n            case 46:\n              response = _context11.sent;\n              _context11.next = 49;\n              return response.json();\n\n            case 49:\n              result = _context11.sent;\n              console.log(\"Print result:\", result.status);\n\n              if (result.status.includes(\"successfully.\")) {\n                handleShowPrintModal();\n              } else {\n                console.error(\"Error printing label:\", result.error);\n              }\n\n              _context11.next = 57;\n              break;\n\n            case 54:\n              _context11.prev = 54;\n              _context11.t2 = _context11[\"catch\"](43);\n              console.error(\"Error printing label:\", _context11.t2);\n\n            case 57:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[5, 18], [27, 34], [43, 54]]);\n    }));\n\n    return function handlePrint() {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  function handleSubmit(_x10) {\n    return _handleSubmit.apply(this, arguments);\n  } // Handlers for input changes.\n\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(event) {\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              event.preventDefault(); // Only check that the Name field is filled out.\n\n              if (!items.name) {\n                handleShow(); // This shows the \"missing field\" modal.\n              } else {\n                toSend();\n              }\n\n            case 2:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  var handleChange = function handleChange(field) {\n    return function (event) {\n      var value = event.target ? event.target.value : event.value;\n      setItems(function (prevItems) {\n        return _objectSpread(_objectSpread({}, prevItems), {}, _defineProperty({}, field, value));\n      });\n    };\n  };\n\n  var addDescription = function addDescription() {\n    setDescriptions([].concat(_toConsumableArray(descriptions), [{\n      description: \"\",\n      date: \"\"\n    }]));\n  };\n\n  var removeDescription = function removeDescription(index) {\n    setDescriptions(descriptions.filter(function (_, i) {\n      return i !== index;\n    }));\n  };\n\n  var handleDescriptionChange = function handleDescriptionChange(index, field, value) {\n    var newDescriptions = descriptions.map(function (desc, i) {\n      return i === index ? _objectSpread(_objectSpread({}, desc), {}, _defineProperty({}, field, value)) : desc;\n    });\n    setDescriptions(newDescriptions);\n  };\n\n  var addWorkOrder = function addWorkOrder() {\n    setWorkOrders([].concat(_toConsumableArray(workOrders), [{\n      workOrder: \"\",\n      date: \"\"\n    }]));\n  };\n\n  var removeWorkOrder = function removeWorkOrder(index) {\n    setWorkOrders(workOrders.filter(function (_, i) {\n      return i !== index;\n    }));\n  };\n\n  var handleWorkOrderChange = function handleWorkOrderChange(index, field, value) {\n    var newWorkOrders = workOrders.map(function (wo, i) {\n      return i === index ? _objectSpread(_objectSpread({}, wo), {}, _defineProperty({}, field, value)) : wo;\n    });\n    setWorkOrders(newWorkOrders);\n  };\n\n  var listDescriptions = function listDescriptions() {\n    setShowDescModal(true);\n  };\n\n  var selectDescription = function selectDescription(index) {\n    setSelectedDesc(index);\n    setShowDescModal(false);\n  };\n\n  var handleShowCameraModal = function handleShowCameraModal() {\n    setShowCameraModal(true);\n  };\n\n  var handleCloseCameraModal = function handleCloseCameraModal() {\n    setShowCameraModal(false);\n    setCapturedPhoto(null);\n  };\n\n  var handleCapture = function handleCapture(err, result) {\n    if (result) {\n      setCapturedPhoto(result);\n    }\n  };\n\n  var savePhoto = function savePhoto() {\n    setPhotos(function (prevPhotos) {\n      return [].concat(_toConsumableArray(prevPhotos), [{\n        file: capturedPhoto,\n        url: URL.createObjectURL(capturedPhoto)\n      }]);\n    });\n    setCapturedPhoto(null);\n    handleCloseCameraModal();\n  };\n\n  var removePhoto = function removePhoto(index) {\n    setPhotos(photos.filter(function (_, i) {\n      return i !== index;\n    }));\n  };\n\n  var mostRecentWorkOrder = workOrders && workOrders.length > 0 ? workOrders.reduce(function (latest, current) {\n    var latestDate = new Date(latest.date);\n    var currentDate = new Date(current.date);\n    return currentDate > latestDate ? current : latest;\n  }, workOrders[0]) : {};\n\n  var capturePhoto = function capturePhoto() {\n    var video = document.querySelector(\"video\");\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    var context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    canvas.toBlob(function (blob) {\n      setCapturedPhoto(blob);\n    }, \"image/png\");\n  };\n\n  var handleShowInfoModal = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var db, doc, data;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              db = firebase.firestore();\n              _context12.prev = 1;\n              _context12.next = 4;\n              return db.collection(\"Test\").doc(id).get();\n\n            case 4:\n              doc = _context12.sent;\n\n              if (doc.exists) {\n                data = doc.data();\n                setItemName(data.name || \"N/A\");\n                setShowInfoModal(true);\n              } else {\n                console.error(\"Item not found\");\n              }\n\n              _context12.next = 11;\n              break;\n\n            case 8:\n              _context12.prev = 8;\n              _context12.t0 = _context12[\"catch\"](1);\n              console.error(\"Error fetching item info:\", _context12.t0);\n\n            case 11:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 8]]);\n    }));\n\n    return function handleShowInfoModal() {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var handleCloseInfoModal = function handleCloseInfoModal() {\n    return setShowInfoModal(false);\n  };\n\n  var handlePnChange = function handlePnChange(index, value) {\n    setItems(function (prev) {\n      var newPn = _toConsumableArray(prev.pn);\n\n      newPn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: newPn\n      });\n    });\n  };\n\n  var addPn = function addPn() {\n    setItems(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: [].concat(_toConsumableArray(prev.pn), [\"\"])\n      });\n    });\n  };\n\n  var handleSnChange = function handleSnChange(index, value) {\n    setItems(function (prev) {\n      var newSn = _toConsumableArray(prev.sn);\n\n      newSn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: newSn\n      });\n    });\n  };\n\n  var addSn = function addSn() {\n    setItems(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: [].concat(_toConsumableArray(prev.sn), [\"\"])\n      });\n    });\n  };\n\n  var browseInputRef = useRef(null);\n\n  var handleBrowsePhotos = function handleBrowsePhotos() {\n    if (browseInputRef.current) {\n      browseInputRef.current.click();\n    }\n  };\n\n  var handleFilesSelected = function handleFilesSelected(e) {\n    var files = e.target.files;\n\n    if (files.length) {\n      var newPhotos = [];\n\n      for (var i = 0; i < files.length; i++) {\n        newPhotos.push({\n          file: files[i],\n          url: URL.createObjectURL(files[i])\n        });\n      }\n\n      setPhotos(function (prevPhotos) {\n        return [].concat(_toConsumableArray(prevPhotos), newPhotos);\n      });\n    }\n\n    e.target.value = \"\";\n  };\n\n  var _useState60 = useState(0),\n      currentPnIndex = _useState60[0],\n      setCurrentPnIndex = _useState60[1];\n\n  var _useState61 = useState(false),\n      showDropdown = _useState61[0],\n      setShowDropdown = _useState61[1];\n\n  var _useState62 = useState(0),\n      currentSnIndex = _useState62[0],\n      setCurrentSnIndex = _useState62[1];\n\n  var _useState63 = useState(false),\n      showSnDropdown = _useState63[0],\n      setShowSnDropdown = _useState63[1];\n\n  var handleAddNewClient = function handleAddNewClient() {\n    var randomNum = Math.floor(10000 + Math.random() * 90000);\n    router.push(\"../client/AIS\".concat(randomNum, \"/addClient?from=item&itemId=\").concat(id || \"\"));\n  };\n\n  var handleBluefolderButton = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var _descriptions$selecte2;\n\n      var currentWorkOrder, payload, response, result;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              // Check that the work order field is filled out (using workOrders[0].workOrder as current)\n              currentWorkOrder = workOrders && workOrders.length > 0 ? workOrders[0].workOrder : \"\";\n\n              if (currentWorkOrder) {\n                _context13.next = 4;\n                break;\n              }\n\n              alert(\"Please fill out the work order field before adding to BlueFolder.\");\n              return _context13.abrupt(\"return\");\n\n            case 4:\n              // Build the payload to send to your proxy endpoint.\n              payload = {\n                name: items.name,\n                pn: items.pn[0] || \"\",\n                sn: items.sn[0] || \"\",\n                status: items.status,\n                description: ((_descriptions$selecte2 = descriptions[selectedDesc]) === null || _descriptions$selecte2 === void 0 ? void 0 : _descriptions$selecte2.description) || \"\",\n                workOrder: currentWorkOrder,\n                localsn: items.localSN || \"\"\n              };\n              _context13.prev = 5;\n              _context13.next = 8;\n              return fetch(\"https://9d70-174-76-22-138.ngrok-free.app/bluefolder\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n              });\n\n            case 8:\n              response = _context13.sent;\n              _context13.next = 11;\n              return response.json();\n\n            case 11:\n              result = _context13.sent;\n              alert(\"BlueFolder service item added successfully!\");\n              console.log(\"BlueFolder result:\", result);\n              _context13.next = 20;\n              break;\n\n            case 16:\n              _context13.prev = 16;\n              _context13.t0 = _context13[\"catch\"](5);\n              console.error(\"BlueFolder error:\", _context13.t0);\n              alert(\"Error adding data to BlueFolder.\");\n\n            case 20:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[5, 16]]);\n    }));\n\n    return function handleBluefolderButton() {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(LoggedIn, null, __jsx(\"div\", null, __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, \"Missing field\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showErr,\n    onHide: handleCloseErr\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, Err), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseErr\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showSaveModal,\n    onHide: handleCloseSaveModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Save Confirmation\")), __jsx(Modal.Body, null, \"Data has been saved successfully.\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseSaveModal\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showPrintModal,\n    onHide: handleClosePrintModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Print Confirmation\")), __jsx(Modal.Body, null, \"Info has been sent to print.\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClosePrintModal\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showDescModal,\n    onHide: handleCloseDescModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Descriptions\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addDescription\n  }, \"Add Description\"), descriptions.map(function (desc, index) {\n    return __jsx(Row, {\n      key: index,\n      className: \"mb-3\"\n    }, __jsx(Button, {\n      variant: \"outline-secondary\",\n      className: \"w-100\",\n      onClick: function onClick() {\n        return selectDescription(index);\n      },\n      style: {\n        cursor: \"pointer\"\n      }\n    }, __jsx(\"div\", {\n      className: \"d-flex justify-content-between\"\n    }, __jsx(\"span\", null, desc.description || \"Description\"), __jsx(\"span\", {\n      style: {\n        borderLeft: \"1px solid #ccc\",\n        paddingLeft: \"10px\"\n      }\n    }, desc.date || \"Date\"))));\n  }), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseDescModal\n  }, \"OK\"))), __jsx(Modal, {\n    show: showWoModal,\n    onHide: handleCloseWoModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Work Orders\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addWorkOrder,\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, \"Add Work Order\"), workOrders.map(function (wo, index) {\n    return __jsx(Row, {\n      key: index,\n      className: \"mb-3\"\n    }, __jsx(Col, null, __jsx(Form.Control, {\n      type: \"text\",\n      placeholder: \"Work Order\",\n      value: wo.workOrder,\n      onChange: function onChange(e) {\n        return handleWorkOrderChange(index, \"workOrder\", e.target.value);\n      },\n      style: {\n        marginBottom: \"0.5rem\"\n      }\n    })), __jsx(Col, null, __jsx(Form.Control, {\n      type: \"date\",\n      placeholder: \"Date\",\n      value: wo.date,\n      onChange: function onChange(e) {\n        return handleWorkOrderChange(index, \"date\", e.target.value);\n      }\n    })), __jsx(Col, null, __jsx(Button, {\n      variant: \"danger\",\n      onClick: function onClick() {\n        return removeWorkOrder(index);\n      }\n    }, \"Remove\")));\n  }), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseWoModal\n  }, \"OK\"))), __jsx(ClientInfoModal, {\n    show: showMachineModal,\n    handleClose: handleCloseMachineModal,\n    selectedClient: selectedClient,\n    machineOptions: machineOptions,\n    setSelectedMachine: handleSetSelectedMachine\n  }), __jsx(Modal, {\n    show: showClientModal,\n    onHide: handleCloseClientModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Client\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: search,\n    onChange: function onChange(e) {\n      return setSearch(e.target.value);\n    }\n  }), __jsx(ClientTable, {\n    clients: clients.filter(function (client) {\n      return (client.name || \"\").toLowerCase().includes(search.toLowerCase());\n    }),\n    onSelectClient: handleClientInfo,\n    onInfoClick: handleClientInfo,\n    clearSelection: function clearSelection() {\n      return handleClientInfo(null);\n    },\n    onAddClient: handleAddNewClient\n  }))), __jsx(ParentModal, {\n    show: showParentModal,\n    handleClose: handleCloseParentModal,\n    setSelectedParent: setSelectedParent\n  }), __jsx(MachineSelectionModal, {\n    show: machineSelectionModal,\n    handleClose: function handleClose() {\n      return setMachineSelectionModal(false);\n    },\n    setMachine: setTheMachine\n  }), __jsx(Modal, {\n    show: showCameraModal,\n    onHide: handleCloseCameraModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Take a Photo\")), __jsx(Modal.Body, null, __jsx(\"div\", {\n    className: \"camera\"\n  }, !capturedPhoto && __jsx(BarcodeScannerComponent, {\n    width: \"100%\",\n    height: 300,\n    onUpdate: handleCapture,\n    facingMode: cameraFacing\n  }), capturedPhoto && __jsx(\"div\", {\n    className: \"photo-preview\"\n  }, __jsx(\"img\", {\n    src: URL.createObjectURL(capturedPhoto),\n    alt: \"captured\",\n    style: {\n      width: \"100%\"\n    }\n  })))), __jsx(Modal.Footer, null, !capturedPhoto ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: capturePhoto,\n    style: {\n      borderRadius: \"50%\",\n      width: \"60px\",\n      height: \"60px\",\n      position: \"absolute\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      bottom: \"10px\"\n    }\n  }, \"\\uD83D\\uDCF7\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setCameraFacing(function (prev) {\n        return prev === \"environment\" ? \"user\" : \"environment\";\n      });\n    }\n  }, \"Flip Camera\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseCameraModal\n  }, \"Cancel\")) : __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: function onClick() {\n      return setCapturedPhoto(null);\n    }\n  }, \"Retake\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: savePhoto\n  }, \"OK\")))), __jsx(InfoModal, {\n    show: showInfoModal,\n    handleClose: handleCloseInfoModal,\n    itemName: items.name,\n    dimensions: items.length + \",\" + items.width + \",\" + items.height,\n    price: items.price,\n    freqI: freqItem,\n    freqM: machineFrequency,\n    usage: usagePastYear\n  }), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"600px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Item\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"name\"\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items.name,\n    onChange: handleChange(\"name\")\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"pn\"\n  }, __jsx(Form.Label, null, \"Product Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.pn[currentPnIndex] || \"\",\n    onChange: function onChange(e) {\n      return handlePnChange(currentPnIndex, e.target.value);\n    }\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowDropdown(!showDropdown);\n    }\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setAddingNewPn(true);\n    }\n  }, \"+\"))), showDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, pnOptions.map(function (pnOption, idx) {\n    return __jsx(\"div\", {\n      key: idx,\n      style: {\n        padding: \"8px\",\n        cursor: \"pointer\"\n      },\n      onClick: function onClick() {\n        setCurrentPnIndex(idx);\n        setShowDropdown(false);\n      }\n    }, pnOption);\n  }))), addingNewPn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new PN\",\n    value: newPn,\n    onChange: function onChange(e) {\n      return setNewPn(e.target.value);\n    },\n    onBlur: handleAddNewPn,\n    onKeyDown: function onKeyDown(e) {\n      return e.key === \"Enter\" && handleAddNewPn();\n    }\n  })))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"sn\"\n  }, __jsx(Form.Label, null, \"Serial Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.sn[currentSnIndex] || \"\",\n    onChange: function onChange(e) {\n      return handleSnChange(currentSnIndex, e.target.value);\n    }\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowSnDropdown(!showSnDropdown);\n    }\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setAddingNewSn(true);\n    }\n  }, \"+\"))), showSnDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, snOptions.map(function (snOption, idx) {\n    return __jsx(\"div\", {\n      key: idx,\n      style: {\n        padding: \"8px\",\n        cursor: \"pointer\"\n      },\n      onClick: function onClick() {\n        setCurrentSnIndex(idx);\n        setShowSnDropdown(false);\n      }\n    }, snOption);\n  }))), addingNewSn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new SN\",\n    value: newSn,\n    onChange: function onChange(e) {\n      return setNewSn(e.target.value);\n    },\n    onBlur: handleAddNewSn,\n    onKeyDown: function onKeyDown(e) {\n      return e.key === \"Enter\" && handleAddNewSn();\n    }\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"status\"\n  }, __jsx(Form.Label, null, \"Status\"), __jsx(Form.Select, {\n    value: items.status || \"\",\n    onChange: handleChange(\"status\")\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select status\"), __jsx(\"option\", {\n    value: \"Good\"\n  }, \"Good\"), __jsx(\"option\", {\n    value: \"Bad\"\n  }, \"Bad\"), __jsx(\"option\", {\n    value: \"Unknown\"\n  }, \"Unknown\"))))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Label, null, \"OEM\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"OEM\",\n    value: oem,\n    onChange: function onChange(e) {\n      return setOem(e.target.value);\n    }\n  })), __jsx(Col, null, __jsx(Form.Label, null, \"Modality\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Modality\",\n    value: modality,\n    onChange: function onChange(e) {\n      return setModality(e.target.value);\n    }\n  })), __jsx(Col, null, __jsx(Form.Label, null, \"Model\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Model\",\n    value: model,\n    onChange: function onChange(e) {\n      return setModel(e.target.value);\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\",\n      marginTop: \"1rem\"\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowWoModal,\n    className: \"me-2\"\n  }, \"Manage Work Orders\"), workOrders.length > 0 && __jsx(\"div\", {\n    className: \"d-flex flex-column align-items-start\"\n  }, __jsx(Form.Label, null, \"Work Order\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Most Recent Work Order\",\n    value: mostRecentWorkOrder.workOrder,\n    onChange: function onChange(e) {\n      return handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"workOrder\", e.target.value);\n    },\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Label, null, \"Date\"), __jsx(Form.Control, {\n    type: \"date\",\n    placeholder: \"Work Order Date\",\n    value: mostRecentWorkOrder.date,\n    onChange: function onChange(e) {\n      return handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"date\", e.target.value);\n    },\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Form.Group, {\n    controlId: \"desc\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: listDescriptions,\n    className: \"mb-2 me-2\"\n  }, \"List Descriptions\"), __jsx(Form.Control, {\n    as: \"textarea\",\n    rows: 3,\n    placeholder: \"Enter description\",\n    value: ((_descriptions$selecte3 = descriptions[selectedDesc]) === null || _descriptions$selecte3 === void 0 ? void 0 : _descriptions$selecte3.description) || \"\",\n    onChange: function onChange(e) {\n      return handleDescriptionChange(selectedDesc, \"description\", e.target.value);\n    },\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Control, {\n    type: \"date\",\n    value: ((_descriptions$selecte4 = descriptions[selectedDesc]) === null || _descriptions$selecte4 === void 0 ? void 0 : _descriptions$selecte4.date) || \"\",\n    onChange: function onChange(e) {\n      return handleDescriptionChange(selectedDesc, \"date\", e.target.value);\n    },\n    style: {\n      marginTop: \"0.5rem\",\n      marginBottom: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      setMachinePick(true);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select From\"), selectedClientFrom && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (From):\"), \" \", selectedClientFrom.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowMachineModal(true);\n    }\n  }, \"Select Machine for \", selectedClientFrom.name), selectedMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (From):\"), \" \", selectedMachine.name), showLocalLocFrom && __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowNewLocalModalFrom(true);\n    },\n    className: \"w-100 mb-2\"\n  }, [newLocalFrom.region, ((_newLocalFrom$section = newLocalFrom.section) === null || _newLocalFrom$section === void 0 ? void 0 : _newLocalFrom$section.letter) + ((_newLocalFrom$section2 = newLocalFrom.section) === null || _newLocalFrom$section2 === void 0 ? void 0 : _newLocalFrom$section2.number), newLocalFrom.bin && \"B\".concat(newLocalFrom.bin), newLocalFrom.pallet && \"P\".concat(newLocalFrom.pallet)].filter(Boolean).join(\"-\")), __jsx(Modal, {\n    show: showNewLocalModalFrom,\n    onHide: function onHide() {\n      return setShowNewLocalModalFrom(false);\n    },\n    centered: true\n  }, __jsx(Modal.Header, null, __jsx(Modal.Title, null, \"Edit Local Loc (From)\")), __jsx(Modal.Body, null, __jsx(NewLocal, {\n    selectedClient: selectedClientFrom,\n    showLocalLoc: showNewLocalModalFrom,\n    value: newLocalFrom,\n    onChange: setNewLocalFrom,\n    onSave: function onSave(p) {\n      setNewLocalFrom(p);\n      setShowNewLocalModalFrom(false);\n    },\n    onCancel: function onCancel() {\n      return setShowNewLocalModalFrom(false);\n    }\n  })))))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      setMachinePick(false);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select Current\"), selectedClientCurrent && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (Current):\"), \" \", selectedClientCurrent.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowMachineModal(true);\n    }\n  }, \"Select Machine for \", selectedClientCurrent.name), selectedCurrentMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (Current):\"), \" \", selectedCurrentMachine.name), showLocalLocCurrent && __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: function onClick() {\n      return setShowNewLocalModalCurrent(true);\n    },\n    className: \"w-100 mb-2\"\n  }, [newLocalCurrent.region, ((_newLocalCurrent$sect = newLocalCurrent.section) === null || _newLocalCurrent$sect === void 0 ? void 0 : _newLocalCurrent$sect.letter) + ((_newLocalCurrent$sect2 = newLocalCurrent.section) === null || _newLocalCurrent$sect2 === void 0 ? void 0 : _newLocalCurrent$sect2.number), newLocalCurrent.bin && \"B\".concat(newLocalCurrent.bin), newLocalCurrent.pallet && \"P\".concat(newLocalCurrent.pallet)].filter(Boolean).join(\"-\")), __jsx(Modal, {\n    show: showNewLocalModalCurrent,\n    onHide: function onHide() {\n      return setShowNewLocalModalCurrent(false);\n    },\n    centered: true\n  }, __jsx(Modal.Header, null, __jsx(Modal.Title, null, \"Edit Local Loc (Current)\")), __jsx(Modal.Body, null, __jsx(NewLocal, {\n    selectedClient: selectedClientCurrent,\n    showLocalLoc: showNewLocalModalCurrent,\n    value: newLocalCurrent,\n    onChange: setNewLocalCurrent,\n    onSave: function onSave(p) {\n      setNewLocalCurrent(p);\n      setShowNewLocalModalCurrent(false);\n    },\n    onCancel: function onCancel() {\n      return setShowNewLocalModalCurrent(false);\n    }\n  })))))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowParentModal,\n    className: \"me-2\"\n  }, \"Select Parent\"), selectedParent && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Selected Parent\",\n    value: selectedParent.name,\n    readOnly: true,\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, {\n    xs: 6\n  }, __jsx(ButtonGroup, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowCameraModal\n  }, \"Take Photo\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleBrowsePhotos\n  }, \"Browse\"))), __jsx(Col, {\n    xs: 6,\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: \"success\",\n    onClick: handleSendToInflow,\n    style: {\n      marginLeft: \"auto\"\n    }\n  }, \"Send to inFlow\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleBluefolderButton,\n    style: {\n      marginLeft: \"0.5rem\",\n      marginRight: \".5rem\"\n    }\n  }, \"BlueFolder\"), __jsx(Button, {\n    variant: addToWebsite ? \"primary\" : \"outline-primary\",\n    onClick: function onClick() {\n      return setAddToWebsite(function (prev) {\n        return !prev;\n      });\n    }\n  }, addToWebsite ? \"✓ Add to Website\" : \"Add to Website\"), __jsx(Form.Check, {\n    type: \"checkbox\",\n    id: \"hide-checkbox\",\n    label: \"Hide\" // box is checked when we want visible = false\n    ,\n    checked: !items.visible,\n    onChange: function onChange(e) {\n      // grab checked immediately\n      var isHidden = e.currentTarget.checked;\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          visible: !isHidden\n        });\n      });\n    },\n    className: \"ms-3\"\n  }))), __jsx(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    multiple: true,\n    ref: browseInputRef,\n    style: {\n      display: \"none\"\n    },\n    onChange: handleFilesSelected\n  })), photos && photos.length > 0 && __jsx(\"div\", {\n    className: \"photo-gallery\",\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      gap: \"10px\",\n      marginBottom: \"1rem\"\n    }\n  }, photos.map(function (photo, index) {\n    return __jsx(\"div\", {\n      key: index,\n      style: {\n        position: \"relative\",\n        width: \"100px\",\n        height: \"100px\"\n      }\n    }, __jsx(\"img\", {\n      src: photo.url,\n      alt: \"Photo \".concat(index + 1),\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\"\n      }\n    }), photo.file && __jsx(Button, {\n      variant: \"danger\",\n      size: \"sm\",\n      style: {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        padding: \"0 5px\"\n      },\n      onClick: function onClick() {\n        return removePhoto(index);\n      }\n    }, \"x\"));\n  })), __jsx(\"div\", {\n    className: \"mt-3 d-flex flex-wrap align-items-center\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"Save\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleShowInfoModal,\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"More Info\"), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"NewSearch/mainSearch\"\n  }), __jsx(Button, {\n    variant: \"info\",\n    onClick: handlePrint,\n    style: {\n      marginLeft: \"auto\"\n    }\n  }, \"Print Label\")), __jsx(\"div\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"1rem 0\"\n    }\n  }, __jsx(Button, {\n    variant: \"link\",\n    style: {\n      textDecoration: \"none\",\n      color: \"black\",\n      fontSize: \"24px\"\n    },\n    onClick: function onClick() {\n      return setShowExtra(!showExtra);\n    }\n  }, \"\\u25BC\")), __jsx(Collapse, {\n    \"in\": showExtra\n  }, __jsx(\"div\", {\n    id: \"extra-collapse\",\n    className: \"mt-3\"\n  }, __jsx(Row, null, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"dimensions\"\n  }, __jsx(Form.Label, null, \"Dimensions\"), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  }, __jsx(Form.Control, {\n    placeholder: \"Length\",\n    type: \"text\",\n    value: items.length,\n    onChange: handleChange(\"length\")\n  }), __jsx(\"span\", {\n    style: {\n      padding: \"0 5px\"\n    }\n  }, \"x\"), __jsx(Form.Control, {\n    placeholder: \"Width\",\n    type: \"text\",\n    value: items.width,\n    onChange: handleChange(\"width\")\n  }), __jsx(\"span\", {\n    style: {\n      padding: \"0 5px\"\n    }\n  }, \"x\"), __jsx(Form.Control, {\n    placeholder: \"Height\",\n    type: \"text\",\n    value: items.height,\n    onChange: handleChange(\"height\")\n  }))), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"trackingNumber\"\n  }, __jsx(Form.Label, null, \"Tracking Number\"), __jsx(Form.Control, {\n    placeholder: \"Tracking Number\",\n    type: \"text\",\n    value: items.trackingNumber,\n    onChange: handleChange(\"trackingNumber\")\n  }))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"Price\"\n  }, __jsx(Form.Label, null, \"Price\"), __jsx(Form.Control, {\n    placeholder: \"Price\",\n    type: \"text\",\n    value: items.price,\n    onChange: handleChange(\"price\")\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"DOM\"\n  }, __jsx(Form.Label, null, \"DOM\"), __jsx(Form.Control, {\n    placeholder: \"Date of Manufacture\",\n    type: \"date\",\n    value: DOM,\n    onChange: function onChange(e) {\n      return setDOM(e.target.value);\n    }\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"poNumber\"\n  }, __jsx(Form.Label, null, \"PO Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"PO Number\",\n    value: items.poNumber || \"\",\n    onChange: handleChange(\"poNumber\")\n  }))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"localSN\"\n  }, __jsx(Form.Label, null, \"Local SN\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Local SN\",\n    value: items.localSN || \"\",\n    onChange: handleChange(\"localSN\")\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"arrivalDate\"\n  }, __jsx(Form.Label, null, \"Arrival Date\"), __jsx(Form.Control, {\n    placeholder: \"Enter Arrival Date\",\n    type: \"date\",\n    value: items.arrival_date,\n    onChange: function onChange(e) {\n      var value = e.target.value;\n      setItems(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          arrival_date: value\n        });\n      });\n    }\n  }))))))))))), __jsx(Modal, {\n    show: showCameraModal,\n    onHide: handleCloseCameraModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Take a Photo\")), __jsx(Modal.Body, null, __jsx(\"div\", {\n    className: \"camera\"\n  }, !capturedPhoto ? __jsx(BarcodeScannerComponent, {\n    width: \"100%\",\n    height: 300,\n    onUpdate: handleCapture,\n    facingMode: cameraFacing\n  }) : __jsx(\"div\", {\n    className: \"photo-preview\"\n  }, __jsx(\"img\", {\n    src: URL.createObjectURL(capturedPhoto),\n    alt: \"captured\",\n    style: {\n      width: \"100%\"\n    }\n  })))), __jsx(Modal.Footer, null, !capturedPhoto ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: capturePhoto,\n    style: {\n      borderRadius: \"50%\",\n      width: \"60px\",\n      height: \"60px\",\n      position: \"absolute\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      bottom: \"10px\"\n    }\n  }, \"\\uD83D\\uDCF7\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setCameraFacing(function (prev) {\n        return prev === \"environment\" ? \"user\" : \"environment\";\n      });\n    }\n  }, \"Flip Camera\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseCameraModal\n  }, \"Cancel\")) : __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: function onClick() {\n      return setCapturedPhoto(null);\n    }\n  }, \"Retake\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: savePhoto\n  }, \"OK\")))));\n} // Server-side rendering function","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Container, Alert } from 'react-bootstrap';\nimport { useAuth } from '../context/AuthUserContext';\nimport { useRouter } from 'next/router';\nexport default function Signup() {\n  var emailRef = useRef();\n  var passwordRef = useRef();\n  var passwordConfirmRef = useRef();\n\n  var _useAuth = useAuth(),\n      createUserWithEmailAndPassword = _useAuth.createUserWithEmailAndPassword;\n\n  var _useState = useState(\"\"),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var router = useRouter();\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!(passwordRef.current.value !== passwordConfirmRef.current.value)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setError(\"Passwords do not match\"));\n\n            case 3:\n              try {\n                setError(\"\");\n                setLoading(true);\n                createUserWithEmailAndPassword(emailRef.current.value, passwordRef.current.value).then(function (authUser) {\n                  console.log(\"Success. The user is created in Firebase\");\n                  router.push(\"/dashboard\");\n                })[\"catch\"](function (error) {\n                  // An error occurred. Set error message to be displayed to user\n                  setError(error.message);\n                });\n              } catch (_unused) {\n                setError(\"Failed to create an account\");\n              }\n\n              setLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Sign Up\"), error && __jsx(Alert, {\n    variant: \"danger\"\n  }, error), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Form.Group, {\n    id: \"email\"\n  }, __jsx(Form.Label, null, \"Email\"), __jsx(Form.Control, {\n    type: \"email\",\n    ref: emailRef,\n    required: true\n  })), __jsx(Form.Group, {\n    id: \"password\"\n  }, __jsx(Form.Label, null, \"Password\"), __jsx(Form.Control, {\n    type: \"password\",\n    ref: passwordRef,\n    required: true\n  })), __jsx(Form.Group, {\n    id: \"password-confirm\"\n  }, __jsx(Form.Label, null, \"Password Confirmation\"), __jsx(Form.Control, {\n    type: \"password\",\n    ref: passwordConfirmRef,\n    required: true\n  })), __jsx(Button, {\n    className: \"w-100 mt-3\",\n    type: \"submit\"\n  }, \"Sign Up\")))), __jsx(\"div\", {\n    className: \"w-100 text-center mt-2\"\n  }, \"Already have an account? \", __jsx(Button, {\n    variant: \"link\",\n    href: \"/\"\n  }, \"Login\"))));\n}","map":null,"metadata":{},"sourceType":"module"}
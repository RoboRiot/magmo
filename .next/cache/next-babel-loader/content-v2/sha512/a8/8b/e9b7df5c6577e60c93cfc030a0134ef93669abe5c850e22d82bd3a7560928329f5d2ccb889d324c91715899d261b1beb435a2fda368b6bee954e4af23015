{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// BluefolderService.js\nexport const API_TOKEN = \"9b224624-44db-49dd-9042-c3b15e9a39d4\"; // your token\n\nexport const ITEMS_URL = \"https://app.bluefolder.com/api/2.0/items/add.aspx\";\nexport const MATERIALS_URL = \"https://app.bluefolder.com/api/2.0/serviceRequests/addMaterial.aspx\";\nexport const HEADERS = {\n  \"Content-Type\": \"text/xml\"\n};\nexport async function addServiceItem(serviceRequestId, item) {\n  // Use \"Service Item\" for name and description\n  const uniqueName = \"Service Item\"; // Step 1: Create a new material item in BlueFolder\n\n  const itemPayload = `\n    <request>\n      <itemAdd>\n        <itemType>materials</itemType>\n        <itemName>${uniqueName}</itemName>\n        <description>Service Item</description>\n        <accountName></accountName>\n        <isFlatRate>false</isFlatRate>\n        <mfrDescription></mfrDescription>\n        <mfrItemNo></mfrItemNo>\n        <mfrName>BlueFolderTestManufacturer</mfrName>\n        <notes>Service Item</notes>\n        <taxableDefault>true</taxableDefault>\n        <unitCost>0.00</unitCost>\n        <unitPrice>0.00</unitPrice>\n        <unitListPrice>0.00</unitListPrice>\n      </itemAdd>\n    </request>\n  `;\n  const itemResponse = await fetch(ITEMS_URL, {\n    method: \"POST\",\n    headers: _objectSpread(_objectSpread({}, HEADERS), {}, {\n      Authorization: \"Basic \" + btoa(API_TOKEN + \":x\")\n    }),\n    body: itemPayload\n  });\n  const itemText = await itemResponse.text();\n  const parser = new DOMParser();\n  const itemXml = parser.parseFromString(itemText, \"application/xml\");\n\n  if (itemXml.documentElement.getAttribute(\"status\") !== \"ok\") {\n    throw new Error(\"Failed to create material item in BlueFolder\");\n  }\n\n  const itemIdElem = itemXml.getElementsByTagName(\"itemId\")[0];\n  const itemId = itemIdElem ? itemIdElem.textContent : null; // Step 2: Add the material to the specified work order\n\n  const nowStr = new Date().toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: true\n  });\n  const comment = `Name: ${item.name}\\nPN: ${item.pn}\\nSN: ${item.sn}\\nStatus: ${item.status}\\nDescription: ${item.description}`;\n  const materialPayload = `\n    <request>\n      <serviceRequestAddMaterial>\n        <serviceRequestId>${serviceRequestId}</serviceRequestId>\n        <dateUsed>${nowStr}</dateUsed>\n        <quantity>1</quantity>\n        <billingStatus>billable</billingStatus>\n        <itemNo>${uniqueName}</itemNo>\n        <itemDescription>Service Item</itemDescription>\n        <itemUnitCost>0.00</itemUnitCost>\n        <itemUnitPrice>0.00</itemUnitPrice>\n        <comment>${comment}</comment>\n        <commentIsPublic>false</commentIsPublic>\n        <taxable>true</taxable>\n      </serviceRequestAddMaterial>\n    </request>\n  `;\n  const materialResponse = await fetch(MATERIALS_URL, {\n    method: \"POST\",\n    headers: _objectSpread(_objectSpread({}, HEADERS), {}, {\n      Authorization: \"Basic \" + btoa(API_TOKEN + \":x\")\n    }),\n    body: materialPayload\n  });\n  const materialText = await materialResponse.text();\n  const materialXml = parser.parseFromString(materialText, \"application/xml\");\n\n  if (materialXml.documentElement.getAttribute(\"status\") !== \"ok\") {\n    throw new Error(\"Failed to add material to work order in BlueFolder\");\n  }\n\n  return {\n    itemId,\n    materialResponse: materialText\n  };\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/utils/BluefolderService.js"],"names":["API_TOKEN","ITEMS_URL","MATERIALS_URL","HEADERS","addServiceItem","serviceRequestId","item","uniqueName","itemPayload","itemResponse","fetch","method","headers","Authorization","btoa","body","itemText","text","parser","DOMParser","itemXml","parseFromString","documentElement","getAttribute","Error","itemIdElem","getElementsByTagName","itemId","textContent","nowStr","Date","toLocaleString","year","month","day","hour","minute","hour12","comment","name","pn","sn","status","description","materialPayload","materialResponse","materialText","materialXml"],"mappings":"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","sourcesContent":["// BluefolderService.js\n\nexport const API_TOKEN = \"9b224624-44db-49dd-9042-c3b15e9a39d4\"; // your token\nexport const ITEMS_URL = \"https://app.bluefolder.com/api/2.0/items/add.aspx\";\nexport const MATERIALS_URL = \"https://app.bluefolder.com/api/2.0/serviceRequests/addMaterial.aspx\";\nexport const HEADERS = { \"Content-Type\": \"text/xml\" };\n\nexport async function addServiceItem(serviceRequestId, item) {\n  // Use \"Service Item\" for name and description\n  const uniqueName = \"Service Item\";\n\n  // Step 1: Create a new material item in BlueFolder\n  const itemPayload = `\n    <request>\n      <itemAdd>\n        <itemType>materials</itemType>\n        <itemName>${uniqueName}</itemName>\n        <description>Service Item</description>\n        <accountName></accountName>\n        <isFlatRate>false</isFlatRate>\n        <mfrDescription></mfrDescription>\n        <mfrItemNo></mfrItemNo>\n        <mfrName>BlueFolderTestManufacturer</mfrName>\n        <notes>Service Item</notes>\n        <taxableDefault>true</taxableDefault>\n        <unitCost>0.00</unitCost>\n        <unitPrice>0.00</unitPrice>\n        <unitListPrice>0.00</unitListPrice>\n      </itemAdd>\n    </request>\n  `;\n  \n  const itemResponse = await fetch(ITEMS_URL, {\n    method: \"POST\",\n    headers: { ...HEADERS, Authorization: \"Basic \" + btoa(API_TOKEN + \":x\") },\n    body: itemPayload,\n  });\n  const itemText = await itemResponse.text();\n  const parser = new DOMParser();\n  const itemXml = parser.parseFromString(itemText, \"application/xml\");\n  if (itemXml.documentElement.getAttribute(\"status\") !== \"ok\") {\n    throw new Error(\"Failed to create material item in BlueFolder\");\n  }\n  const itemIdElem = itemXml.getElementsByTagName(\"itemId\")[0];\n  const itemId = itemIdElem ? itemIdElem.textContent : null;\n\n  // Step 2: Add the material to the specified work order\n  const nowStr = new Date().toLocaleString(\"en-US\", { \n    year: \"numeric\", month: \"2-digit\", day: \"2-digit\",\n    hour: \"2-digit\", minute: \"2-digit\", hour12: true \n  });\n  const comment = `Name: ${item.name}\\nPN: ${item.pn}\\nSN: ${item.sn}\\nStatus: ${item.status}\\nDescription: ${item.description}`;\n  const materialPayload = `\n    <request>\n      <serviceRequestAddMaterial>\n        <serviceRequestId>${serviceRequestId}</serviceRequestId>\n        <dateUsed>${nowStr}</dateUsed>\n        <quantity>1</quantity>\n        <billingStatus>billable</billingStatus>\n        <itemNo>${uniqueName}</itemNo>\n        <itemDescription>Service Item</itemDescription>\n        <itemUnitCost>0.00</itemUnitCost>\n        <itemUnitPrice>0.00</itemUnitPrice>\n        <comment>${comment}</comment>\n        <commentIsPublic>false</commentIsPublic>\n        <taxable>true</taxable>\n      </serviceRequestAddMaterial>\n    </request>\n  `;\n  const materialResponse = await fetch(MATERIALS_URL, {\n    method: \"POST\",\n    headers: { ...HEADERS, Authorization: \"Basic \" + btoa(API_TOKEN + \":x\") },\n    body: materialPayload,\n  });\n  const materialText = await materialResponse.text();\n  const materialXml = parser.parseFromString(materialText, \"application/xml\");\n  if (materialXml.documentElement.getAttribute(\"status\") !== \"ok\") {\n    throw new Error(\"Failed to add material to work order in BlueFolder\");\n  }\n  return { itemId, materialResponse: materialText };\n}\n"]},"metadata":{},"sourceType":"module"}
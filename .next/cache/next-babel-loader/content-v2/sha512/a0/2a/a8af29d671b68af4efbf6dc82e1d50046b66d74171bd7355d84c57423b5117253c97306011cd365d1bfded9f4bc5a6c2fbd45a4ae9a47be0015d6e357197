{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\machine\\\\[id]\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Table, Button, Container, Card, Row, Col, Alert } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\"; // Import for SSR\n\nimport { adminDb } from \"../../../../context/FirebaseAdmin\";\n\nconst Machine = () => {\n  const router = useRouter();\n  const {\n    0: selectedMachine,\n    1: setSelectedMachine\n  } = useState(null);\n  const {\n    0: associatedParts,\n    1: setAssociatedParts\n  } = useState([]);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  useEffect(() => {\n    if (router.isReady) {\n      const {\n        machineId\n      } = router.query;\n\n      if (!machineId) {\n        const pathSegments = router.asPath.split(\"/\");\n        const machineIdFromPath = pathSegments[pathSegments.length - 1];\n        console.log(`Machine ID extracted from URL path: ${machineIdFromPath}`);\n        fetchMachineData(machineIdFromPath);\n      } else {\n        console.log(`Machine ID from router query: ${machineId}`);\n        fetchMachineData(machineId);\n      }\n    }\n  }, [router.isReady]);\n\n  const fetchMachineData = async machineId => {\n    try {\n      console.log(`Attempting to fetch machine data for ID: ${machineId}`);\n      const db = firebase.firestore();\n      const machineDoc = await db.collection(\"Machine\").doc(machineId).get();\n\n      if (machineDoc.exists) {\n        const machineData = machineDoc.data();\n        setSelectedMachine(machineData);\n        console.log(\"Machine data:\", machineData); // Fetch associated parts\n\n        if (machineData.associatedParts) {\n          fetchAssociatedParts(machineData.associatedParts);\n        }\n      } else {\n        console.error(\"Machine not found\");\n        setError(\"Machine not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n      setError(\"Error fetching machine data\");\n    }\n  };\n\n  const fetchAssociatedParts = async associatedPartsRefs => {\n    try {\n      const db = firebase.firestore();\n      const partsDocs = await Promise.all(associatedPartsRefs.map(ref => ref.get()));\n      const partsData = await Promise.all(partsDocs.map(async doc => {\n        var _data$ClientFrom;\n\n        if (!doc.exists) {\n          // skip or return an empty object\n          return null;\n        }\n\n        const data = doc.data() || {};\n        let clientName = \"\";\n\n        if ((_data$ClientFrom = data.ClientFrom) !== null && _data$ClientFrom !== void 0 && _data$ClientFrom.get) {\n          const clientDoc = await data.ClientFrom.get();\n          clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n        }\n\n        return _objectSpread(_objectSpread({\n          id: doc.id\n        }, data), {}, {\n          clientName\n        });\n      }));\n      setAssociatedParts(partsData.filter(p => p));\n      console.log(\"Associated parts data:\", partsData);\n    } catch (error) {\n      console.error(\"Error fetching associated parts:\", error);\n      setError(\"Error fetching associated parts\");\n    }\n  };\n\n  const handlePrintMulti = async () => {\n    // Create your payload with the mapped items.\n    // Replace 'associatedParts' with your actual variable containing the list.\n    const payload = {\n      items: associatedParts.map(part => ({\n        name: part.name,\n        arrival_date: part.arrival_date,\n        // Ensure your part has a 'date' field.\n        poNumber: part.poNumber || \"\",\n        OEM: part.TheMachine ? part.TheMachine.oem || \"\" : \"\",\n        modality: part.TheMachine ? part.TheMachine.modality || \"\" : \"\",\n        model: part.TheMachine ? part.TheMachine.model || \"\" : \"\",\n        local_sn: part.id,\n        // Using document id as the local serial number.\n        client: part.clientName || \"\",\n        description: part.description || (part.descriptions && part.descriptions.length > 0 ? part.descriptions[0].description : \"\")\n      })),\n      test_print: true,\n      // Hard-coded here if you want to test printing one item\n      index: 1 // Hard-coded index (1-based)\n\n    };\n\n    try {\n      const response = await fetch(\"https://9d70-174-76-22-138.ngrok-free.app/print_multi\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      console.log(\"Print multi result:\", result.status);\n    } catch (error) {\n      console.error(\"Error printing multiple labels:\", error);\n    }\n  };\n\n  const handleSelectPart = (id, name) => {\n    console.log(`Selected part ID: ${id}, Name: ${name}`);\n    router.push(\"../item/\" + id);\n  };\n\n  const formatDate = input => {\n    let date;\n\n    if (input && input.seconds) {\n      // Handle timestamp object with 'seconds' property\n      date = new Date(input.seconds * 1000);\n    } else if (typeof input === \"string\") {\n      // Handle date string\n      date = new Date(input);\n    } else {\n      return \"N/A\";\n    }\n\n    if (isNaN(date.getTime())) {\n      // Invalid date string\n      return \"Invalid Date\";\n    }\n\n    return date.toLocaleDateString();\n  };\n\n  return __jsx(Container, {\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    className: \"justify-content-md-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, \"Machine Details\")), __jsx(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, error && __jsx(Alert, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }\n  }, error), selectedMachine ? __jsx(React.Fragment, null, __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }, \"Machine: \", selectedMachine.name), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 19\n    }\n  }, \"Model: \", selectedMachine.Model), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 19\n    }\n  }, \"Model: \", selectedMachine.Modality), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 19\n    }\n  }, \"Model: \", selectedMachine.OEM), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"Last PM: \", formatDate(selectedMachine.lastPM)), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }\n  }, \"Next PM: \", formatDate(selectedMachine.nextPM)), __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }, \"Associated Parts\"), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 23\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 25\n    }\n  }, \"Name\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, \"ID\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }, \"Part Number\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, \"Serial Number\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, \"Select\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, associatedParts.map(part => __jsx(\"tr\", {\n    key: part.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 27\n    }\n  }, part.name), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 27\n    }\n  }, part.id), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 27\n    }\n  }, part.pn), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 27\n    }\n  }, part.sn), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 27\n    }\n  }, part.date), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 27\n    }\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: () => handleSelectPart(part.id, part.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 29\n    }\n  }, \"Select\")))), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 23\n    }\n  }, __jsx(\"td\", {\n    colSpan: \"5\",\n    style: {\n      textAlign: \"center\",\n      paddingTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handlePrintMulti,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 27\n    }\n  }, \"Print All Items\"))), __jsx(Button, {\n    variant: \"primary\",\n    style: {\n      marginTop: \"20px\"\n    },\n    onClick: () => router.back(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 23\n    }\n  }, \"back\")))) : !error && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 27\n    }\n  }, \"Loading machine data...\"))))));\n};\n\nexport default Machine; // Server-side rendering function\n\nexport async function getServerSideProps(context) {\n  const {\n    id\n  } = context.params;\n\n  try {\n    // Fetch machine data from Firestore using Admin SDK\n    const machineDoc = await adminDb.collection(\"Machine\").doc(id).get();\n\n    if (!machineDoc.exists) {\n      return {\n        notFound: true // This will show a 404 page\n\n      };\n    }\n\n    const machineData = machineDoc.data(); // Fetch associated parts if they exist\n\n    let associatedParts = [];\n\n    if (machineData.associatedParts && Array.isArray(machineData.associatedParts)) {\n      try {\n        const partsPromises = machineData.associatedParts.map(partRef => {\n          if (partRef.path) {\n            return adminDb.doc(partRef.path).get();\n          }\n\n          return null;\n        }).filter(Boolean);\n        const partsDocs = await Promise.all(partsPromises);\n        associatedParts = await Promise.all(partsDocs.map(async doc => {\n          if (!doc.exists) {\n            return null;\n          }\n\n          const data = doc.data() || {};\n          let clientName = \"\"; // Fetch client name if ClientFrom reference exists\n\n          if (data.ClientFrom && data.ClientFrom.path) {\n            try {\n              const clientDoc = await adminDb.doc(data.ClientFrom.path).get();\n              clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n            } catch (error) {\n              console.error(\"Error fetching client data:\", error);\n            }\n          }\n\n          return _objectSpread(_objectSpread({\n            id: doc.id\n          }, data), {}, {\n            clientName\n          });\n        })); // Filter out null values\n\n        associatedParts = associatedParts.filter(part => part !== null);\n      } catch (error) {\n        console.error(\"Error fetching associated parts:\", error);\n      }\n    } // Serialize the machine data, removing any non-serializable fields\n\n\n    const serializedMachine = {\n      id,\n      name: machineData.name || \"\",\n      Model: machineData.Model || \"\",\n      OEM: machineData.OEM || \"\",\n      Modality: machineData.Modality || \"\",\n      lastPM: machineData.lastPM || null,\n      nextPM: machineData.nextPM || null // Add other machine fields as needed, but ensure they're serializable\n\n    };\n    return {\n      props: {\n        initialMachine: serializedMachine,\n        initialAssociatedParts: associatedParts\n      }\n    };\n  } catch (error) {\n    console.error(\"Error in getServerSideProps:\", error);\n    return {\n      props: {\n        error: \"Failed to load machine data\"\n      }\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/machine/[id]/index.js"],"names":["React","useEffect","useState","useRouter","Table","Button","Container","Card","Row","Col","Alert","firebase","adminDb","Machine","router","selectedMachine","setSelectedMachine","associatedParts","setAssociatedParts","error","setError","isReady","machineId","query","pathSegments","asPath","split","machineIdFromPath","length","console","log","fetchMachineData","db","firestore","machineDoc","collection","doc","get","exists","machineData","data","fetchAssociatedParts","associatedPartsRefs","partsDocs","Promise","all","map","ref","partsData","clientName","ClientFrom","clientDoc","name","id","filter","p","handlePrintMulti","payload","items","part","arrival_date","poNumber","OEM","TheMachine","oem","modality","model","local_sn","client","description","descriptions","test_print","index","response","fetch","method","headers","body","JSON","stringify","result","json","status","handleSelectPart","push","formatDate","input","date","seconds","Date","isNaN","getTime","toLocaleDateString","Model","Modality","lastPM","nextPM","pn","sn","textAlign","paddingTop","marginTop","back","getServerSideProps","context","params","notFound","Array","isArray","partsPromises","partRef","path","Boolean","serializedMachine","props","initialMachine","initialAssociatedParts"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport {\n  Table,\n  Button,\n  Container,\n  Card,\n  Row,\n  Col,\n  Alert,\n} from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\n\n// Import for SSR\nimport { adminDb } from \"../../../../context/FirebaseAdmin\";\n\nconst Machine = () => {\n  const router = useRouter();\n  const [selectedMachine, setSelectedMachine] = useState(null);\n  const [associatedParts, setAssociatedParts] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (router.isReady) {\n      const { machineId } = router.query;\n      if (!machineId) {\n        const pathSegments = router.asPath.split(\"/\");\n        const machineIdFromPath = pathSegments[pathSegments.length - 1];\n        console.log(`Machine ID extracted from URL path: ${machineIdFromPath}`);\n        fetchMachineData(machineIdFromPath);\n      } else {\n        console.log(`Machine ID from router query: ${machineId}`);\n        fetchMachineData(machineId);\n      }\n    }\n  }, [router.isReady]);\n\n  const fetchMachineData = async (machineId) => {\n    try {\n      console.log(`Attempting to fetch machine data for ID: ${machineId}`);\n      const db = firebase.firestore();\n      const machineDoc = await db.collection(\"Machine\").doc(machineId).get();\n      if (machineDoc.exists) {\n        const machineData = machineDoc.data();\n        setSelectedMachine(machineData);\n        console.log(\"Machine data:\", machineData);\n\n        // Fetch associated parts\n        if (machineData.associatedParts) {\n          fetchAssociatedParts(machineData.associatedParts);\n        }\n      } else {\n        console.error(\"Machine not found\");\n        setError(\"Machine not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n      setError(\"Error fetching machine data\");\n    }\n  };\n\n  const fetchAssociatedParts = async (associatedPartsRefs) => {\n    try {\n      const db = firebase.firestore();\n      const partsDocs = await Promise.all(\n        associatedPartsRefs.map((ref) => ref.get())\n      );\n\n      const partsData = await Promise.all(\n        partsDocs.map(async (doc) => {\n          if (!doc.exists) {\n            // skip or return an empty object\n            return null;\n          }\n          const data = doc.data() || {};\n          let clientName = \"\";\n          if (data.ClientFrom?.get) {\n            const clientDoc = await data.ClientFrom.get();\n            clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n          }\n          return { id: doc.id, ...data, clientName };\n        })\n      );\n\n      setAssociatedParts(partsData.filter((p) => p));\n      console.log(\"Associated parts data:\", partsData);\n    } catch (error) {\n      console.error(\"Error fetching associated parts:\", error);\n      setError(\"Error fetching associated parts\");\n    }\n  };\n\n  const handlePrintMulti = async () => {\n    // Create your payload with the mapped items.\n    // Replace 'associatedParts' with your actual variable containing the list.\n    const payload = {\n      items: associatedParts.map((part) => ({\n        name: part.name,\n        arrival_date: part.arrival_date, // Ensure your part has a 'date' field.\n        poNumber: part.poNumber || \"\",\n        OEM: part.TheMachine ? part.TheMachine.oem || \"\" : \"\",\n        modality: part.TheMachine ? part.TheMachine.modality || \"\" : \"\",\n        model: part.TheMachine ? part.TheMachine.model || \"\" : \"\",\n        local_sn: part.id, // Using document id as the local serial number.\n        client: part.clientName || \"\",\n        description:\n          part.description ||\n          (part.descriptions && part.descriptions.length > 0\n            ? part.descriptions[0].description\n            : \"\"),\n      })),\n      test_print: true, // Hard-coded here if you want to test printing one item\n      index: 1, // Hard-coded index (1-based)\n    };\n\n    try {\n      const response = await fetch(\n        \"https://9d70-174-76-22-138.ngrok-free.app/print_multi\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(payload),\n        }\n      );\n      const result = await response.json();\n      console.log(\"Print multi result:\", result.status);\n    } catch (error) {\n      console.error(\"Error printing multiple labels:\", error);\n    }\n  };\n\n  const handleSelectPart = (id, name) => {\n    console.log(`Selected part ID: ${id}, Name: ${name}`);\n    router.push(\"../item/\" + id);\n  };\n\n  const formatDate = (input) => {\n    let date;\n\n    if (input && input.seconds) {\n      // Handle timestamp object with 'seconds' property\n      date = new Date(input.seconds * 1000);\n    } else if (typeof input === \"string\") {\n      // Handle date string\n      date = new Date(input);\n    } else {\n      return \"N/A\";\n    }\n\n    if (isNaN(date.getTime())) {\n      // Invalid date string\n      return \"Invalid Date\";\n    }\n\n    return date.toLocaleDateString();\n  };\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">\n          <Card>\n            <Card.Header>\n              <h4>Machine Details</h4>\n            </Card.Header>\n            <Card.Body>\n              {error && <Alert variant=\"danger\">{error}</Alert>}\n              {selectedMachine ? (\n                <>\n                  <h5>Machine: {selectedMachine.name}</h5>\n                  <p>Model: {selectedMachine.Model}</p>\n                  <p>Model: {selectedMachine.Modality}</p>\n                  <p>Model: {selectedMachine.OEM}</p>\n                  <p>Last PM: {formatDate(selectedMachine.lastPM)}</p>\n                  <p>Next PM: {formatDate(selectedMachine.nextPM)}</p>\n                  <h5>Associated Parts</h5>\n                  <Table striped bordered hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>ID</th>\n                        <th>Part Number</th>\n                        <th>Serial Number</th>\n                        <th>Date</th>\n                        <th>Select</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {associatedParts.map((part) => (\n                        <tr key={part.id}>\n                          <td>{part.name}</td>\n                          <td>{part.id}</td>\n                          <td>{part.pn}</td>\n                          <td>{part.sn}</td>\n                          <td>{part.date}</td>\n                          <td>\n                            <Button\n                              variant=\"primary\"\n                              onClick={() =>\n                                handleSelectPart(part.id, part.name)\n                              }\n                            >\n                              Select\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                      <tr>\n                        <td\n                          colSpan=\"5\"\n                          style={{ textAlign: \"center\", paddingTop: \"20px\" }}\n                        >\n                          <Button\n                            variant=\"secondary\"\n                            onClick={handlePrintMulti}\n                          >\n                            Print All Items\n                          </Button>\n                        </td>\n                      </tr>\n                      {/* <Col md={4}> */}\n                      <Button\n                        variant=\"primary\"\n                        style={{ marginTop: \"20px\" }}\n                        onClick={() => router.back()}\n                      >\n                        back\n                      </Button>\n                      {/* </Col> */}\n                    </tbody>\n                  </Table>\n                </>\n              ) : (\n                !error && <p>Loading machine data...</p>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Machine;\n\n// Server-side rendering function\nexport async function getServerSideProps(context) {\n  const { id } = context.params;\n\n  try {\n    // Fetch machine data from Firestore using Admin SDK\n    const machineDoc = await adminDb.collection(\"Machine\").doc(id).get();\n\n    if (!machineDoc.exists) {\n      return {\n        notFound: true, // This will show a 404 page\n      };\n    }\n\n    const machineData = machineDoc.data();\n\n    // Fetch associated parts if they exist\n    let associatedParts = [];\n    if (\n      machineData.associatedParts &&\n      Array.isArray(machineData.associatedParts)\n    ) {\n      try {\n        const partsPromises = machineData.associatedParts\n          .map((partRef) => {\n            if (partRef.path) {\n              return adminDb.doc(partRef.path).get();\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        const partsDocs = await Promise.all(partsPromises);\n        associatedParts = await Promise.all(\n          partsDocs.map(async (doc) => {\n            if (!doc.exists) {\n              return null;\n            }\n            const data = doc.data() || {};\n            let clientName = \"\";\n\n            // Fetch client name if ClientFrom reference exists\n            if (data.ClientFrom && data.ClientFrom.path) {\n              try {\n                const clientDoc = await adminDb.doc(data.ClientFrom.path).get();\n                clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n              } catch (error) {\n                console.error(\"Error fetching client data:\", error);\n              }\n            }\n\n            return {\n              id: doc.id,\n              ...data,\n              clientName,\n            };\n          })\n        );\n\n        // Filter out null values\n        associatedParts = associatedParts.filter((part) => part !== null);\n      } catch (error) {\n        console.error(\"Error fetching associated parts:\", error);\n      }\n    }\n\n    // Serialize the machine data, removing any non-serializable fields\n    const serializedMachine = {\n      id,\n      name: machineData.name || \"\",\n      Model: machineData.Model || \"\",\n      OEM: machineData.OEM || \"\",\n      Modality: machineData.Modality || \"\",\n      lastPM: machineData.lastPM || null,\n      nextPM: machineData.nextPM || null,\n      // Add other machine fields as needed, but ensure they're serializable\n    };\n\n    return {\n      props: {\n        initialMachine: serializedMachine,\n        initialAssociatedParts: associatedParts,\n      },\n    };\n  } catch (error) {\n    console.error(\"Error in getServerSideProps:\", error);\n    return {\n      props: {\n        error: \"Failed to load machine data\",\n      },\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
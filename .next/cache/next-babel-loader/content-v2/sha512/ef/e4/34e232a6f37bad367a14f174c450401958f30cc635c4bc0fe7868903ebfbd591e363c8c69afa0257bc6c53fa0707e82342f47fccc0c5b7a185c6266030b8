{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   try {\n//     if (req.method !== \"POST\") {\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//     }\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) {\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//     }\n//     // payload from client\n//     const {\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\n//       title,               // item title (what shows in the primary column)\n//       // keeping minimal per your request: PN/SN only for now\n//       pn, sn,\n//     } = req.body || {};\n//     // list ids from env\n//     const LIST_IDS = {\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\n//     };\n//     const list_id = LIST_IDS[listKey];\n//     if (!list_id) {\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\n//     }\n//     // ---- Slack helpers ----\n//     async function slackJson(method, payload) {\n//       const r = await fetch(`https://slack.com/api/${method}`, {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json; charset=utf-8\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n//       return r.json();\n//     }\n//     const plain = (v) => (v ?? \"\").toString().trim();\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     function toRichText(text) {\n//       const t = plain(text);\n//       return [{\n//         type: \"rich_text\",\n//         elements: [{\n//           type: \"rich_text_section\",\n//           elements: [{ type: \"text\", text: t }],\n//         }],\n//       }];\n//     }\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\n//     async function resolveTitleColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//       if (!probe?.ok) return null;\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\n//       let fallback = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           const key = (f.key || \"\").toLowerCase();\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\n//           if (f.column_id && hasText) {\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\n//             if (!fallback) fallback = f.column_id;\n//           }\n//         }\n//       }\n//       return fallback; // first text-like field if we didn't find a perfect match\n//     }\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\n//     async function resolvePnSnColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\n//       if (!probe?.ok) return null;\n//       let candidate = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           if (!f.column_id) continue;\n//           const key = (f.key || \"\").toLowerCase();\n//           const text = (f.text || \"\").toLowerCase();\n//           const looksPnSn =\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\n//           if (looksPnSn) return f.column_id;\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\n//             candidate = f.column_id;\n//           }\n//         }\n//       }\n//       return candidate;\n//     }\n//     // 1) Resolve columns\n//     const titleColId = await resolveTitleColId(list_id);\n//     if (!titleColId) {\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\n//     }\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\n//     const safeTitle = plain(title) || \"New Item\";\n//     const createBody = {\n//       list_id,\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\n//     };\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 3) (Minimal) update: PN/SN only, per your request\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n//     let updated = null;\n//     let usedPnSnCol = null;\n//     if (pnSnText) {\n//       const pnSnColId = await resolvePnSnColId(list_id);\n//       if (pnSnColId) {\n//         const cells = [{\n//           row_id: created.item.id,\n//           column_id: pnSnColId,\n//           rich_text: toRichText(pnSnText),\n//         }];\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\n//         usedPnSnCol = pnSnColId;\n//         // If update fails, we still return ok:false so you can see the error\n//         if (!updated?.ok) {\n//           return res.status(200).json({\n//             ok: false,\n//             error: updated?.error || \"update_failed\",\n//             mode: \"list\",\n//             list_id,\n//             item_id: created.item.id,\n//             used_title_col: titleColId,\n//             used_pnsn_col: usedPnSnCol,\n//           });\n//         }\n//       }\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id,\n//       item_id: created.item.id,\n//       used_title_col: titleColId,\n//       used_pnsn_col: usedPnSnCol || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  try {\n    var _created, _created2, _created3;\n\n    if (req.method !== \"POST\") {\n      return res.status(405).json({\n        ok: false,\n        error: \"method_not_allowed\"\n      });\n    }\n\n    const token = process.env.SLACK_BOT_TOKEN;\n\n    if (!token) {\n      return res.status(500).json({\n        ok: false,\n        error: \"missing_SLACK_BOT_TOKEN\"\n      });\n    } // From client (see helper below)\n\n\n    const {\n      listKey,\n      // \"shipping\" | \"receiving\" | \"tasks\"\n      title,\n      // string\n      pn,\n      sn,\n      // strings (first PN/SN already selected on client)\n      description,\n      // string (selected description)\n      workOrder,\n      // string (most recent WO)\n      localSN,\n      // string (item ID)\n      photoUrls = [],\n      // array of strings (URLs)\n      shippingDate // string (blank means skip)\n\n    } = req.body || {}; // ────────────────────────────────────────────────────────────────────────────\n    // Per-list config via env (ALL optional except list_id & title_col)\n    // Make sure your .env.local has only the ID values with no comments/spaces.\n    // Example names follow the pattern you've been using already.\n\n    const CFG_MAP = {\n      tasks: {\n        list_id: process.env.SLACK_LIST_TASKS_ID,\n        title_col: process.env.SLACK_LIST_TASKS_TITLE_COL,\n        pnsn_col: process.env.SLACK_LIST_TASKS_PNSN_COL,\n        desc_col: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n        wo_col: process.env.SLACK_LIST_TASKS_WORKORDER_COL,\n        photos_col: process.env.SLACK_LIST_TASKS_PHOTOS_COL,\n        localsn_col: process.env.SLACK_LIST_TASKS_LOCALSN_COL,\n        shipdate_col: process.env.SLACK_LIST_TASKS_SHIPDATE_COL // optional; we’ll skip if shippingDate is blank\n\n      },\n      shipping: {\n        list_id: process.env.SLACK_LIST_SHIPPING_ID,\n        title_col: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\n        pnsn_col: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        desc_col: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        wo_col: process.env.SLACK_LIST_SHIPPING_WORKORDER_COL,\n        photos_col: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,\n        localsn_col: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        shipdate_col: process.env.SLACK_LIST_SHIPPING_SHIPDATE_COL\n      },\n      receiving: {\n        list_id: process.env.SLACK_LIST_RECEIVING_ID,\n        title_col: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\n        pnsn_col: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        desc_col: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        wo_col: process.env.SLACK_LIST_RECEIVING_WORKORDER_COL,\n        photos_col: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,\n        localsn_col: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        shipdate_col: process.env.SLACK_LIST_RECEIVING_SHIPDATE_COL\n      }\n    };\n    const CFG = CFG_MAP[listKey || \"\"];\n\n    if (!(CFG !== null && CFG !== void 0 && CFG.list_id)) {\n      return res.status(400).json({\n        ok: false,\n        error: `unknown_listKey_${listKey}`\n      });\n    }\n\n    if (!CFG.title_col) {\n      return res.status(400).json({\n        ok: false,\n        error: \"missing_title_column_in_env\",\n        fix: `Set SLACK_LIST_${(listKey || \"\").toUpperCase()}_TITLE_COL in .env.local`\n      });\n    } // ────────────────────────────────────────────────────────────────────────────\n    // Helpers\n\n\n    async function slackJson(method, payload) {\n      const r = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return r.json();\n    }\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const first = x => Array.isArray(x) ? x.find(Boolean) || \"\" : plain(x);\n\n    const toRichText = text => [{\n      type: \"rich_text\",\n      elements: [{\n        type: \"rich_text_section\",\n        elements: [{\n          type: \"text\",\n          text: plain(text)\n        }]\n      }]\n    }]; // Try updating a single column, gracefully falling back to text if needed\n\n\n    async function updateOneCell(row_id, column_id, value) {\n      var _r, _r2;\n\n      if (!row_id || !column_id) return {\n        ok: true,\n        skipped: true\n      };\n      const val = plain(value);\n      if (!val && val !== \"\") return {\n        ok: true,\n        skipped: true\n      }; // nothing\n      // prefer rich_text\n\n      let r = await slackJson(\"slackLists.items.update\", {\n        list_id: CFG.list_id,\n        cells: [{\n          row_id,\n          column_id,\n          rich_text: toRichText(val)\n        }]\n      });\n      if ((_r = r) !== null && _r !== void 0 && _r.ok) return r; // fallback to plain text if Slack complains about types\n\n      if (((_r2 = r) === null || _r2 === void 0 ? void 0 : _r2.error) === \"invalid_arguments\") {\n        r = await slackJson(\"slackLists.items.update\", {\n          list_id: CFG.list_id,\n          cells: [{\n            row_id,\n            column_id,\n            text: val\n          }]\n        });\n      }\n\n      return r;\n    } // ────────────────────────────────────────────────────────────────────────────\n    // 1) Create the item with Title set (rich_text → text fallback)\n\n\n    const safeTitle = plain(title) || \"New Item\";\n    let created = await slackJson(\"slackLists.items.create\", {\n      list_id: CFG.list_id,\n      initial_fields: [{\n        column_id: CFG.title_col,\n        rich_text: toRichText(safeTitle)\n      }]\n    });\n\n    if (!((_created = created) !== null && _created !== void 0 && _created.ok) && ((_created2 = created) === null || _created2 === void 0 ? void 0 : _created2.error) === \"invalid_arguments\") {\n      created = await slackJson(\"slackLists.items.create\", {\n        list_id: CFG.list_id,\n        initial_fields: [{\n          column_id: CFG.title_col,\n          text: safeTitle\n        }]\n      });\n    }\n\n    if (!((_created3 = created) !== null && _created3 !== void 0 && _created3.ok)) {\n      var _created4;\n\n      return res.status(200).json({\n        ok: false,\n        error: ((_created4 = created) === null || _created4 === void 0 ? void 0 : _created4.error) || \"create_failed\",\n        mode: \"list\",\n        list_id: CFG.list_id,\n        title_col: CFG.title_col,\n        sent_title: safeTitle\n      });\n    }\n\n    const rowId = created.item.id; // ────────────────────────────────────────────────────────────────────────────\n    // 2) Update other fields one by one (each with its own fallback)\n\n    const pn0 = first(pn);\n    const sn0 = first(sn);\n    const pnPart = pn0 ? `PN: ${pn0}` : \"\";\n    const snPart = sn0 ? `SN: ${sn0}` : \"\";\n    const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \"); // PN/SN\n\n    if (pnSnText && CFG.pnsn_col) {\n      const r = await updateOneCell(rowId, CFG.pnsn_col, pnSnText);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_pnsn\",\n          list_id: CFG.list_id,\n          item_id: rowId,\n          used_pnsn_col: CFG.pnsn_col\n        });\n      }\n    } // Description\n\n\n    if (CFG.desc_col && plain(description)) {\n      const r = await updateOneCell(rowId, CFG.desc_col, description);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_description\",\n          list_id: CFG.list_id,\n          item_id: rowId,\n          used_description_col: CFG.desc_col\n        });\n      }\n    } // Work Order\n\n\n    if (CFG.wo_col && plain(workOrder)) {\n      const r = await updateOneCell(rowId, CFG.wo_col, workOrder);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_workorder\",\n          list_id: CFG.list_id,\n          item_id: rowId,\n          used_workorder_col: CFG.wo_col\n        });\n      }\n    } // Photos (join all URLs, one per line)\n\n\n    if (CFG.photos_col && Array.isArray(photoUrls) && photoUrls.length) {\n      const photosText = photoUrls.map(plain).filter(Boolean).join(\"\\n\");\n\n      if (photosText) {\n        const r = await updateOneCell(rowId, CFG.photos_col, photosText);\n\n        if (!(r !== null && r !== void 0 && r.ok)) {\n          return res.status(200).json({\n            ok: false,\n            error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_photos\",\n            list_id: CFG.list_id,\n            item_id: rowId,\n            used_photos_col: CFG.photos_col\n          });\n        }\n      }\n    } // localSN (ID)\n\n\n    if (CFG.localsn_col && plain(localSN)) {\n      const r = await updateOneCell(rowId, CFG.localsn_col, localSN);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_localsn\",\n          list_id: CFG.list_id,\n          item_id: rowId,\n          used_localsn_col: CFG.localsn_col\n        });\n      }\n    } // Shipping Date: you asked to leave it blank — so we ONLY update if non-empty\n\n\n    if (CFG.shipdate_col && plain(shippingDate)) {\n      const r = await updateOneCell(rowId, CFG.shipdate_col, shippingDate);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_shipdate\",\n          list_id: CFG.list_id,\n          item_id: rowId,\n          used_shipdate_col: CFG.shipdate_col\n        });\n      }\n    } // Done\n\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: CFG.list_id,\n      item_id: rowId,\n      sent_title: safeTitle,\n      used_cols: {\n        title_col: CFG.title_col,\n        pnsn_col: CFG.pnsn_col || null,\n        desc_col: CFG.desc_col || null,\n        wo_col: CFG.wo_col || null,\n        photos_col: CFG.photos_col || null,\n        localsn_col: CFG.localsn_col || null,\n        shipdate_col: CFG.shipdate_col || null\n      }\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n    return res.status(500).json({\n      ok: false,\n      error: \"exception\",\n      message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","pn","sn","description","workOrder","localSN","photoUrls","shippingDate","body","CFG_MAP","tasks","list_id","SLACK_LIST_TASKS_ID","title_col","SLACK_LIST_TASKS_TITLE_COL","pnsn_col","SLACK_LIST_TASKS_PNSN_COL","desc_col","SLACK_LIST_TASKS_DESCRIPTION_COL","wo_col","SLACK_LIST_TASKS_WORKORDER_COL","photos_col","SLACK_LIST_TASKS_PHOTOS_COL","localsn_col","SLACK_LIST_TASKS_LOCALSN_COL","shipdate_col","SLACK_LIST_TASKS_SHIPDATE_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_TITLE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_WORKORDER_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_SHIPDATE_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_PNSN_COL","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_WORKORDER_COL","SLACK_LIST_RECEIVING_PHOTOS_COL","SLACK_LIST_RECEIVING_LOCALSN_COL","SLACK_LIST_RECEIVING_SHIPDATE_COL","CFG","fix","toUpperCase","slackJson","payload","r","fetch","headers","Authorization","JSON","stringify","plain","v","toString","trim","first","x","Array","isArray","find","Boolean","toRichText","text","type","elements","updateOneCell","row_id","column_id","value","skipped","val","cells","rich_text","safeTitle","created","initial_fields","mode","sent_title","rowId","item","id","pn0","sn0","pnPart","snPart","pnSnText","filter","join","item_id","used_pnsn_col","used_description_col","used_workorder_col","length","photosText","map","used_photos_col","used_localsn_col","used_shipdate_col","used_cols","err","console","message","String"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,eAAe,eAAeA,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAI;AAAA;;AACF,QAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,aAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE,KAAN;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAArB,CAAP;AACD;;AAED,UAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAA1B;;AACA,QAAI,CAACH,KAAL,EAAY;AACV,aAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE,KAAN;AAAaC,QAAAA,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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   try {\r\n//     if (req.method !== \"POST\") {\r\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//     }\r\n\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) {\r\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//     }\r\n\r\n//     // payload from client\r\n//     const {\r\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\r\n//       title,               // item title (what shows in the primary column)\r\n//       // keeping minimal per your request: PN/SN only for now\r\n//       pn, sn,\r\n//     } = req.body || {};\r\n\r\n//     // list ids from env\r\n//     const LIST_IDS = {\r\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\r\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\r\n//     };\r\n\r\n//     const list_id = LIST_IDS[listKey];\r\n//     if (!list_id) {\r\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n//     }\r\n\r\n//     // ---- Slack helpers ----\r\n//     async function slackJson(method, payload) {\r\n//       const r = await fetch(`https://slack.com/api/${method}`, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json; charset=utf-8\",\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       return r.json();\r\n//     }\r\n\r\n//     const plain = (v) => (v ?? \"\").toString().trim();\r\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     function toRichText(text) {\r\n//       const t = plain(text);\r\n//       return [{\r\n//         type: \"rich_text\",\r\n//         elements: [{\r\n//           type: \"rich_text_section\",\r\n//           elements: [{ type: \"text\", text: t }],\r\n//         }],\r\n//       }];\r\n//     }\r\n\r\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\r\n//     async function resolveTitleColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\r\n//       let fallback = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\r\n//           if (f.column_id && hasText) {\r\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\r\n//             if (!fallback) fallback = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return fallback; // first text-like field if we didn't find a perfect match\r\n//     }\r\n\r\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\r\n//     async function resolvePnSnColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       let candidate = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           if (!f.column_id) continue;\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const text = (f.text || \"\").toLowerCase();\r\n\r\n//           const looksPnSn =\r\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\r\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\r\n\r\n//           if (looksPnSn) return f.column_id;\r\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\r\n//             candidate = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return candidate;\r\n//     }\r\n\r\n//     // 1) Resolve columns\r\n//     const titleColId = await resolveTitleColId(list_id);\r\n//     if (!titleColId) {\r\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\r\n//     }\r\n\r\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\r\n//     const safeTitle = plain(title) || \"New Item\";\r\n//     const createBody = {\r\n//       list_id,\r\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\r\n//     };\r\n\r\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 3) (Minimal) update: PN/SN only, per your request\r\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\r\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\r\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\r\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\r\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n\r\n//     let updated = null;\r\n//     let usedPnSnCol = null;\r\n\r\n//     if (pnSnText) {\r\n//       const pnSnColId = await resolvePnSnColId(list_id);\r\n//       if (pnSnColId) {\r\n//         const cells = [{\r\n//           row_id: created.item.id,\r\n//           column_id: pnSnColId,\r\n//           rich_text: toRichText(pnSnText),\r\n//         }];\r\n\r\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\r\n//         usedPnSnCol = pnSnColId;\r\n//         // If update fails, we still return ok:false so you can see the error\r\n//         if (!updated?.ok) {\r\n//           return res.status(200).json({\r\n//             ok: false,\r\n//             error: updated?.error || \"update_failed\",\r\n//             mode: \"list\",\r\n//             list_id,\r\n//             item_id: created.item.id,\r\n//             used_title_col: titleColId,\r\n//             used_pnsn_col: usedPnSnCol,\r\n//           });\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleColId,\r\n//       used_pnsn_col: usedPnSnCol || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  try {\r\n    if (req.method !== \"POST\") {\r\n      return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n    }\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) {\r\n      return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n    }\r\n\r\n    // From client (see helper below)\r\n    const {\r\n      listKey,        // \"shipping\" | \"receiving\" | \"tasks\"\r\n      title,          // string\r\n      pn, sn,         // strings (first PN/SN already selected on client)\r\n      description,    // string (selected description)\r\n      workOrder,      // string (most recent WO)\r\n      localSN,        // string (item ID)\r\n      photoUrls = [], // array of strings (URLs)\r\n      shippingDate,   // string (blank means skip)\r\n    } = req.body || {};\r\n\r\n    // ────────────────────────────────────────────────────────────────────────────\r\n    // Per-list config via env (ALL optional except list_id & title_col)\r\n    // Make sure your .env.local has only the ID values with no comments/spaces.\r\n    // Example names follow the pattern you've been using already.\r\n    const CFG_MAP = {\r\n      tasks: {\r\n        list_id: process.env.SLACK_LIST_TASKS_ID,\r\n        title_col: process.env.SLACK_LIST_TASKS_TITLE_COL,\r\n        pnsn_col: process.env.SLACK_LIST_TASKS_PNSN_COL,\r\n        desc_col: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n        wo_col:   process.env.SLACK_LIST_TASKS_WORKORDER_COL,\r\n        photos_col: process.env.SLACK_LIST_TASKS_PHOTOS_COL,\r\n        localsn_col: process.env.SLACK_LIST_TASKS_LOCALSN_COL,\r\n        shipdate_col: process.env.SLACK_LIST_TASKS_SHIPDATE_COL, // optional; we’ll skip if shippingDate is blank\r\n      },\r\n      shipping: {\r\n        list_id: process.env.SLACK_LIST_SHIPPING_ID,\r\n        title_col: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\r\n        pnsn_col: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        desc_col: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        wo_col:   process.env.SLACK_LIST_SHIPPING_WORKORDER_COL,\r\n        photos_col: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,\r\n        localsn_col: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        shipdate_col: process.env.SLACK_LIST_SHIPPING_SHIPDATE_COL,\r\n      },\r\n      receiving: {\r\n        list_id: process.env.SLACK_LIST_RECEIVING_ID,\r\n        title_col: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\r\n        pnsn_col: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        desc_col: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        wo_col:   process.env.SLACK_LIST_RECEIVING_WORKORDER_COL,\r\n        photos_col: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,\r\n        localsn_col: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        shipdate_col: process.env.SLACK_LIST_RECEIVING_SHIPDATE_COL,\r\n      },\r\n    };\r\n\r\n    const CFG = CFG_MAP[listKey || \"\"];\r\n    if (!CFG?.list_id) {\r\n      return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n    }\r\n    if (!CFG.title_col) {\r\n      return res.status(400).json({\r\n        ok: false,\r\n        error: \"missing_title_column_in_env\",\r\n        fix: `Set SLACK_LIST_${(listKey || \"\").toUpperCase()}_TITLE_COL in .env.local`,\r\n      });\r\n    }\r\n\r\n    // ────────────────────────────────────────────────────────────────────────────\r\n    // Helpers\r\n    async function slackJson(method, payload) {\r\n      const r = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json; charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      return r.json();\r\n    }\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n    const first = (x) => (Array.isArray(x) ? x.find(Boolean) || \"\" : plain(x));\r\n    const toRichText = (text) => [{\r\n      type: \"rich_text\",\r\n      elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text: plain(text) }] }],\r\n    }];\r\n\r\n    // Try updating a single column, gracefully falling back to text if needed\r\n    async function updateOneCell(row_id, column_id, value) {\r\n      if (!row_id || !column_id) return { ok: true, skipped: true };\r\n      const val = plain(value);\r\n      if (!val && val !== \"\") return { ok: true, skipped: true }; // nothing\r\n\r\n      // prefer rich_text\r\n      let r = await slackJson(\"slackLists.items.update\", {\r\n        list_id: CFG.list_id,\r\n        cells: [{ row_id, column_id, rich_text: toRichText(val) }],\r\n      });\r\n      if (r?.ok) return r;\r\n\r\n      // fallback to plain text if Slack complains about types\r\n      if (r?.error === \"invalid_arguments\") {\r\n        r = await slackJson(\"slackLists.items.update\", {\r\n          list_id: CFG.list_id,\r\n          cells: [{ row_id, column_id, text: val }],\r\n        });\r\n      }\r\n      return r;\r\n    }\r\n\r\n    // ────────────────────────────────────────────────────────────────────────────\r\n    // 1) Create the item with Title set (rich_text → text fallback)\r\n    const safeTitle = plain(title) || \"New Item\";\r\n    let created = await slackJson(\"slackLists.items.create\", {\r\n      list_id: CFG.list_id,\r\n      initial_fields: [{ column_id: CFG.title_col, rich_text: toRichText(safeTitle) }],\r\n    });\r\n    if (!created?.ok && created?.error === \"invalid_arguments\") {\r\n      created = await slackJson(\"slackLists.items.create\", {\r\n        list_id: CFG.list_id,\r\n        initial_fields: [{ column_id: CFG.title_col, text: safeTitle }],\r\n      });\r\n    }\r\n    if (!created?.ok) {\r\n      return res.status(200).json({\r\n        ok: false,\r\n        error: created?.error || \"create_failed\",\r\n        mode: \"list\",\r\n        list_id: CFG.list_id,\r\n        title_col: CFG.title_col,\r\n        sent_title: safeTitle,\r\n      });\r\n    }\r\n    const rowId = created.item.id;\r\n\r\n    // ────────────────────────────────────────────────────────────────────────────\r\n    // 2) Update other fields one by one (each with its own fallback)\r\n    const pn0 = first(pn);\r\n    const sn0 = first(sn);\r\n    const pnPart = pn0 ? `PN: ${pn0}` : \"\";\r\n    const snPart = sn0 ? `SN: ${sn0}` : \"\";\r\n    const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n\r\n    // PN/SN\r\n    if (pnSnText && CFG.pnsn_col) {\r\n      const r = await updateOneCell(rowId, CFG.pnsn_col, pnSnText);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({\r\n          ok: false,\r\n          error: r?.error || \"update_failed_pnsn\",\r\n          list_id: CFG.list_id,\r\n          item_id: rowId,\r\n          used_pnsn_col: CFG.pnsn_col,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Description\r\n    if (CFG.desc_col && plain(description)) {\r\n      const r = await updateOneCell(rowId, CFG.desc_col, description);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({\r\n          ok: false, error: r?.error || \"update_failed_description\",\r\n          list_id: CFG.list_id, item_id: rowId, used_description_col: CFG.desc_col,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Work Order\r\n    if (CFG.wo_col && plain(workOrder)) {\r\n      const r = await updateOneCell(rowId, CFG.wo_col, workOrder);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({\r\n          ok: false, error: r?.error || \"update_failed_workorder\",\r\n          list_id: CFG.list_id, item_id: rowId, used_workorder_col: CFG.wo_col,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Photos (join all URLs, one per line)\r\n    if (CFG.photos_col && Array.isArray(photoUrls) && photoUrls.length) {\r\n      const photosText = photoUrls.map(plain).filter(Boolean).join(\"\\n\");\r\n      if (photosText) {\r\n        const r = await updateOneCell(rowId, CFG.photos_col, photosText);\r\n        if (!r?.ok) {\r\n          return res.status(200).json({\r\n            ok: false, error: r?.error || \"update_failed_photos\",\r\n            list_id: CFG.list_id, item_id: rowId, used_photos_col: CFG.photos_col,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // localSN (ID)\r\n    if (CFG.localsn_col && plain(localSN)) {\r\n      const r = await updateOneCell(rowId, CFG.localsn_col, localSN);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({\r\n          ok: false, error: r?.error || \"update_failed_localsn\",\r\n          list_id: CFG.list_id, item_id: rowId, used_localsn_col: CFG.localsn_col,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Shipping Date: you asked to leave it blank — so we ONLY update if non-empty\r\n    if (CFG.shipdate_col && plain(shippingDate)) {\r\n      const r = await updateOneCell(rowId, CFG.shipdate_col, shippingDate);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({\r\n          ok: false, error: r?.error || \"update_failed_shipdate\",\r\n          list_id: CFG.list_id, item_id: rowId, used_shipdate_col: CFG.shipdate_col,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Done\r\n    return res.status(200).json({\r\n      ok: true,\r\n      mode: \"list\",\r\n      list_id: CFG.list_id,\r\n      item_id: rowId,\r\n      sent_title: safeTitle,\r\n      used_cols: {\r\n        title_col: CFG.title_col,\r\n        pnsn_col: CFG.pnsn_col || null,\r\n        desc_col: CFG.desc_col || null,\r\n        wo_col: CFG.wo_col || null,\r\n        photos_col: CFG.photos_col || null,\r\n        localsn_col: CFG.localsn_col || null,\r\n        shipdate_col: CFG.shipdate_col || null,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API /slack/add-to-list crashed:\", err);\r\n    return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
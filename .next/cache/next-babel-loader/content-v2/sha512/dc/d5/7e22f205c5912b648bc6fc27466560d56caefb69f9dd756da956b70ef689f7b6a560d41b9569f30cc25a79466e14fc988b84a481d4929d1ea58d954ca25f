{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    error: \"Missing SLACK_BOT_TOKEN\"\n  });\n  const {\n    listKey,\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body || {};\n  const LISTS = {\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL\n      }\n    },\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL\n      }\n    }\n  };\n  const CHANNELS = {\n    tasks: process.env.SLACK_CHANNEL_TASKS_ID,\n    shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID\n  };\n  const headersJson = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n\n  const slack = async (method, body) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers: headersJson,\n    body\n  }).then(r => r.json());\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // Always create with a non-empty title\n\n\n  const safeTitle = plain(title) || (plain(localSN) ? `Item ${plain(localSN)}` : \"\") || joinArr(pn) || \"New Item\";\n  const cfg = LISTS[listKey]; // ===== PATH A: Slack Lists (preferred) =====\n\n  if (cfg !== null && cfg !== void 0 && cfg.id) {\n    try {\n      var _created$item;\n\n      // 1) Create the item *only with title* first\n      const createBody = {\n        list_id: cfg.id,\n        title: safeTitle\n      };\n      const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n\n      if (!(created !== null && created !== void 0 && created.ok)) {\n        // fall back to channel\n        return await channelFallback({\n          slack,\n          token,\n          CHANNELS,\n          listKey,\n          safeTitle,\n          linkUrl,\n          pn,\n          sn,\n          dom,\n          workOrder,\n          poNumber,\n          trackingNumber,\n          localSN,\n          date,\n          bodyText,\n          description,\n          res\n        });\n      }\n\n      const itemId = created === null || created === void 0 ? void 0 : (_created$item = created.item) === null || _created$item === void 0 ? void 0 : _created$item.id; // 2) Patch optional columns (only if valid column IDs exist)\n\n      const fields = [];\n      const cols = cfg.cols || {};\n\n      const addText = (colId, text) => {\n        const t = plain(text);\n        if (colId && t) fields.push({\n          column_id: colId,\n          value: {\n            text: t\n          }\n        });\n      };\n\n      if (cols.desc) {\n        const textBits = [plain(description), listKey === \"tasks\" ? plain(bodyText) : \"\", plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n        addText(cols.desc, textBits);\n      }\n\n      if (cols.date && plain(date)) fields.push({\n        column_id: cols.date,\n        value: {\n          date: plain(date)\n        }\n      });\n\n      if (cols.pn) {\n        const pnStr = joinArr(pn),\n              snStr = joinArr(sn);\n        const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`].filter(Boolean).join(\"  \");\n        addText(cols.pn, combo);\n      }\n\n      if (cols.track) {\n        const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`].filter(Boolean).join(\"  \");\n        addText(cols.track, t);\n      }\n\n      if (cols.wo) addText(cols.wo, plain(workOrder) && `WO: ${plain(workOrder)}`);\n      if (cols.lsn) addText(cols.lsn, plain(localSN));\n\n      if (fields.length) {\n        await slack(\"slackLists.items.update\", JSON.stringify({\n          list_id: cfg.id,\n          item_id: itemId,\n          fields\n        }));\n      }\n\n      return res.status(200).json({\n        ok: true,\n        mode: \"list\",\n        list_id: cfg.id,\n        item_id: itemId\n      });\n    } catch (e) {\n      // last resort fallback\n      return await channelFallback({\n        slack,\n        token,\n        CHANNELS,\n        listKey,\n        safeTitle,\n        linkUrl,\n        pn,\n        sn,\n        dom,\n        workOrder,\n        poNumber,\n        trackingNumber,\n        localSN,\n        date,\n        bodyText,\n        description,\n        res\n      });\n    }\n  } // ===== PATH B: channel post (if no list configured) =====\n\n\n  return await channelFallback({\n    slack,\n    token,\n    CHANNELS,\n    listKey,\n    safeTitle,\n    linkUrl,\n    pn,\n    sn,\n    dom,\n    workOrder,\n    poNumber,\n    trackingNumber,\n    localSN,\n    date,\n    bodyText,\n    description,\n    res\n  });\n}\n\nasync function channelFallback({\n  slack,\n  token,\n  CHANNELS,\n  listKey,\n  safeTitle,\n  linkUrl,\n  pn,\n  sn,\n  dom,\n  workOrder,\n  poNumber,\n  trackingNumber,\n  localSN,\n  date,\n  bodyText,\n  description,\n  res\n}) {\n  const channel = CHANNELS[listKey];\n  if (!channel) return res.status(400).json({\n    error: \"Unknown listKey (no list or channel configured)\"\n  });\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n\n  const lines = [`*${safeTitle}*`];\n  const pnStr = joinArr(pn),\n        snStr = joinArr(sn);\n  if (pnStr) lines.push(`PN: ${pnStr}`);\n  if (snStr) lines.push(`SN: ${snStr}`);\n  if (plain(workOrder)) lines.push(`WO: ${plain(workOrder)}`);\n  if (plain(poNumber)) lines.push(`PO: ${plain(poNumber)}`);\n  if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\n  if (plain(dom)) lines.push(`DOM: ${plain(dom)}`);\n  if (plain(localSN)) lines.push(`Local SN: ${plain(localSN)}`);\n  if (plain(date)) lines.push(`Date: ${plain(date)}`);\n  const desc = plain(description);\n  if (desc) lines.push(desc);else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\n  if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({\n    channel,\n    text\n  }));\n  if (!(posted !== null && posted !== void 0 && posted.ok)) return res.status(400).json({\n    error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error\",\n    raw: posted\n  });\n  return res.status(200).json({\n    ok: true,\n    mode: \"channel\",\n    channel,\n    ts: posted.ts\n  });\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","tasks","id","SLACK_LIST_TASKS_ID","cols","desc","SLACK_LIST_TASKS_DESCRIPTION_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","track","SLACK_LIST_SHIPPING_TRACKING_COL","wo","SLACK_LIST_SHIPPING_WO_COL","lsn","SLACK_LIST_SHIPPING_LOCALSN_COL","photos","SLACK_LIST_SHIPPING_PHOTOS_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","SLACK_LIST_RECEIVING_TRACKING_COL","SLACK_LIST_RECEIVING_WO_COL","SLACK_LIST_RECEIVING_LOCALSN_COL","SLACK_LIST_RECEIVING_PHOTOS_COL","CHANNELS","SLACK_CHANNEL_TASKS_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_RECEIVING_ID","headersJson","Authorization","slack","fetch","headers","then","r","plain","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","safeTitle","cfg","createBody","list_id","created","JSON","stringify","ok","channelFallback","itemId","item","fields","addText","colId","text","t","push","column_id","value","textBits","pnStr","snStr","combo","length","item_id","mode","e","channel","lines","posted","raw","ts"],"mappingseAAe,eAAeA,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B,OAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAArB,CAAP;AAE3B,QAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAA1B;AACA,MAAI,CAACH,KAAL,EAAY,OAAOL,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAArB,CAAP;AAEZ,QAAM;AACJK,IAAAA,OADI;AACKC,IAAAA,KADL;AACYC,IAAAA,OADZ;AACqBC,IAAAA,QADrB;AAEJC,IAAAA,IAFI;AAEEC,IAAAA,EAFF;AAEMC,IAAAA,EAFN;AAEUC,IAAAA,GAFV;AAEeC,IAAAA,cAFf;AAE+BC,IAAAA,QAF/B;AAEyCC,IAAAA,SAFzC;AAEoDC,IAAAA,OAFpD;AAE6DC,IAAAA,WAF7D;AAGJC,IAAAA,SAAS,GAAG;AAHR,MAIFvB,GAAG,CAACwB,IAAJ,IAAY,EAJhB;AAMA,QAAMC,KAAK,GAAG;AACZC,IAAAA,KAAK,EAAM;AAAEC,MAAAA,EAAE,EAAEpB,OAAO,CAACC,GAAR,CAAYoB,mBAAlB;AAA2CC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,IAAI,EAAEvB,OAAO,CAACC,GAAR,CAAYuB;AAApB;AAAjD,KADC;AAEZC,IAAAA,QAAQ,EAAG;AAAEL,MAAAA,EAAE,EAAEpB,OAAO,CAACC,GAAR,CAAYyB,sBAAlB;AAA2CJ,MAAAA,IAAI,EAAE;AAC1DC,QAAAA,IAAI,EAAEvB,OAAO,CAACC,GAAR,CAAY0B,mCADwC;AAE1DpB,QAAAA,IAAI,EAAEP,OAAO,CAACC,GAAR,CAAY2B,4BAFwC;AAG1DpB,QAAAA,EAAE,EAAIR,OAAO,CAACC,GAAR,CAAY4B,4BAHwC;AAI1DC,QAAAA,KAAK,EAAC9B,OAAO,CAACC,GAAR,CAAY8B,gCAJwC;AAK1DC,QAAAA,EAAE,EAAIhC,OAAO,CAACC,GAAR,CAAYgC,0BALwC;AAM1DC,QAAAA,GAAG,EAAGlC,OAAO,CAACC,GAAR,CAAYkC,+BANwC;AAO1DC,QAAAA,MAAM,EAAEpC,OAAO,CAACC,GAAR,CAAYoC;AAPsC;AAAjD,KAFC;AAWZC,IAAAA,SAAS,EAAE;AAAElB,MAAAA,EAAE,EAAEpB,OAAO,CAACC,GAAR,CAAYsC,uBAAlB;AAA2CjB,MAAAA,IAAI,EAAE;AAC1DC,QAAAA,IAAI,EAAEvB,OAAO,CAACC,GAAR,CAAYuC,oCADwC;AAE1DjC,QAAAA,IAAI,EAAEP,OAAO,CAACC,GAAR,CAAYwC,6BAFwC;AAG1DjC,QAAAA,EAAE,EAAIR,OAAO,CAACC,GAAR,CAAYyC,6BAHwC;AAI1DZ,QAAAA,KAAK,EAAC9B,OAAO,CAACC,GAAR,CAAY0C,iCAJwC;AAK1DX,QAAAA,EAAE,EAAIhC,OAAO,CAACC,GAAR,CAAY2C,2BALwC;AAM1DV,QAAAA,GAAG,EAAGlC,OAAO,CAACC,GAAR,CAAY4C,gCANwC;AAO1DT,QAAAA,MAAM,EAAEpC,OAAO,CAACC,GAAR,CAAY6C;AAPsC;AAAjD;AAXC,GAAd;AAsBA,QAAMC,QAAQ,GAAG;AACf5B,IAAAA,KAAK,EAAMnB,OAAO,CAACC,GAAR,CAAY+C,sBADR;AAEfvB,IAAAA,QAAQ,EAAGzB,OAAO,CAACC,GAAR,CAAYgD,yBAFR;AAGfX,IAAAA,SAAS,EAAEtC,OAAO,CAACC,GAAR,CAAYiD;AAHR,GAAjB;AAMA,QAAMC,WAAW,GAAG;AAAEC,IAAAA,aAAa,EAAG,UAASrD,KAAM,EAAjC;AAAoC,oBAAgB;AAApD,GAApB;;AACA,QAAMsD,KAAK,GAAG,OAAO1D,MAAP,EAAesB,IAAf,KACZqC,KAAK,CAAE,yBAAwB3D,MAAO,EAAjC,EAAoC;AAAEA,IAAAA,MAAM,EAAE,MAAV;AAAkB4D,IAAAA,OAAO,EAAEJ,WAA3B;AAAwClC,IAAAA;AAAxC,GAApC,CAAL,CAAyFuC,IAAzF,CAA8FC,CAAC,IAAIA,CAAC,CAAC5D,IAAF,EAAnG,CADF;;AAGA,QAAM6D,KAAK,GAAIC,CAAD,IAAO,CAACA,CAAD,aAACA,CAAD,cAACA,CAAD,GAAM,EAAN,EAAUC,QAAV,GAAqBC,IAArB,EAArB;;AACA,QAAMC,OAAO,GAAIC,CAAD,IAAOC,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmBA,CAAC,CAACG,MAAF,CAASC,OAAT,EAAkBC,GAAlB,CAAsBV,KAAtB,EAA6BW,IAA7B,CAAkC,IAAlC,CAAnB,GAA6DX,KAAK,CAACK,CAAD,CAAzF,CA7C8C,CA+C9C;;;AACA,QAAMO,SAAS,GAAGZ,KAAK,CAACtD,KAAD,CAAL,KAAiBsD,KAAK,CAAC5C,OAAD,CAAL,GAAkB,QAAO4C,KAAK,CAAC5C,OAAD,CAAU,EAAxC,GAA4C,EAA7D,KAAoEgD,OAAO,CAACtD,EAAD,CAA3E,IAAmF,UAArG;AAEA,QAAM+D,GAAG,GAAGrD,KAAK,CAACf,OAAD,CAAjB,CAlD8C,CAoD9C;;AACA,MAAIoE,GAAJ,aAAIA,GAAJ,eAAIA,GAAG,CAAEnD,EAAT,EAAa;AACX,QAAI;AAAA;;AACF;AACA,YAAMoD,UAAU,GAAG;AAAEC,QAAAA,OAAO,EAAEF,GAAG,CAACnD,EAAf;AAAmBhB,QAAAA,KAAK,EAAEkE;AAA1B,OAAnB;AACA,YAAMI,OAAO,GAAG,MAAMrB,KAAK,CAAC,yBAAD,EAA4BsB,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAA5B,CAA3B;;AACA,UAAI,EAACE,OAAD,aAACA,OAAD,eAACA,OAAO,CAAEG,EAAV,CAAJ,EAAkB;AAChB;AACA,eAAO,MAAMC,eAAe,CAAC;AAAEzB,UAAAA,KAAF;AAAStD,UAAAA,KAAT;AAAgBgD,UAAAA,QAAhB;AAA0B5C,UAAAA,OAA1B;AAAmCmE,UAAAA,SAAnC;AAA8CjE,UAAAA,OAA9C;AAAuDG,UAAAA,EAAvD;AAA2DC,UAAAA,EAA3D;AAA+DC,UAAAA,GAA/D;AAAoEG,UAAAA,SAApE;AAA+ED,UAAAA,QAA/E;AAAyFD,UAAAA,cAAzF;AAAyGG,UAAAA,OAAzG;AAAkHP,UAAAA,IAAlH;AAAwHD,UAAAA,QAAxH;AAAkIS,UAAAA,WAAlI;AAA+IrB,UAAAA;AAA/I,SAAD,CAA5B;AACD;;AAED,YAAMqF,MAAM,GAAGL,OAAH,aAAGA,OAAH,wCAAGA,OAAO,CAAEM,IAAZ,kDAAG,cAAe5D,EAA9B,CATE,CAWF;;AACA,YAAM6D,MAAM,GAAG,EAAf;AACA,YAAM3D,IAAI,GAAGiD,GAAG,CAACjD,IAAJ,IAAY,EAAzB;;AACA,YAAM4D,OAAO,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAE,cAAMC,CAAC,GAAG3B,KAAK,CAAC0B,IAAD,CAAf;AAAuB,YAAID,KAAK,IAAIE,CAAb,EAAgBJ,MAAM,CAACK,IAAP,CAAY;AAAEC,UAAAA,SAAS,EAAEJ,KAAb;AAAoBK,UAAAA,KAAK,EAAE;AAAEJ,YAAAA,IAAI,EAAEC;AAAR;AAA3B,SAAZ;AAAwD,OAAlI;;AAEA,UAAI/D,IAAI,CAACC,IAAT,EAAe;AACb,cAAMkE,QAAQ,GAAG,CAAE/B,KAAK,CAAC3C,WAAD,CAAP,EAAuBZ,OAAO,KAAK,OAAZ,GAAsBuD,KAAK,CAACpD,QAAD,CAA3B,GAAwC,EAA/D,EAAoEoD,KAAK,CAACrD,OAAD,CAAL,GAAkB,IAAGqD,KAAK,CAACrD,OAAD,CAAU,iBAApC,GAAuD,EAA3H,EACd6D,MADc,CACPC,OADO,EACEE,IADF,CACO,IADP,CAAjB;AAEAa,QAAAA,OAAO,CAAC5D,IAAI,CAACC,IAAN,EAAYkE,QAAZ,CAAP;AACD;;AACD,UAAInE,IAAI,CAACf,IAAL,IAAamD,KAAK,CAACnD,IAAD,CAAtB,EAA8B0E,MAAM,CAACK,IAAP,CAAY;AAAEC,QAAAA,SAAS,EAAEjE,IAAI,CAACf,IAAlB;AAAwBiF,QAAAA,KAAK,EAAE;AAAEjF,UAAAA,IAAI,EAAEmD,KAAK,CAACnD,IAAD;AAAb;AAA/B,OAAZ;;AAE9B,UAAIe,IAAI,CAACd,EAAT,EAAa;AACX,cAAMkF,KAAK,GAAG5B,OAAO,CAACtD,EAAD,CAArB;AAAA,cAA2BmF,KAAK,GAAG7B,OAAO,CAACrD,EAAD,CAA1C;AACA,cAAMmF,KAAK,GAAG,CAAEF,KAAK,IAAK,OAAMA,KAAM,EAAxB,EAA2BC,KAAK,IAAK,OAAMA,KAAM,EAAjD,EAAoDjC,KAAK,CAAChD,GAAD,CAAL,IAAe,QAAOgD,KAAK,CAAChD,GAAD,CAAM,EAArF,EAAyFwD,MAAzF,CAAgGC,OAAhG,EAAyGE,IAAzG,CAA8G,IAA9G,CAAd;AACAa,QAAAA,OAAO,CAAC5D,IAAI,CAACd,EAAN,EAAUoF,KAAV,CAAP;AACD;;AACD,UAAItE,IAAI,CAACQ,KAAT,EAAgB;AACd,cAAMuD,CAAC,GAAG,CAAE3B,KAAK,CAAC/C,cAAD,CAAL,IAA0B,OAAM+C,KAAK,CAAC/C,cAAD,CAAiB,EAAxD,EAA2D+C,KAAK,CAAC9C,QAAD,CAAL,IAAoB,OAAM8C,KAAK,CAAC9C,QAAD,CAAW,EAArG,EAAyGsD,MAAzG,CAAgHC,OAAhH,EAAyHE,IAAzH,CAA8H,IAA9H,CAAV;AACAa,QAAAA,OAAO,CAAC5D,IAAI,CAACQ,KAAN,EAAauD,CAAb,CAAP;AACD;;AACD,UAAI/D,IAAI,CAACU,EAAT,EAAckD,OAAO,CAAC5D,IAAI,CAACU,EAAN,EAAW0B,KAAK,CAAC7C,SAAD,CAAL,IAAqB,OAAM6C,KAAK,CAAC7C,SAAD,CAAY,EAAvD,CAAP;AACd,UAAIS,IAAI,CAACY,GAAT,EAAcgD,OAAO,CAAC5D,IAAI,CAACY,GAAN,EAAWwB,KAAK,CAAC5C,OAAD,CAAhB,CAAP;;AAEd,UAAImE,MAAM,CAACY,MAAX,EAAmB;AACjB,cAAMxC,KAAK,CAAC,yBAAD,EAA4BsB,IAAI,CAACC,SAAL,CAAe;AAAEH,UAAAA,OAAO,EAAEF,GAAG,CAACnD,EAAf;AAAmB0E,UAAAA,OAAO,EAAEf,MAA5B;AAAoCE,UAAAA;AAApC,SAAf,CAA5B,CAAX;AACD;;AAED,aAAOvF,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEgF,QAAAA,EAAE,EAAE,IAAN;AAAYkB,QAAAA,IAAI,EAAE,MAAlB;AAA0BtB,QAAAA,OAAO,EAAEF,GAAG,CAACnD,EAAvC;AAA2C0E,QAAAA,OAAO,EAAEf;AAApD,OAArB,CAAP;AACD,KAxCD,CAwCE,OAAOiB,CAAP,EAAU;AACV;AACA,aAAO,MAAMlB,eAAe,CAAC;AAAEzB,QAAAA,KAAF;AAAStD,QAAAA,KAAT;AAAgBgD,QAAAA,QAAhB;AAA0B5C,QAAAA,OAA1B;AAAmCmE,QAAAA,SAAnC;AAA8CjE,QAAAA,OAA9C;AAAuDG,QAAAA,EAAvD;AAA2DC,QAAAA,EAA3D;AAA+DC,QAAAA,GAA/D;AAAoEG,QAAAA,SAApE;AAA+ED,QAAAA,QAA/E;AAAyFD,QAAAA,cAAzF;AAAyGG,QAAAA,OAAzG;AAAkHP,QAAAA,IAAlH;AAAwHD,QAAAA,QAAxH;AAAkIS,QAAAA,WAAlI;AAA+IrB,QAAAA;AAA/I,OAAD,CAA5B;AACD;AACF,GAlG6C,CAoG9C;;;AACA,SAAO,MAAMoF,eAAe,CAAC;AAAEzB,IAAAA,KAAF;AAAStD,IAAAA,KAAT;AAAgBgD,IAAAA,QAAhB;AAA0B5C,IAAAA,OAA1B;AAAmCmE,IAAAA,SAAnC;AAA8CjE,IAAAA,OAA9C;AAAuDG,IAAAA,EAAvD;AAA2DC,IAAAA,EAA3D;AAA+DC,IAAAA,GAA/D;AAAoEG,IAAAA,SAApE;AAA+ED,IAAAA,QAA/E;AAAyFD,IAAAA,cAAzF;AAAyGG,IAAAA,OAAzG;AAAkHP,IAAAA,IAAlH;AAAwHD,IAAAA,QAAxH;AAAkIS,IAAAA,WAAlI;AAA+IrB,IAAAA;AAA/I,GAAD,CAA5B;AACD;;AAED,eAAeoF,eAAf,CAA+B;AAAEzB,EAAAA,KAAF;AAAStD,EAAAA,KAAT;AAAgBgD,EAAAA,QAAhB;AAA0B5C,EAAAA,OAA1B;AAAmCmE,EAAAA,SAAnC;AAA8CjE,EAAAA,OAA9C;AAAuDG,EAAAA,EAAvD;AAA2DC,EAAAA,EAA3D;AAA+DC,EAAAA,GAA/D;AAAoEG,EAAAA,SAApE;AAA+ED,EAAAA,QAA/E;AAAyFD,EAAAA,cAAzF;AAAyGG,EAAAA,OAAzG;AAAkHP,EAAAA,IAAlH;AAAwHD,EAAAA,QAAxH;AAAkIS,EAAAA,WAAlI;AAA+IrB,EAAAA;AAA/I,CAA/B,EAAqL;AACnL,QAAMuG,OAAO,GAAGlD,QAAQ,CAAC5C,OAAD,CAAxB;AACA,MAAI,CAAC8F,OAAL,EAAc,OAAOvG,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAArB,CAAP;;AAEd,QAAM4D,KAAK,GAAIC,CAAD,IAAO,CAACA,CAAD,aAACA,CAAD,cAACA,CAAD,GAAM,EAAN,EAAUC,QAAV,GAAqBC,IAArB,EAArB;;AACA,QAAMC,OAAO,GAAIC,CAAD,IAAOC,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmBA,CAAC,CAACG,MAAF,CAASC,OAAT,EAAkBC,GAAlB,CAAsBV,KAAtB,EAA6BW,IAA7B,CAAkC,IAAlC,CAAnB,GAA6DX,KAAK,CAACK,CAAD,CAAzF;;AAEA,QAAMmC,KAAK,GAAG,CAAG,IAAG5B,SAAU,GAAhB,CAAd;AACA,QAAMoB,KAAK,GAAG5B,OAAO,CAACtD,EAAD,CAArB;AAAA,QAA2BmF,KAAK,GAAG7B,OAAO,CAACrD,EAAD,CAA1C;AACA,MAAIiF,KAAJ,EAAWQ,KAAK,CAACZ,IAAN,CAAY,OAAMI,KAAM,EAAxB;AACX,MAAIC,KAAJ,EAAWO,KAAK,CAACZ,IAAN,CAAY,OAAMK,KAAM,EAAxB;AACX,MAAIjC,KAAK,CAAC7C,SAAD,CAAT,EAAsBqF,KAAK,CAACZ,IAAN,CAAY,OAAM5B,KAAK,CAAC7C,SAAD,CAAY,EAAnC;AACtB,MAAI6C,KAAK,CAAC9C,QAAD,CAAT,EAAsBsF,KAAK,CAACZ,IAAN,CAAY,OAAM5B,KAAK,CAAC9C,QAAD,CAAW,EAAlC;AACtB,MAAI8C,KAAK,CAAC/C,cAAD,CAAT,EAA2BuF,KAAK,CAACZ,IAAN,CAAY,OAAM5B,KAAK,CAAC/C,cAAD,CAAiB,EAAxC;AAC3B,MAAI+C,KAAK,CAAChD,GAAD,CAAT,EAAsBwF,KAAK,CAACZ,IAAN,CAAY,QAAO5B,KAAK,CAAChD,GAAD,CAAM,EAA9B;AACtB,MAAIgD,KAAK,CAAC5C,OAAD,CAAT,EAAsBoF,KAAK,CAACZ,IAAN,CAAY,aAAY5B,KAAK,CAAC5C,OAAD,CAAU,EAAvC;AACtB,MAAI4C,KAAK,CAACnD,IAAD,CAAT,EAAsB2F,KAAK,CAACZ,IAAN,CAAY,SAAQ5B,KAAK,CAACnD,IAAD,CAAO,EAAhC;AACtB,QAAMgB,IAAI,GAAGmC,KAAK,CAAC3C,WAAD,CAAlB;AACA,MAAIQ,IAAJ,EAAU2E,KAAK,CAACZ,IAAN,CAAW/D,IAAX,EAAV,KACK,IAAIpB,OAAO,KAAK,OAAZ,IAAuBuD,KAAK,CAACpD,QAAD,CAAhC,EAA4C4F,KAAK,CAACZ,IAAN,CAAW5B,KAAK,CAACpD,QAAD,CAAhB;AACjD,MAAIoD,KAAK,CAACrD,OAAD,CAAT,EAAoB6F,KAAK,CAACZ,IAAN,CAAY,IAAG5B,KAAK,CAACrD,OAAD,CAAU,iBAA9B;AAEpB,QAAM+E,IAAI,GAAGc,KAAK,CAAChC,MAAN,CAAaC,OAAb,EAAsBE,IAAtB,CAA2B,IAA3B,KAAoC,uBAAjD;AACA,QAAM8B,MAAM,GAAG,MAAM9C,KAAK,CAAC,kBAAD,EAAqBsB,IAAI,CAACC,SAAL,CAAe;AAAEqB,IAAAA,OAAF;AAAWb,IAAAA;AAAX,GAAf,CAArB,CAA1B;AACA,MAAI,EAACe,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEtB,EAAT,CAAJ,EAAiB,OAAOnF,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,KAAK,EAAE,CAAAqG,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAErG,KAAR,KAAiB,iBAA1B;AAA6CsG,IAAAA,GAAG,EAAED;AAAlD,GAArB,CAAP;AACjB,SAAOzG,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEgF,IAAAA,EAAE,EAAE,IAAN;AAAYkB,IAAAA,IAAI,EAAE,SAAlB;AAA6BE,IAAAA,OAA7B;AAAsCI,IAAAA,EAAE,EAAEF,MAAM,CAACE;AAAjD,GAArB,CAAP;AACD","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n  const {\r\n    listKey, title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body || {};\r\n\r\n  const LISTS = {\r\n    tasks:     { id: process.env.SLACK_LIST_TASKS_ID,     cols: { desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL } },\r\n    shipping:  { id: process.env.SLACK_LIST_SHIPPING_ID,  cols: {\r\n      desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n      date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n      pn:   process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n      track:process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n      wo:   process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n      lsn:  process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n      photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,\r\n    }},\r\n    receiving: { id: process.env.SLACK_LIST_RECEIVING_ID, cols: {\r\n      desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n      date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n      pn:   process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n      track:process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n      wo:   process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n      lsn:  process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n      photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,\r\n    }},\r\n  };\r\n\r\n  const CHANNELS = {\r\n    tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n    shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n  };\r\n\r\n  const headersJson = { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json; charset=utf-8\" };\r\n  const slack = async (method, body) =>\r\n    fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers: headersJson, body }).then(r => r.json());\r\n\r\n  const plain = (v) => (v ?? \"\").toString().trim();\r\n  const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n  // Always create with a non-empty title\r\n  const safeTitle = plain(title) || (plain(localSN) ? `Item ${plain(localSN)}` : \"\") || joinArr(pn) || \"New Item\";\r\n\r\n  const cfg = LISTS[listKey];\r\n\r\n  // ===== PATH A: Slack Lists (preferred) =====\r\n  if (cfg?.id) {\r\n    try {\r\n      // 1) Create the item *only with title* first\r\n      const createBody = { list_id: cfg.id, title: safeTitle };\r\n      const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n      if (!created?.ok) {\r\n        // fall back to channel\r\n        return await channelFallback({ slack, token, CHANNELS, listKey, safeTitle, linkUrl, pn, sn, dom, workOrder, poNumber, trackingNumber, localSN, date, bodyText, description, res });\r\n      }\r\n\r\n      const itemId = created?.item?.id;\r\n\r\n      // 2) Patch optional columns (only if valid column IDs exist)\r\n      const fields = [];\r\n      const cols = cfg.cols || {};\r\n      const addText = (colId, text) => { const t = plain(text); if (colId && t) fields.push({ column_id: colId, value: { text: t } }); };\r\n\r\n      if (cols.desc) {\r\n        const textBits = [ plain(description), (listKey === \"tasks\" ? plain(bodyText) : \"\"), plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\" ]\r\n          .filter(Boolean).join(\"\\n\");\r\n        addText(cols.desc, textBits);\r\n      }\r\n      if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\r\n\r\n      if (cols.pn) {\r\n        const pnStr = joinArr(pn), snStr = joinArr(sn);\r\n        const combo = [ pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}` ].filter(Boolean).join(\"  \");\r\n        addText(cols.pn, combo);\r\n      }\r\n      if (cols.track) {\r\n        const t = [ plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}` ].filter(Boolean).join(\"  \");\r\n        addText(cols.track, t);\r\n      }\r\n      if (cols.wo)  addText(cols.wo,  plain(workOrder) && `WO: ${plain(workOrder)}`);\r\n      if (cols.lsn) addText(cols.lsn, plain(localSN));\r\n\r\n      if (fields.length) {\r\n        await slack(\"slackLists.items.update\", JSON.stringify({ list_id: cfg.id, item_id: itemId, fields }));\r\n      }\r\n\r\n      return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: itemId });\r\n    } catch (e) {\r\n      // last resort fallback\r\n      return await channelFallback({ slack, token, CHANNELS, listKey, safeTitle, linkUrl, pn, sn, dom, workOrder, poNumber, trackingNumber, localSN, date, bodyText, description, res });\r\n    }\r\n  }\r\n\r\n  // ===== PATH B: channel post (if no list configured) =====\r\n  return await channelFallback({ slack, token, CHANNELS, listKey, safeTitle, linkUrl, pn, sn, dom, workOrder, poNumber, trackingNumber, localSN, date, bodyText, description, res });\r\n}\r\n\r\nasync function channelFallback({ slack, token, CHANNELS, listKey, safeTitle, linkUrl, pn, sn, dom, workOrder, poNumber, trackingNumber, localSN, date, bodyText, description, res }) {\r\n  const channel = CHANNELS[listKey];\r\n  if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n  const plain = (v) => (v ?? \"\").toString().trim();\r\n  const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n  const lines = [ `*${safeTitle}*` ];\r\n  const pnStr = joinArr(pn), snStr = joinArr(sn);\r\n  if (pnStr) lines.push(`PN: ${pnStr}`);\r\n  if (snStr) lines.push(`SN: ${snStr}`);\r\n  if (plain(workOrder)) lines.push(`WO: ${plain(workOrder)}`);\r\n  if (plain(poNumber))  lines.push(`PO: ${plain(poNumber)}`);\r\n  if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\r\n  if (plain(dom))       lines.push(`DOM: ${plain(dom)}`);\r\n  if (plain(localSN))   lines.push(`Local SN: ${plain(localSN)}`);\r\n  if (plain(date))      lines.push(`Date: ${plain(date)}`);\r\n  const desc = plain(description);\r\n  if (desc) lines.push(desc);\r\n  else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\r\n  if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\r\n\r\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n  if (!posted?.ok) return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n  return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
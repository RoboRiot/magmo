{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   try {\n//     if (req.method !== \"POST\") {\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//     }\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) {\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//     }\n//     // payload from client\n//     const {\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\n//       title,               // item title (what shows in the primary column)\n//       // keeping minimal per your request: PN/SN only for now\n//       pn, sn,\n//     } = req.body || {};\n//     // list ids from env\n//     const LIST_IDS = {\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\n//     };\n//     const list_id = LIST_IDS[listKey];\n//     if (!list_id) {\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\n//     }\n//     // ---- Slack helpers ----\n//     async function slackJson(method, payload) {\n//       const r = await fetch(`https://slack.com/api/${method}`, {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json; charset=utf-8\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n//       return r.json();\n//     }\n//     const plain = (v) => (v ?? \"\").toString().trim();\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     function toRichText(text) {\n//       const t = plain(text);\n//       return [{\n//         type: \"rich_text\",\n//         elements: [{\n//           type: \"rich_text_section\",\n//           elements: [{ type: \"text\", text: t }],\n//         }],\n//       }];\n//     }\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\n//     async function resolveTitleColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//       if (!probe?.ok) return null;\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\n//       let fallback = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           const key = (f.key || \"\").toLowerCase();\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\n//           if (f.column_id && hasText) {\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\n//             if (!fallback) fallback = f.column_id;\n//           }\n//         }\n//       }\n//       return fallback; // first text-like field if we didn't find a perfect match\n//     }\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\n//     async function resolvePnSnColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\n//       if (!probe?.ok) return null;\n//       let candidate = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           if (!f.column_id) continue;\n//           const key = (f.key || \"\").toLowerCase();\n//           const text = (f.text || \"\").toLowerCase();\n//           const looksPnSn =\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\n//           if (looksPnSn) return f.column_id;\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\n//             candidate = f.column_id;\n//           }\n//         }\n//       }\n//       return candidate;\n//     }\n//     // 1) Resolve columns\n//     const titleColId = await resolveTitleColId(list_id);\n//     if (!titleColId) {\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\n//     }\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\n//     const safeTitle = plain(title) || \"New Item\";\n//     const createBody = {\n//       list_id,\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\n//     };\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 3) (Minimal) update: PN/SN only, per your request\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n//     let updated = null;\n//     let usedPnSnCol = null;\n//     if (pnSnText) {\n//       const pnSnColId = await resolvePnSnColId(list_id);\n//       if (pnSnColId) {\n//         const cells = [{\n//           row_id: created.item.id,\n//           column_id: pnSnColId,\n//           rich_text: toRichText(pnSnText),\n//         }];\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\n//         usedPnSnCol = pnSnColId;\n//         // If update fails, we still return ok:false so you can see the error\n//         if (!updated?.ok) {\n//           return res.status(200).json({\n//             ok: false,\n//             error: updated?.error || \"update_failed\",\n//             mode: \"list\",\n//             list_id,\n//             item_id: created.item.id,\n//             used_title_col: titleColId,\n//             used_pnsn_col: usedPnSnCol,\n//           });\n//         }\n//       }\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id,\n//       item_id: created.item.id,\n//       used_title_col: titleColId,\n//       used_pnsn_col: usedPnSnCol || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  try {\n    var _created, _created2, _created3;\n\n    if (req.method !== \"POST\") {\n      return res.status(405).json({\n        ok: false,\n        error: \"method_not_allowed\"\n      });\n    }\n\n    const token = process.env.SLACK_BOT_TOKEN;\n\n    if (!token) {\n      return res.status(500).json({\n        ok: false,\n        error: \"missing_SLACK_BOT_TOKEN\"\n      });\n    } // Incoming payload from your item page\n\n\n    const {\n      listKey,\n      // \"shipping\" | \"receiving\" | \"tasks\"\n      title,\n      // row title (primary column)\n      pn,\n      sn,\n      // product/serial (single values already)\n      workOrder,\n      // string (most recent WO)\n      localSN,\n      // the item id\n      description,\n      // current description text\n      // shippingDate // intentionally left blank per your request\n      photoUrls = [],\n      // array of image URLs (Firebase)\n      linkUrl // optional: deep link back to your app\n\n    } = req.body || {}; // === Env-based config ===\n\n    const CFG = {\n      tasks: {\n        list_id: process.env.SLACK_LIST_TASKS_ID,\n        title_col: process.env.SLACK_LIST_TASKS_TITLE_COL,\n        pnsn_col: process.env.SLACK_LIST_TASKS_PNSN_COL,\n        workorder_col: process.env.SLACK_LIST_TASKS_WORKORDER_COL,\n        localsn_col: process.env.SLACK_LIST_TASKS_LOCALSN_COL,\n        desc_col: process.env.SLACK_LIST_TASKS_DESC_COL,\n        photos_col: process.env.SLACK_LIST_TASKS_PHOTOS_COL,\n        link_col: process.env.SLACK_LIST_TASKS_LINK_COL // shipdate_col: process.env.SLACK_LIST_TASKS_SHIPDATE_COL, // not used per request\n\n      },\n      shipping: {\n        list_id: process.env.SLACK_LIST_SHIPPING_ID,\n        title_col: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\n        pnsn_col: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        workorder_col: process.env.SLACK_LIST_SHIPPING_WORKORDER_COL,\n        localsn_col: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        desc_col: process.env.SLACK_LIST_SHIPPING_DESC_COL,\n        photos_col: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,\n        link_col: process.env.SLACK_LIST_SHIPPING_LINK_COL // shipdate_col: process.env.SLACK_LIST_SHIPPING_SHIPDATE_COL, // leave blank\n\n      },\n      receiving: {\n        list_id: process.env.SLACK_LIST_RECEIVING_ID,\n        title_col: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\n        pnsn_col: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        workorder_col: process.env.SLACK_LIST_RECEIVING_WORKORDER_COL,\n        localsn_col: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        desc_col: process.env.SLACK_LIST_RECEIVING_DESC_COL,\n        photos_col: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,\n        link_col: process.env.SLACK_LIST_RECEIVING_LINK_COL // shipdate_col: process.env.SLACK_LIST_RECEIVING_SHIPDATE_COL, // leave blank\n\n      }\n    }[listKey || \"\"];\n\n    if (!(CFG !== null && CFG !== void 0 && CFG.list_id)) {\n      return res.status(400).json({\n        ok: false,\n        error: `unknown_listKey_${listKey}`\n      });\n    }\n\n    if (!CFG.title_col) {\n      return res.status(400).json({\n        ok: false,\n        error: \"missing_title_column_in_env\",\n        fix: `Set SLACK_LIST_${(listKey || \"\").toUpperCase()}_TITLE_COL in .env.local`\n      });\n    } // --- Slack helpers ---\n\n\n    async function slackJson(method, payload) {\n      const r = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return r.json();\n    }\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const toRichText = text => {\n      const t = plain(text);\n      return [{\n        type: \"rich_text\",\n        elements: [{\n          type: \"rich_text_section\",\n          elements: [{\n            type: \"text\",\n            text: t\n          }]\n        }]\n      }];\n    }; // generic setters with fallback between rich_text and text\n\n\n    async function setTextCell(list_id, row_id, column_id, value) {\n      var _r, _r2, _r3;\n\n      if (!value) return {\n        ok: true,\n        mode: \"skipped\"\n      }; // try rich_text first\n\n      let r = await slackJson(\"slackLists.items.update\", {\n        list_id,\n        cells: [{\n          row_id,\n          column_id,\n          rich_text: toRichText(value)\n        }]\n      });\n      if ((_r = r) !== null && _r !== void 0 && _r.ok) return r;\n\n      if (((_r2 = r) === null || _r2 === void 0 ? void 0 : _r2.error) === \"invalid_arguments\" || ((_r3 = r) === null || _r3 === void 0 ? void 0 : _r3.error) === \"invalid_input_type\") {\n        // fallback to plain text\n        r = await slackJson(\"slackLists.items.update\", {\n          list_id,\n          cells: [{\n            row_id,\n            column_id,\n            text: plain(value)\n          }]\n        });\n      }\n\n      return r;\n    } // dates: we intentionally skip because you want shipping date blank\n\n\n    async function setDateCell()\n    /*list_id, row_id, column_id, ymd*/\n    {\n      return {\n        ok: true,\n        mode: \"skipped\"\n      };\n    } // files: upload URLs as remote files → attach to the files column\n\n\n    async function setFilesCell(list_id, row_id, column_id, urls = []) {\n      var _r4, _r5, _r6;\n\n      const ids = [];\n\n      for (let i = 0; i < urls.length; i++) {\n        var _add$file;\n\n        const url = plain(urls[i]);\n        if (!url) continue; // Create a remote file record pointing to your existing URL\n\n        const add = await slackJson(\"files.remote.add\", {\n          external_url: url,\n          title: `Photo ${i + 1}`\n        });\n\n        if (add !== null && add !== void 0 && add.ok && add !== null && add !== void 0 && (_add$file = add.file) !== null && _add$file !== void 0 && _add$file.id) {\n          ids.push(add.file.id);\n        }\n      }\n\n      if (ids.length === 0) return {\n        ok: true,\n        mode: \"skipped\"\n      }; // Try shape A: objects\n\n      let r = await slackJson(\"slackLists.items.update\", {\n        list_id,\n        cells: [{\n          row_id,\n          column_id,\n          files: ids.map(id => ({\n            id\n          }))\n        }]\n      });\n      if ((_r4 = r) !== null && _r4 !== void 0 && _r4.ok) return r; // Try shape B: raw ID array\n\n      if (((_r5 = r) === null || _r5 === void 0 ? void 0 : _r5.error) === \"invalid_arguments\" || ((_r6 = r) === null || _r6 === void 0 ? void 0 : _r6.error) === \"invalid_input_type\") {\n        r = await slackJson(\"slackLists.items.update\", {\n          list_id,\n          cells: [{\n            row_id,\n            column_id,\n            file_ids: ids\n          }]\n        });\n      }\n\n      return r;\n    } // === 1) Create the row with title ===\n\n\n    const safeTitle = plain(title) || \"New Item\";\n    let created = await slackJson(\"slackLists.items.create\", {\n      list_id: CFG.list_id,\n      initial_fields: [{\n        column_id: CFG.title_col,\n        rich_text: toRichText(safeTitle)\n      }]\n    }); // Plain text fallback if Slack complains about rich_text\n\n    if (!((_created = created) !== null && _created !== void 0 && _created.ok) && ((_created2 = created) === null || _created2 === void 0 ? void 0 : _created2.error) === \"invalid_arguments\") {\n      created = await slackJson(\"slackLists.items.create\", {\n        list_id: CFG.list_id,\n        initial_fields: [{\n          column_id: CFG.title_col,\n          text: safeTitle\n        }]\n      });\n    }\n\n    if (!((_created3 = created) !== null && _created3 !== void 0 && _created3.ok)) {\n      var _created4;\n\n      return res.status(200).json({\n        ok: false,\n        error: ((_created4 = created) === null || _created4 === void 0 ? void 0 : _created4.error) || \"create_failed\",\n        mode: \"list\",\n        list_id: CFG.list_id,\n        title_col: CFG.title_col,\n        sent_title: safeTitle\n      });\n    }\n\n    const row_id = created.item.id; // === 2) PN/SN (rich_text with fallback) ===\n\n    if (CFG.pnsn_col) {\n      const pnPart = pn ? `PN: ${plain(pn)}` : \"\";\n      const snPart = sn ? `SN: ${plain(sn)}` : \"\";\n      const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n\n      if (pnSnText) {\n        const r = await setTextCell(CFG.list_id, row_id, CFG.pnsn_col, pnSnText);\n\n        if (!(r !== null && r !== void 0 && r.ok)) {\n          return res.status(200).json({\n            ok: false,\n            error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed\",\n            mode: \"list\",\n            list_id: CFG.list_id,\n            item_id: row_id,\n            used_title_col: CFG.title_col,\n            used_pnsn_col: CFG.pnsn_col\n          });\n        }\n      }\n    } // === 3) Work Order ===\n\n\n    if (CFG.workorder_col && workOrder) {\n      const r = await setTextCell(CFG.list_id, row_id, CFG.workorder_col, workOrder);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed\",\n          list_id: CFG.list_id,\n          item_id: row_id,\n          used_workorder_col: CFG.workorder_col\n        });\n      }\n    } // === 4) LocalSN (your item ID) ===\n\n\n    if (CFG.localsn_col && localSN) {\n      const r = await setTextCell(CFG.list_id, row_id, CFG.localsn_col, localSN);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed\",\n          list_id: CFG.list_id,\n          item_id: row_id,\n          used_localsn_col: CFG.localsn_col\n        });\n      }\n    } // === 5) Description ===\n\n\n    if (CFG.desc_col && description) {\n      const r = await setTextCell(CFG.list_id, row_id, CFG.desc_col, description);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed\",\n          list_id: CFG.list_id,\n          item_id: row_id,\n          used_desc_col: CFG.desc_col\n        });\n      }\n    } // === 6) Link back to your app (optional text column)\n\n\n    if (CFG.link_col && linkUrl) {\n      const r = await setTextCell(CFG.list_id, row_id, CFG.link_col, linkUrl);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed\",\n          list_id: CFG.list_id,\n          item_id: row_id,\n          used_link_col: CFG.link_col\n        });\n      }\n    } // === 7) Photos (files column) ===\n\n\n    if (CFG.photos_col && Array.isArray(photoUrls) && photoUrls.length) {\n      const r = await setFilesCell(CFG.list_id, row_id, CFG.photos_col, photoUrls);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        // As a last resort, drop the photo URLs into Description so you still see them\n        if (CFG.desc_col) {\n          const joined = `Photos:\\n${photoUrls.join(\"\\n\")}`;\n          await setTextCell(CFG.list_id, row_id, CFG.desc_col, [description, joined].filter(Boolean).join(\"\\n\\n\"));\n        }\n\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"invalid_input_type\",\n          list_id: CFG.list_id,\n          item_id: row_id,\n          used_photos_col: CFG.photos_col\n        });\n      }\n    } // Intentionally skipping shipdate to keep it blank\n\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: CFG.list_id,\n      item_id: row_id,\n      used_title_col: CFG.title_col,\n      used_pnsn_col: CFG.pnsn_col || null,\n      used_workorder_col: CFG.workorder_col || null,\n      used_localsn_col: CFG.localsn_col || null,\n      used_desc_col: CFG.desc_col || null,\n      used_photos_col: CFG.photos_col || null,\n      sent_title: safeTitle\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n    return res.status(500).json({\n      ok: false,\n      error: \"exception\",\n      message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","pn","sn","workOrder","localSN","description","photoUrls","linkUrl","body","CFG","tasks","list_id","SLACK_LIST_TASKS_ID","title_col","SLACK_LIST_TASKS_TITLE_COL","pnsn_col","SLACK_LIST_TASKS_PNSN_COL","workorder_col","SLACK_LIST_TASKS_WORKORDER_COL","localsn_col","SLACK_LIST_TASKS_LOCALSN_COL","desc_col","SLACK_LIST_TASKS_DESC_COL","photos_col","SLACK_LIST_TASKS_PHOTOS_COL","link_col","SLACK_LIST_TASKS_LINK_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_TITLE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_WORKORDER_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_DESC_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","SLACK_LIST_SHIPPING_LINK_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_PNSN_COL","SLACK_LIST_RECEIVING_WORKORDER_COL","SLACK_LIST_RECEIVING_LOCALSN_COL","SLACK_LIST_RECEIVING_DESC_COL","SLACK_LIST_RECEIVING_PHOTOS_COL","SLACK_LIST_RECEIVING_LINK_COL","fix","toUpperCase","slackJson","payload","r","fetch","headers","Authorization","JSON","stringify","plain","v","toString","trim","toRichText","text","t","type","elements","setTextCell","row_id","column_id","value","mode","cells","rich_text","setDateCell","setFilesCell","urls","ids","i","length","url","add","external_url","file","id","push","files","map","file_ids","safeTitle","created","initial_fields","sent_title","item","pnPart","snPart","pnSnText","filter","Boolean","join","item_id","used_title_col","used_pnsn_col","used_workorder_col","used_localsn_col","used_desc_col","used_link_col","Array","isArray","joined","used_photos_col","err","console","message","String"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   try {\r\n//     if (req.method !== \"POST\") {\r\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//     }\r\n\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) {\r\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//     }\r\n\r\n//     // payload from client\r\n//     const {\r\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\r\n//       title,               // item title (what shows in the primary column)\r\n//       // keeping minimal per your request: PN/SN only for now\r\n//       pn, sn,\r\n//     } = req.body || {};\r\n\r\n//     // list ids from env\r\n//     const LIST_IDS = {\r\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\r\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\r\n//     };\r\n\r\n//     const list_id = LIST_IDS[listKey];\r\n//     if (!list_id) {\r\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n//     }\r\n\r\n//     // ---- Slack helpers ----\r\n//     async function slackJson(method, payload) {\r\n//       const r = await fetch(`https://slack.com/api/${method}`, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json; charset=utf-8\",\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       return r.json();\r\n//     }\r\n\r\n//     const plain = (v) => (v ?? \"\").toString().trim();\r\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     function toRichText(text) {\r\n//       const t = plain(text);\r\n//       return [{\r\n//         type: \"rich_text\",\r\n//         elements: [{\r\n//           type: \"rich_text_section\",\r\n//           elements: [{ type: \"text\", text: t }],\r\n//         }],\r\n//       }];\r\n//     }\r\n\r\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\r\n//     async function resolveTitleColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\r\n//       let fallback = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\r\n//           if (f.column_id && hasText) {\r\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\r\n//             if (!fallback) fallback = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return fallback; // first text-like field if we didn't find a perfect match\r\n//     }\r\n\r\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\r\n//     async function resolvePnSnColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       let candidate = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           if (!f.column_id) continue;\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const text = (f.text || \"\").toLowerCase();\r\n\r\n//           const looksPnSn =\r\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\r\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\r\n\r\n//           if (looksPnSn) return f.column_id;\r\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\r\n//             candidate = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return candidate;\r\n//     }\r\n\r\n//     // 1) Resolve columns\r\n//     const titleColId = await resolveTitleColId(list_id);\r\n//     if (!titleColId) {\r\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\r\n//     }\r\n\r\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\r\n//     const safeTitle = plain(title) || \"New Item\";\r\n//     const createBody = {\r\n//       list_id,\r\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\r\n//     };\r\n\r\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 3) (Minimal) update: PN/SN only, per your request\r\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\r\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\r\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\r\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\r\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n\r\n//     let updated = null;\r\n//     let usedPnSnCol = null;\r\n\r\n//     if (pnSnText) {\r\n//       const pnSnColId = await resolvePnSnColId(list_id);\r\n//       if (pnSnColId) {\r\n//         const cells = [{\r\n//           row_id: created.item.id,\r\n//           column_id: pnSnColId,\r\n//           rich_text: toRichText(pnSnText),\r\n//         }];\r\n\r\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\r\n//         usedPnSnCol = pnSnColId;\r\n//         // If update fails, we still return ok:false so you can see the error\r\n//         if (!updated?.ok) {\r\n//           return res.status(200).json({\r\n//             ok: false,\r\n//             error: updated?.error || \"update_failed\",\r\n//             mode: \"list\",\r\n//             list_id,\r\n//             item_id: created.item.id,\r\n//             used_title_col: titleColId,\r\n//             used_pnsn_col: usedPnSnCol,\r\n//           });\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleColId,\r\n//       used_pnsn_col: usedPnSnCol || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  try {\r\n    if (req.method !== \"POST\") {\r\n      return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n    }\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) {\r\n      return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n    }\r\n\r\n    // Incoming payload from your item page\r\n    const {\r\n      listKey,       // \"shipping\" | \"receiving\" | \"tasks\"\r\n      title,         // row title (primary column)\r\n      pn, sn,        // product/serial (single values already)\r\n      workOrder,     // string (most recent WO)\r\n      localSN,       // the item id\r\n      description,   // current description text\r\n      // shippingDate // intentionally left blank per your request\r\n      photoUrls = [],// array of image URLs (Firebase)\r\n      linkUrl        // optional: deep link back to your app\r\n    } = req.body || {};\r\n\r\n    // === Env-based config ===\r\n    const CFG = {\r\n      tasks: {\r\n        list_id:   process.env.SLACK_LIST_TASKS_ID,\r\n        title_col: process.env.SLACK_LIST_TASKS_TITLE_COL,\r\n        pnsn_col:  process.env.SLACK_LIST_TASKS_PNSN_COL,\r\n        workorder_col: process.env.SLACK_LIST_TASKS_WORKORDER_COL,\r\n        localsn_col:   process.env.SLACK_LIST_TASKS_LOCALSN_COL,\r\n        desc_col:      process.env.SLACK_LIST_TASKS_DESC_COL,\r\n        photos_col:    process.env.SLACK_LIST_TASKS_PHOTOS_COL,\r\n        link_col:      process.env.SLACK_LIST_TASKS_LINK_COL,\r\n        // shipdate_col: process.env.SLACK_LIST_TASKS_SHIPDATE_COL, // not used per request\r\n      },\r\n      shipping: {\r\n        list_id:   process.env.SLACK_LIST_SHIPPING_ID,\r\n        title_col: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\r\n        pnsn_col:  process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        workorder_col: process.env.SLACK_LIST_SHIPPING_WORKORDER_COL,\r\n        localsn_col:   process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        desc_col:      process.env.SLACK_LIST_SHIPPING_DESC_COL,\r\n        photos_col:    process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,\r\n        link_col:      process.env.SLACK_LIST_SHIPPING_LINK_COL,\r\n        // shipdate_col: process.env.SLACK_LIST_SHIPPING_SHIPDATE_COL, // leave blank\r\n      },\r\n      receiving: {\r\n        list_id:   process.env.SLACK_LIST_RECEIVING_ID,\r\n        title_col: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\r\n        pnsn_col:  process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        workorder_col: process.env.SLACK_LIST_RECEIVING_WORKORDER_COL,\r\n        localsn_col:   process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        desc_col:      process.env.SLACK_LIST_RECEIVING_DESC_COL,\r\n        photos_col:    process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,\r\n        link_col:      process.env.SLACK_LIST_RECEIVING_LINK_COL,\r\n        // shipdate_col: process.env.SLACK_LIST_RECEIVING_SHIPDATE_COL, // leave blank\r\n      },\r\n    }[listKey || \"\"];\r\n\r\n    if (!CFG?.list_id) {\r\n      return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n    }\r\n    if (!CFG.title_col) {\r\n      return res.status(400).json({\r\n        ok: false,\r\n        error: \"missing_title_column_in_env\",\r\n        fix: `Set SLACK_LIST_${(listKey || \"\").toUpperCase()}_TITLE_COL in .env.local`,\r\n      });\r\n    }\r\n\r\n    // --- Slack helpers ---\r\n    async function slackJson(method, payload) {\r\n      const r = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json; charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      return r.json();\r\n    }\r\n\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n    const toRichText = (text) => {\r\n      const t = plain(text);\r\n      return [{\r\n        type: \"rich_text\",\r\n        elements: [{\r\n          type: \"rich_text_section\",\r\n          elements: [{ type: \"text\", text: t }],\r\n        }],\r\n      }];\r\n    };\r\n\r\n    // generic setters with fallback between rich_text and text\r\n    async function setTextCell(list_id, row_id, column_id, value) {\r\n      if (!value) return { ok: true, mode: \"skipped\" };\r\n      // try rich_text first\r\n      let r = await slackJson(\"slackLists.items.update\", {\r\n        list_id, cells: [{ row_id, column_id, rich_text: toRichText(value) }],\r\n      });\r\n      if (r?.ok) return r;\r\n      if (r?.error === \"invalid_arguments\" || r?.error === \"invalid_input_type\") {\r\n        // fallback to plain text\r\n        r = await slackJson(\"slackLists.items.update\", {\r\n          list_id, cells: [{ row_id, column_id, text: plain(value) }],\r\n        });\r\n      }\r\n      return r;\r\n    }\r\n\r\n    // dates: we intentionally skip because you want shipping date blank\r\n    async function setDateCell(/*list_id, row_id, column_id, ymd*/) {\r\n      return { ok: true, mode: \"skipped\" };\r\n    }\r\n\r\n    // files: upload URLs as remote files → attach to the files column\r\n    async function setFilesCell(list_id, row_id, column_id, urls = []) {\r\n      const ids = [];\r\n      for (let i = 0; i < urls.length; i++) {\r\n        const url = plain(urls[i]);\r\n        if (!url) continue;\r\n        // Create a remote file record pointing to your existing URL\r\n        const add = await slackJson(\"files.remote.add\", {\r\n          external_url: url,\r\n          title: `Photo ${i + 1}`,\r\n        });\r\n        if (add?.ok && add?.file?.id) {\r\n          ids.push(add.file.id);\r\n        }\r\n      }\r\n      if (ids.length === 0) return { ok: true, mode: \"skipped\" };\r\n\r\n      // Try shape A: objects\r\n      let r = await slackJson(\"slackLists.items.update\", {\r\n        list_id,\r\n        cells: [{ row_id, column_id, files: ids.map((id) => ({ id })) }],\r\n      });\r\n      if (r?.ok) return r;\r\n\r\n      // Try shape B: raw ID array\r\n      if (r?.error === \"invalid_arguments\" || r?.error === \"invalid_input_type\") {\r\n        r = await slackJson(\"slackLists.items.update\", {\r\n          list_id,\r\n          cells: [{ row_id, column_id, file_ids: ids }],\r\n        });\r\n      }\r\n      return r;\r\n    }\r\n\r\n    // === 1) Create the row with title ===\r\n    const safeTitle = plain(title) || \"New Item\";\r\n    let created = await slackJson(\"slackLists.items.create\", {\r\n      list_id: CFG.list_id,\r\n      initial_fields: [{ column_id: CFG.title_col, rich_text: toRichText(safeTitle) }],\r\n    });\r\n\r\n    // Plain text fallback if Slack complains about rich_text\r\n    if (!created?.ok && created?.error === \"invalid_arguments\") {\r\n      created = await slackJson(\"slackLists.items.create\", {\r\n        list_id: CFG.list_id,\r\n        initial_fields: [{ column_id: CFG.title_col, text: safeTitle }],\r\n      });\r\n    }\r\n    if (!created?.ok) {\r\n      return res.status(200).json({\r\n        ok: false,\r\n        error: created?.error || \"create_failed\",\r\n        mode: \"list\",\r\n        list_id: CFG.list_id,\r\n        title_col: CFG.title_col,\r\n        sent_title: safeTitle,\r\n      });\r\n    }\r\n\r\n    const row_id = created.item.id;\r\n\r\n    // === 2) PN/SN (rich_text with fallback) ===\r\n    if (CFG.pnsn_col) {\r\n      const pnPart = pn ? `PN: ${plain(pn)}` : \"\";\r\n      const snPart = sn ? `SN: ${plain(sn)}` : \"\";\r\n      const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n      if (pnSnText) {\r\n        const r = await setTextCell(CFG.list_id, row_id, CFG.pnsn_col, pnSnText);\r\n        if (!r?.ok) {\r\n          return res.status(200).json({\r\n            ok: false,\r\n            error: r?.error || \"update_failed\",\r\n            mode: \"list\",\r\n            list_id: CFG.list_id,\r\n            item_id: row_id,\r\n            used_title_col: CFG.title_col,\r\n            used_pnsn_col: CFG.pnsn_col,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // === 3) Work Order ===\r\n    if (CFG.workorder_col && workOrder) {\r\n      const r = await setTextCell(CFG.list_id, row_id, CFG.workorder_col, workOrder);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({ ok: false, error: r?.error || \"update_failed\", list_id: CFG.list_id, item_id: row_id, used_workorder_col: CFG.workorder_col });\r\n      }\r\n    }\r\n\r\n    // === 4) LocalSN (your item ID) ===\r\n    if (CFG.localsn_col && localSN) {\r\n      const r = await setTextCell(CFG.list_id, row_id, CFG.localsn_col, localSN);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({ ok: false, error: r?.error || \"update_failed\", list_id: CFG.list_id, item_id: row_id, used_localsn_col: CFG.localsn_col });\r\n      }\r\n    }\r\n\r\n    // === 5) Description ===\r\n    if (CFG.desc_col && description) {\r\n      const r = await setTextCell(CFG.list_id, row_id, CFG.desc_col, description);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({ ok: false, error: r?.error || \"update_failed\", list_id: CFG.list_id, item_id: row_id, used_desc_col: CFG.desc_col });\r\n      }\r\n    }\r\n\r\n    // === 6) Link back to your app (optional text column)\r\n    if (CFG.link_col && linkUrl) {\r\n      const r = await setTextCell(CFG.list_id, row_id, CFG.link_col, linkUrl);\r\n      if (!r?.ok) {\r\n        return res.status(200).json({ ok: false, error: r?.error || \"update_failed\", list_id: CFG.list_id, item_id: row_id, used_link_col: CFG.link_col });\r\n      }\r\n    }\r\n\r\n    // === 7) Photos (files column) ===\r\n    if (CFG.photos_col && Array.isArray(photoUrls) && photoUrls.length) {\r\n      const r = await setFilesCell(CFG.list_id, row_id, CFG.photos_col, photoUrls);\r\n      if (!r?.ok) {\r\n        // As a last resort, drop the photo URLs into Description so you still see them\r\n        if (CFG.desc_col) {\r\n          const joined = `Photos:\\n${photoUrls.join(\"\\n\")}`;\r\n          await setTextCell(CFG.list_id, row_id, CFG.desc_col, [description, joined].filter(Boolean).join(\"\\n\\n\"));\r\n        }\r\n        return res.status(200).json({\r\n          ok: false,\r\n          error: r?.error || \"invalid_input_type\",\r\n          list_id: CFG.list_id,\r\n          item_id: row_id,\r\n          used_photos_col: CFG.photos_col,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Intentionally skipping shipdate to keep it blank\r\n\r\n    return res.status(200).json({\r\n      ok: true,\r\n      mode: \"list\",\r\n      list_id: CFG.list_id,\r\n      item_id: row_id,\r\n      used_title_col: CFG.title_col,\r\n      used_pnsn_col: CFG.pnsn_col || null,\r\n      used_workorder_col: CFG.workorder_col || null,\r\n      used_localsn_col: CFG.localsn_col || null,\r\n      used_desc_col: CFG.desc_col || null,\r\n      used_photos_col: CFG.photos_col || null,\r\n      sent_title: safeTitle,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API /slack/add-to-list crashed:\", err);\r\n    return res\r\n      .status(500)\r\n      .json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Button, Card, Container, Row, Col, Table } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\"; // Adjust the path as needed\n\nimport LoggedIn from \"../../../LoggedIn\";\n\nconst ClientComponent = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: client,\n    1: setClient\n  } = useState({\n    Company: '',\n    Name: '',\n    Location: '',\n    LastPM: '',\n    NextPM: '',\n    Machines: []\n  });\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const {\n    0: machineRefs,\n    1: setMachineRefs\n  } = useState([]);\n  useEffect(() => {\n    if (id) {\n      const db = firebase.firestore();\n      db.collection('Client').doc(id).get().then(async doc => {\n        if (doc.exists) {\n          const clientData = doc.data();\n          const machineReferences = clientData.Machines;\n          setMachineRefs(machineReferences);\n          const machines = await Promise.all(machineReferences.map(async ref => {\n            const machineDoc = await ref.get();\n            return machineDoc.exists ? machineDoc.data() : null;\n          }));\n          setClient(_objectSpread(_objectSpread({}, clientData), {}, {\n            Machines: machines.filter(m => m)\n          }));\n        }\n      }).catch(error => console.error('Error fetching client data:', error));\n    }\n  }, [id]);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setClient(_objectSpread(_objectSpread({}, client), {}, {\n      [name]: value\n    }));\n  };\n\n  const addMachine = () => {\n    const newId = 'AIS' + Math.floor(100000 + Math.random() * 900000);\n    router.push(`../Machines/${newId}`);\n  };\n\n  const deleteMachine = machineIndex => {\n    const newMachines = client.Machines.filter((_, index) => index !== machineIndex);\n    const newMachineRefs = machineRefs.filter((_, index) => index !== machineIndex);\n    setClient(_objectSpread(_objectSpread({}, client), {}, {\n      Machines: newMachines\n    }));\n    setMachineRefs(newMachineRefs);\n  };\n\n  const handleSubmit = () => {\n    const db = firebase.firestore();\n\n    const clientDataToSave = _objectSpread(_objectSpread({}, client), {}, {\n      Machines: machineRefs // Save only the references\n\n    });\n\n    db.collection('Client').doc(id).set(clientDataToSave).then(() => console.log('Client updated successfully')).catch(error => console.error('Error updating client:', error));\n  };\n\n  function convertDateToInputFormat(dateStr) {\n    if (!dateStr) return '';\n    const [month, day, year] = dateStr.split('/');\n    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n  }\n\n  function convertInputDateBack(dateStr) {\n    if (!dateStr) return '';\n    const [year, month, day] = dateStr.split('-');\n    return `${month}/${day}/${year}`;\n  }\n\n  const handleBack = () => {\n    router.back();\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Client Details\"), __jsx(Form, null, __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Company\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    name: \"Company\",\n    value: client.Company,\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Name\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    name: \"Name\",\n    value: client.Name,\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Location\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    name: \"Location\",\n    value: client.Location,\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Last PM\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"date\",\n    name: \"LastPM\",\n    value: convertDateToInputFormat(client.LastPM),\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Next PM\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"date\",\n    name: \"NextPM\",\n    value: convertDateToInputFormat(client.NextPM),\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Machine Brand\"), __jsx(\"th\", null, \"Machine Model\"), __jsx(\"th\", null, \"Actions\"))), __jsx(\"tbody\", null, client.Machines.map((machine, index) => __jsx(\"tr\", {\n    key: index\n  }, __jsx(\"td\", null, machine.Brand), __jsx(\"td\", null, machine.Model), __jsx(\"td\", null, __jsx(Button, {\n    variant: \"danger\",\n    onClick: () => deleteMachine(index)\n  }, \"Delete\")))))), __jsx(Row, null, __jsx(Col, {\n    xs: 6,\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: addMachine\n  }, \"Add Machine\")), __jsx(Col, {\n    xs: 6,\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: () => setEditMode(!editMode)\n  }, editMode ? 'Lock Fields' : 'Edit Fields')), __jsx(Col, {\n    xs: 6\n  }, __jsx(Button, {\n    variant: \"info\",\n    onClick: handleBack\n  }, \"Back\")), __jsx(Col, {\n    xs: 6\n  }, __jsx(Button, {\n    variant: \"success\",\n    onClick: handleSubmit\n  }, \"Submit Changes\")))))))));\n};\n\nexport default ClientComponent;","map":null,"metadata":{},"sourceType":"module"}
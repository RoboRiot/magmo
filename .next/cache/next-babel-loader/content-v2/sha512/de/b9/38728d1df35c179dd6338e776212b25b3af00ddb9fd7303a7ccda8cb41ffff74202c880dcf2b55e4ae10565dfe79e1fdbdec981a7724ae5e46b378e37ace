{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Card, Container } from \"react-bootstrap\";\nimport { useRouter } from \"next/router\";\nimport LoggedIn from \"../LoggedIn\";\n\nconst BluetoothPrint = () => {\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"Not Connected\");\n  const router = useRouter(); // Function to scan for available services\n\n  const scanBluetoothServices = async () => {\n    try {\n      setStatus(\"Requesting Bluetooth Device...\");\n      console.log(\"Requesting Bluetooth Device...\");\n      const device = await navigator.bluetooth.requestDevice({\n        acceptAllDevices: false,\n        filters: [{\n          name: \"ZD621-LAKEFOREST\"\n        }],\n        optionalServices: [\"00001801-0000-1000-8000-00805f9b34fb\", \"00001800-0000-1000-8000-00805f9b34fb\"] // Found services\n\n      });\n      console.log(`Connected to ${device.name}`);\n      setStatus(`Connected to ${device.name}`);\n      const server = await device.gatt.connect();\n      console.log(\"Connected to GATT Server!\"); // Get Generic Access service and log its characteristics\n\n      const accessService = await server.getPrimaryService(\"00001800-0000-1000-8000-00805f9b34fb\");\n      const accessCharacteristics = await accessService.getCharacteristics();\n      console.log(\"Generic Access Characteristics:\", accessCharacteristics.map(c => c.uuid)); // Get Generic Attribute service and log its characteristics\n\n      const attributeService = await server.getPrimaryService(\"00001801-0000-1000-8000-00805f9b34fb\");\n      const attributeCharacteristics = await attributeService.getCharacteristics();\n      console.log(\"Generic Attribute Characteristics:\", attributeCharacteristics.map(c => c.uuid));\n      setStatus(\"Characteristics scanned. Check console.\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setStatus(`Error: ${error.message}`);\n    }\n  }; // Function to print a label using the correct service UUID\n\n\n  const printLabel = async () => {\n    try {\n      setStatus(\"Requesting Bluetooth Device...\");\n      const device = await navigator.bluetooth.requestDevice({\n        acceptAllDevices: false,\n        filters: [{\n          name: \"ZD621-LAKEFOREST\"\n        }],\n        optionalServices: [\"49535343-fe7d-4ae5-8fa9-9fafd205e455\"] // Use the correct UUID found from scan\n\n      });\n      const server = await device.gatt.connect();\n      setStatus(\"Connected to GATT Server\"); // Use the correct UUID from your scan results\n\n      const service = await server.getPrimaryService(\"49535343-fe7d-4ae5-8fa9-9fafd205e455\");\n      const characteristic = await service.getCharacteristic(\"49535343-1e4d-4bd9-ba61-23c647249616\");\n      const zpl = \"^XA^FO50,50^A0N,50,50^FDTest Print^FS^XZ\";\n      const encoder = new TextEncoder();\n      const data = encoder.encode(zpl);\n      await characteristic.writeValue(data);\n      setStatus(\"Label Sent to Printer!\");\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setStatus(`Error: ${error.message}`);\n    }\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Print via Bluetooth\"), __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: scanBluetoothServices\n  }, \"Scan for Available Services\"), __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: printLabel\n  }, \"Connect & Print Label\"), __jsx(\"p\", null, \"Status: \", status), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: () => router.back()\n  }, \"Back\"))))));\n};\n\nexport default BluetoothPrint;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\mainSearch.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Card, Row, Col, InputGroup, Dropdown, FormControl, Button, NavDropdown, Form, Modal, Spinner } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { fetchPartsWithMachineData, fetchClients, fetchModels, formatDate } from \"../../utils/fetchAssociations\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\nimport ClientTable from \"../../utils/ClientTable\";\nimport ModelTable from \"../../utils/ModelTable\";\nimport PartTable from \"../../utils/PartTable\";\nimport styles from \"../../styles/MainSearch.module.css\";\nimport firebase from \"../../context/Firebase\"; // Predefined warehouse client IDs and display names\n\nconst SOCAL_CLIENT_ID = \"AIS17182\";\nconst NORCAL_CLIENT_ID = \"AIS25097\";\nconst UNASSIGNED_CLIENT_ID = \"AIS00404\"; // Simulates a network request delay\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n} // Custom LoadingButton component\n\n\nfunction LoadingButton({\n  type,\n  name,\n  route\n}) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n  return __jsx(Link, {\n    href: `/${route}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading,\n    onClick: () => !isLoading && setLoading(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, isLoading ? \"Loading…\" : name));\n}\n\nexport default function MainSearch() {\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: info,\n    1: setInfo\n  } = useState([]);\n  const {\n    0: backupInfo,\n    1: setBackupInfo\n  } = useState([]);\n  const {\n    0: ids,\n    1: setID\n  } = useState([]);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: dItem,\n    1: setDItem\n  } = useState();\n  const {\n    0: select,\n    1: setSelect\n  } = useState(\"Name\");\n  const {\n    0: showList,\n    1: setShowList\n  } = useState(false);\n  const {\n    0: showListSearch,\n    1: setShowListSearch\n  } = useState(\"text\");\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: selectedOEM,\n    1: setSelectedOEM\n  } = useState(null);\n  const {\n    0: selectedModality,\n    1: setSelectedModality\n  } = useState(null); // Replace the old single client state with two sets:\n\n  const {\n    0: selectedClientFrom,\n    1: setSelectedClientFrom\n  } = useState(null);\n  const {\n    0: clientFromButtonText,\n    1: setClientFromButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: selectedClientCurrent,\n    1: setSelectedClientCurrent\n  } = useState(null);\n  const {\n    0: clientCurrentButtonText,\n    1: setClientCurrentButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: showClientModal,\n    1: setShowClientModal\n  } = useState(false); // This state tells the modal which client box is being updated: \"from\" or \"current\"\n\n  const {\n    0: clientSelectionType,\n    1: setClientSelectionType\n  } = useState(null);\n  const router = useRouter();\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  const sortCheckBase = [false, false, false, false, false, false];\n  const {\n    0: labels,\n    1: setLabels\n  } = useState(labelBase);\n  const {\n    0: sortCheck,\n    1: setSortCheck\n  } = useState(sortCheckBase);\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState(null);\n  const {\n    0: selectedModel,\n    1: setSelectedModel\n  } = useState(null);\n  const {\n    0: gPos,\n    1: setGPos\n  } = useState(null);\n  const {\n    0: gIde,\n    1: setGIde\n  } = useState(null);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false); // Fetch data on component mount and route change\n\n  useEffect(() => {\n    fetchData();\n  }, [router.route]);\n\n  async function fetchData() {\n    if (router.query.inputText && router.query.selectedType) {\n      setSelect(router.query.selectedType);\n      setSearch(router.query.inputText);\n    }\n\n    const data = await fetchPartsWithMachineData();\n    setInfo(data);\n    setBackupInfo(data);\n    setID(data.map(item => item.id)); // Ensure IDs are correctly set here\n  }\n\n  const searchChangeHandler = event => setSearch(event.target.value); // Asynchronous filter function that loops through backupInfo and,\n  // for each item, fetches its Machine and CurrentMachine documents,\n  // then compares the client id (from machineData.client.id) to the selected client.\n\n\n  useEffect(() => {\n    async function filterParts() {\n      console.log(\"filterParts called with selectedClientFrom:\", selectedClientFrom, \"selectedClientCurrent:\", selectedClientCurrent);\n      const filtered = await Promise.all(backupInfo.map(async item => {\n        if (!item.visible) {\n          return null;\n        }\n\n        let passes = true; // Check OEM, Modality, and Model from machineData (if available)\n\n        if (item.machineData) {\n          if (selectedOEM && item.machineData.OEM !== selectedOEM) passes = false;\n          if (selectedModality && item.machineData.Modality !== selectedModality) passes = false;\n          if (selectedModel && item.machineData.Model !== selectedModel) passes = false;\n        } // For Client From: use the part’s Machine reference\n\n\n        if (passes && selectedClientFrom) {\n          if (!item.Machine) {\n            console.log(`Item ${item.id} has no Machine reference.`);\n            passes = false;\n          } else {\n            try {\n              const machineSnap = await item.Machine.get();\n\n              if (!machineSnap.exists) {\n                console.log(`Item ${item.id} Machine document does not exist.`);\n                passes = false;\n              } else {\n                const machineData = machineSnap.data();\n\n                if (!machineData.client) {\n                  console.log(`Item ${item.id} Machine has no client reference.`);\n                  passes = false;\n                } else {\n                  // Get the client id from the DocumentReference\n                  const clientFromId = machineData.client.id;\n                  console.log(`Item ${item.id}: fetched Client From id = ${clientFromId}, selectedClientFrom = ${selectedClientFrom}`);\n                  if (clientFromId !== selectedClientFrom) passes = false;\n                }\n              }\n            } catch (error) {\n              console.error(`Error fetching Machine for item ${item.id}:`, error);\n              passes = false;\n            }\n          }\n        } // For Client Current: use the part’s CurrentMachine reference\n\n\n        if (passes && selectedClientCurrent) {\n          if (!item.CurrentMachine) {\n            console.log(`Item ${item.id} has no CurrentMachine reference.`);\n            passes = false;\n          } else {\n            try {\n              const currentMachineSnap = await item.CurrentMachine.get();\n\n              if (!currentMachineSnap.exists) {\n                console.log(`Item ${item.id} CurrentMachine document does not exist.`);\n                passes = false;\n              } else {\n                const currentMachineData = currentMachineSnap.data();\n\n                if (!currentMachineData.client) {\n                  console.log(`Item ${item.id} CurrentMachine has no client reference.`);\n                  passes = false;\n                } else {\n                  const clientCurrentId = currentMachineData.client.id;\n                  console.log(`Item ${item.id}: fetched Client Current id = ${clientCurrentId}, selectedClientCurrent = ${selectedClientCurrent}`);\n                  if (clientCurrentId !== selectedClientCurrent) passes = false;\n                }\n              }\n            } catch (error) {\n              console.error(`Error fetching CurrentMachine for item ${item.id}:`, error);\n              passes = false;\n            }\n          }\n        } // If search text is not empty, apply additional filtering\n\n\n        if (passes && search !== \"\") {\n          if (select === \"Name\" && !item.name.toLowerCase().includes(search.toLowerCase())) passes = false;\n\n          if (select === \"Date\") {\n            const [month, day, year] = item.date.split(\"/\");\n            const reformattedDate = `${year}-${month}-${day}`;\n            if (reformattedDate !== search) passes = false;\n          }\n\n          if (select === \"Work Order\") {\n            const hasMatch = item.workOrders && item.workOrders.some(wo => wo.workOrder.toLowerCase().includes(search.toLowerCase()));\n            if (!hasMatch) passes = false;\n          }\n\n          if (select === \"Product Number\" && item.pn !== search) passes = false;\n          if (select === \"Description\" && !item.desc.toLowerCase().includes(search.toLowerCase())) passes = false;\n          if (select === \"SKU\" && !item.id.toLowerCase().includes(search.toLowerCase())) passes = false;\n        }\n\n        return passes ? item : null;\n      }));\n      const filteredResults = filtered.filter(item => item !== null);\n      console.log(\"Filtered result count:\", filteredResults.length);\n      setInfo(filteredResults);\n    }\n\n    filterParts();\n  }, [selectedOEM, selectedModality, selectedClientFrom, selectedClientCurrent, selectedModel, search, backupInfo]);\n\n  function sortCheckAll(pos) {\n    const sortedInfo = [...info].sort((a, b) => {\n      if (pos === 0 || pos === 5) {\n        return sortCheck[pos] ? b[labelBaseNames[pos]].localeCompare(a[labelBaseNames[pos]]) : a[labelBaseNames[pos]].localeCompare(b[labelBaseNames[pos]]);\n      }\n\n      if (pos === 1) {\n        return sortCheck[pos] ? Date.parse(b[labelBaseNames[pos]]) - Date.parse(a[labelBaseNames[pos]]) : Date.parse(a[labelBaseNames[pos]]) - Date.parse(b[labelBaseNames[pos]]);\n      }\n\n      return sortCheck[pos] ? Number(b[labelBaseNames[pos]]) - Number(a[labelBaseNames[pos]]) : Number(a[labelBaseNames[pos]]) - Number(b[labelBaseNames[pos]]);\n    });\n    setInfo(sortedInfo);\n    setSortCheck(prevSortCheck => prevSortCheck.map((_, index) => index === pos ? !prevSortCheck[pos] : prevSortCheck[index]));\n  }\n\n  const rowSelect = item => {\n    if (item && item.id) {\n      console.log(\"Selected item:\", item);\n      router.push(\"./item/\" + item.id);\n    } else {\n      console.error(\"Unable to determine the selected item’s ID: \", item);\n    }\n  };\n\n  const {\n    0: selectedItems,\n    1: setSelectedItems\n  } = useState([]);\n  const {\n    0: showDeleteModal,\n    1: setShowDeleteModal\n  } = useState(false);\n\n  const handleSelectItem = id => {\n    setSelectedItems(prev => {\n      const newSelection = prev.includes(id) ? prev.filter(itemId => itemId !== id) : [...prev, id];\n      console.log(\"Selected items:\", newSelection);\n    });\n  };\n\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n\n  const handleDeleteSelected = async () => {\n    setIsDeleting(true);\n    const db = firebase.firestore();\n\n    try {\n      // Loop over each selected item one at a time\n      for (const itemId of selectedItems) {\n        console.log(itemId);\n\n        try {\n          // Delete from \"Test\" collection\n          await db.collection(\"Test\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Test:`, err);\n        }\n\n        try {\n          // Delete from \"Parts\" collection\n          await db.collection(\"Parts\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Parts:`, err);\n        }\n\n        try {\n          // Delete associated photos from storage\n          await deleteFromStorage(itemId);\n        } catch (err) {\n          console.error(`Error deleting storage for ${itemId}:`, err);\n        }\n      } // Update local state by filtering out the deleted items\n\n\n      setInfo(info.filter(item => !selectedItems.includes(item.id)));\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Error deleting items:\", error);\n    } finally {\n      setIsDeleting(false);\n      handleCloseDeleteModal(); // Optionally, reload the page\n      // router.reload();\n    }\n  };\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const checkDelete = (event, pos, idsToDelete, name) => {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    console.log(\"Selected IDs to delete:\", idsToDelete);\n    setSelectedItems(idsToDelete);\n    setDItem(name);\n    setShowDeleteModal(true);\n  }; // const handleDelete = async () => {\n  //   let itemId = gIde;\n  //   try {\n  //     setIsDeleting(true);\n  //     const db = firebase.firestore();\n  //     await db.collection(\"Test\").doc(itemId).delete();\n  //     await deleteFromPartsCollection(itemId);\n  //     await deleteFromStorage(itemId);\n  //     setInfo(info.filter((_, i) => gPos !== i));\n  //     console.log(`Deleted item: ${itemId}`);\n  //   } catch (error) {\n  //     console.error(\"Error deleting item:\", error);\n  //   } finally {\n  //     setIsDeleting(false);\n  //   }\n  //   handleClose();\n  // };\n\n\n  const hoverStyle = index => ({\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n    textAlign: \"center\",\n    cursor: \"default\"\n  });\n\n  const {\n    0: dropdown1Text,\n    1: setDropdown1Text\n  } = useState(\"Select Option\");\n  const {\n    0: dropdown2Text,\n    1: setDropdown2Text\n  } = useState(\"Select Option\");\n\n  const handleSelect1 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  const handleSelect2 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  }; // --------------------\n  // CLIENT SELECTION HANDLING\n  // --------------------\n  // This function fetches clients and opens the client modal.\n\n\n  const handleClientClick = async () => {\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\n    setClients(clientsData);\n    setClientSearchTerm(\"\");\n    setShowClientModal(true);\n  }; // When a client is selected in the modal, we now assume the parameter is a client ID.\n  // If the passed value is null, we clear the selection.\n\n\n  const handleClientSelect = async clientId => {\n    console.log(\"User selected client id:\", clientId);\n\n    if (!clientId) {\n      if (clientSelectionType === \"from\") {\n        setClientFromButtonText(\"Select Option\");\n        setSelectedClientFrom(null);\n      } else if (clientSelectionType === \"current\") {\n        setClientCurrentButtonText(\"Select Option\");\n        setSelectedClientCurrent(null);\n      }\n\n      setShowClientModal(false);\n      return;\n    }\n\n    try {\n      const clientSnap = await firebase.firestore().collection(\"Client\").doc(clientId).get();\n\n      if (clientSnap.exists) {\n        const clientData = clientSnap.data();\n\n        if (clientSelectionType === \"from\") {\n          setClientFromButtonText(clientData.name);\n          setSelectedClientFrom(clientId);\n        } else if (clientSelectionType === \"current\") {\n          setClientCurrentButtonText(clientData.name);\n          setSelectedClientCurrent(clientId);\n        }\n      } else {\n        console.error(\"No client document found for id:\", clientId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n    }\n\n    setShowClientModal(false);\n  };\n\n  const handleClientInfo = (clientId, clientName) => {\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\n    router.push(\"client/\" + clientId);\n  };\n\n  const handleClearClientSelection = () => {\n    if (clientSelectionType === \"from\") {\n      setClientFromButtonText(\"Select Option\");\n      setSelectedClientFrom(null);\n    } else if (clientSelectionType === \"current\") {\n      setClientCurrentButtonText(\"Select Option\");\n      setSelectedClientCurrent(null);\n    }\n\n    setShowClientModal(false);\n  }; // --------------------\n  // MODEL SELECTION HANDLING\n  // --------------------\n\n\n  const {\n    0: models,\n    1: setModels\n  } = useState([]);\n  const {\n    0: showModelModal,\n    1: setShowModelModal\n  } = useState(false);\n  const {\n    0: modelButtonText,\n    1: setModelButtonText\n  } = useState(\"Select Option\");\n\n  const handleModelClick = async () => {\n    const modelsData = await fetchModels(selectedOEM, selectedModality, selectedClientFrom);\n    setModels(modelsData);\n    setModelSearchTerm(\"\");\n    setShowModelModal(true);\n  };\n\n  const handleModelSelect = modelName => {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  };\n\n  const handleClearModelSelection = () => {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n  }; // --------------------\n  // WAREHOUSE BUTTONS (for Client Current)\n  // --------------------\n\n\n  const handleSoCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"SoCal Warehouse\");\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\n  };\n\n  const handleNorCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"NorCal Warehouse\");\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\n  };\n\n  const handleWarehouseUnassignedClick = () => {\n    setClientCurrentButtonText(\"Unassigned\");\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\n  };\n\n  const {\n    0: clientSearchTerm,\n    1: setClientSearchTerm\n  } = useState(\"\");\n  const {\n    0: modelSearchTerm,\n    1: setModelSearchTerm\n  } = useState(\"\");\n\n  const deleteFromStorage = async itemId => {\n    const storageRef = firebase.storage().ref();\n    const folderRef = storageRef.child(`Parts/${itemId}/`);\n\n    try {\n      const listResult = await folderRef.listAll();\n      const deletePromises = listResult.items.map(item => item.delete());\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\"Error deleting from storage:\", error);\n    }\n  };\n\n  const deleteFromPartsCollection = async itemId => {\n    const db = firebase.firestore();\n\n    try {\n      await db.collection(\"Parts\").doc(itemId).delete();\n      console.log(`Deleted item from Parts collection: ${itemId}`);\n    } catch (error) {\n      console.error(\"Error deleting from Parts collection:\", error);\n    }\n  };\n\n  return __jsx(LoggedIn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 5\n    }\n  }, isDeleting && __jsx(\"div\", {\n    className: \"loading-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    className: \"spinner-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 13\n    }\n  }, \"Loading...\"))), __jsx(Modal, {\n    show: showDeleteModal,\n    onHide: handleCloseDeleteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 11\n    }\n  }, \"Confirm Deletion\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 9\n    }\n  }, \"Are you sure you want to delete \", selectedItems.length, \" item\", selectedItems.length > 1 ? \"s\" : \"\", \"?\"), __jsx(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 11\n    }\n  }, \"Yes, delete\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseDeleteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))), __jsx(Modal, {\n    show: showClientModal,\n    onHide: () => setShowClientModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 11\n    }\n  }, \"Select \", clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: clientSearchTerm,\n    onChange: e => setClientSearchTerm(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 11\n    }\n  }), __jsx(ClientTable, {\n    clients: clients.filter(client => client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())),\n    onSelectClient: handleClientSelect,\n    onInfoClick: handleClientInfo,\n    isClientSearch: false,\n    clearSelection: () => handleClientSelect(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 11\n    }\n  }))), __jsx(Modal, {\n    show: showModelModal,\n    onHide: () => setShowModelModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 11\n    }\n  }, \"Select Model\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: modelSearchTerm,\n    onChange: e => setModelSearchTerm(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 11\n    }\n  }), __jsx(ModelTable, {\n    models: models.filter(model => typeof model === \"string\" ? model.toLowerCase().includes(modelSearchTerm.toLowerCase()) : false),\n    onSelectModel: handleModelSelect,\n    clearSelection: () => handleModelSelect(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 11\n    }\n  }))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"1200px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    className: \"text-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 15\n    }\n  }, \"Magmo\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 15\n    }\n  }, __jsx(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 19\n    }\n  }, __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 23\n    }\n  }, \"OEM\"), __jsx(Dropdown, {\n    onSelect: handleSelect1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 23\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-1\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 25\n    }\n  }, dropdown1Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 25\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 27\n    }\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"GE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 27\n    }\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 27\n    }\n  }, \"Toshiba\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 27\n    }\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 27\n    }\n  }, \"Philips\")))), __jsx(InputGroup, {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 23\n    }\n  }, \"Modality\"), __jsx(Dropdown, {\n    onSelect: handleSelect2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 23\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-2\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 25\n    }\n  }, dropdown2Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 25\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 27\n    }\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"CT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 27\n    }\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 27\n    }\n  }, \"MRI\"))))), __jsx(\"div\", {\n    className: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 19\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 19\n    }\n  }, __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 23\n    }\n  }, \"Client From\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"from\");\n      handleClientClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 23\n    }\n  }, clientFromButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 23\n    }\n  }, \"Client Current\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"current\");\n      handleClientClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 23\n    }\n  }, clientCurrentButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 23\n    }\n  }, \"Model\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleModelClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 23\n    }\n  }, modelButtonText)), __jsx(\"div\", {\n    className: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 21\n    }\n  }), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 23\n    }\n  }, \"Warehouse\"), __jsx(\"div\", {\n    className: styles.buttonGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleSoCalWarehouseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 25\n    }\n  }, \"SoCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleNorCalWarehouseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 25\n    }\n  }, \"NorCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleWarehouseUnassignedClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 25\n    }\n  }, \"Unassigned\"))))), __jsx(Col, {\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: styles.tableContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 746,\n      columnNumber: 19\n    }\n  }, __jsx(PartTable, {\n    info: info,\n    labels: labels,\n    ids: ids,\n    hoverStyle: hoverStyle,\n    sortCheckAll: sortCheckAll,\n    checkDelete: checkDelete,\n    isDeleting: isDeleting,\n    rowSelect: rowSelect,\n    setHoverIndex: setHoverIndex,\n    hoverIndex: hoverIndex,\n    selectedItems: selectedItems // Pass selectedItems state\n    ,\n    setSelectedItems: setSelectedItems // Pass its setter\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 747,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    className: styles.searchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 21\n    }\n  }, __jsx(Form, {\n    className: \"d-flex pb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 23\n    }\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2 flex-grow-1\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler,\n    style: {\n      flex: \"1\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 25\n    }\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: () => setShowList(true),\n    onMouseLeave: () => setShowList(false),\n    style: {\n      marginTop: \"-5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 774,\n      columnNumber: 25\n    }\n  }, __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Name\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 27\n    }\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Date\");\n      setShowListSearch(\"date\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 785,\n      columnNumber: 27\n    }\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Work Order\");\n      setShowListSearch(\"number\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 27\n    }\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Product Number\");\n      setShowListSearch(\"number\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 791,\n      columnNumber: 27\n    }\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Description\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 27\n    }\n  }, \"Description\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"SKU\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 27\n    }\n  }, \"SKU\"))), __jsx(\"div\", {\n    className: \"d-flex justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 807,\n      columnNumber: 23\n    }\n  }, __jsx(LoadingButton, {\n    type: \"secondary\",\n    name: \"Add New Item\",\n    route: \"NewSearch/AddItem/NewItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 808,\n      columnNumber: 25\n    }\n  }), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"Warehousedb/WarehouseSelect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 25\n    }\n  })))))))))));\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/mainSearch.js"],"names":["React","useEffect","useState","Container","Card","Row","Col","InputGroup","Dropdown","FormControl","Button","NavDropdown","Form","Modal","Spinner","Link","useRouter","fetchPartsWithMachineData","fetchClients","fetchModels","formatDate","useAuth","LoggedIn","ClientTable","ModelTable","PartTable","styles","firebase","SOCAL_CLIENT_ID","NORCAL_CLIENT_ID","UNASSIGNED_CLIENT_ID","simulateNetworkRequest","Promise","resolve","setTimeout","LoadingButton","type","name","route","isLoading","setLoading","then","MainSearch","signOut","info","setInfo","backupInfo","setBackupInfo","ids","setID","show","setShow","dItem","setDItem","select","setSelect","showList","setShowList","showListSearch","setShowListSearch","search","setSearch","selectedOEM","setSelectedOEM","selectedModality","setSelectedModality","selectedClientFrom","setSelectedClientFrom","clientFromButtonText","setClientFromButtonText","selectedClientCurrent","setSelectedClientCurrent","clientCurrentButtonText","setClientCurrentButtonText","clients","setClients","showClientModal","setShowClientModal","clientSelectionType","setClientSelectionType","router","labelBase","labelBaseNames","sortCheckBase","labels","setLabels","sortCheck","setSortCheck","hoverIndex","setHoverIndex","selectedModel","setSelectedModel","gPos","setGPos","gIde","setGIde","isDeleting","setIsDeleting","fetchData","query","inputText","selectedType","data","map","item","id","searchChangeHandler","event","target","value","filterParts","console","log","filtered","all","visible","passes","machineData","OEM","Modality","Model","Machine","machineSnap","get","exists","client","clientFromId","error","CurrentMachine","currentMachineSnap","currentMachineData","clientCurrentId","toLowerCase","includes","month","day","year","date","split","reformattedDate","hasMatch","workOrders","some","wo","workOrder","pn","desc","filteredResults","filter","length","sortCheckAll","pos","sortedInfo","sort","a","b","localeCompare","Date","parse","Number","prevSortCheck","_","index","rowSelect","push","selectedItems","setSelectedItems","showDeleteModal","setShowDeleteModal","handleSelectItem","prev","newSelection","itemId","handleShowDeleteModal","handleCloseDeleteModal","handleDeleteSelected","db","firestore","collection","doc","delete","err","deleteFromStorage","handleClose","handleShow","checkDelete","idsToDelete","preventDefault","stopPropagation","hoverStyle","backgroundColor","textAlign","cursor","dropdown1Text","setDropdown1Text","dropdown2Text","setDropdown2Text","handleSelect1","eventKey","textContent","handleSelect2","handleClientClick","clientsData","setClientSearchTerm","handleClientSelect","clientId","clientSnap","clientData","handleClientInfo","clientName","handleClearClientSelection","models","setModels","showModelModal","setShowModelModal","modelButtonText","setModelButtonText","handleModelClick","modelsData","setModelSearchTerm","handleModelSelect","modelName","handleClearModelSelection","handleSoCalWarehouseClick","handleNorCalWarehouseClick","handleWarehouseUnassignedClick","clientSearchTerm","modelSearchTerm","storageRef","storage","ref","folderRef","child","listResult","listAll","deletePromises","items","deleteFromPartsCollection","e","model","minHeight","maxWidth","divider","buttonGroup","flexButton","tableContainer","searchContainer","flex","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Card,\n  Row,\n  Col,\n  InputGroup,\n  Dropdown,\n  FormControl,\n  Button,\n  NavDropdown,\n  Form,\n  Modal,\n  Spinner,\n} from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport {\n  fetchPartsWithMachineData,\n  fetchClients,\n  fetchModels,\n  formatDate,\n} from \"../../utils/fetchAssociations\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\nimport ClientTable from \"../../utils/ClientTable\";\nimport ModelTable from \"../../utils/ModelTable\";\nimport PartTable from \"../../utils/PartTable\";\nimport styles from \"../../styles/MainSearch.module.css\";\nimport firebase from \"../../context/Firebase\";\n\n// Predefined warehouse client IDs and display names\nconst SOCAL_CLIENT_ID = \"AIS17182\";\nconst NORCAL_CLIENT_ID = \"AIS25097\";\nconst UNASSIGNED_CLIENT_ID = \"AIS00404\";\n\n\n// Simulates a network request delay\nfunction simulateNetworkRequest() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\n// Custom LoadingButton component\nfunction LoadingButton({ type, name, route }) {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n\n  return (\n    <Link href={`/${route}`}>\n      <a\n        className={`btn btn-${type}`}\n        disabled={isLoading}\n        onClick={() => !isLoading && setLoading(true)}\n      >\n        {isLoading ? \"Loading…\" : name}\n      </a>\n    </Link>\n  );\n}\n\nexport default function MainSearch() {\n  const { signOut } = useAuth();\n  const [info, setInfo] = useState([]);\n  const [backupInfo, setBackupInfo] = useState([]);\n  const [ids, setID] = useState([]);\n  const [show, setShow] = useState(false);\n  const [dItem, setDItem] = useState();\n  const [select, setSelect] = useState(\"Name\");\n  const [showList, setShowList] = useState(false);\n  const [showListSearch, setShowListSearch] = useState(\"text\");\n  const [search, setSearch] = useState(\"\");\n  const [selectedOEM, setSelectedOEM] = useState(null);\n  const [selectedModality, setSelectedModality] = useState(null);\n  // Replace the old single client state with two sets:\n  const [selectedClientFrom, setSelectedClientFrom] = useState(null);\n  const [clientFromButtonText, setClientFromButtonText] = useState(\"Select Option\");\n  const [selectedClientCurrent, setSelectedClientCurrent] = useState(null);\n  const [clientCurrentButtonText, setClientCurrentButtonText] = useState(\"Select Option\");\n\n  const [clients, setClients] = useState([]);\n  const [showClientModal, setShowClientModal] = useState(false);\n  // This state tells the modal which client box is being updated: \"from\" or \"current\"\n  const [clientSelectionType, setClientSelectionType] = useState(null);\n\n  const router = useRouter();\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  const sortCheckBase = [false, false, false, false, false, false];\n  const [labels, setLabels] = useState(labelBase);\n  const [sortCheck, setSortCheck] = useState(sortCheckBase);\n  const [hoverIndex, setHoverIndex] = useState(null);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [gPos, setGPos] = useState(null);\n  const [gIde, setGIde] = useState(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n\n  // Fetch data on component mount and route change\n  useEffect(() => {\n    fetchData();\n  }, [router.route]);\n\n  async function fetchData() {\n    if (router.query.inputText && router.query.selectedType) {\n      setSelect(router.query.selectedType);\n      setSearch(router.query.inputText);\n    }\n    const data = await fetchPartsWithMachineData();\n    setInfo(data);\n    setBackupInfo(data);\n    setID(data.map((item) => item.id)); // Ensure IDs are correctly set here\n  }\n\n  const searchChangeHandler = (event) => setSearch(event.target.value);\n\n  // Asynchronous filter function that loops through backupInfo and,\n  // for each item, fetches its Machine and CurrentMachine documents,\n  // then compares the client id (from machineData.client.id) to the selected client.\n  useEffect(() => {\n    async function filterParts() {\n      console.log(\n        \"filterParts called with selectedClientFrom:\",\n        selectedClientFrom,\n        \"selectedClientCurrent:\",\n        selectedClientCurrent\n      );\n      const filtered = await Promise.all(\n        backupInfo.map(async (item) => {\n          if (!item.visible) {\n            return null;\n          }\n          \n          let passes = true;\n          // Check OEM, Modality, and Model from machineData (if available)\n          if (item.machineData) {\n            if (selectedOEM && item.machineData.OEM !== selectedOEM) passes = false;\n            if (selectedModality && item.machineData.Modality !== selectedModality)\n              passes = false;\n            if (selectedModel && item.machineData.Model !== selectedModel) passes = false;\n          }\n          // For Client From: use the part’s Machine reference\n          if (passes && selectedClientFrom) {\n            if (!item.Machine) {\n              console.log(`Item ${item.id} has no Machine reference.`);\n              passes = false;\n            } else {\n              try {\n                const machineSnap = await item.Machine.get();\n                if (!machineSnap.exists) {\n                  console.log(`Item ${item.id} Machine document does not exist.`);\n                  passes = false;\n                } else {\n                  const machineData = machineSnap.data();\n                  if (!machineData.client) {\n                    console.log(`Item ${item.id} Machine has no client reference.`);\n                    passes = false;\n                  } else {\n                    // Get the client id from the DocumentReference\n                    const clientFromId = machineData.client.id;\n                    console.log(\n                      `Item ${item.id}: fetched Client From id = ${clientFromId}, selectedClientFrom = ${selectedClientFrom}`\n                    );\n                    if (clientFromId !== selectedClientFrom) passes = false;\n                  }\n                }\n              } catch (error) {\n                console.error(`Error fetching Machine for item ${item.id}:`, error);\n                passes = false;\n              }\n            }\n          }\n          // For Client Current: use the part’s CurrentMachine reference\n          if (passes && selectedClientCurrent) {\n            if (!item.CurrentMachine) {\n              console.log(`Item ${item.id} has no CurrentMachine reference.`);\n              passes = false;\n            } else {\n              try {\n                const currentMachineSnap = await item.CurrentMachine.get();\n                if (!currentMachineSnap.exists) {\n                  console.log(`Item ${item.id} CurrentMachine document does not exist.`);\n                  passes = false;\n                } else {\n                  const currentMachineData = currentMachineSnap.data();\n                  if (!currentMachineData.client) {\n                    console.log(`Item ${item.id} CurrentMachine has no client reference.`);\n                    passes = false;\n                  } else {\n                    const clientCurrentId = currentMachineData.client.id;\n                    console.log(\n                      `Item ${item.id}: fetched Client Current id = ${clientCurrentId}, selectedClientCurrent = ${selectedClientCurrent}`\n                    );\n                    if (clientCurrentId !== selectedClientCurrent) passes = false;\n                  }\n                }\n              } catch (error) {\n                console.error(`Error fetching CurrentMachine for item ${item.id}:`, error);\n                passes = false;\n              }\n            }\n          }\n          // If search text is not empty, apply additional filtering\n          if (passes && search !== \"\") {\n            if (select === \"Name\" && !item.name.toLowerCase().includes(search.toLowerCase()))\n              passes = false;\n            if (select === \"Date\") {\n              const [month, day, year] = item.date.split(\"/\");\n              const reformattedDate = `${year}-${month}-${day}`;\n              if (reformattedDate !== search) passes = false;\n            }\n            if (select === \"Work Order\") {\n              const hasMatch =\n                item.workOrders &&\n                item.workOrders.some((wo) =>\n                  wo.workOrder.toLowerCase().includes(search.toLowerCase())\n                );\n              if (!hasMatch) passes = false;\n            }            \n            if (select === \"Product Number\" && item.pn !== search) passes = false;\n            if (select === \"Description\" && !item.desc.toLowerCase().includes(search.toLowerCase()))\n              passes = false;\n            if (select === \"SKU\" && !item.id.toLowerCase().includes(search.toLowerCase()))\n              passes = false;\n          }\n          return passes ? item : null;\n        })\n      );\n      const filteredResults = filtered.filter((item) => item !== null);\n      console.log(\"Filtered result count:\", filteredResults.length);\n      setInfo(filteredResults);\n    }\n    filterParts();\n  }, [\n    selectedOEM,\n    selectedModality,\n    selectedClientFrom,\n    selectedClientCurrent,\n    selectedModel,\n    search,\n    backupInfo,\n  ]);\n\n  function sortCheckAll(pos) {\n    const sortedInfo = [...info].sort((a, b) => {\n      if (pos === 0 || pos === 5) {\n        return sortCheck[pos]\n          ? b[labelBaseNames[pos]].localeCompare(a[labelBaseNames[pos]])\n          : a[labelBaseNames[pos]].localeCompare(b[labelBaseNames[pos]]);\n      }\n      if (pos === 1) {\n        return sortCheck[pos]\n          ? Date.parse(b[labelBaseNames[pos]]) - Date.parse(a[labelBaseNames[pos]])\n          : Date.parse(a[labelBaseNames[pos]]) - Date.parse(b[labelBaseNames[pos]]);\n      }\n      return sortCheck[pos]\n        ? Number(b[labelBaseNames[pos]]) - Number(a[labelBaseNames[pos]])\n        : Number(a[labelBaseNames[pos]]) - Number(b[labelBaseNames[pos]]);\n    });\n    setInfo(sortedInfo);\n    setSortCheck((prevSortCheck) =>\n      prevSortCheck.map((_, index) =>\n        index === pos ? !prevSortCheck[pos] : prevSortCheck[index]\n      )\n    );\n  }\n\n  const rowSelect = (item) => {\n    if (item && item.id) {\n      console.log(\"Selected item:\", item);\n      router.push(\"./item/\" + item.id);\n    } else {\n      console.error(\"Unable to determine the selected item’s ID: \", item);\n    }\n  };\n\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const handleSelectItem = (id) => {\n    setSelectedItems((prev) => {\n      const newSelection = prev.includes(id) ? prev.filter((itemId) => itemId !== id) : [...prev, id]\n      console.log(\"Selected items:\", newSelection);\n    });\n  };\n\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n\n  const handleDeleteSelected = async () => {\n    setIsDeleting(true);\n    const db = firebase.firestore();\n    try {\n      // Loop over each selected item one at a time\n      for (const itemId of selectedItems) {\n        console.log(itemId)\n        try {\n          // Delete from \"Test\" collection\n          await db.collection(\"Test\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Test:`, err);\n        }\n        try {\n          // Delete from \"Parts\" collection\n          await db.collection(\"Parts\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Parts:`, err);\n        }\n        try {\n          // Delete associated photos from storage\n          await deleteFromStorage(itemId);\n        } catch (err) {\n          console.error(`Error deleting storage for ${itemId}:`, err);\n        }\n      }\n      // Update local state by filtering out the deleted items\n      setInfo(info.filter((item) => !selectedItems.includes(item.id)));\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Error deleting items:\", error);\n    } finally {\n      setIsDeleting(false);\n      handleCloseDeleteModal();\n      // Optionally, reload the page\n      // router.reload();\n    }\n  };\n\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const checkDelete = (event, pos, idsToDelete, name) => {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    console.log(\"Selected IDs to delete:\", idsToDelete);\n    setSelectedItems(idsToDelete);\n    setDItem(name);\n    setShowDeleteModal(true);\n  };\n\n  // const handleDelete = async () => {\n  //   let itemId = gIde;\n  //   try {\n  //     setIsDeleting(true);\n  //     const db = firebase.firestore();\n  //     await db.collection(\"Test\").doc(itemId).delete();\n  //     await deleteFromPartsCollection(itemId);\n  //     await deleteFromStorage(itemId);\n  //     setInfo(info.filter((_, i) => gPos !== i));\n  //     console.log(`Deleted item: ${itemId}`);\n  //   } catch (error) {\n  //     console.error(\"Error deleting item:\", error);\n  //   } finally {\n  //     setIsDeleting(false);\n  //   }\n  //   handleClose();\n  // };\n\n  const hoverStyle = (index) => ({\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n    textAlign: \"center\",\n    cursor: \"default\",\n  });\n\n  const [dropdown1Text, setDropdown1Text] = useState(\"Select Option\");\n  const [dropdown2Text, setDropdown2Text] = useState(\"Select Option\");\n\n  const handleSelect1 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  const handleSelect2 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  };\n\n  // --------------------\n  // CLIENT SELECTION HANDLING\n  // --------------------\n  // This function fetches clients and opens the client modal.\n  const handleClientClick = async () => {\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\n    setClients(clientsData);\n    setClientSearchTerm(\"\");\n    setShowClientModal(true);\n  };\n\n  // When a client is selected in the modal, we now assume the parameter is a client ID.\n  // If the passed value is null, we clear the selection.\n  const handleClientSelect = async (clientId) => {\n    console.log(\"User selected client id:\", clientId);\n    if (!clientId) {\n      if (clientSelectionType === \"from\") {\n        setClientFromButtonText(\"Select Option\");\n        setSelectedClientFrom(null);\n      } else if (clientSelectionType === \"current\") {\n        setClientCurrentButtonText(\"Select Option\");\n        setSelectedClientCurrent(null);\n      }\n      setShowClientModal(false);\n      return;\n    }\n    try {\n      const clientSnap = await firebase.firestore().collection(\"Client\").doc(clientId).get();\n      if (clientSnap.exists) {\n        const clientData = clientSnap.data();\n        if (clientSelectionType === \"from\") {\n          setClientFromButtonText(clientData.name);\n          setSelectedClientFrom(clientId);\n        } else if (clientSelectionType === \"current\") {\n          setClientCurrentButtonText(clientData.name);\n          setSelectedClientCurrent(clientId);\n        }\n      } else {\n        console.error(\"No client document found for id:\", clientId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n    }\n    setShowClientModal(false);\n  };\n\n  const handleClientInfo = (clientId, clientName) => {\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\n    router.push(\"client/\" + clientId);\n  };\n\n  const handleClearClientSelection = () => {\n    if (clientSelectionType === \"from\") {\n      setClientFromButtonText(\"Select Option\");\n      setSelectedClientFrom(null);\n    } else if (clientSelectionType === \"current\") {\n      setClientCurrentButtonText(\"Select Option\");\n      setSelectedClientCurrent(null);\n    }\n    setShowClientModal(false);\n  };\n\n  // --------------------\n  // MODEL SELECTION HANDLING\n  // --------------------\n  const [models, setModels] = useState([]);\n  const [showModelModal, setShowModelModal] = useState(false);\n  const [modelButtonText, setModelButtonText] = useState(\"Select Option\");\n\n  const handleModelClick = async () => {\n    const modelsData = await fetchModels(\n      selectedOEM,\n      selectedModality,\n      selectedClientFrom\n    );\n    setModels(modelsData);\n    setModelSearchTerm(\"\");\n    setShowModelModal(true);\n  };\n\n  const handleModelSelect = (modelName) => {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  };\n\n  const handleClearModelSelection = () => {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n  };\n\n  // --------------------\n  // WAREHOUSE BUTTONS (for Client Current)\n  // --------------------\n  const handleSoCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"SoCal Warehouse\");\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\n  };\n\n  const handleNorCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"NorCal Warehouse\");\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\n  };\n\n  const handleWarehouseUnassignedClick = () => {\n    setClientCurrentButtonText(\"Unassigned\");\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\n  };\n\n  const [clientSearchTerm, setClientSearchTerm] = useState(\"\");\n  const [modelSearchTerm, setModelSearchTerm] = useState(\"\");\n\n  const deleteFromStorage = async (itemId) => {\n    const storageRef = firebase.storage().ref();\n    const folderRef = storageRef.child(`Parts/${itemId}/`);\n    try {\n      const listResult = await folderRef.listAll();\n      const deletePromises = listResult.items.map((item) => item.delete());\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\"Error deleting from storage:\", error);\n    }\n  };\n\n  const deleteFromPartsCollection = async (itemId) => {\n    const db = firebase.firestore();\n    try {\n      await db.collection(\"Parts\").doc(itemId).delete();\n      console.log(`Deleted item from Parts collection: ${itemId}`);\n    } catch (error) {\n      console.error(\"Error deleting from Parts collection:\", error);\n    }\n  };\n\n  return (\n    <LoggedIn>\n      {isDeleting && (\n        <div className=\"loading-overlay\">\n          <Spinner animation=\"border\" role=\"status\" className=\"spinner-center\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        </div>\n      )}\n      <Modal show={showDeleteModal} onHide={handleCloseDeleteModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Confirm Deletion</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to delete {selectedItems.length} item\n          {selectedItems.length > 1 ? \"s\" : \"\"}?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={handleDeleteSelected}>\n            Yes, delete\n          </Button>\n          <Button variant=\"secondary\" onClick={handleCloseDeleteModal}>\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal show={showClientModal} onHide={() => setShowClientModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            Select {clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\"}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Search by name\"\n            className=\"mb-3\"\n            value={clientSearchTerm}\n            onChange={(e) => setClientSearchTerm(e.target.value)}\n          />\n          <ClientTable\n            clients={clients.filter((client) =>\n              client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())\n            )}\n            onSelectClient={handleClientSelect}\n            onInfoClick={handleClientInfo}\n            isClientSearch={false}\n            clearSelection={() => handleClientSelect(null)}\n          />\n        </Modal.Body>\n      </Modal>\n\n      <Modal show={showModelModal} onHide={() => setShowModelModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Select Model</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Search by name\"\n            className=\"mb-3\"\n            value={modelSearchTerm}\n            onChange={(e) => setModelSearchTerm(e.target.value)}\n          />\n          <ModelTable\n            models={models.filter((model) =>\n              typeof model === \"string\"\n                ? model.toLowerCase().includes(modelSearchTerm.toLowerCase())\n                : false\n            )}\n            onSelectModel={handleModelSelect}\n            clearSelection={() => handleModelSelect(null)}\n          />\n        </Modal.Body>\n      </Modal>\n\n      <Container\n        className=\"d-flex align-items-center justify-content-center\"\n        style={{ minHeight: \"100vh\" }}\n      >\n        <div className=\"w-100\" style={{ maxWidth: \"1200px\" }}>\n          <Card>\n            <Card.Body>\n              <h2 className=\"text-center mb-4\">Magmo</h2>\n              <Row>\n                <Col md={4}>\n                  {/* Dropdowns */}\n                  <div>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>OEM</InputGroup.Text>\n                      <Dropdown onSelect={handleSelect1}>\n                        <Dropdown.Toggle\n                          variant=\"outline-secondary\"\n                          id=\"dropdown-button-1\"\n                          className=\"w-100\"\n                        >\n                          {dropdown1Text}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu className=\"w-100\">\n                          <Dropdown.Item eventKey=\"unassigned\">\n                            Select Option\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"GE\">GE</Dropdown.Item>\n                          <Dropdown.Item eventKey=\"Toshiba\">\n                            Toshiba\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"Siemens\">\n                            Siemens\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"Philips\">\n                            Philips\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </InputGroup>\n\n                    <InputGroup className=\"mb-5\">\n                      <InputGroup.Text>Modality</InputGroup.Text>\n                      <Dropdown onSelect={handleSelect2}>\n                        <Dropdown.Toggle\n                          variant=\"outline-secondary\"\n                          id=\"dropdown-button-2\"\n                          className=\"w-100\"\n                        >\n                          {dropdown2Text}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu className=\"w-100\">\n                          <Dropdown.Item eventKey=\"unassigned\">\n                            Select Option\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"CT\">CT</Dropdown.Item>\n                          <Dropdown.Item eventKey=\"MRI\">MRI</Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </InputGroup>\n                  </div>\n\n                  <div className={styles.divider}></div>\n\n                  {/* Client selection boxes */}\n                  <div>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Client From</InputGroup.Text>\n                      <Button\n                        variant=\"outline-secondary\"\n                        className=\"w-100\"\n                        onClick={() => {\n                          setClientSelectionType(\"from\");\n                          handleClientClick();\n                        }}\n                      >\n                        {clientFromButtonText}\n                      </Button>\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Client Current</InputGroup.Text>\n                      <Button\n                        variant=\"outline-secondary\"\n                        className=\"w-100\"\n                        onClick={() => {\n                          setClientSelectionType(\"current\");\n                          handleClientClick();\n                        }}\n                      >\n                        {clientCurrentButtonText}\n                      </Button>\n                    </InputGroup>\n\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Model</InputGroup.Text>\n                      <Button\n                        variant=\"outline-secondary\"\n                        className=\"w-100\"\n                        onClick={handleModelClick}\n                      >\n                        {modelButtonText}\n                      </Button>\n                    </InputGroup>\n\n                    <div className={styles.divider}></div>\n\n                    {/* Warehouse buttons for Client Current */}\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Warehouse</InputGroup.Text>\n                      <div className={styles.buttonGroup}>\n                        <Button\n                          variant=\"outline-secondary\"\n                          className={styles.flexButton}\n                          onClick={handleSoCalWarehouseClick}\n                        >\n                          SoCal Warehouse\n                        </Button>\n                        <Button\n                          variant=\"outline-secondary\"\n                          className={styles.flexButton}\n                          onClick={handleNorCalWarehouseClick}\n                        >\n                          NorCal Warehouse\n                        </Button>\n                        <Button\n                          variant=\"outline-secondary\"\n                          className={styles.flexButton}\n                          onClick={handleWarehouseUnassignedClick}\n                        >\n                          Unassigned\n                        </Button>\n                      </div>\n                    </InputGroup>\n                  </div>\n                </Col>\n\n                <Col md={8}>\n                  <div className={styles.tableContainer}>\n                    <PartTable\n                      info={info}\n                      labels={labels}\n                      ids={ids}\n                      hoverStyle={hoverStyle}\n                      sortCheckAll={sortCheckAll}\n                      checkDelete={checkDelete}\n                      isDeleting={isDeleting}\n                      rowSelect={rowSelect}\n                      setHoverIndex={setHoverIndex}\n                      hoverIndex={hoverIndex}\n                      selectedItems={selectedItems}         // Pass selectedItems state\n                      setSelectedItems={setSelectedItems}   // Pass its setter\n                    />\n\n\n                    <div className={styles.searchContainer}>\n                      <Form className=\"d-flex pb-2\">\n                        <FormControl\n                          type={showListSearch}\n                          placeholder=\"Search\"\n                          className=\"me-2 flex-grow-1\"\n                          aria-label=\"Search\"\n                          value={search}\n                          onChange={searchChangeHandler}\n                          style={{ flex: \"1\" }}\n                        />\n                        <NavDropdown\n                          title={select}\n                          id=\"collasible-nav-dropdown\"\n                          show={showList}\n                          onMouseEnter={() => setShowList(true)}\n                          onMouseLeave={() => setShowList(false)}\n                          style={{ marginTop: \"-5px\" }}\n                        >\n                          <NavDropdown.Item onClick={() => { setSelect(\"Name\"); setShowListSearch(\"text\"); }}>\n                            Name\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Date\"); setShowListSearch(\"date\"); }}>\n                            Date\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Work Order\"); setShowListSearch(\"number\"); }}>\n                            Work Order\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Product Number\"); setShowListSearch(\"number\"); }}>\n                            Product Number\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Description\"); setShowListSearch(\"text\"); }}>\n                            Description\n                          </NavDropdown.Item>\n                          <NavDropdown.Item\n                            onClick={() => {\n                              setSelect(\"SKU\");\n                              setShowListSearch(\"text\");\n                            }}\n                          >\n                            SKU\n                          </NavDropdown.Item>\n                        </NavDropdown>\n                      </Form>\n                      <div className=\"d-flex justify-content-between\">\n                        <LoadingButton type=\"secondary\" name=\"Add New Item\" route=\"NewSearch/AddItem/NewItem\" />\n                        <LoadingButton type=\"primary\" name=\"Back\" route=\"Warehousedb/WarehouseSelect\" />\n                      </div>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </div>\n      </Container>\n    </LoggedIn>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\client\\\\[id]\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Table, Button, Container, Card, Row, Col, Alert } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport MachineCreationModal from \"../../MachineCreationModal\"; // Import for SSR\n\nimport { adminDb } from \"../../../../context/FirebaseAdmin\";\n\nconst Client = () => {\n  const router = useRouter();\n  const {\n    0: selectedClient,\n    1: setSelectedClient\n  } = useState(null);\n  const {\n    0: machineOptions,\n    1: setMachineOptions\n  } = useState([]);\n  const {\n    0: error,\n    1: setError\n  } = useState(null); // State for machine addition modals\n\n  const {\n    0: showAddMachineModal,\n    1: setShowAddMachineModal\n  } = useState(false);\n  const {\n    0: showCreateMachineModal,\n    1: setShowCreateMachineModal\n  } = useState(false);\n  const {\n    0: availableMachines,\n    1: setAvailableMachines\n  } = useState([]);\n  useEffect(() => {\n    if (router.isReady) {\n      const {\n        clientId\n      } = router.query; // Extract clientId from query or URL path\n\n      const id = clientId || router.asPath.split(\"/\").pop();\n      fetchClientData(id);\n    }\n  }, [router.isReady]);\n\n  const fetchClientData = async clientId => {\n    try {\n      const db = firebase.firestore();\n      const clientDoc = await db.collection(\"Client\").doc(clientId).get();\n\n      if (clientDoc.exists) {\n        const clientData = clientDoc.data();\n        setSelectedClient(clientData); // Fetch machine documents referenced in the client's machines array\n\n        const machinePromises = clientData.machines.map(machineRef => machineRef.get());\n        const machineDocs = await Promise.all(machinePromises);\n        const machines = machineDocs.map(machineDoc => _objectSpread({\n          id: machineDoc.id\n        }, machineDoc.data()));\n        setMachineOptions(machines);\n      } else {\n        setError(\"Client not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n      setError(\"Error fetching client data\");\n    }\n  }; // Fetch available machines (those not yet assigned to a client)\n\n\n  const fetchAvailableMachines = async () => {\n    try {\n      const db = firebase.firestore();\n      const snapshot = await db.collection(\"Machine\").where(\"client\", \"==\", null).get();\n      const machines = snapshot.docs.map(doc => _objectSpread({\n        id: doc.id\n      }, doc.data()));\n      setAvailableMachines(machines);\n    } catch (error) {\n      console.error(\"Error fetching available machines:\", error);\n      setError(\"Failed to fetch available machines.\");\n    }\n  };\n\n  const handleSelectMachine = (id, name) => {\n    // Navigate to the machine details page if needed\n    router.push(\"../machine/\" + id);\n  }; // When adding an existing machine\n\n\n  const handleAddMachine = async machine => {\n    try {\n      const db = firebase.firestore();\n      const clientId = router.query.clientId || router.asPath.split(\"/\").pop(); // Update client's \"machines\" array with the machine reference\n\n      await db.collection(\"Client\").doc(clientId).update({\n        machines: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Machine\").doc(machine.id))\n      }); // Update local state to include the newly added machine\n\n      setMachineOptions(prev => [...prev, machine]);\n      setShowAddMachineModal(false);\n    } catch (error) {\n      console.error(\"Error adding machine to client:\", error);\n      setError(\"Failed to add machine to client.\");\n    }\n  }; // When creating a new machine for the client\n\n\n  const handleCreateMachine = async newMachine => {\n    try {\n      const db = firebase.firestore();\n      const clientId = router.query.clientId || router.asPath.split(\"/\").pop();\n      const machineId = `AIS${Math.floor(10000 + Math.random() * 90000)}`;\n\n      const machineWithId = _objectSpread(_objectSpread({}, newMachine), {}, {\n        id: machineId,\n        client: db.collection(\"Client\").doc(clientId)\n      }); // Create the machine document\n\n\n      await db.collection(\"Machine\").doc(machineId).set(machineWithId); // Add the machine reference to the client\n\n      await db.collection(\"Client\").doc(clientId).update({\n        machines: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Machine\").doc(machineId))\n      }); // Update local state\n\n      setMachineOptions(prev => [...prev, _objectSpread({\n        id: machineId\n      }, newMachine)]);\n      setShowCreateMachineModal(false);\n    } catch (error) {\n      console.error(\"Error creating and adding machine:\", error);\n      setError(\"Failed to create and add machine.\");\n    }\n  }; // Open the modal to add an existing machine; fetch available machines first\n\n\n  const openAddMachineModal = async () => {\n    await fetchAvailableMachines();\n    setShowAddMachineModal(true);\n  };\n\n  return __jsx(Container, {\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    className: \"justify-content-md-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, \"Client Machines\")), __jsx(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, error && __jsx(Alert, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, error), selectedClient ? __jsx(React.Fragment, null, __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 19\n    }\n  }, \"Client: \", selectedClient.name), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 19\n    }\n  }, \"Location: \", selectedClient.local), __jsx(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: openAddMachineModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, \"Add Existing Machine\"), __jsx(Button, {\n    variant: \"secondary\",\n    className: \"ms-2\",\n    onClick: () => setShowCreateMachineModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }, \"Create New Machine\")), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 19\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 23\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, \"Name\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }, \"Location\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, \"OEM\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, \"Modality\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, \"Select\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, machineOptions.map(machine => __jsx(\"tr\", {\n    key: machine.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 27\n    }\n  }, machine.name), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 27\n    }\n  }, machine.local), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 27\n    }\n  }, machine.OEM), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 27\n    }\n  }, machine.Modality), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 27\n    }\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: () => handleSelectMachine(machine.id, machine.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 29\n    }\n  }, \"Select\")))))), __jsx(Button, {\n    variant: \"primary\",\n    style: {\n      marginTop: \"20px\"\n    },\n    onClick: () => router.back(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }\n  }, \"Back\")) : !error && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 27\n    }\n  }, \"Loading client data...\"))))), __jsx(ClientInfoModal, {\n    show: showAddMachineModal,\n    handleClose: () => setShowAddMachineModal(false),\n    machineOptions: availableMachines,\n    setSelectedMachine: handleAddMachine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }), __jsx(MachineCreationModal, {\n    show: showCreateMachineModal,\n    handleClose: () => setShowCreateMachineModal(false),\n    onCreateMachine: handleCreateMachine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Client; // Server-side rendering function\n\nexport async function getServerSideProps(context) {\n  const {\n    id\n  } = context.params;\n\n  try {\n    // Fetch client data from Firestore using Admin SDK\n    const clientDoc = await adminDb.collection(\"Client\").doc(id).get();\n\n    if (!clientDoc.exists) {\n      return {\n        notFound: true // This will show a 404 page\n\n      };\n    }\n\n    const clientData = clientDoc.data(); // Fetch machine documents referenced in the client's machines array\n\n    let machines = [];\n\n    if (clientData.machines && Array.isArray(clientData.machines)) {\n      try {\n        const machinePromises = clientData.machines.map(machineRef => {\n          if (machineRef.path) {\n            return adminDb.doc(machineRef.path).get();\n          }\n\n          return null;\n        }).filter(Boolean);\n        const machineDocs = await Promise.all(machinePromises);\n        machines = machineDocs.map(machineDoc => {\n          const machineData = machineDoc.data(); // Extract only serializable data, remove any Firestore references\n\n          const serializedMachine = {\n            id: machineDoc.id,\n            name: machineData.name || \"\",\n            local: machineData.local || \"\",\n            OEM: machineData.OEM || \"\",\n            Modality: machineData.Modality || \"\",\n            Model: machineData.Model || \"\" // Add other fields as needed, but ensure they're serializable\n\n          }; // If there's a client reference, extract just the client name\n\n          if (machineData.client && machineData.client.path) {\n            try {\n              const clientDoc = adminDb.doc(machineData.client.path).get();\n\n              if (clientDoc.exists) {\n                serializedMachine.clientName = clientDoc.data().name || \"\";\n              }\n            } catch (error) {\n              console.error(\"Error fetching client name:\", error);\n            }\n          }\n\n          return serializedMachine;\n        });\n      } catch (error) {\n        console.error(\"Error fetching machine data:\", error);\n      }\n    } // Serialize the client data, removing any non-serializable fields\n\n\n    const serializedClient = {\n      id,\n      name: clientData.name || \"\",\n      local: clientData.local || \"\" // Add other client fields as needed, but ensure they're serializable\n\n    };\n    return {\n      props: {\n        initialClient: serializedClient,\n        initialMachines: machines\n      }\n    };\n  } catch (error) {\n    console.error(\"Error in getServerSideProps:\", error);\n    return {\n      props: {\n        error: \"Failed to load client data\"\n      }\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/client/[id]/index.js"],"names":["React","useEffect","useState","useRouter","Table","Button","Container","Card","Row","Col","Alert","firebase","ClientInfoModal","MachineCreationModal","adminDb","Client","router","selectedClient","setSelectedClient","machineOptions","setMachineOptions","error","setError","showAddMachineModal","setShowAddMachineModal","showCreateMachineModal","setShowCreateMachineModal","availableMachines","setAvailableMachines","isReady","clientId","query","id","asPath","split","pop","fetchClientData","db","firestore","clientDoc","collection","doc","get","exists","clientData","data","machinePromises","machines","map","machineRef","machineDocs","Promise","all","machineDoc","console","fetchAvailableMachines","snapshot","where","docs","handleSelectMachine","name","push","handleAddMachine","machine","update","FieldValue","arrayUnion","prev","handleCreateMachine","newMachine","machineId","Math","floor","random","machineWithId","client","set","openAddMachineModal","local","OEM","Modality","marginTop","back","getServerSideProps","context","params","notFound","Array","isArray","path","filter","Boolean","machineData","serializedMachine","Model","clientName","serializedClient","props","initialClient","initialMachines"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport {\n  Table,\n  Button,\n  Container,\n  Card,\n  Row,\n  Col,\n  Alert,\n} from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport MachineCreationModal from \"../../MachineCreationModal\";\n\n// Import for SSR\nimport { adminDb } from \"../../../../context/FirebaseAdmin\";\n\nconst Client = () => {\n  const router = useRouter();\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [machineOptions, setMachineOptions] = useState([]);\n  const [error, setError] = useState(null);\n\n  // State for machine addition modals\n  const [showAddMachineModal, setShowAddMachineModal] = useState(false);\n  const [showCreateMachineModal, setShowCreateMachineModal] = useState(false);\n  const [availableMachines, setAvailableMachines] = useState([]);\n\n  useEffect(() => {\n    if (router.isReady) {\n      const { clientId } = router.query;\n      // Extract clientId from query or URL path\n      const id = clientId || router.asPath.split(\"/\").pop();\n      fetchClientData(id);\n    }\n  }, [router.isReady]);\n\n  const fetchClientData = async (clientId) => {\n    try {\n      const db = firebase.firestore();\n      const clientDoc = await db.collection(\"Client\").doc(clientId).get();\n      if (clientDoc.exists) {\n        const clientData = clientDoc.data();\n        setSelectedClient(clientData);\n\n        // Fetch machine documents referenced in the client's machines array\n        const machinePromises = clientData.machines.map((machineRef) =>\n          machineRef.get()\n        );\n        const machineDocs = await Promise.all(machinePromises);\n        const machines = machineDocs.map((machineDoc) => ({\n          id: machineDoc.id,\n          ...machineDoc.data(),\n        }));\n        setMachineOptions(machines);\n      } else {\n        setError(\"Client not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n      setError(\"Error fetching client data\");\n    }\n  };\n\n  // Fetch available machines (those not yet assigned to a client)\n  const fetchAvailableMachines = async () => {\n    try {\n      const db = firebase.firestore();\n      const snapshot = await db\n        .collection(\"Machine\")\n        .where(\"client\", \"==\", null)\n        .get();\n      const machines = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setAvailableMachines(machines);\n    } catch (error) {\n      console.error(\"Error fetching available machines:\", error);\n      setError(\"Failed to fetch available machines.\");\n    }\n  };\n\n  const handleSelectMachine = (id, name) => {\n    // Navigate to the machine details page if needed\n    router.push(\"../machine/\" + id);\n  };\n\n  // When adding an existing machine\n  const handleAddMachine = async (machine) => {\n    try {\n      const db = firebase.firestore();\n      const clientId = router.query.clientId || router.asPath.split(\"/\").pop();\n\n      // Update client's \"machines\" array with the machine reference\n      await db\n        .collection(\"Client\")\n        .doc(clientId)\n        .update({\n          machines: firebase.firestore.FieldValue.arrayUnion(\n            db.collection(\"Machine\").doc(machine.id)\n          ),\n        });\n\n      // Update local state to include the newly added machine\n      setMachineOptions((prev) => [...prev, machine]);\n      setShowAddMachineModal(false);\n    } catch (error) {\n      console.error(\"Error adding machine to client:\", error);\n      setError(\"Failed to add machine to client.\");\n    }\n  };\n\n  // When creating a new machine for the client\n  const handleCreateMachine = async (newMachine) => {\n    try {\n      const db = firebase.firestore();\n      const clientId = router.query.clientId || router.asPath.split(\"/\").pop();\n      const machineId = `AIS${Math.floor(10000 + Math.random() * 90000)}`;\n      const machineWithId = {\n        ...newMachine,\n        id: machineId,\n        client: db.collection(\"Client\").doc(clientId),\n      };\n      // Create the machine document\n      await db.collection(\"Machine\").doc(machineId).set(machineWithId);\n      // Add the machine reference to the client\n      await db\n        .collection(\"Client\")\n        .doc(clientId)\n        .update({\n          machines: firebase.firestore.FieldValue.arrayUnion(\n            db.collection(\"Machine\").doc(machineId)\n          ),\n        });\n      // Update local state\n      setMachineOptions((prev) => [...prev, { id: machineId, ...newMachine }]);\n      setShowCreateMachineModal(false);\n    } catch (error) {\n      console.error(\"Error creating and adding machine:\", error);\n      setError(\"Failed to create and add machine.\");\n    }\n  };\n\n  // Open the modal to add an existing machine; fetch available machines first\n  const openAddMachineModal = async () => {\n    await fetchAvailableMachines();\n    setShowAddMachineModal(true);\n  };\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">\n          <Card>\n            <Card.Header>\n              <h4>Client Machines</h4>\n            </Card.Header>\n            <Card.Body>\n              {error && <Alert variant=\"danger\">{error}</Alert>}\n              {selectedClient ? (\n                <>\n                  <h5>Client: {selectedClient.name}</h5>\n                  <p>Location: {selectedClient.local}</p>\n                  <div className=\"mb-3\">\n                    <Button variant=\"primary\" onClick={openAddMachineModal}>\n                      Add Existing Machine\n                    </Button>\n                    <Button\n                      variant=\"secondary\"\n                      className=\"ms-2\"\n                      onClick={() => setShowCreateMachineModal(true)}\n                    >\n                      Create New Machine\n                    </Button>\n                  </div>\n                  <Table striped bordered hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>Location</th>\n                        <th>OEM</th>\n                        <th>Modality</th>\n                        <th>Select</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {machineOptions.map((machine) => (\n                        <tr key={machine.id}>\n                          <td>{machine.name}</td>\n                          <td>{machine.local}</td>\n                          <td>{machine.OEM}</td>\n                          <td>{machine.Modality}</td>\n                          <td>\n                            <Button\n                              variant=\"primary\"\n                              onClick={() =>\n                                handleSelectMachine(machine.id, machine.name)\n                              }\n                            >\n                              Select\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </Table>\n                  <Button\n                    variant=\"primary\"\n                    style={{ marginTop: \"20px\" }}\n                    onClick={() => router.back()}\n                  >\n                    Back\n                  </Button>\n                </>\n              ) : (\n                !error && <p>Loading client data...</p>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Modal to add an existing machine to the client */}\n      <ClientInfoModal\n        show={showAddMachineModal}\n        handleClose={() => setShowAddMachineModal(false)}\n        machineOptions={availableMachines}\n        setSelectedMachine={handleAddMachine}\n      />\n\n      {/* Modal to create a new machine and attach it to the client */}\n      <MachineCreationModal\n        show={showCreateMachineModal}\n        handleClose={() => setShowCreateMachineModal(false)}\n        onCreateMachine={handleCreateMachine}\n      />\n    </Container>\n  );\n};\n\nexport default Client;\n\n// Server-side rendering function\nexport async function getServerSideProps(context) {\n  const { id } = context.params;\n\n  try {\n    // Fetch client data from Firestore using Admin SDK\n    const clientDoc = await adminDb.collection(\"Client\").doc(id).get();\n\n    if (!clientDoc.exists) {\n      return {\n        notFound: true, // This will show a 404 page\n      };\n    }\n\n    const clientData = clientDoc.data();\n\n    // Fetch machine documents referenced in the client's machines array\n    let machines = [];\n    if (clientData.machines && Array.isArray(clientData.machines)) {\n      try {\n        const machinePromises = clientData.machines\n          .map((machineRef) => {\n            if (machineRef.path) {\n              return adminDb.doc(machineRef.path).get();\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        const machineDocs = await Promise.all(machinePromises);\n        machines = machineDocs.map((machineDoc) => {\n          const machineData = machineDoc.data();\n          // Extract only serializable data, remove any Firestore references\n          const serializedMachine = {\n            id: machineDoc.id,\n            name: machineData.name || \"\",\n            local: machineData.local || \"\",\n            OEM: machineData.OEM || \"\",\n            Modality: machineData.Modality || \"\",\n            Model: machineData.Model || \"\",\n            // Add other fields as needed, but ensure they're serializable\n          };\n\n          // If there's a client reference, extract just the client name\n          if (machineData.client && machineData.client.path) {\n            try {\n              const clientDoc = adminDb.doc(machineData.client.path).get();\n              if (clientDoc.exists) {\n                serializedMachine.clientName = clientDoc.data().name || \"\";\n              }\n            } catch (error) {\n              console.error(\"Error fetching client name:\", error);\n            }\n          }\n\n          return serializedMachine;\n        });\n      } catch (error) {\n        console.error(\"Error fetching machine data:\", error);\n      }\n    }\n\n    // Serialize the client data, removing any non-serializable fields\n    const serializedClient = {\n      id,\n      name: clientData.name || \"\",\n      local: clientData.local || \"\",\n      // Add other client fields as needed, but ensure they're serializable\n    };\n\n    return {\n      props: {\n        initialClient: serializedClient,\n        initialMachines: machines,\n      },\n    };\n  } catch (error) {\n    console.error(\"Error in getServerSideProps:\", error);\n    return {\n      props: {\n        error: \"Failed to load client data\",\n      },\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
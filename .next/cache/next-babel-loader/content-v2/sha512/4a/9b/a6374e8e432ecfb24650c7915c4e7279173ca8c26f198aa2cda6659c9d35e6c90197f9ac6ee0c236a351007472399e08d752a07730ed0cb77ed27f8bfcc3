{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../styles/global.css\";\nimport Layout from \"../components/Layout\";\nimport { AuthUserProvider } from \"../context/AuthUserContext\"; // Setup pdfjs (if used) - only on client side\n\nlet pdfjs = null;\n\nif (false) {\n  // Only import on client side\n  try {\n    const {\n      pdfjs: pdfjsModule\n    } = require(\"react-pdf\");\n\n    pdfjs = pdfjsModule;\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n  } catch (error) {\n    console.warn(\"PDF.js not available:\", error);\n  }\n}\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const router = useRouter(); // Load Bootstrap JS once\n\n  useEffect(() => {\n    require(\"bootstrap/dist/js/bootstrap.bundle.min.js\");\n  }, []); // NEW: On initial client mount, check if the browser URL (window.location.pathname)\n  // is different from what Next's router thinks (which will be \"/\" when served via index.html).\n  // If so, replace the route so that Next loads the proper dynamic page.\n\n  useEffect(() => {\n    if (false && router.isReady) {\n      const actualPath = window.location.pathname; // Only if the current browser path is not \"/\" but the router shows \"/\"\n      // (which happens because Firebase Hosting serves index.html for every route),\n      // then navigate to the actual path.\n\n      if (actualPath !== \"/\" && router.asPath === \"/\") {\n        router.replace(actualPath + window.location.search);\n      }\n    }\n  }, [router.isReady, router.asPath]);\n  return __jsx(AuthUserProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/_app.js"],"names":["React","useEffect","useRouter","Layout","AuthUserProvider","pdfjs","pdfjsModule","require","GlobalWorkerOptions","workerSrc","version","error","console","warn","MyApp","Component","pageProps","router","isReady","actualPath","window","location","pathname","asPath","replace","search"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,sCAAP;AACA,OAAO,sBAAP;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,gBAAT,QAAiC,4BAAjC,C,CAEA;;AACA,IAAIC,KAAK,GAAG,IAAZ;;AACA,WAAmC;AACjC;AACA,MAAI;AACF,UAAM;AAAEA,MAAAA,KAAK,EAAEC;AAAT,QAAyBC,OAAO,CAAC,WAAD,CAAtC;;AACAF,IAAAA,KAAK,GAAGC,WAAR;AACAD,IAAAA,KAAK,CAACG,mBAAN,CAA0BC,SAA1B,GAAuC,2CAA0CJ,KAAK,CAACK,OAAQ,oBAA/F;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,IAAR,CAAa,uBAAb,EAAsCF,KAAtC;AACD;AACF;;AAED,SAASG,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,QAAMC,MAAM,GAAGf,SAAS,EAAxB,CADuC,CAGvC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAAC,2CAAD,CAAP;AACD,GAFQ,EAEN,EAFM,CAAT,CAJuC,CAQvC;AACA;AACA;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,SAAiCgB,MAAM,CAACC,OAA5C,EAAqD;AACnD,YAAMC,UAAU,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAnC,CADmD,CAEnD;AACA;AACA;;AACA,UAAIH,UAAU,KAAK,GAAf,IAAsBF,MAAM,CAACM,MAAP,KAAkB,GAA5C,EAAiD;AAC/CN,QAAAA,MAAM,CAACO,OAAP,CAAeL,UAAU,GAAGC,MAAM,CAACC,QAAP,CAAgBI,MAA5C;AACD;AACF;AACF,GAVQ,EAUN,CAACR,MAAM,CAACC,OAAR,EAAiBD,MAAM,CAACM,MAAxB,CAVM,CAAT;AAYA,SACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeP,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF,CADF;AAOD;;AAED,eAAeF,KAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../styles/global.css\";\nimport Layout from \"../components/Layout\";\nimport { AuthUserProvider } from \"../context/AuthUserContext\";\n\n// Setup pdfjs (if used) - only on client side\nlet pdfjs = null;\nif (typeof window !== \"undefined\") {\n  // Only import on client side\n  try {\n    const { pdfjs: pdfjsModule } = require(\"react-pdf\");\n    pdfjs = pdfjsModule;\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;\n  } catch (error) {\n    console.warn(\"PDF.js not available:\", error);\n  }\n}\n\nfunction MyApp({ Component, pageProps }) {\n  const router = useRouter();\n\n  // Load Bootstrap JS once\n  useEffect(() => {\n    require(\"bootstrap/dist/js/bootstrap.bundle.min.js\");\n  }, []);\n\n  // NEW: On initial client mount, check if the browser URL (window.location.pathname)\n  // is different from what Next's router thinks (which will be \"/\" when served via index.html).\n  // If so, replace the route so that Next loads the proper dynamic page.\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && router.isReady) {\n      const actualPath = window.location.pathname;\n      // Only if the current browser path is not \"/\" but the router shows \"/\"\n      // (which happens because Firebase Hosting serves index.html for every route),\n      // then navigate to the actual path.\n      if (actualPath !== \"/\" && router.asPath === \"/\") {\n        router.replace(actualPath + window.location.search);\n      }\n    }\n  }, [router.isReady, router.asPath]);\n\n  return (\n    <AuthUserProvider>\n      <Layout>\n        <Component {...pageProps} />\n      </Layout>\n    </AuthUserProvider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Modal, Form, Button, Card, Container, Row, Col } from \"react-bootstrap\";\nimport firebase from \"../../context/Firebase\";\nimport styles from \"../../styles/Home.module.css\";\nimport Link from \"next/link\"; // import { useAuth } from \"../context/AuthUserContext\";\n// import LoggedIn from \"./LoggedIn\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton(type, name, route) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true); // Guard against falsy route values\n\n\n  if (!route) return null;\n  const isExternal = route.startsWith(\"http://\") || route.startsWith(\"https://\");\n\n  if (isExternal) {\n    return __jsx(\"a\", {\n      href: route,\n      className: `btn btn-${type}`,\n      disabled: isLoading,\n      onClick: !isLoading ? handleClick : null\n    }, isLoading ? \"Loading…\" : name);\n  } else {\n    return __jsx(Link, {\n      href: route\n    }, __jsx(\"a\", {\n      className: `btn btn-${type}`,\n      disabled: isLoading,\n      onClick: !isLoading ? handleClick : null\n    }, isLoading ? \"Loading…\" : name));\n  }\n}\n\nexport default function interview() {\n  const {\n    0: items,\n    1: setItems\n  } = useState({});\n  const today = new Date().toISOString().split(\"T\")[0];\n  const {\n    0: modalShow,\n    1: setModalShow\n  } = useState(false);\n  const {\n    0: selectedTimeSlot,\n    1: setSelectedTimeSlot\n  } = useState(\"\");\n  const router = useRouter();\n  const db = firebase.firestore();\n  const {\n    0: dates,\n    1: setDates\n  } = useState([]);\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n\n  const handleModalClose = () => setModalShow(false);\n\n  const handleModalShow = timeSlot => {\n    setSelectedTimeSlot(timeSlot);\n    setModalShow(true);\n  };\n\n  const handleSubmit = event => {\n    // event.preventDefault();\n    alert(\"Your timeslot has been saved \\nYou will recieve an email confirmation once the interview is confirmed\");\n    const dateToSend = {\n      name: name,\n      email: email,\n      date: new Date().toISOString(),\n      Position: selectedTimeSlot\n    };\n    console.log(\"Name:\", name, \"Email:\", email);\n    console.log(\"submit\");\n    db.collection('Dates').doc(generateId(20)).set(dateToSend).then(() => console.log('date sent')).catch(error => console.error('Error sending date:', error));\n  }; //generate and id to send\n\n\n  function generateId(length) {\n    return [...Array(length)].map(() => Math.random().toString(36)[2]).join('');\n  } // Fetch data when the component mounts or route changes\n\n\n  useEffect(() => {\n    fetchData();\n  }, [router.route]); // Function to fetch dates from Firebase\n\n  async function fetchClients() {\n    let data = [];\n    let id = [];\n    await db.collection(\"Dates\").get().then(querySnapshot => {\n      querySnapshot.forEach(element => {\n        id.push(element.id);\n        data.push(element.data());\n      });\n    });\n    return [data, id];\n  } // Function to initiate fetching of data and setting state\n\n\n  async function fetchData() {\n    let [data, id] = await fetchClients();\n    setDates(data.map((client, index) => _objectSpread(_objectSpread({}, client), {}, {\n      id: id[index]\n    })));\n  }\n\n  const dateChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      date: event.target.value\n    }));\n  }; //Buttons generate and function\n  // Function to generate buttons\n\n\n  function generateTimeButtons() {\n    console.log(dates);\n    const buttonCount = 10;\n    const selectedDate = items[\"date\"]; // Ensure this date format matches your database\n\n    return __jsx(\"div\", {\n      className: \"d-flex flex-wrap\"\n    }, Array.from({\n      length: buttonCount\n    }, (_, index) => {\n      const timeSlot = `${Math.floor(index * 0.5 + 5)}:${index % 2 === 0 ? \"00\" : \"30\"} PM - ${Math.floor(index * 0.5 + 5.5)}:${index % 2 === 0 ? \"30\" : \"00\"} PM`; // Adjust this check to also consider the date\n\n      const isDisabled = dates.some(date => date.Position === index && date.date === selectedDate);\n      return __jsx(\"div\", {\n        className: \"col-6 my-2\",\n        key: index\n      }, __jsx(Button, {\n        variant: index % 2 === 0 ? \"primary\" : \"secondary\",\n        onClick: () => handleModalShow(index),\n        disabled: isDisabled // Disable button based on position and date match\n\n      }, timeSlot));\n    }));\n  }\n\n  function buttonClicked(pos) {\n    alert(\"Pos: \" + pos);\n  } //   const { signOut } = useAuth();\n\n\n  return (// <LoggedIn>\n    __jsx(React.Fragment, null, __jsx(Modal, {\n      show: modalShow,\n      onHide: handleModalClose\n    }, __jsx(Modal.Header, {\n      closeButton: true\n    }, __jsx(Modal.Title, null, \"Book Time Slot\")), __jsx(Modal.Body, null, __jsx(Form, {\n      onSubmit: handleSubmit\n    }, __jsx(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicName\"\n    }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n      type: \"text\",\n      placeholder: \"Enter name\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    })), __jsx(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicEmail\"\n    }, __jsx(Form.Label, null, \"Email address\"), __jsx(Form.Control, {\n      type: \"email\",\n      placeholder: \"Enter email\",\n      value: email,\n      onChange: e => setEmail(e.target.value)\n    })), __jsx(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: handleModalClose\n    }, \"Submit\")))), __jsx(Container, {\n      className: \"d-flex align-items-center justify-content-center\",\n      style: {\n        minHeight: \"100vh\"\n      }\n    }, __jsx(\"div\", {\n      className: \"w-100\",\n      style: {\n        maxWidth: \"400px\"\n      }\n    }, __jsx(Card, {\n      className: \"align-items-center justify-content-center\"\n    }, __jsx(Card.Body, null, __jsx(\"h2\", {\n      className: \"text-center mb-4\"\n    }, \"Schedule\"), __jsx(\"h5\", {\n      className: \"text-center mb-4\"\n    }, \"Select a date and a time slot\"), __jsx(\"div\", {\n      class: \"d-grid gap-3\"\n    }, __jsx(Form, null, __jsx(Row, {\n      className: \"mb-3\"\n    }, __jsx(Form.Group, {\n      as: Col,\n      controlId: \"date\"\n    }, __jsx(Form.Control, {\n      type: \"date\",\n      value: items[\"date\"],\n      onChange: dateChangeHandler,\n      min: today\n    }))), items[\"date\"] && generateTimeButtons()))))))) // </LoggedIn>\n\n  );\n}","map":null,"metadata":{},"sourceType":"module"}
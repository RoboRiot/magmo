{"ast":null,"code":"import _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Table, Button, Container, Card, Row, Col, Alert } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\"; // Import for SSR\n\nvar Machine = function Machine() {\n  var router = useRouter();\n\n  var _useState = useState(null),\n      selectedMachine = _useState[0],\n      setSelectedMachine = _useState[1];\n\n  var _useState2 = useState([]),\n      associatedParts = _useState2[0],\n      setAssociatedParts = _useState2[1];\n\n  var _useState3 = useState(null),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    if (router.isReady) {\n      var machineId = router.query.machineId;\n\n      if (!machineId) {\n        var pathSegments = router.asPath.split(\"/\");\n        var machineIdFromPath = pathSegments[pathSegments.length - 1];\n        console.log(\"Machine ID extracted from URL path: \".concat(machineIdFromPath));\n        fetchMachineData(machineIdFromPath);\n      } else {\n        console.log(\"Machine ID from router query: \".concat(machineId));\n        fetchMachineData(machineId);\n      }\n    }\n  }, [router.isReady]);\n\n  var fetchMachineData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(machineId) {\n      var db, machineDoc, machineData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              console.log(\"Attempting to fetch machine data for ID: \".concat(machineId));\n              db = firebase.firestore();\n              _context.next = 5;\n              return db.collection(\"Machine\").doc(machineId).get();\n\n            case 5:\n              machineDoc = _context.sent;\n\n              if (machineDoc.exists) {\n                machineData = machineDoc.data();\n                setSelectedMachine(machineData);\n                console.log(\"Machine data:\", machineData); // Fetch associated parts\n\n                if (machineData.associatedParts) {\n                  fetchAssociatedParts(machineData.associatedParts);\n                }\n              } else {\n                console.error(\"Machine not found\");\n                setError(\"Machine not found\");\n              }\n\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching machine data:\", _context.t0);\n              setError(\"Error fetching machine data\");\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function fetchMachineData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchAssociatedParts = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(associatedPartsRefs) {\n      var db, partsDocs, partsData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              db = firebase.firestore();\n              _context3.next = 4;\n              return Promise.all(associatedPartsRefs.map(function (ref) {\n                return ref.get();\n              }));\n\n            case 4:\n              partsDocs = _context3.sent;\n              _context3.next = 7;\n              return Promise.all(partsDocs.map( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(doc) {\n                  var _data$ClientFrom;\n\n                  var data, clientName, clientDoc;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (doc.exists) {\n                            _context2.next = 2;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\", null);\n\n                        case 2:\n                          data = doc.data() || {};\n                          clientName = \"\";\n\n                          if (!((_data$ClientFrom = data.ClientFrom) !== null && _data$ClientFrom !== void 0 && _data$ClientFrom.get)) {\n                            _context2.next = 9;\n                            break;\n                          }\n\n                          _context2.next = 7;\n                          return data.ClientFrom.get();\n\n                        case 7:\n                          clientDoc = _context2.sent;\n                          clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n\n                        case 9:\n                          return _context2.abrupt(\"return\", _objectSpread(_objectSpread({\n                            id: doc.id\n                          }, data), {}, {\n                            clientName: clientName\n                          }));\n\n                        case 10:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x3) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n\n            case 7:\n              partsData = _context3.sent;\n              setAssociatedParts(partsData.filter(function (p) {\n                return p;\n              }));\n              console.log(\"Associated parts data:\", partsData);\n              _context3.next = 16;\n              break;\n\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error fetching associated parts:\", _context3.t0);\n              setError(\"Error fetching associated parts\");\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 12]]);\n    }));\n\n    return function fetchAssociatedParts(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handlePrintMulti = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var payload, response, result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // Create your payload with the mapped items.\n              // Replace 'associatedParts' with your actual variable containing the list.\n              payload = {\n                items: associatedParts.map(function (part) {\n                  return {\n                    name: part.name,\n                    arrival_date: part.arrival_date,\n                    // Ensure your part has a 'date' field.\n                    poNumber: part.poNumber || \"\",\n                    OEM: part.TheMachine ? part.TheMachine.oem || \"\" : \"\",\n                    modality: part.TheMachine ? part.TheMachine.modality || \"\" : \"\",\n                    model: part.TheMachine ? part.TheMachine.model || \"\" : \"\",\n                    local_sn: part.id,\n                    // Using document id as the local serial number.\n                    client: part.clientName || \"\",\n                    description: part.description || (part.descriptions && part.descriptions.length > 0 ? part.descriptions[0].description : \"\")\n                  };\n                }),\n                test_print: true,\n                // Hard-coded here if you want to test printing one item\n                index: 1 // Hard-coded index (1-based)\n\n              };\n              _context4.prev = 1;\n              _context4.next = 4;\n              return fetch(\"https://9d70-174-76-22-138.ngrok-free.app/print_multi\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n              });\n\n            case 4:\n              response = _context4.sent;\n              _context4.next = 7;\n              return response.json();\n\n            case 7:\n              result = _context4.sent;\n              console.log(\"Print multi result:\", result.status);\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(\"Error printing multiple labels:\", _context4.t0);\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 11]]);\n    }));\n\n    return function handlePrintMulti() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectPart = function handleSelectPart(id, name) {\n    console.log(\"Selected part ID: \".concat(id, \", Name: \").concat(name));\n    router.push(\"../item/\" + id);\n  };\n\n  var formatDate = function formatDate(input) {\n    var date;\n\n    if (input && input.seconds) {\n      // Handle timestamp object with 'seconds' property\n      date = new Date(input.seconds * 1000);\n    } else if (typeof input === \"string\") {\n      // Handle date string\n      date = new Date(input);\n    } else {\n      return \"N/A\";\n    }\n\n    if (isNaN(date.getTime())) {\n      // Invalid date string\n      return \"Invalid Date\";\n    }\n\n    return date.toLocaleDateString();\n  };\n\n  return __jsx(Container, {\n    className: \"mt-5\"\n  }, __jsx(Row, {\n    className: \"justify-content-md-center\"\n  }, __jsx(Col, {\n    md: \"8\"\n  }, __jsx(Card, null, __jsx(Card.Header, null, __jsx(\"h4\", null, \"Machine Details\")), __jsx(Card.Body, null, error && __jsx(Alert, {\n    variant: \"danger\"\n  }, error), selectedMachine ? __jsx(React.Fragment, null, __jsx(\"h5\", null, \"Machine: \", selectedMachine.name), __jsx(\"p\", null, \"Model: \", selectedMachine.Model), __jsx(\"p\", null, \"Model: \", selectedMachine.Modality), __jsx(\"p\", null, \"Model: \", selectedMachine.OEM), __jsx(\"p\", null, \"Last PM: \", formatDate(selectedMachine.lastPM)), __jsx(\"p\", null, \"Next PM: \", formatDate(selectedMachine.nextPM)), __jsx(\"h5\", null, \"Associated Parts\"), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Name\"), __jsx(\"th\", null, \"Part Number\"), __jsx(\"th\", null, \"Serial Number\"), __jsx(\"th\", null, \"Date\"), __jsx(\"th\", null, \"Select\"))), __jsx(\"tbody\", null, associatedParts.map(function (part) {\n    return __jsx(\"tr\", {\n      key: part.id\n    }, __jsx(\"td\", null, part.name), __jsx(\"td\", null, part.pn), __jsx(\"td\", null, part.sn), __jsx(\"td\", null, part.date), __jsx(\"td\", null, __jsx(Button, {\n      variant: \"primary\",\n      onClick: function onClick() {\n        return handleSelectPart(part.id, part.name);\n      }\n    }, \"Select\")));\n  }), __jsx(\"tr\", null, __jsx(\"td\", {\n    colSpan: \"5\",\n    style: {\n      textAlign: \"center\",\n      paddingTop: \"20px\"\n    }\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handlePrintMulti\n  }, \"Print All Items\"))), __jsx(Button, {\n    variant: \"primary\",\n    style: {\n      marginTop: \"20px\"\n    },\n    onClick: function onClick() {\n      return router.back();\n    }\n  }, \"back\")))) : !error && __jsx(\"p\", null, \"Loading machine data...\"))))));\n};\n\nexport var __N_SSP = true;\nexport default Machine; // Server-side rendering function","map":null,"metadata":{},"sourceType":"module"}
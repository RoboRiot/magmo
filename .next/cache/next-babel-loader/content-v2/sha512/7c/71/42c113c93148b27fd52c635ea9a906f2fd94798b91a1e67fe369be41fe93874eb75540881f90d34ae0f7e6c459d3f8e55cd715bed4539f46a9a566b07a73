{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Card, Row, Col, InputGroup, Dropdown, FormControl, Button, NavDropdown, Form, Modal, Spinner } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { fetchTestItemsWithMachineData, fetchClients, fetchModels, formatDate } from \"../../utils/testFetch\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\nimport ClientTable from \"../../utils/ClientTable\";\nimport ModelTable from \"../../utils/ModelTable\";\nimport PartTable from \"../../utils/PartTable\";\nimport styles from \"../../styles/MainSearch.module.css\";\nimport firebase from \"../../context/Firebase\"; // Predefined warehouse client IDs and display names\n\nconst SOCAL_CLIENT_ID = \"AIS17182\";\nconst NORCAL_CLIENT_ID = \"AIS25097\";\nconst UNASSIGNED_CLIENT_ID = \"AIS00404\"; // Simulates a network request delay\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n} // Custom LoadingButton component\n\n\nfunction LoadingButton({\n  type,\n  name,\n  route\n}) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n  return __jsx(Link, {\n    href: `/${route}`\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading,\n    onClick: () => !isLoading && setLoading(true)\n  }, isLoading ? \"Loading…\" : name));\n}\n\nexport default function searchTest() {\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: info,\n    1: setInfo\n  } = useState([]);\n  const {\n    0: backupInfo,\n    1: setBackupInfo\n  } = useState([]);\n  const {\n    0: ids,\n    1: setID\n  } = useState([]);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: dItem,\n    1: setDItem\n  } = useState();\n  const {\n    0: select,\n    1: setSelect\n  } = useState(\"Name\");\n  const {\n    0: showList,\n    1: setShowList\n  } = useState(false);\n  const {\n    0: showListSearch,\n    1: setShowListSearch\n  } = useState(\"text\");\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: selectedOEM,\n    1: setSelectedOEM\n  } = useState(null);\n  const {\n    0: selectedModality,\n    1: setSelectedModality\n  } = useState(null); // Replace the old single client state with two sets:\n\n  const {\n    0: selectedClientFrom,\n    1: setSelectedClientFrom\n  } = useState(null);\n  const {\n    0: clientFromButtonText,\n    1: setClientFromButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: selectedClientCurrent,\n    1: setSelectedClientCurrent\n  } = useState(null);\n  const {\n    0: clientCurrentButtonText,\n    1: setClientCurrentButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: showClientModal,\n    1: setShowClientModal\n  } = useState(false); // This state tells the modal which client box is being updated: \"from\" or \"current\"\n\n  const {\n    0: clientSelectionType,\n    1: setClientSelectionType\n  } = useState(null);\n  const router = useRouter();\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  const sortCheckBase = [false, false, false, false, false, false];\n  const {\n    0: labels,\n    1: setLabels\n  } = useState(labelBase);\n  const {\n    0: sortCheck,\n    1: setSortCheck\n  } = useState(sortCheckBase);\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState(null);\n  const {\n    0: selectedModel,\n    1: setSelectedModel\n  } = useState(null);\n  const {\n    0: gPos,\n    1: setGPos\n  } = useState(null);\n  const {\n    0: gIde,\n    1: setGIde\n  } = useState(null);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false); // Fetch data on component mount and route change\n\n  useEffect(() => {\n    fetchData();\n  }, [router.route]);\n\n  async function fetchData() {\n    if (router.query.inputText && router.query.selectedType) {\n      setSelect(router.query.selectedType);\n      setSearch(router.query.inputText);\n    }\n\n    const data = await fetchTestItemsWithMachineData();\n    setInfo(data);\n    setBackupInfo(data);\n    setID(data.map(item => item.id)); // Ensure IDs are correctly set here\n  }\n\n  const searchChangeHandler = event => setSearch(event.target.value); // Asynchronous filter function that loops through backupInfo and,\n  // for each item, fetches its Machine and CurrentMachine documents,\n  // then compares the client id (from machineData.client.id) to the selected client.\n\n\n  useEffect(() => {\n    async function filterParts() {\n      console.log(\"filterParts called with selectedClientFrom:\", selectedClientFrom, \"selectedClientCurrent:\", selectedClientCurrent);\n      const filtered = await Promise.all(backupInfo.map(async item => {\n        if (!item.visible) {\n          return null;\n        }\n\n        let passes = true; // Check OEM, Modality, and Model from machineData (if available)\n\n        if (item.machineData) {\n          if (selectedOEM && item.machineData.OEM !== selectedOEM) passes = false;\n          if (selectedModality && item.machineData.Modality !== selectedModality) passes = false;\n          if (selectedModel && item.machineData.Model !== selectedModel) passes = false;\n        } // For Client From: use the part’s Machine reference\n\n\n        if (passes && selectedClientFrom) {\n          if (!item.Machine) {\n            console.log(`Item ${item.id} has no Machine reference.`);\n            passes = false;\n          } else {\n            try {\n              const machineSnap = await item.Machine.get();\n\n              if (!machineSnap.exists) {\n                console.log(`Item ${item.id} Machine document does not exist.`);\n                passes = false;\n              } else {\n                const machineData = machineSnap.data();\n\n                if (!machineData.client) {\n                  console.log(`Item ${item.id} Machine has no client reference.`);\n                  passes = false;\n                } else {\n                  // Get the client id from the DocumentReference\n                  const clientFromId = machineData.client.id;\n                  console.log(`Item ${item.id}: fetched Client From id = ${clientFromId}, selectedClientFrom = ${selectedClientFrom}`);\n                  if (clientFromId !== selectedClientFrom) passes = false;\n                }\n              }\n            } catch (error) {\n              console.error(`Error fetching Machine for item ${item.id}:`, error);\n              passes = false;\n            }\n          }\n        } // For Client Current: use the part’s CurrentMachine reference\n\n\n        if (passes && selectedClientCurrent) {\n          if (!item.CurrentMachine) {\n            console.log(`Item ${item.id} has no CurrentMachine reference.`);\n            passes = false;\n          } else {\n            try {\n              const currentMachineSnap = await item.CurrentMachine.get();\n\n              if (!currentMachineSnap.exists) {\n                console.log(`Item ${item.id} CurrentMachine document does not exist.`);\n                passes = false;\n              } else {\n                const currentMachineData = currentMachineSnap.data();\n\n                if (!currentMachineData.client) {\n                  console.log(`Item ${item.id} CurrentMachine has no client reference.`);\n                  passes = false;\n                } else {\n                  const clientCurrentId = currentMachineData.client.id;\n                  console.log(`Item ${item.id}: fetched Client Current id = ${clientCurrentId}, selectedClientCurrent = ${selectedClientCurrent}`);\n                  if (clientCurrentId !== selectedClientCurrent) passes = false;\n                }\n              }\n            } catch (error) {\n              console.error(`Error fetching CurrentMachine for item ${item.id}:`, error);\n              passes = false;\n            }\n          }\n        } // If search text is not empty, apply additional filtering\n\n\n        if (passes && search !== \"\") {\n          if (select === \"Name\" && !item.name.toLowerCase().includes(search.toLowerCase())) passes = false;\n\n          if (select === \"Date\") {\n            const [month, day, year] = item.date.split(\"/\");\n            const reformattedDate = `${year}-${month}-${day}`;\n            if (reformattedDate !== search) passes = false;\n          }\n\n          if (select === \"Work Order\" && item.wo !== search) passes = false;\n          if (select === \"Product Number\" && item.pn !== search) passes = false;\n          if (select === \"Description\" && !item.desc.toLowerCase().includes(search.toLowerCase())) passes = false;\n          if (select === \"SKU\" && !item.id.toLowerCase().includes(search.toLowerCase())) passes = false;\n        }\n\n        return passes ? item : null;\n      }));\n      const filteredResults = filtered.filter(item => item !== null);\n      console.log(\"Filtered result count:\", filteredResults.length);\n      setInfo(filteredResults);\n    }\n\n    filterParts();\n  }, [selectedOEM, selectedModality, selectedClientFrom, selectedClientCurrent, selectedModel, search, backupInfo]);\n\n  function sortCheckAll(pos) {\n    const sortedInfo = [...info].sort((a, b) => {\n      if (pos === 0 || pos === 5) {\n        return sortCheck[pos] ? b[labelBaseNames[pos]].localeCompare(a[labelBaseNames[pos]]) : a[labelBaseNames[pos]].localeCompare(b[labelBaseNames[pos]]);\n      }\n\n      if (pos === 1) {\n        return sortCheck[pos] ? Date.parse(b[labelBaseNames[pos]]) - Date.parse(a[labelBaseNames[pos]]) : Date.parse(a[labelBaseNames[pos]]) - Date.parse(b[labelBaseNames[pos]]);\n      }\n\n      return sortCheck[pos] ? Number(b[labelBaseNames[pos]]) - Number(a[labelBaseNames[pos]]) : Number(a[labelBaseNames[pos]]) - Number(b[labelBaseNames[pos]]);\n    });\n    setInfo(sortedInfo);\n    setSortCheck(prevSortCheck => prevSortCheck.map((_, index) => index === pos ? !prevSortCheck[pos] : prevSortCheck[index]));\n  }\n\n  const rowSelect = item => {\n    if (item && item.id) {\n      console.log(\"Selected item:\", item);\n      router.push(\"./item/\" + item.id);\n    } else {\n      console.error(\"Unable to determine the selected item’s ID: \", item);\n    }\n  };\n\n  const {\n    0: selectedItems,\n    1: setSelectedItems\n  } = useState([]);\n  const {\n    0: showDeleteModal,\n    1: setShowDeleteModal\n  } = useState(false);\n\n  const handleSelectItem = id => {\n    setSelectedItems(prev => {\n      const newSelection = prev.includes(id) ? prev.filter(itemId => itemId !== id) : [...prev, id];\n      console.log(\"Selected items:\", newSelection);\n    });\n  };\n\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n\n  const handleDeleteSelected = async () => {\n    setIsDeleting(true);\n    const db = firebase.firestore();\n\n    try {\n      // Loop over each selected item one at a time\n      for (const itemId of selectedItems) {\n        console.log(itemId);\n\n        try {\n          // Delete from \"Test\" collection\n          await db.collection(\"TestItem\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from TestItem:`, err);\n        }\n\n        try {\n          // Delete from \"Parts\" collection\n          await db.collection(\"Parts\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Parts:`, err);\n        }\n\n        try {\n          // Delete associated photos from storage\n          await deleteFromStorage(itemId);\n        } catch (err) {\n          console.error(`Error deleting storage for ${itemId}:`, err);\n        }\n      } // Update local state by filtering out the deleted items\n\n\n      setInfo(info.filter(item => !selectedItems.includes(item.id)));\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Error deleting items:\", error);\n    } finally {\n      setIsDeleting(false);\n      handleCloseDeleteModal(); // Optionally, reload the page\n      // router.reload();\n    }\n  };\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const checkDelete = (event, pos, idsToDelete, name) => {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    console.log(\"Selected IDs to delete:\", idsToDelete);\n    setSelectedItems(idsToDelete);\n    setDItem(name);\n    setShowDeleteModal(true);\n  }; // const handleDelete = async () => {\n  //   let itemId = gIde;\n  //   try {\n  //     setIsDeleting(true);\n  //     const db = firebase.firestore();\n  //     await db.collection(\"Test\").doc(itemId).delete();\n  //     await deleteFromPartsCollection(itemId);\n  //     await deleteFromStorage(itemId);\n  //     setInfo(info.filter((_, i) => gPos !== i));\n  //     console.log(`Deleted item: ${itemId}`);\n  //   } catch (error) {\n  //     console.error(\"Error deleting item:\", error);\n  //   } finally {\n  //     setIsDeleting(false);\n  //   }\n  //   handleClose();\n  // };\n\n\n  const hoverStyle = index => ({\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n    textAlign: \"center\",\n    cursor: \"default\"\n  });\n\n  const {\n    0: dropdown1Text,\n    1: setDropdown1Text\n  } = useState(\"Select Option\");\n  const {\n    0: dropdown2Text,\n    1: setDropdown2Text\n  } = useState(\"Select Option\");\n\n  const handleSelect1 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  const handleSelect2 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  }; // --------------------\n  // CLIENT SELECTION HANDLING\n  // --------------------\n  // This function fetches clients and opens the client modal.\n\n\n  const handleClientClick = async () => {\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\n    setClients(clientsData);\n    setClientSearchTerm(\"\");\n    setShowClientModal(true);\n  }; // When a client is selected in the modal, we now assume the parameter is a client ID.\n  // If the passed value is null, we clear the selection.\n\n\n  const handleClientSelect = async clientId => {\n    console.log(\"User selected client id:\", clientId);\n\n    if (!clientId) {\n      if (clientSelectionType === \"from\") {\n        setClientFromButtonText(\"Select Option\");\n        setSelectedClientFrom(null);\n      } else if (clientSelectionType === \"current\") {\n        setClientCurrentButtonText(\"Select Option\");\n        setSelectedClientCurrent(null);\n      }\n\n      setShowClientModal(false);\n      return;\n    }\n\n    try {\n      const clientSnap = await firebase.firestore().collection(\"Client\").doc(clientId).get();\n\n      if (clientSnap.exists) {\n        const clientData = clientSnap.data();\n\n        if (clientSelectionType === \"from\") {\n          setClientFromButtonText(clientData.name);\n          setSelectedClientFrom(clientId);\n        } else if (clientSelectionType === \"current\") {\n          setClientCurrentButtonText(clientData.name);\n          setSelectedClientCurrent(clientId);\n        }\n      } else {\n        console.error(\"No client document found for id:\", clientId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n    }\n\n    setShowClientModal(false);\n  };\n\n  const handleClientInfo = (clientId, clientName) => {\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\n    router.push(\"client/\" + clientId);\n  };\n\n  const handleClearClientSelection = () => {\n    if (clientSelectionType === \"from\") {\n      setClientFromButtonText(\"Select Option\");\n      setSelectedClientFrom(null);\n    } else if (clientSelectionType === \"current\") {\n      setClientCurrentButtonText(\"Select Option\");\n      setSelectedClientCurrent(null);\n    }\n\n    setShowClientModal(false);\n  }; // --------------------\n  // MODEL SELECTION HANDLING\n  // --------------------\n\n\n  const {\n    0: models,\n    1: setModels\n  } = useState([]);\n  const {\n    0: showModelModal,\n    1: setShowModelModal\n  } = useState(false);\n  const {\n    0: modelButtonText,\n    1: setModelButtonText\n  } = useState(\"Select Option\");\n\n  const handleModelClick = async () => {\n    const modelsData = await fetchModels(selectedOEM, selectedModality, selectedClientFrom);\n    setModels(modelsData);\n    setModelSearchTerm(\"\");\n    setShowModelModal(true);\n  };\n\n  const handleModelSelect = modelName => {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  };\n\n  const handleClearModelSelection = () => {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n  }; // --------------------\n  // WAREHOUSE BUTTONS (for Client Current)\n  // --------------------\n\n\n  const handleSoCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"SoCal Warehouse\");\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\n  };\n\n  const handleNorCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"NorCal Warehouse\");\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\n  };\n\n  const handleWarehouseUnassignedClick = () => {\n    setClientCurrentButtonText(\"Unassigned\");\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\n  };\n\n  const {\n    0: clientSearchTerm,\n    1: setClientSearchTerm\n  } = useState(\"\");\n  const {\n    0: modelSearchTerm,\n    1: setModelSearchTerm\n  } = useState(\"\");\n\n  const deleteFromStorage = async itemId => {\n    const storageRef = firebase.storage().ref();\n    const folderRef = storageRef.child(`Parts/${itemId}/`);\n\n    try {\n      const listResult = await folderRef.listAll();\n      const deletePromises = listResult.items.map(item => item.delete());\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\"Error deleting from storage:\", error);\n    }\n  };\n\n  const deleteFromPartsCollection = async itemId => {\n    const db = firebase.firestore();\n\n    try {\n      await db.collection(\"Parts\").doc(itemId).delete();\n      console.log(`Deleted item from Parts collection: ${itemId}`);\n    } catch (error) {\n      console.error(\"Error deleting from Parts collection:\", error);\n    }\n  };\n\n  return __jsx(LoggedIn, null, isDeleting && __jsx(\"div\", {\n    className: \"loading-overlay\"\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    className: \"spinner-center\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Loading...\"))), __jsx(Modal, {\n    show: showDeleteModal,\n    onHide: handleCloseDeleteModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Confirm Deletion\")), __jsx(Modal.Body, null, \"Are you sure you want to delete \", selectedItems.length, \" item\", selectedItems.length > 1 ? \"s\" : \"\", \"?\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected\n  }, \"Yes, delete\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseDeleteModal\n  }, \"Cancel\"))), __jsx(Modal, {\n    show: showClientModal,\n    onHide: () => setShowClientModal(false)\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select \", clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: clientSearchTerm,\n    onChange: e => setClientSearchTerm(e.target.value)\n  }), __jsx(ClientTable, {\n    clients: clients.filter(client => client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())),\n    onSelectClient: handleClientSelect,\n    onInfoClick: handleClientInfo,\n    isClientSearch: false,\n    clearSelection: () => handleClientSelect(null)\n  }))), __jsx(Modal, {\n    show: showModelModal,\n    onHide: () => setShowModelModal(false)\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Model\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: modelSearchTerm,\n    onChange: e => setModelSearchTerm(e.target.value)\n  }), __jsx(ModelTable, {\n    models: models.filter(model => typeof model === \"string\" ? model.toLowerCase().includes(modelSearchTerm.toLowerCase()) : false),\n    onSelectModel: handleModelSelect,\n    clearSelection: () => handleModelSelect(null)\n  }))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"1200px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Magmo\"), __jsx(Row, null, __jsx(Col, {\n    md: 4\n  }, __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"OEM\"), __jsx(Dropdown, {\n    onSelect: handleSelect1\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-1\",\n    className: \"w-100\"\n  }, dropdown1Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"GE\"\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\"\n  }, \"Toshiba\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\"\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\"\n  }, \"Philips\")))), __jsx(InputGroup, {\n    className: \"mb-5\"\n  }, __jsx(InputGroup.Text, null, \"Modality\"), __jsx(Dropdown, {\n    onSelect: handleSelect2\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-2\",\n    className: \"w-100\"\n  }, dropdown2Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"CT\"\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\"\n  }, \"MRI\"))))), __jsx(\"div\", {\n    className: styles.divider\n  }), __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client From\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"from\");\n      handleClientClick();\n    }\n  }, clientFromButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client Current\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"current\");\n      handleClientClick();\n    }\n  }, clientCurrentButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Model\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleModelClick\n  }, modelButtonText)), __jsx(\"div\", {\n    className: styles.divider\n  }), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Warehouse\"), __jsx(\"div\", {\n    className: styles.buttonGroup\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleSoCalWarehouseClick\n  }, \"SoCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleNorCalWarehouseClick\n  }, \"NorCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleWarehouseUnassignedClick\n  }, \"Unassigned\"))))), __jsx(Col, {\n    md: 8\n  }, __jsx(\"div\", {\n    className: styles.tableContainer\n  }, __jsx(PartTable, {\n    info: info,\n    labels: labels,\n    ids: ids,\n    hoverStyle: hoverStyle,\n    sortCheckAll: sortCheckAll,\n    checkDelete: checkDelete,\n    isDeleting: isDeleting,\n    rowSelect: rowSelect,\n    setHoverIndex: setHoverIndex,\n    hoverIndex: hoverIndex,\n    selectedItems: selectedItems // Pass selectedItems state\n    ,\n    setSelectedItems: setSelectedItems // Pass its setter\n\n  }), __jsx(\"div\", {\n    className: styles.searchContainer\n  }, __jsx(Form, {\n    className: \"d-flex pb-2\"\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2 flex-grow-1\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler,\n    style: {\n      flex: \"1\"\n    }\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: () => setShowList(true),\n    onMouseLeave: () => setShowList(false),\n    style: {\n      marginTop: \"-5px\"\n    }\n  }, __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Name\");\n      setShowListSearch(\"text\");\n    }\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Date\");\n      setShowListSearch(\"date\");\n    }\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Work Order\");\n      setShowListSearch(\"number\");\n    }\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Product Number\");\n      setShowListSearch(\"number\");\n    }\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Description\");\n      setShowListSearch(\"text\");\n    }\n  }, \"Description\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"SKU\");\n      setShowListSearch(\"text\");\n    }\n  }, \"SKU\"))), __jsx(\"div\", {\n    className: \"d-flex justify-content-between\"\n  }, __jsx(LoadingButton, {\n    type: \"secondary\",\n    name: \"Add New Item\",\n    route: \"NewSearch/AddItem/NewItem\"\n  }), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"Warehousedb/WarehouseSelect\"\n  })))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
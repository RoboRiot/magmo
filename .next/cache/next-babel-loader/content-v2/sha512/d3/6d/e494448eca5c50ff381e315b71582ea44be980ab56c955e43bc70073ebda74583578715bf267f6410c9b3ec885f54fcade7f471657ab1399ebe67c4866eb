{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Table, Button, Form } from \"react-bootstrap\";\nimport { formatDate } from \"./fetchAssociations\";\nimport styles from \"../styles/PartTable.module.css\";\nexport default function PartTable({\n  info,\n  labels,\n  ids,\n  hoverStyle,\n  sortCheckAll,\n  checkDelete,\n  isDeleting,\n  rowSelect,\n  setHoverIndex,\n  hoverIndex,\n  selectedItems,\n  setSelectedItems\n}) {\n  // const [selectedItems, setSelectedItems] = useState([]);\n  // Toggle selection of items\n  const handleSelectItem = id => {\n    setSelectedItems(prevSelectedItems => prevSelectedItems.includes(id) ? prevSelectedItems.filter(itemId => itemId !== id) : [...prevSelectedItems, id]);\n  }; // Handle delete button click for selected items\n\n\n  const handleDeleteSelected = () => {\n    if (selectedItems.length > 0) {\n      checkDelete(null, null, selectedItems, \"selected items\");\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: styles.scrollableTable\n  }, __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    className: \"mb-0\"\n  }, __jsx(\"thead\", {\n    className: styles.stickyHeader\n  }, __jsx(\"tr\", null, labels.map((item, index) => __jsx(\"th\", {\n    style: hoverStyle(index),\n    onMouseOver: () => setHoverIndex(index),\n    onMouseOut: () => setHoverIndex(null),\n    onClick: () => sortCheckAll(index),\n    key: index\n  }, item)), __jsx(\"th\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, selectedItems.length > 0 ? __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected,\n    disabled: isDeleting,\n    size: \"sm\"\n  }, \"Delete Selected (\", selectedItems.length, \")\") : \"select\"))), __jsx(\"tbody\", null, info.map((item, index) => __jsx(\"tr\", {\n    key: index,\n    onClick: e => {\n      // Only trigger rowSelect if the target is not a checkbox\n      if (e.target.type !== \"checkbox\") {\n        rowSelect(item);\n      }\n    },\n    className: \"clickable-row\"\n  }, __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    }\n  }, item.name), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    }\n  }, formatDate(item.date)), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    }\n  }, item.workOrders && item.workOrders.length > 0 ? item.workOrders[item.workOrders.length - 1].workOrder : \"N/A\"), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    }\n  }, item.pn), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    }\n  }, item.sn), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Form.Check, {\n    type: \"checkbox\",\n    checked: selectedItems.includes(item.id),\n    onChange: e => {\n      e.stopPropagation(); // Prevent row click when checkbox is clicked\n      // Toggle selection using item.id directly\n\n      setSelectedItems(prevSelectedItems => prevSelectedItems.includes(item.id) ? prevSelectedItems.filter(id => id !== item.id) : [...prevSelectedItems, item.id]);\n    },\n    \"aria-label\": `Select ${item.name}`\n  })))), info.length < 10 && Array.from({\n    length: 10 - info.length\n  }).map((_, index) => __jsx(\"tr\", {\n    key: `empty-${index}`\n  }, __jsx(\"td\", {\n    colSpan: labels.length + 1,\n    style: {\n      textAlign: \"center\"\n    }\n  }, \"\\xA0\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}
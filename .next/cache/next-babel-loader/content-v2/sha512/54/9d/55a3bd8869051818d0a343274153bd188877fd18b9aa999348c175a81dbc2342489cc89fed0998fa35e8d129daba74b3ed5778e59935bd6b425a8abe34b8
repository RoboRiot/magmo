{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    error: \"Missing SLACK_BOT_TOKEN\"\n  });\n  const {\n    listKey,\n    // \"receiving\" | \"shipping\" | \"tasks\"\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body; // âœ… put the debug log HERE (inside the function, after destructure)\n\n  console.log(\"add-to-list payload\", {\n    listKey,\n    title,\n    localSN,\n    pn: Array.isArray(pn) ? pn.join(\", \") : pn,\n    sn: Array.isArray(sn) ? sn.join(\", \") : sn,\n    hasPhotos: Array.isArray(photoUrls) ? photoUrls.length : 0\n  }); // --- ENV mapping ---\n\n  const LISTS = {\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment\n\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment\n\n      }\n    },\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n      }\n    }\n  };\n  const CHANNELS = {\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n    shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n    tasks: process.env.SLACK_CHANNEL_TASKS_ID\n  }; // --- helpers ---\n\n  const headersJson = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n\n  const slack = (method, body, headers = headersJson) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers,\n    body\n  }).then(r => r.json());\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // Build a safe, non-empty title on the server (belt + suspenders)\n\n\n  const safeId = plain(localSN) || plain(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop());\n  const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\"; // -------- PATH A: Slack Lists (preferred for receiving/shipping/tasks lists) --------\n\n  const cfg = LISTS[listKey];\n\n  if (cfg !== null && cfg !== void 0 && cfg.id) {\n    const fields = []; // Description column\n\n    if (cfg.cols.desc && (description || listKey === \"tasks\" && bodyText || linkUrl)) {\n      const textBits = [plain(description), listKey === \"tasks\" ? plain(bodyText) : \"\", linkUrl ? `<${plain(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n      if (textBits) fields.push({\n        column_id: cfg.cols.desc,\n        value: {\n          text: textBits\n        }\n      });\n    }\n\n    if (cfg.cols.date && plain(date)) fields.push({\n      column_id: cfg.cols.date,\n      value: {\n        date: plain(date)\n      }\n    });\n\n    if (cfg.cols.pn && (pn || sn || dom)) {\n      const pnStr = joinArr(pn);\n      const snStr = joinArr(sn);\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`].filter(Boolean).join(\"  \");\n      if (combo) fields.push({\n        column_id: cfg.cols.pn,\n        value: {\n          text: combo\n        }\n      });\n    }\n\n    if (cfg.cols.track && (trackingNumber || poNumber)) {\n      const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`].filter(Boolean).join(\"  \");\n      if (t) fields.push({\n        column_id: cfg.cols.track,\n        value: {\n          text: t\n        }\n      });\n    }\n\n    if (cfg.cols.wo && plain(workOrder)) fields.push({\n      column_id: cfg.cols.wo,\n      value: {\n        text: `WO: ${plain(workOrder)}`\n      }\n    });\n    if (cfg.cols.lsn && plain(localSN)) fields.push({\n      column_id: cfg.cols.lsn,\n      value: {\n        text: plain(localSN)\n      }\n    }); // âœ… Build createBody AFTER cfg/fields exist\n\n    const createBody = {\n      list_id: cfg.id,\n      // Slack Lists expects a rich-text title; this shape renders properly\n      title: [{\n        type: \"rich_text\",\n        elements: [{\n          type: \"rich_text_section\",\n          elements: [{\n            type: \"text\",\n            text: safeTitle\n          }]\n        }]\n      }],\n      fields\n    };\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n    if (!(created !== null && created !== void 0 && created.ok)) return res.status(400).json({\n      error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n      raw: created\n    }); // Attach photos to the attachment column (if configured)\n\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n      const fileIds = [];\n\n      for (const url of photoUrls) {\n        var _complete$files, _complete$files$;\n\n        // Get external upload URL\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: new URLSearchParams({\n            filename: url.split(\"/\").pop() || \"image.jpg\"\n          })\n        }).then(r => r.json());\n        if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n        try {\n          const img = await fetch(url);\n          const buf = await img.arrayBuffer();\n          await fetch(init.upload_url, {\n            method: \"PUT\",\n            body: Buffer.from(buf)\n          });\n        } catch {\n          /* ignore individual image failures */\n        }\n\n        const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n          files: [{\n            id: init.file_id,\n            title: \"photo\"\n          }]\n        }));\n        if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) fileIds.push(complete.files[0].id);\n      }\n\n      if (fileIds.length) {\n        await slack(\"slackLists.items.update\", JSON.stringify({\n          list_id: cfg.id,\n          item_id: created.item.id,\n          fields: [{\n            column_id: cfg.cols.photos,\n            value: {\n              attachment: {\n                file_ids: fileIds\n              }\n            }\n          }]\n        }));\n      }\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.id,\n      item_id: created.item.id\n    });\n  } // -------- PATH B: Fallback to posting in a channel --------\n\n\n  const channel = CHANNELS[listKey];\n  if (!channel) return res.status(400).json({\n    error: \"Unknown listKey (no list or channel configured)\"\n  }); // Join public channel if needed to avoid channel_not_found\n\n  await fetch(\"https://slack.com/api/conversations.join\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      channel\n    })\n  });\n  const lines = [];\n  lines.push(`*${safeTitle}*`);\n  const pnStr = joinArr(pn);\n  const snStr = joinArr(sn);\n  if (pnStr) lines.push(`PN: ${pnStr}`);\n  if (snStr) lines.push(`SN: ${snStr}`);\n  if (plain(workOrder)) lines.push(`WO: ${plain(workOrder)}`);\n  if (plain(poNumber)) lines.push(`PO: ${plain(poNumber)}`);\n  if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\n  if (plain(dom)) lines.push(`DOM: ${plain(dom)}`);\n  if (plain(localSN)) lines.push(`Local SN: ${plain(localSN)}`);\n  if (plain(date)) lines.push(`Date: ${plain(date)}`);\n  const desc = plain(description);\n  if (desc) lines.push(desc);else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\n  if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({\n    channel,\n    text\n  }));\n  if (!(posted !== null && posted !== void 0 && posted.ok)) return res.status(400).json({\n    error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error\",\n    raw: posted\n  });\n  return res.status(200).json({\n    ok: true,\n    mode: \"channel\",\n    channel,\n    ts: posted.ts\n  });\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","console","log","Array","isArray","join","hasPhotos","length","LISTS","receiving","id","SLACK_LIST_RECEIVING_ID","cols","desc","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","track","SLACK_LIST_RECEIVING_TRACKING_COL","wo","SLACK_LIST_RECEIVING_WO_COL","lsn","SLACK_LIST_RECEIVING_LOCALSN_COL","photos","SLACK_LIST_RECEIVING_PHOTOS_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_TRACKING_COL","SLACK_LIST_SHIPPING_WO_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_DESCRIPTION_COL","CHANNELS","SLACK_CHANNEL_RECEIVING_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_TASKS_ID","headersJson","Authorization","slack","headers","fetch","then","r","plain","v","toString","trim","joinArr","a","filter","Boolean","map","safeId","split","pop","safeTitle","cfg","fields","textBits","push","column_id","value","text","pnStr","snStr","combo","t","createBody","list_id","type","elements","created","JSON","stringify","ok","raw","fileIds","url","init","URLSearchParams","filename","upload_url","img","buf","arrayBuffer","Buffer","from","complete","files","file_id","item_id","item","attachment","file_ids","mode","channel","lines","posted","ts"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n  const {\r\n    listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n    title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body;\r\n\r\n   // âœ… put the debug log HERE (inside the function, after destructure)\r\n  console.log(\"add-to-list payload\", {\r\n    listKey,\r\n    title,\r\n    localSN,\r\n    pn: Array.isArray(pn) ? pn.join(\", \") : pn,\r\n    sn: Array.isArray(sn) ? sn.join(\", \") : sn,\r\n    hasPhotos: Array.isArray(photoUrls) ? photoUrls.length : 0,\r\n  });\r\n\r\n  // --- ENV mapping ---\r\n  const LISTS = {\r\n    receiving: {\r\n      id: process.env.SLACK_LIST_RECEIVING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n      },\r\n    },\r\n    shipping: {\r\n      id: process.env.SLACK_LIST_SHIPPING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n      },\r\n    },\r\n    tasks: {\r\n      id: process.env.SLACK_LIST_TASKS_ID,\r\n      cols: {\r\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n      },\r\n    },\r\n  };\r\n\r\n  const CHANNELS = {\r\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n    shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n    tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n  };\r\n\r\n  // --- helpers ---\r\n  const headersJson = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n  };\r\n  const slack = (method, body, headers = headersJson) =>\r\n    fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body }).then(r => r.json());\r\n\r\n  const plain = v => (v ?? \"\").toString().trim();\r\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n  // Build a safe, non-empty title on the server (belt + suspenders)\r\n  const safeId    = plain(localSN) || plain(linkUrl?.split(\"/\").pop());\r\n  const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\";\r\n\r\n  // -------- PATH A: Slack Lists (preferred for receiving/shipping/tasks lists) --------\r\n  const cfg = LISTS[listKey];\r\n  if (cfg?.id) {\r\n    const fields = [];\r\n\r\n    // Description column\r\n    if (cfg.cols.desc && (description || (listKey === \"tasks\" && bodyText) || linkUrl)) {\r\n      const textBits = [\r\n        plain(description),\r\n        listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n        linkUrl ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n      ].filter(Boolean).join(\"\\n\");\r\n      if (textBits) fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n    }\r\n\r\n    if (cfg.cols.date && plain(date)) fields.push({ column_id: cfg.cols.date, value: { date: plain(date) } });\r\n\r\n    if (cfg.cols.pn && (pn || sn || dom)) {\r\n      const pnStr = joinArr(pn);\r\n      const snStr = joinArr(sn);\r\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n        .filter(Boolean).join(\"  \");\r\n      if (combo) fields.push({ column_id: cfg.cols.pn, value: { text: combo } });\r\n    }\r\n\r\n    if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n      const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n        .filter(Boolean).join(\"  \");\r\n      if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n    }\r\n\r\n    if (cfg.cols.wo  && plain(workOrder)) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${plain(workOrder)}` } });\r\n    if (cfg.cols.lsn && plain(localSN))   fields.push({ column_id: cfg.cols.lsn, value: { text: plain(localSN) } });\r\n\r\n    // âœ… Build createBody AFTER cfg/fields exist\r\n    const createBody = {\r\n      list_id: cfg.id,\r\n      // Slack Lists expects a rich-text title; this shape renders properly\r\n      title: [{\r\n        type: \"rich_text\",\r\n        elements: [{\r\n          type: \"rich_text_section\",\r\n          elements: [{ type: \"text\", text: safeTitle }]\r\n        }]\r\n      }],\r\n      fields,\r\n    };\r\n\r\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n    if (!created?.ok) return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n\r\n    // Attach photos to the attachment column (if configured)\r\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n      const fileIds = [];\r\n      for (const url of photoUrls) {\r\n        // Get external upload URL\r\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n          method: \"POST\",\r\n          headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n          body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n        }).then(r => r.json());\r\n        if (!init?.ok || !init?.upload_url) continue;\r\n\r\n        try {\r\n          const img = await fetch(url);\r\n          const buf = await img.arrayBuffer();\r\n          await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n        } catch { /* ignore individual image failures */ }\r\n\r\n        const complete = await slack(\"files.completeUploadExternal\",\r\n          JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }]}));\r\n        if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n      }\r\n\r\n      if (fileIds.length) {\r\n        await slack(\"slackLists.items.update\", JSON.stringify({\r\n          list_id: cfg.id,\r\n          item_id: created.item.id,\r\n          fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds }}}],\r\n        }));\r\n      }\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n  }\r\n\r\n  // -------- PATH B: Fallback to posting in a channel --------\r\n  const channel = CHANNELS[listKey];\r\n  if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n  // Join public channel if needed to avoid channel_not_found\r\n  await fetch(\"https://slack.com/api/conversations.join\", {\r\n    method: \"POST\",\r\n    headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n    body: new URLSearchParams({ channel }),\r\n  });\r\n\r\n  const lines = [];\r\n  lines.push(`*${safeTitle}*`);\r\n  const pnStr = joinArr(pn);\r\n  const snStr = joinArr(sn);\r\n  if (pnStr)           lines.push(`PN: ${pnStr}`);\r\n  if (snStr)           lines.push(`SN: ${snStr}`);\r\n  if (plain(workOrder))lines.push(`WO: ${plain(workOrder)}`);\r\n  if (plain(poNumber)) lines.push(`PO: ${plain(poNumber)}`);\r\n  if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\r\n  if (plain(dom))      lines.push(`DOM: ${plain(dom)}`);\r\n  if (plain(localSN))  lines.push(`Local SN: ${plain(localSN)}`);\r\n  if (plain(date))     lines.push(`Date: ${plain(date)}`);\r\n  const desc = plain(description);\r\n  if (desc)            lines.push(desc);\r\n  else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\r\n  if (plain(linkUrl))  lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\r\n\r\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n  if (!posted?.ok) return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n\r\n  return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport Modal from \"react-bootstrap/Modal\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col } from \"react-bootstrap\";\nimport styles from \"../../../../styles/Home.module.css\";\nimport Link from \"next/link\";\nimport { useAuth } from \"../../../../context/AuthUserContext\";\nimport firebase from \"../../../../context/Firebase\";\nimport LoggedIn from \"../../../LoggedIn\"; //setup for loading buttons\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton(type, name, route) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState({\n    name: false\n  });\n  useEffect(() => {\n    if (isLoading.name) {\n      simulateNetworkRequest().then(() => {\n        setLoading({\n          name: false\n        });\n      });\n    }\n  }, [isLoading.name]);\n\n  const handleClick = () => setLoading({\n    name: true\n  });\n\n  return __jsx(Link, {\n    href: `/${route}`\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading.name,\n    onClick: !isLoading.name ? handleClick : null\n  }, isLoading.name ? \"Loadingâ€¦\" : name));\n}\n\nconst article = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: items,\n    1: setItems\n  } = useState({});\n  const db = firebase.firestore();\n  const {\n    0: info,\n    1: setInfo\n  } = useState([]);\n  const {\n    0: ids,\n    1: setID\n  } = useState([]);\n  const {\n    0: idSelect,\n    1: setIDSelect\n  } = useState([]);\n  let selectedID = 0;\n  const {\n    0: newItem,\n    1: setNewItem\n  } = useState([false]); //\n  //\n  //functions for sending item\n  //\n  //\n\n  async function toSend() {\n    let tempDate = items.date;\n    const [year, month, day] = tempDate.split(\"-\").map(Number);\n    tempDate = new Date(year, month - 1, day);\n    let returnData = Object.assign({}, items, {\n      date: tempDate\n    });\n    console.log(\"this is the id: \" + selectedID); // creates a new id incase the id does not exist\n\n    if (newItem) {\n      await db.collection(\"Test\").doc(idSelect).set(returnData).then(() => {\n        console.log(\"Items added!\");\n        router.push(\"../WarehouseList\");\n      }); //uses an existing ID\n    } else {\n      await db.collection(\"Test\").doc(idSelect).update(returnData).then(() => {\n        console.log(\"Items added!\");\n        router.push(\"../WarehouseList\");\n      });\n    }\n  } //checks to make sure all fields are completed\n\n\n  async function handleSubmit(event) {\n    var check = false;\n\n    if (items[\"name\"] == \"\") {\n      console.log(\"error!!!!! name\");\n      check = true;\n    }\n\n    if (items[\"wo\"] == \"\") {\n      console.log(\"error!!!!! work order\");\n      check = true;\n    }\n\n    if (items[\"pn\"] == \"\") {\n      console.log(\"error!!!!! product number\");\n      check = true;\n    }\n\n    if (items[\"sn\"] == \"\") {\n      console.log(\"error!!!!! serial number\");\n      check = true;\n    }\n\n    if (items[\"date\"] == \"\") {\n      console.log(\"error!!!!! date\");\n      check = true;\n    }\n\n    if (items[\"desc\"] == \"\") {\n      console.log(\"error!!!!! description\");\n      check = true;\n    }\n\n    if (check) {\n      console.log(\"entered\");\n      handleShow();\n    } else {\n      console.log(\"try submit\");\n      console.log(items);\n      toSend();\n    }\n\n    event.preventDefault();\n  } //all the change handlers for the input boxes for the item\n\n\n  const nameChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      name: event.target.value\n    }));\n  };\n\n  const woChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      wo: event.target.value\n    }));\n  };\n\n  const pnChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      pn: event.target.value\n    }));\n  };\n\n  const snChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      sn: event.target.value\n    }));\n  };\n\n  const dateChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      date: event.target.value\n    }));\n    console.log(items.date);\n  };\n\n  const descChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      desc: event.target.value\n    }));\n  }; //\n  //\n  //functions for pulling item\n  //\n  //\n  //\n  // Start the fetch operation as soon as\n  // the page loads\n  // if (typeof window !== \"undefined\") {\n  //   window.addEventListener(\"load\", () => {\n\n\n  useEffect(() => {\n    console.log(\"enter 1\");\n    fetchData();\n  }, [router.route]); // runs every time `router.route` changes\n  // displayData();\n  //   });\n  // }\n\n  async function fetchStuff() {\n    let data = 0;\n    let id = 0;\n    const cityRef = await db.collection(\"Test\").get().then(querySnapshot => {\n      // Loop through the data and store\n      // it in array to display\n      querySnapshot.forEach(element => {\n        // console.log(\"enter 2\");\n        // console.log(element.id);\n        if (element.id == selectedID) {\n          data = element.data();\n          id = element.id;\n        }\n      });\n    }); // console.log(data);\n    // setID(id);\n    // console.log(ids);\n\n    return [data, id];\n  }\n\n  function toDateTime(secs) {\n    var t = new Date(1970, 0, 1); // Epoch\n\n    t.setSeconds(secs);\n    return t;\n  }\n\n  async function fetchData() {\n    console.log(window.location.pathname.substring(window.location.pathname.lastIndexOf(\"/\") + 1));\n    selectedID = window.location.pathname.substring(window.location.pathname.lastIndexOf(\"/\") + 1);\n    let datas = await fetchStuff();\n    let data = datas[0];\n    console.log(data);\n\n    if (data == 0) {\n      console.log(\"new item\");\n      setIDSelect(selectedID);\n      setNewItem(true);\n    } else {\n      let itemValue = [];\n      let dateStorage = [];\n      let mSpace = \"-\";\n      let dSpace = \"-\";\n      if (toDateTime(data.date.seconds).getMonth() + 1 < 10) mSpace = \"-0\";\n      if (toDateTime(data.date.seconds).getDate() + 1 < 10) dSpace = \"-0\";\n      data.date = toDateTime(data.date.seconds).getFullYear() + mSpace + (toDateTime(data.date.seconds).getMonth() + 1) + dSpace + toDateTime(data.date.seconds).getDate();\n      console.log(data.date);\n      setIDSelect(selectedID);\n      setItems(data);\n    }\n  }\n\n  return __jsx(LoggedIn, null, __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, \"Missing field\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"Ok\"))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Item\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"name\"\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"name\"],\n    onChange: nameChangeHandler\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"wo\"\n  }, __jsx(Form.Label, null, \"Work Order\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"wo\"],\n    onChange: woChangeHandler\n  }))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"pn\"\n  }, __jsx(Form.Label, null, \"Product Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"pn\"],\n    onChange: pnChangeHandler\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"sn\"\n  }, __jsx(Form.Label, null, \"Serial Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"sn\"],\n    onChange: snChangeHandler\n  }))), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"date\"\n  }, __jsx(Form.Label, null, \"Date\"), __jsx(Form.Control, {\n    type: \"date\",\n    value: items[\"date\"],\n    onChange: dateChangeHandler\n  })), __jsx(Form.Label, null), __jsx(Form.Group, {\n    className: \"mb-3\",\n    controlId: \"desc\"\n  }, __jsx(Form.Label, null, \"Description\"), __jsx(Form.Control, {\n    as: \"textarea\" // Convert it to textarea\n    ,\n    className: \"auto-grow-textarea\",\n    value: items[\"desc\"],\n    onChange: descChangeHandler\n  })), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\"\n  }, \"Submit Changes\"), __jsx(Link, {\n    href: \"../WarehouseList\"\n  }, __jsx(Button, {\n    className: \"m-3\",\n    variant: \"secondary\"\n  }, \"Go Back\"))))))));\n};\n\nexport default article;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport Firebase, { auth } from \"./Firebase\";\n\nconst formatAuthUser = user => ({\n  uid: user.uid,\n  email: user.email\n});\n\nexport default function useFirebaseAuth() {\n  const {\n    0: authUser,\n    1: setAuthUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const authStateChanged = async authState => {\n    if (!authState) {\n      setAuthUser(null);\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    const formattedUser = formatAuthUser(authState);\n    setAuthUser(formattedUser);\n    setLoading(false);\n  };\n\n  const clear = () => {\n    setAuthUser(null);\n    setLoading(true);\n  }; //sign in with google\n\n\n  const signInWithGoogle = () => {\n    const provider = new Firebase.auth.GoogleAuthProvider();\n    provider.setCustomParameters({\n      prompt: \"select_account\"\n    });\n    return auth.signInWithRedirect(provider).catch(error => {\n      console.error(\"Google Sign-In Error:\", error);\n      throw error;\n    });\n  };\n\n  const signOut = () => auth.signOut().then(clear); // Listen for Firebase auth state changes\n  // useEffect(() => {\n  //   const unsubscribe = auth.onAuthStateChanged(authStateChanged);\n  //   return () => unsubscribe();\n  // }, []);\n\n\n  useEffect(() => {\n    let unsubscribe;\n    auth.setPersistence(Firebase.auth.Auth.Persistence.LOCAL).then(() => {\n      // Now set up the listener\n      unsubscribe = auth.onAuthStateChanged(authStateChanged);\n    }).catch(error => console.error(\"Error setting persistence:\", error));\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, []);\n  return {\n    authUser,\n    loading,\n    signInWithGoogle,\n    signOut\n  };\n}","map":{"version":3,"sources":["C:/Users/mack2/OneDrive/Desktop/code/context/useFirebaseAuth.js"],"names":["useState","useEffect","Firebase","auth","formatAuthUser","user","uid","email","useFirebaseAuth","authUser","setAuthUser","loading","setLoading","authStateChanged","authState","formattedUser","clear","signInWithGoogle","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithRedirect","catch","error","console","signOut","then","unsubscribe","setPersistence","Auth","Persistence","LOCAL","onAuthStateChanged"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,IAAmBC,IAAnB,QAA+B,YAA/B;;AAEA,MAAMC,cAAc,GAAIC,IAAD,KAAW;AAChCC,EAAAA,GAAG,EAAED,IAAI,CAACC,GADsB;AAEhCC,EAAAA,KAAK,EAAEF,IAAI,CAACE;AAFoB,CAAX,CAAvB;;AAKA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMa,gBAAgB,GAAG,MAAOC,SAAP,IAAqB;AAC5C,QAAI,CAACA,SAAL,EAAgB;AACdJ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AAEDA,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMG,aAAa,GAAGX,cAAc,CAACU,SAAD,CAApC;AACAJ,IAAAA,WAAW,CAACK,aAAD,CAAX;AACAH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAXD;;AAaA,QAAMI,KAAK,GAAG,MAAM;AAClBN,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAHD,CAjBwC,CAsBxC;;;AACA,QAAMK,gBAAgB,GAAG,MAAM;AAC7B,UAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACC,IAAT,CAAcgB,kBAAlB,EAAjB;AACAD,IAAAA,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA7B;AAEA,WAAOlB,IAAI,CAACmB,kBAAL,CAAwBJ,QAAxB,EAAkCK,KAAlC,CAAyCC,KAAD,IAAW;AACxDC,MAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACA,YAAMA,KAAN;AACD,KAHM,CAAP;AAID,GARD;;AAUA,QAAME,OAAO,GAAG,MAAMvB,IAAI,CAACuB,OAAL,GAAeC,IAAf,CAAoBX,KAApB,CAAtB,CAjCwC,CAmCxC;AACA;AACA;AACA;AACA;;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2B,WAAJ;AACAzB,IAAAA,IAAI,CACD0B,cADH,CACkB3B,QAAQ,CAACC,IAAT,CAAc2B,IAAd,CAAmBC,WAAnB,CAA+BC,KADjD,EAEGL,IAFH,CAEQ,MAAM;AACV;AACAC,MAAAA,WAAW,GAAGzB,IAAI,CAAC8B,kBAAL,CAAwBpB,gBAAxB,CAAd;AACD,KALH,EAMGU,KANH,CAMUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,4BAAd,EAA4CA,KAA5C,CANpB;AAQA,WAAO,MAAM;AACX,UAAII,WAAJ,EAAiB;AACfA,QAAAA,WAAW;AACZ;AACF,KAJD;AAKD,GAfQ,EAeN,EAfM,CAAT;AAiBA,SAAO;AACLnB,IAAAA,QADK;AAELE,IAAAA,OAFK;AAGLM,IAAAA,gBAHK;AAILS,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Firebase, { auth } from \"./Firebase\";\n\nconst formatAuthUser = (user) => ({\n  uid: user.uid,\n  email: user.email,\n});\n\nexport default function useFirebaseAuth() {\n  const [authUser, setAuthUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const authStateChanged = async (authState) => {\n    if (!authState) {\n      setAuthUser(null);\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    const formattedUser = formatAuthUser(authState);\n    setAuthUser(formattedUser);\n    setLoading(false);\n  };\n\n  const clear = () => {\n    setAuthUser(null);\n    setLoading(true);\n  };\n\n  //sign in with google\n  const signInWithGoogle = () => {\n    const provider = new Firebase.auth.GoogleAuthProvider();\n    provider.setCustomParameters({ prompt: \"select_account\" });\n\n    return auth.signInWithRedirect(provider).catch((error) => {\n      console.error(\"Google Sign-In Error:\", error);\n      throw error;\n    });\n  };\n\n  const signOut = () => auth.signOut().then(clear);\n\n  // Listen for Firebase auth state changes\n  // useEffect(() => {\n  //   const unsubscribe = auth.onAuthStateChanged(authStateChanged);\n  //   return () => unsubscribe();\n  // }, []);\n  useEffect(() => {\n    let unsubscribe;\n    auth\n      .setPersistence(Firebase.auth.Auth.Persistence.LOCAL)\n      .then(() => {\n        // Now set up the listener\n        unsubscribe = auth.onAuthStateChanged(authStateChanged);\n      })\n      .catch((error) => console.error(\"Error setting persistence:\", error));\n\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, []);\n\n  return {\n    authUser,\n    loading,\n    signInWithGoogle,\n    signOut,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\machine\\\\[id]\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Table, Button, Container, Card, Row, Col, Alert } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\"; // Import for SSR\n\nvar Machine = function Machine() {\n  _s();\n\n  var router = useRouter();\n\n  var _useState = useState(null),\n      selectedMachine = _useState[0],\n      setSelectedMachine = _useState[1];\n\n  var _useState2 = useState([]),\n      associatedParts = _useState2[0],\n      setAssociatedParts = _useState2[1];\n\n  var _useState3 = useState(null),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    if (router.isReady) {\n      var machineId = router.query.machineId;\n\n      if (!machineId) {\n        var pathSegments = router.asPath.split(\"/\");\n        var machineIdFromPath = pathSegments[pathSegments.length - 1];\n        console.log(\"Machine ID extracted from URL path: \".concat(machineIdFromPath));\n        fetchMachineData(machineIdFromPath);\n      } else {\n        console.log(\"Machine ID from router query: \".concat(machineId));\n        fetchMachineData(machineId);\n      }\n    }\n  }, [router.isReady]);\n\n  var fetchMachineData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(machineId) {\n      var db, machineDoc, machineData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              console.log(\"Attempting to fetch machine data for ID: \".concat(machineId));\n              db = firebase.firestore();\n              _context.next = 5;\n              return db.collection(\"Machine\").doc(machineId).get();\n\n            case 5:\n              machineDoc = _context.sent;\n\n              if (machineDoc.exists) {\n                machineData = machineDoc.data();\n                setSelectedMachine(machineData);\n                console.log(\"Machine data:\", machineData); // Fetch associated parts\n\n                if (machineData.associatedParts) {\n                  fetchAssociatedParts(machineData.associatedParts);\n                }\n              } else {\n                console.error(\"Machine not found\");\n                setError(\"Machine not found\");\n              }\n\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching machine data:\", _context.t0);\n              setError(\"Error fetching machine data\");\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function fetchMachineData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchAssociatedParts = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(associatedPartsRefs) {\n      var db, partsDocs, partsData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              db = firebase.firestore();\n              _context3.next = 4;\n              return Promise.all(associatedPartsRefs.map(function (ref) {\n                return ref.get();\n              }));\n\n            case 4:\n              partsDocs = _context3.sent;\n              _context3.next = 7;\n              return Promise.all(partsDocs.map( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(doc) {\n                  var _data$ClientFrom;\n\n                  var data, clientName, clientDoc;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (doc.exists) {\n                            _context2.next = 2;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\", null);\n\n                        case 2:\n                          data = doc.data() || {};\n                          clientName = \"\";\n\n                          if (!((_data$ClientFrom = data.ClientFrom) !== null && _data$ClientFrom !== void 0 && _data$ClientFrom.get)) {\n                            _context2.next = 9;\n                            break;\n                          }\n\n                          _context2.next = 7;\n                          return data.ClientFrom.get();\n\n                        case 7:\n                          clientDoc = _context2.sent;\n                          clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n\n                        case 9:\n                          return _context2.abrupt(\"return\", _objectSpread(_objectSpread({\n                            id: doc.id\n                          }, data), {}, {\n                            clientName: clientName\n                          }));\n\n                        case 10:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x3) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n\n            case 7:\n              partsData = _context3.sent;\n              setAssociatedParts(partsData.filter(function (p) {\n                return p;\n              }));\n              console.log(\"Associated parts data:\", partsData);\n              _context3.next = 16;\n              break;\n\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error fetching associated parts:\", _context3.t0);\n              setError(\"Error fetching associated parts\");\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 12]]);\n    }));\n\n    return function fetchAssociatedParts(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handlePrintMulti = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var payload, response, result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // Create your payload with the mapped items.\n              // Replace 'associatedParts' with your actual variable containing the list.\n              payload = {\n                items: associatedParts.map(function (part) {\n                  return {\n                    name: part.name,\n                    arrival_date: part.arrival_date,\n                    // Ensure your part has a 'date' field.\n                    poNumber: part.poNumber || \"\",\n                    OEM: part.TheMachine ? part.TheMachine.oem || \"\" : \"\",\n                    modality: part.TheMachine ? part.TheMachine.modality || \"\" : \"\",\n                    model: part.TheMachine ? part.TheMachine.model || \"\" : \"\",\n                    local_sn: part.id,\n                    // Using document id as the local serial number.\n                    client: part.clientName || \"\",\n                    description: part.description || (part.descriptions && part.descriptions.length > 0 ? part.descriptions[0].description : \"\")\n                  };\n                }),\n                test_print: true,\n                // Hard-coded here if you want to test printing one item\n                index: 1 // Hard-coded index (1-based)\n\n              };\n              _context4.prev = 1;\n              _context4.next = 4;\n              return fetch(\"https://9d70-174-76-22-138.ngrok-free.app/print_multi\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(payload)\n              });\n\n            case 4:\n              response = _context4.sent;\n              _context4.next = 7;\n              return response.json();\n\n            case 7:\n              result = _context4.sent;\n              console.log(\"Print multi result:\", result.status);\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(\"Error printing multiple labels:\", _context4.t0);\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 11]]);\n    }));\n\n    return function handlePrintMulti() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectPart = function handleSelectPart(id, name) {\n    console.log(\"Selected part ID: \".concat(id, \", Name: \").concat(name));\n    router.push(\"../item/\" + id);\n  };\n\n  var formatDate = function formatDate(input) {\n    var date;\n\n    if (input && input.seconds) {\n      // Handle timestamp object with 'seconds' property\n      date = new Date(input.seconds * 1000);\n    } else if (typeof input === \"string\") {\n      // Handle date string\n      date = new Date(input);\n    } else {\n      return \"N/A\";\n    }\n\n    if (isNaN(date.getTime())) {\n      // Invalid date string\n      return \"Invalid Date\";\n    }\n\n    return date.toLocaleDateString();\n  };\n\n  return __jsx(Container, {\n    className: \"mt-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    className: \"justify-content-md-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    md: \"8\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, \"Machine Details\")), __jsx(Card.Body, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, error && __jsx(Alert, {\n    variant: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }\n  }, error), selectedMachine ? __jsx(React.Fragment, null, __jsx(\"h5\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }, \"Machine: \", selectedMachine.name), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 19\n    }\n  }, \"Model: \", selectedMachine.Model), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 19\n    }\n  }, \"Model: \", selectedMachine.Modality), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 19\n    }\n  }, \"Model: \", selectedMachine.OEM), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"Last PM: \", formatDate(selectedMachine.lastPM)), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 19\n    }\n  }, \"Next PM: \", formatDate(selectedMachine.nextPM)), __jsx(\"h5\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }, \"Associated Parts\"), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }\n  }, __jsx(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, __jsx(\"tr\", {\n    key: part.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 23\n    }\n  }, __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 25\n    }\n  }, \"Name\"), __jsx(\"td\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, part.id), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }, \"Part Number\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, \"Serial Number\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, \"Select\"))), __jsx(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, associatedParts.map(function (part) {\n    return __jsx(\"tr\", {\n      key: part.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 27\n      }\n    }, part.name), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 27\n      }\n    }, part.pn), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 27\n      }\n    }, part.sn), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 27\n      }\n    }, part.date), __jsx(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 27\n      }\n    }, __jsx(Button, {\n      variant: \"primary\",\n      onClick: function onClick() {\n        return handleSelectPart(part.id, part.name);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    }, \"Select\")));\n  }), __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 23\n    }\n  }, __jsx(\"td\", {\n    colSpan: \"5\",\n    style: {\n      textAlign: \"center\",\n      paddingTop: \"20px\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handlePrintMulti,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 27\n    }\n  }, \"Print All Items\"))), __jsx(Button, {\n    variant: \"primary\",\n    style: {\n      marginTop: \"20px\"\n    },\n    onClick: function onClick() {\n      return router.back();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 23\n    }\n  }, \"back\")))) : !error && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 27\n    }\n  }, \"Loading machine data...\"))))));\n};\n\n_s(Machine, \"Jrgj0t6JGVLZrjyifcZbKOFoxno=\", false, function () {\n  return [useRouter];\n});\n\n_c = Machine;\nexport var __N_SSP = true;\nexport default Machine; // Server-side rendering function\n\nvar _c;\n\n$RefreshReg$(_c, \"Machine\");","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/machine/[id]/index.js"],"names":["React","useEffect","useState","useRouter","Table","Button","Container","Card","Row","Col","Alert","firebase","Machine","router","selectedMachine","setSelectedMachine","associatedParts","setAssociatedParts","error","setError","isReady","machineId","query","pathSegments","asPath","split","machineIdFromPath","length","console","log","fetchMachineData","db","firestore","collection","doc","get","machineDoc","exists","machineData","data","fetchAssociatedParts","associatedPartsRefs","Promise","all","map","ref","partsDocs","clientName","ClientFrom","clientDoc","name","id","partsData","filter","p","handlePrintMulti","payload","items","part","arrival_date","poNumber","OEM","TheMachine","oem","modality","model","local_sn","client","description","descriptions","test_print","index","fetch","method","headers","body","JSON","stringify","response","json","result","status","handleSelectPart","push","formatDate","input","date","seconds","Date","isNaN","getTime","toLocaleDateString","Model","Modality","lastPM","nextPM","pn","sn","textAlign","paddingTop","marginTop","back"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport {\n  Table,\n  Button,\n  Container,\n  Card,\n  Row,\n  Col,\n  Alert,\n} from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\n\n// Import for SSR\nimport { adminDb } from \"../../../../context/FirebaseAdmin\";\n\nconst Machine = () => {\n  const router = useRouter();\n  const [selectedMachine, setSelectedMachine] = useState(null);\n  const [associatedParts, setAssociatedParts] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (router.isReady) {\n      const { machineId } = router.query;\n      if (!machineId) {\n        const pathSegments = router.asPath.split(\"/\");\n        const machineIdFromPath = pathSegments[pathSegments.length - 1];\n        console.log(`Machine ID extracted from URL path: ${machineIdFromPath}`);\n        fetchMachineData(machineIdFromPath);\n      } else {\n        console.log(`Machine ID from router query: ${machineId}`);\n        fetchMachineData(machineId);\n      }\n    }\n  }, [router.isReady]);\n\n  const fetchMachineData = async (machineId) => {\n    try {\n      console.log(`Attempting to fetch machine data for ID: ${machineId}`);\n      const db = firebase.firestore();\n      const machineDoc = await db.collection(\"Machine\").doc(machineId).get();\n      if (machineDoc.exists) {\n        const machineData = machineDoc.data();\n        setSelectedMachine(machineData);\n        console.log(\"Machine data:\", machineData);\n\n        // Fetch associated parts\n        if (machineData.associatedParts) {\n          fetchAssociatedParts(machineData.associatedParts);\n        }\n      } else {\n        console.error(\"Machine not found\");\n        setError(\"Machine not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching machine data:\", error);\n      setError(\"Error fetching machine data\");\n    }\n  };\n\n  const fetchAssociatedParts = async (associatedPartsRefs) => {\n    try {\n      const db = firebase.firestore();\n      const partsDocs = await Promise.all(\n        associatedPartsRefs.map((ref) => ref.get())\n      );\n\n      const partsData = await Promise.all(\n        partsDocs.map(async (doc) => {\n          if (!doc.exists) {\n            // skip or return an empty object\n            return null;\n          }\n          const data = doc.data() || {};\n          let clientName = \"\";\n          if (data.ClientFrom?.get) {\n            const clientDoc = await data.ClientFrom.get();\n            clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n          }\n          return { id: doc.id, ...data, clientName };\n        })\n      );\n\n      setAssociatedParts(partsData.filter((p) => p));\n      console.log(\"Associated parts data:\", partsData);\n    } catch (error) {\n      console.error(\"Error fetching associated parts:\", error);\n      setError(\"Error fetching associated parts\");\n    }\n  };\n\n  const handlePrintMulti = async () => {\n    // Create your payload with the mapped items.\n    // Replace 'associatedParts' with your actual variable containing the list.\n    const payload = {\n      items: associatedParts.map((part) => ({\n        name: part.name,\n        arrival_date: part.arrival_date, // Ensure your part has a 'date' field.\n        poNumber: part.poNumber || \"\",\n        OEM: part.TheMachine ? part.TheMachine.oem || \"\" : \"\",\n        modality: part.TheMachine ? part.TheMachine.modality || \"\" : \"\",\n        model: part.TheMachine ? part.TheMachine.model || \"\" : \"\",\n        local_sn: part.id, // Using document id as the local serial number.\n        client: part.clientName || \"\",\n        description:\n          part.description ||\n          (part.descriptions && part.descriptions.length > 0\n            ? part.descriptions[0].description\n            : \"\"),\n      })),\n      test_print: true, // Hard-coded here if you want to test printing one item\n      index: 1, // Hard-coded index (1-based)\n    };\n\n    try {\n      const response = await fetch(\n        \"https://9d70-174-76-22-138.ngrok-free.app/print_multi\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(payload),\n        }\n      );\n      const result = await response.json();\n      console.log(\"Print multi result:\", result.status);\n    } catch (error) {\n      console.error(\"Error printing multiple labels:\", error);\n    }\n  };\n\n  const handleSelectPart = (id, name) => {\n    console.log(`Selected part ID: ${id}, Name: ${name}`);\n    router.push(\"../item/\" + id);\n  };\n\n  const formatDate = (input) => {\n    let date;\n\n    if (input && input.seconds) {\n      // Handle timestamp object with 'seconds' property\n      date = new Date(input.seconds * 1000);\n    } else if (typeof input === \"string\") {\n      // Handle date string\n      date = new Date(input);\n    } else {\n      return \"N/A\";\n    }\n\n    if (isNaN(date.getTime())) {\n      // Invalid date string\n      return \"Invalid Date\";\n    }\n\n    return date.toLocaleDateString();\n  };\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">\n          <Card>\n            <Card.Header>\n              <h4>Machine Details</h4>\n            </Card.Header>\n            <Card.Body>\n              {error && <Alert variant=\"danger\">{error}</Alert>}\n              {selectedMachine ? (\n                <>\n                  <h5>Machine: {selectedMachine.name}</h5>\n                  <p>Model: {selectedMachine.Model}</p>\n                  <p>Model: {selectedMachine.Modality}</p>\n                  <p>Model: {selectedMachine.OEM}</p>\n                  <p>Last PM: {formatDate(selectedMachine.lastPM)}</p>\n                  <p>Next PM: {formatDate(selectedMachine.nextPM)}</p>\n                  <h5>Associated Parts</h5>\n                  <Table striped bordered hover size=\"sm\">\n                    <thead>\n                      <tr key={part.id}>\n                        <th>Name</th>\n                        <td>{part.id}</td>\n                        <th>Part Number</th>\n                        <th>Serial Number</th>\n                        <th>Date</th>\n                        <th>Select</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {associatedParts.map((part) => (\n                        <tr key={part.id}>\n                          <td>{part.name}</td>\n                          <td>{part.pn}</td>\n                          <td>{part.sn}</td>\n                          <td>{part.date}</td>\n                          <td>\n                            <Button\n                              variant=\"primary\"\n                              onClick={() =>\n                                handleSelectPart(part.id, part.name)\n                              }\n                            >\n                              Select\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                      <tr>\n                        <td\n                          colSpan=\"5\"\n                          style={{ textAlign: \"center\", paddingTop: \"20px\" }}\n                        >\n                          <Button\n                            variant=\"secondary\"\n                            onClick={handlePrintMulti}\n                          >\n                            Print All Items\n                          </Button>\n                        </td>\n                      </tr>\n                      {/* <Col md={4}> */}\n                      <Button\n                        variant=\"primary\"\n                        style={{ marginTop: \"20px\" }}\n                        onClick={() => router.back()}\n                      >\n                        back\n                      </Button>\n                      {/* </Col> */}\n                    </tbody>\n                  </Table>\n                </>\n              ) : (\n                !error && <p>Loading machine data...</p>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Machine;\n\n// Server-side rendering function\nexport async function getServerSideProps(context) {\n  const { id } = context.params;\n\n  try {\n    // Fetch machine data from Firestore using Admin SDK\n    const machineDoc = await adminDb.collection(\"Machine\").doc(id).get();\n\n    if (!machineDoc.exists) {\n      return {\n        notFound: true, // This will show a 404 page\n      };\n    }\n\n    const machineData = machineDoc.data();\n\n    // Fetch associated parts if they exist\n    let associatedParts = [];\n    if (\n      machineData.associatedParts &&\n      Array.isArray(machineData.associatedParts)\n    ) {\n      try {\n        const partsPromises = machineData.associatedParts\n          .map((partRef) => {\n            if (partRef.path) {\n              return adminDb.doc(partRef.path).get();\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        const partsDocs = await Promise.all(partsPromises);\n        associatedParts = await Promise.all(\n          partsDocs.map(async (doc) => {\n            if (!doc.exists) {\n              return null;\n            }\n            const data = doc.data() || {};\n            let clientName = \"\";\n\n            // Fetch client name if ClientFrom reference exists\n            if (data.ClientFrom && data.ClientFrom.path) {\n              try {\n                const clientDoc = await adminDb.doc(data.ClientFrom.path).get();\n                clientName = clientDoc.exists ? clientDoc.data().name : \"\";\n              } catch (error) {\n                console.error(\"Error fetching client data:\", error);\n              }\n            }\n\n            return {\n              id: doc.id,\n              ...data,\n              clientName,\n            };\n          })\n        );\n\n        // Filter out null values\n        associatedParts = associatedParts.filter((part) => part !== null);\n      } catch (error) {\n        console.error(\"Error fetching associated parts:\", error);\n      }\n    }\n\n    // Serialize the machine data, removing any non-serializable fields\n    const serializedMachine = {\n      id,\n      name: machineData.name || \"\",\n      Model: machineData.Model || \"\",\n      OEM: machineData.OEM || \"\",\n      Modality: machineData.Modality || \"\",\n      lastPM: machineData.lastPM || null,\n      nextPM: machineData.nextPM || null,\n      // Add other machine fields as needed, but ensure they're serializable\n    };\n\n    return {\n      props: {\n        initialMachine: serializedMachine,\n        initialAssociatedParts: associatedParts,\n      },\n    };\n  } catch (error) {\n    console.error(\"Error in getServerSideProps:\", error);\n    return {\n      props: {\n        error: \"Failed to load machine data\",\n      },\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
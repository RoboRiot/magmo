{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col, Modal, FormControl, Collapse, InputGroup, ButtonGroup } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useAuth } from \"../../../../context/AuthUserContext\";\nimport firebase from \"../../../../context/Firebase\";\nimport LoggedIn from \"../../../LoggedIn\";\nimport { useRouter } from \"next/router\";\nimport { fetchClients } from \"../../../../utils/fetchAssociations\";\nimport ClientTable from \"../../../../utils/ClientTable\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport ParentModal from \"../../AddItem/parentModal\";\nimport dynamic from \"next/dynamic\";\nimport InfoModal from \"../../InfoModal\";\nimport MachineSelectionModal from \"./MachineSelectionModal\";\nimport { addServiceItem } from \"../../../../utils/BluefolderService\";\nimport NewLocal from \"./NewLocal\"; //inflow API\n\nimport InflowAPI from \"../../../../utils/inflowAPI\"; // Import for SSR\n\nimport { adminDb } from \"../../../../context/FirebaseAdmin\"; // === BUILD A MAP ONLY OF THOSE FIELDS THE USER ACTUALLY PICKED ===\n\nfunction buildLocalLocObject(loc) {\n  var _loc$section, _loc$section2;\n\n  const o = {};\n  if (loc.region) o.region = loc.region;\n  if ((_loc$section = loc.section) !== null && _loc$section !== void 0 && _loc$section.letter && (_loc$section2 = loc.section) !== null && _loc$section2 !== void 0 && _loc$section2.number) o.section = loc.section; // pick up the new singular fields, too:\n\n  if (loc.bin !== undefined && loc.bin !== \"\") o.bin = loc.bin;\n  if (loc.pallet !== undefined && loc.pallet !== \"\") o.pallet = loc.pallet;\n  return o;\n} // This will only load the component on the client-side.\n\n\nconst BarcodeScannerComponent = dynamic(() => import(\"react-qr-barcode-scanner\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-qr-barcode-scanner\")],\n    modules: [\"NewSearch\\\\item\\\\[id]\\\\index.js -> \" + \"react-qr-barcode-scanner\"]\n  }\n}); // Simulates a network request delay.\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n} // Custom LoadingButton component.\n\n\nfunction LoadingButton({\n  type,\n  name,\n  route\n}) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return __jsx(Link, {\n    href: `/${route}`\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null\n  }, isLoading ? \"Loading…\" : name));\n}\n\nexport default function DisplayItem({\n  initialItem,\n  initialMachineData,\n  error\n}) {\n  var _initialItem$price, _initialItem$status, _initialItem$length, _initialItem$width, _initialItem$height, _initialItem$poNumber, _initialItem$tracking, _initialItem$visible, _descriptions$selecte3, _descriptions$selecte4, _newLocalFrom$section, _newLocalFrom$section2, _newLocalCurrent$sect, _newLocalCurrent$sect2;\n\n  // Feature flag to show/hide the 3 Slack buttons\n  const SHOW_SLACK_BUTTONS = process.env.NEXT_PUBLIC_SHOW_SLACK_BUTTONS === \"true\";\n  const router = useRouter();\n  const {\n    signOut\n  } = useAuth(); // const { id } = router.query;\n\n  const {\n    id: idFromRouter\n  } = router.query;\n  const initialId = (initialItem === null || initialItem === void 0 ? void 0 : initialItem.id) || idFromRouter; // Use a single local var everywhere in this component\n\n  const id = initialId;\n  const {\n    0: items,\n    1: setItems\n  } = useState({\n    name: (initialItem === null || initialItem === void 0 ? void 0 : initialItem.name) || \"\",\n    pn: Array.isArray(initialItem === null || initialItem === void 0 ? void 0 : initialItem.pn) ? initialItem.pn : initialItem !== null && initialItem !== void 0 && initialItem.pn ? [initialItem.pn] : [],\n    sn: Array.isArray(initialItem === null || initialItem === void 0 ? void 0 : initialItem.sn) ? initialItem.sn : initialItem !== null && initialItem !== void 0 && initialItem.sn ? [initialItem.sn] : [],\n    // hydrate these from initialItem so SSR renders fully on deploy\n    price: (_initialItem$price = initialItem === null || initialItem === void 0 ? void 0 : initialItem.price) !== null && _initialItem$price !== void 0 ? _initialItem$price : \"\",\n    status: (_initialItem$status = initialItem === null || initialItem === void 0 ? void 0 : initialItem.status) !== null && _initialItem$status !== void 0 ? _initialItem$status : \"\",\n    length: (_initialItem$length = initialItem === null || initialItem === void 0 ? void 0 : initialItem.length) !== null && _initialItem$length !== void 0 ? _initialItem$length : \"\",\n    width: (_initialItem$width = initialItem === null || initialItem === void 0 ? void 0 : initialItem.width) !== null && _initialItem$width !== void 0 ? _initialItem$width : \"\",\n    height: (_initialItem$height = initialItem === null || initialItem === void 0 ? void 0 : initialItem.height) !== null && _initialItem$height !== void 0 ? _initialItem$height : \"\",\n    poNumber: (_initialItem$poNumber = initialItem === null || initialItem === void 0 ? void 0 : initialItem.poNumber) !== null && _initialItem$poNumber !== void 0 ? _initialItem$poNumber : \"\",\n    trackingNumber: (_initialItem$tracking = initialItem === null || initialItem === void 0 ? void 0 : initialItem.trackingNumber) !== null && _initialItem$tracking !== void 0 ? _initialItem$tracking : \"\",\n    localSN: (initialItem === null || initialItem === void 0 ? void 0 : initialItem.localSN) || \"\",\n    arrival_date: (initialItem === null || initialItem === void 0 ? void 0 : initialItem.arrival_date) || \"\",\n    visible: (_initialItem$visible = initialItem === null || initialItem === void 0 ? void 0 : initialItem.visible) !== null && _initialItem$visible !== void 0 ? _initialItem$visible : true\n  }); // ⬇️ put this INSIDE DisplayItem, after the related useState hooks\n\n  useEffect(() => {\n    if (!initialItem) return;\n    setDescriptions(initialItem.descriptions || []);\n    setWorkOrders(initialItem.workOrders || []);\n    setDOM(initialItem.DOM || \"\");\n    setItems(prev => {\n      var _ref, _initialItem$status2, _ref2, _initialItem$price2, _ref3, _initialItem$length2, _ref4, _initialItem$width2, _ref5, _initialItem$height2, _ref6, _initialItem$poNumber2, _ref7, _initialItem$tracking2;\n\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        // only overwrite if SSR provided a value; otherwise keep what you have\n        status: (_ref = (_initialItem$status2 = initialItem.status) !== null && _initialItem$status2 !== void 0 ? _initialItem$status2 : prev.status) !== null && _ref !== void 0 ? _ref : \"\",\n        price: (_ref2 = (_initialItem$price2 = initialItem.price) !== null && _initialItem$price2 !== void 0 ? _initialItem$price2 : prev.price) !== null && _ref2 !== void 0 ? _ref2 : \"\",\n        length: (_ref3 = (_initialItem$length2 = initialItem.length) !== null && _initialItem$length2 !== void 0 ? _initialItem$length2 : prev.length) !== null && _ref3 !== void 0 ? _ref3 : \"\",\n        width: (_ref4 = (_initialItem$width2 = initialItem.width) !== null && _initialItem$width2 !== void 0 ? _initialItem$width2 : prev.width) !== null && _ref4 !== void 0 ? _ref4 : \"\",\n        height: (_ref5 = (_initialItem$height2 = initialItem.height) !== null && _initialItem$height2 !== void 0 ? _initialItem$height2 : prev.height) !== null && _ref5 !== void 0 ? _ref5 : \"\",\n        poNumber: (_ref6 = (_initialItem$poNumber2 = initialItem.poNumber) !== null && _initialItem$poNumber2 !== void 0 ? _initialItem$poNumber2 : prev.poNumber) !== null && _ref6 !== void 0 ? _ref6 : \"\",\n        trackingNumber: (_ref7 = (_initialItem$tracking2 = initialItem.trackingNumber) !== null && _initialItem$tracking2 !== void 0 ? _initialItem$tracking2 : prev.trackingNumber) !== null && _ref7 !== void 0 ? _ref7 : \"\"\n      });\n    });\n  }, [initialItem]);\n  const {\n    0: newLocalFrom,\n    1: setNewLocalFrom\n  } = useState({\n    region: \"\",\n    section: {\n      letter: \"\",\n      number: \"\"\n    },\n    bin: \"\",\n    pallet: \"\"\n  });\n  const {\n    0: newLocalCurrent,\n    1: setNewLocalCurrent\n  } = useState({\n    region: \"\",\n    section: {\n      letter: \"\",\n      number: \"\"\n    },\n    bin: \"\",\n    pallet: \"\"\n  }); // New states for separate client selections:\n\n  const {\n    0: selectedClientFrom,\n    1: setSelectedClientFrom\n  } = useState(null);\n  const {\n    0: selectedClientCurrent,\n    1: setSelectedClientCurrent\n  } = useState(null);\n  const {\n    0: selectedMachine,\n    1: setSelectedMachine\n  } = useState(null);\n  const {\n    0: selectedCurrentMachine,\n    1: setSelectedCurrentMachine\n  } = useState(null); // whenever you pick a new “From” client or machine, clear the old From-loc:\n  // useEffect(() => {\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientFrom, selectedMachine]);\n  // const didMountFrom = useRef(false);\n  // useEffect(() => {\n  //   if (!didMountFrom.current) {\n  //     // first time through (the data-load phase), don’t clear\n  //     didMountFrom.current = true;\n  //     return;\n  //   }\n  //   // thereafter, when the user picks a new client or machine, clear:\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  //   setLocalLocFrom(\"\");\n  // }, [selectedClientFrom, selectedMachine]);\n  // whenever you pick a new “Current” client or machine, clear the old Current-loc:\n  // useEffect(() => {\n  //   setNewLocalCurrent({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientCurrent, selectedCurrentMachine]);\n  // const [didFetch, setDidFetch] = useState(false);\n  // useEffect(() => {\n  //   if (!didFetch) {\n  //     // we’re in the data-load phase, skip clearing\n  //     setDidFetch(true);\n  //     return;\n  //   }\n  //   // only clear on subsequent user changes:\n  //   setNewLocalCurrent({ region: \"\", section: {}, bin: \"\", pallet: \"\" });\n  // }, [selectedClientCurrent, selectedCurrentMachine]);\n  // These arrays will be populated from Firebase.\n\n  const {\n    0: pnOptions,\n    1: setPnOptions\n  } = useState([]);\n  const {\n    0: snOptions,\n    1: setSnOptions\n  } = useState([]);\n  const {\n    0: descriptions,\n    1: setDescriptions\n  } = useState([{\n    description: \"\",\n    date: \"\"\n  }]);\n  const {\n    0: workOrders,\n    1: setWorkOrders\n  } = useState([{\n    workOrder: \"\",\n    date: \"\"\n  }]);\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: photos,\n    1: setPhotos\n  } = useState([]);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: showErr,\n    1: setShowErr\n  } = useState(false);\n  const {\n    0: Err,\n    1: setErr\n  } = useState(\"N/A\");\n  const {\n    0: showDescModal,\n    1: setShowDescModal\n  } = useState(false);\n  const {\n    0: showWoModal,\n    1: setShowWoModal\n  } = useState(false);\n  const {\n    0: showClientModal,\n    1: setShowClientModal\n  } = useState(false);\n  const {\n    0: showMachineModal,\n    1: setShowMachineModal\n  } = useState(false);\n  const {\n    0: showParentModal,\n    1: setShowParentModal\n  } = useState(false);\n  const {\n    0: showCameraModal,\n    1: setShowCameraModal\n  } = useState(false);\n  const {\n    0: showSaveModal,\n    1: setShowSaveModal\n  } = useState(false);\n  const {\n    0: showPrintModal,\n    1: setShowPrintModal\n  } = useState(false);\n  const {\n    0: machineSelectionModal,\n    1: setMachineSelectionModal\n  } = useState(false);\n  const {\n    0: selectedDesc,\n    1: setSelectedDesc\n  } = useState(0);\n  const {\n    0: selectedClient,\n    1: setSelectedClient\n  } = useState(null);\n  const {\n    0: selectedParent,\n    1: setSelectedParent\n  } = useState(null);\n  const {\n    0: TheMachine,\n    1: setTheMachine\n  } = useState(null);\n  const {\n    0: machineOptions,\n    1: setMachineOptions\n  } = useState([]);\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: capturedPhoto,\n    1: setCapturedPhoto\n  } = useState(null);\n  const {\n    0: cameraFacing,\n    1: setCameraFacing\n  } = useState(\"environment\");\n  const {\n    0: addToWebsite,\n    1: setAddToWebsite\n  } = useState(false);\n  const {\n    0: machinePick,\n    1: setMachinePick\n  } = useState(false);\n  const {\n    0: freqItem,\n    1: setFreqItem\n  } = useState(0);\n  const {\n    0: usagePastYear,\n    1: setUsagePastYear\n  } = useState(0);\n  const {\n    0: machineFrequency,\n    1: setMachineFrequency\n  } = useState(0); // State for the extra (dimensions/price/DOM/PO Number) section.\n\n  const {\n    0: showExtra,\n    1: setShowExtra\n  } = useState(false); // State for the local warehouse location inputs.\n\n  const {\n    0: localLocFrom,\n    1: setLocalLocFrom\n  } = useState(\"\");\n  const {\n    0: localLocCurrent,\n    1: setLocalLocCurrent\n  } = useState(\"\"); // New state for DOM (Date of Manufacture)\n\n  const {\n    0: DOM,\n    1: setDOM\n  } = useState(\"\"); // New state for OEM, Modality, and Model.\n\n  const {\n    0: oem,\n    1: setOem\n  } = useState(\"\");\n  const {\n    0: modality,\n    1: setModality\n  } = useState(\"\");\n  const {\n    0: model,\n    1: setModel\n  } = useState(\"\"); // More info modal state.\n\n  const {\n    0: showInfoModal,\n    1: setShowInfoModal\n  } = useState(false);\n  const {\n    0: itemName,\n    1: setItemName\n  } = useState(\"\");\n  const {\n    0: machineFieldsInitialized,\n    1: setMachineFieldsInitialized\n  } = useState(false); // near the top of DisplayItem()\n\n  const {\n    0: showLocalModalFrom,\n    1: setShowLocalModalFrom\n  } = useState(false);\n  const {\n    0: showLocalModalCurrent,\n    1: setShowLocalModalCurrent\n  } = useState(false);\n\n  const openLocalModalFrom = () => setShowLocalModalFrom(true);\n\n  const closeLocalModalFrom = () => setShowLocalModalFrom(false);\n\n  const openLocalModalCurrent = () => setShowLocalModalCurrent(true);\n\n  const closeLocalModalCurrent = () => setShowLocalModalCurrent(false); // at the top of DisplayItem()\n\n\n  const {\n    0: showNewLocalModalFrom,\n    1: setShowNewLocalModalFrom\n  } = useState(false);\n  const {\n    0: showNewLocalModalCurrent,\n    1: setShowNewLocalModalCurrent\n  } = useState(false);\n\n  function formatLoc(loc) {\n    var _loc$section3, _loc$section4;\n\n    if (!loc) return \"\";\n    const parts = [];\n    if (loc.region) parts.push(loc.region);\n    if ((_loc$section3 = loc.section) !== null && _loc$section3 !== void 0 && _loc$section3.letter && (_loc$section4 = loc.section) !== null && _loc$section4 !== void 0 && _loc$section4.number) parts.push(`${loc.section.letter}${loc.section.number}`);\n    if (loc.bin) parts.push(`B${loc.bin}`);\n    if (loc.pallet) parts.push(`P${loc.pallet}`);\n    return parts.join(\"–\");\n  } // when the From-client changes, clear any old local-loc\n  // useEffect(() => {\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientFrom]);\n  // // when the From-machine changes, clear any old local-loc\n  // useEffect(() => {\n  //   setNewLocalFrom({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedMachine]);\n  // same for Current:\n  // useEffect(() => {\n  //   setNewLocalCurrent({ region: \"\", section: { letter: \"\", number: \"\" }, bin: \"\", pallet: \"\" });\n  // }, [selectedClientCurrent, selectedCurrentMachine]);\n  // const handleSendToInflow = async () => {\n  //   try {\n  //     const name = items.name;\n  //     const description = descriptions[selectedDesc]?.description || \"\";\n  //     // gather every photo URL from Firebase Storage\n  //     const imageUrls = photos.map((p) => p.url);\n  //     await InflowAPI.upsertProduct({ name, description, imageUrls });\n  //     alert(\"Sent to inFlow successfully!\");\n  //   } catch (err) {\n  //     console.error(err);\n  //     alert(\"Error sending to inFlow: \" + err.message);\n  //   }\n  // };\n\n\n  const handleSendToInflow = async () => {\n    try {\n      var _descriptions$selecte;\n\n      const name = (items.name || '').trim();\n\n      if (!name) {\n        alert('Item needs a name before sending to inFlow.');\n        return;\n      } // Regular description (don’t also send a custom “Description” unless you truly have one)\n\n\n      const description = (((_descriptions$selecte = descriptions[selectedDesc]) === null || _descriptions$selecte === void 0 ? void 0 : _descriptions$selecte.description) || '').trim(); // Photos already fetched from storage\n\n      const imageUrls = photos.map(p => p.url).filter(Boolean); // SKU = your item id\n\n      const sku = (id !== null && id !== void 0 ? id : '').toString(); // Basic normalizers\n\n      const toCSV = arr => Array.isArray(arr) ? arr.filter(Boolean).join(', ') : arr || ''; // YYYY-MM-DD for the date field in inFlow\n\n\n      const arrivalISO = items.arrival_date ? new Date(items.arrival_date).toISOString().slice(0, 10) : '';\n      const pnStr = Array.isArray(items.pn) ? items.pn.filter(Boolean).join(', ') : items.pn || '';\n      const snStr = Array.isArray(items.sn) ? items.sn.filter(Boolean).join(', ') : items.sn || ''; // Most recent WO (you already have this)\n\n      const mostRecentWO = workOrders !== null && workOrders !== void 0 && workOrders.length ? workOrders.reduce((latest, cur) => new Date(cur.date) > new Date(latest.date) ? cur : latest, workOrders[0]) : {\n        workOrder: '',\n        date: ''\n      }; // Build the numbered fields (match your inFlow “Field 1..10”)\n\n      const customFields = {\n        custom1: (oem || '').trim(),\n        // OEM   (dropdown)\n        custom2: (modality || '').trim(),\n        // Modality (dropdown)\n        custom3: (model || '').trim(),\n        // Model (dropdown)\n        custom4: (description || '').trim(),\n        // Description (text) - optional duplicate\n        custom5: (mostRecentWO.workOrder || '').trim(),\n        // Work Order (text)\n        custom6: ((selectedClientFrom === null || selectedClientFrom === void 0 ? void 0 : selectedClientFrom.name) || '').trim(),\n        // From (text)\n        custom7: pnStr,\n        // Product Number (text)\n        custom8: snStr,\n        // Serial Number (text)\n        custom9: arrivalISO,\n        // Arrival Date (date)\n        custom10: ((selectedClientCurrent === null || selectedClientCurrent === void 0 ? void 0 : selectedClientCurrent.name) || '').trim() // Current (text)\n\n      };\n      console.log('[inFlow] customFields to send (numbered):', customFields);\n      const created = await InflowAPI.upsertProduct({\n        name,\n        description,\n        sku,\n        imageUrls,\n        customFields\n      });\n      alert(`Sent to inFlow successfully. ID: ${(created === null || created === void 0 ? void 0 : created.productId) || (created === null || created === void 0 ? void 0 : created.id) || '(unknown)'}`);\n    } catch (err) {\n      console.error(err);\n      alert('Error sending to inFlow: ' + err.message);\n    }\n  }; // const [storedMachine, setStoredMachine] = useState(null);\n  // useEffect(() => {\n  //   // once any of these three change, re-merge:\n  //   if (TheMachine || selectedCurrentMachine || selectedMachine) {\n  //     const merged = updateMachineFields(\n  //       TheMachine,\n  //       selectedCurrentMachine,\n  //       selectedMachine\n  //     );\n  //     setOem(merged.oem);\n  //     setModality(merged.modality);\n  //     setModel(merged.model);\n  //   }\n  // }, [TheMachine, selectedCurrentMachine, selectedMachine]);\n  // whenever the “From” client changes:\n\n\n  useEffect(() => {\n    var _selectedClientFrom$n;\n\n    setShowLocalLocFrom((selectedClientFrom === null || selectedClientFrom === void 0 ? void 0 : (_selectedClientFrom$n = selectedClientFrom.name) === null || _selectedClientFrom$n === void 0 ? void 0 : _selectedClientFrom$n.toLowerCase()) === \"socalwarehouse\");\n  }, [selectedClientFrom]); // whenever the “Current” client changes:\n\n  useEffect(() => {\n    var _selectedClientCurren;\n\n    setShowLocalLocCurrent((selectedClientCurrent === null || selectedClientCurrent === void 0 ? void 0 : (_selectedClientCurren = selectedClientCurrent.name) === null || _selectedClientCurren === void 0 ? void 0 : _selectedClientCurren.toLowerCase()) === \"socalwarehouse\");\n  }, [selectedClientCurrent]); // Fetch clients data.\n\n  useEffect(() => {\n    async function fetchClientsData() {\n      try {\n        const clientsData = await fetchClients();\n        console.log(clientsData);\n        setClients(clientsData);\n      } catch (error) {\n        console.error(\"Error fetching clients: \", error);\n      }\n    }\n\n    fetchClientsData();\n  }, []); // Fetch PN and SN options from Firebase.\n\n  useEffect(() => {\n    async function fetchPnSn() {\n      const db = firebase.firestore();\n      const snapshot = await db.collection(\"Test\").get();\n      let pnSet = new Set();\n      let snSet = new Set();\n      snapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.pn) pnSet.add(data.pn);\n        if (data.sn) snSet.add(data.sn);\n      });\n      const pnArray = [...pnSet];\n      const snArray = [...snSet];\n      setPnOptions(pnArray);\n      setSnOptions(snArray);\n    }\n\n    fetchPnSn();\n  }, []);\n  useEffect(() => {\n    if (id) fetchData(); // always hydrate on the client\n  }, [id]);\n\n  async function resolveClientFromMachine(machineRef, setClient, setMachine, isFrom = true) {\n    const machineDoc = await machineRef.get();\n\n    if (machineDoc.exists) {\n      var _machineData$name;\n\n      const machineData = machineDoc.data();\n      setMachine(_objectSpread({\n        id: machineDoc.id\n      }, machineData)); // Determine if the machine is \"interior socal\"\n      // const isSocalInterior = machineData.name && machineData.name.toLowerCase() === \"interior socal\";\n      // if (isSocalInterior) {\n      //   if (isFrom) {\n      //     setShowLocalLocFrom(true);\n      //   } else {\n      //     setShowLocalLocCurrent(true);\n      //   }\n      // } else {\n      // Optionally clear the flag if it is not \"interior socal\"\n      // if (isFrom) {\n      //   setShowLocalLocFrom(false);\n      // } else {\n      //   setShowLocalLocCurrent(false);\n      // }\n      // }\n      // new: fetch client name and combine both checks\n\n      const clientDoc = machineData.client && typeof machineData.client.get === \"function\" ? await machineData.client.get() : null;\n      const clientName = clientDoc && clientDoc.exists ? clientDoc.data().name : null;\n      const isSocalInterior = ((_machineData$name = machineData.name) === null || _machineData$name === void 0 ? void 0 : _machineData$name.toLowerCase()) === \"interior socal\";\n      const shouldShow = isSocalInterior || clientName === \"SoCalWarehouse\";\n\n      if (isFrom) {\n        setShowLocalLocFrom(shouldShow);\n      } else {\n        setShowLocalLocCurrent(shouldShow);\n      }\n\n      if (machineData.client && typeof machineData.client.get === \"function\") {\n        const clientDoc = await machineData.client.get();\n\n        if (clientDoc.exists) {\n          setClient(_objectSpread({\n            id: clientDoc.id\n          }, clientDoc.data()));\n        }\n      }\n    }\n  }\n\n  const fetchData = async () => {\n    const id = (initialItem === null || initialItem === void 0 ? void 0 : initialItem.id) || idFromRouter; // <- make sure id exists here\n\n    const db = firebase.firestore();\n    const doc = await db.collection(\"Test\").doc(id).get();\n\n    if (doc.exists) {\n      var _machineFromData, _machineFromData$name, _machineCurrentData, _machineCurrentData$n, _selectedClientFrom$n2, _selectedClientCurren2;\n\n      console.log(\"test\");\n      const data = doc.data();\n      const normalizedPN = Array.isArray(data.pn) ? data.pn : [data.pn];\n      const normalizedSN = Array.isArray(data.sn) ? data.sn : [data.sn];\n      setItems(_objectSpread(_objectSpread({}, data), {}, {\n        pn: normalizedPN,\n        sn: normalizedSN\n      }));\n      setDescriptions(data.descriptions || []);\n      setWorkOrders(data.workOrders || []);\n      if (data.localLocFrom) setLocalLocFrom(data.localLocFrom);\n      if (data.localLocCurrent) setLocalLocCurrent(data.localLocCurrent);\n\n      if (data.DOM) {\n        setDOM(data.DOM);\n      } // …after you do setItems, setDescriptions, etc.\n      // load the “newLocal” maps\n\n\n      if (data.newLocalFrom) setNewLocalFrom(data.newLocalFrom);\n      if (data.newLocalCurrent) setNewLocalCurrent(data.newLocalCurrent); // Load PO Number if it exists.\n\n      if (data.poNumber) {\n        setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          poNumber: data.poNumber\n        }));\n      }\n\n      if (data.ClientFrom) {\n        const clientFromDoc = await data.ClientFrom.get();\n\n        if (clientFromDoc.exists) {\n          setSelectedClientFrom(_objectSpread({\n            id: clientFromDoc.id\n          }, clientFromDoc.data()));\n        }\n      }\n\n      if (data.ClientCurrent) {\n        const clientCurrentDoc = await data.ClientCurrent.get();\n\n        if (clientCurrentDoc.exists) {\n          setSelectedClientCurrent(_objectSpread({\n            id: clientCurrentDoc.id\n          }, clientCurrentDoc.data()));\n        }\n      }\n\n      if (!data.ClientFrom && data.Machine && typeof data.Machine.get === \"function\") {\n        console.log(\"Entered resolveClientFromMachine for Machine (old style for From)\");\n        await resolveClientFromMachine(data.Machine, setSelectedClientFrom, setSelectedMachine, true);\n      }\n\n      if (!data.ClientCurrent && data.CurrentMachine && typeof data.CurrentMachine.get === \"function\") {\n        console.log(\"Entered resolveClientFromMachine for CurrentMachine (old style for Current)\");\n        await resolveClientFromMachine(data.CurrentMachine, setSelectedClientCurrent, setSelectedCurrentMachine, false);\n      }\n\n      let machineFromData = null;\n      let machineCurrentData = null;\n\n      if (data.MachineFrom) {\n        const doc = await data.MachineFrom.get();\n        machineFromData = doc.exists ? doc.data() : null;\n        setSelectedMachine(_objectSpread({\n          id: doc.id\n        }, doc.data()));\n      }\n\n      if (data.MachineCurrent) {\n        const doc = await data.MachineCurrent.get();\n        machineCurrentData = doc.exists ? doc.data() : null;\n        setSelectedCurrentMachine(_objectSpread({\n          id: doc.id\n        }, doc.data()));\n      }\n\n      const nameFrom = (_machineFromData = machineFromData) === null || _machineFromData === void 0 ? void 0 : (_machineFromData$name = _machineFromData.name) === null || _machineFromData$name === void 0 ? void 0 : _machineFromData$name.toLowerCase();\n      const nameCurrent = (_machineCurrentData = machineCurrentData) === null || _machineCurrentData === void 0 ? void 0 : (_machineCurrentData$n = _machineCurrentData.name) === null || _machineCurrentData$n === void 0 ? void 0 : _machineCurrentData$n.toLowerCase(); // If the machine’s name is “interior socal”, show that branch:\n      // setShowLocalLocFrom(nameFrom === \"interior socal\");\n      // // Or if your Firestore already has a value for localLocFrom, show it anyway:\n      // if (data.localLocFrom) setShowLocalLocFrom(true);\n      // setShowLocalLocCurrent(nameCurrent === \"interior socal\");\n      // if (data.localLocCurrent) setShowLocalLocCurrent(true);\n      // new: combine machine-name OR client-name check, keep existing-data\n\n      setShowLocalLocFrom(nameFrom === \"interior socal\" || (selectedClientFrom === null || selectedClientFrom === void 0 ? void 0 : (_selectedClientFrom$n2 = selectedClientFrom.name) === null || _selectedClientFrom$n2 === void 0 ? void 0 : _selectedClientFrom$n2.toLowerCase()) === \"socalwarehouse\" || Boolean(data.localLocFrom));\n      setShowLocalLocCurrent(nameCurrent === \"interior socal\" || (selectedClientCurrent === null || selectedClientCurrent === void 0 ? void 0 : (_selectedClientCurren2 = selectedClientCurrent.name) === null || _selectedClientCurren2 === void 0 ? void 0 : _selectedClientCurren2.toLowerCase()) === \"socalwarehouse\" || Boolean(data.localLocCurrent));\n      const theMachineData = data.TheMachine || null;\n      setTheMachine(theMachineData);\n\n      if (theMachineData) {\n        var _theMachineData$oem, _theMachineData$modal, _theMachineData$model;\n\n        // pull both variants, prefer lowercase if it exists\n        const OEM = (_theMachineData$oem = theMachineData.oem) !== null && _theMachineData$oem !== void 0 ? _theMachineData$oem : theMachineData.OEM;\n        const Modality = (_theMachineData$modal = theMachineData.modality) !== null && _theMachineData$modal !== void 0 ? _theMachineData$modal : theMachineData.Modality;\n        const Model = (_theMachineData$model = theMachineData.model) !== null && _theMachineData$model !== void 0 ? _theMachineData$model : theMachineData.Model;\n        setTheMachine(_objectSpread(_objectSpread({}, theMachineData), {}, {\n          OEM,\n          Modality,\n          Model\n        }));\n      } // setStoredMachine(theMachineData);\n      // **right here** merge from the three sources you just fetched:\n\n\n      const merged = updateMachineFields(theMachineData, machineCurrentData, machineFromData);\n      setOem(merged.oem);\n      setModality(merged.modality);\n      setModel(merged.model);\n      console.log(\"SelectedMachine:\", selectedMachine, \"SelectedCurrentMachine:\", selectedCurrentMachine); // Show local loc inputs if applicable\n      // if (\n      //   selectedMachine &&\n      //   selectedMachine.name &&\n      //   selectedMachine.name.toLowerCase() === \"interior socal\"\n      // ) {\n      //   setShowLocalLocFrom(true);\n      // }\n      // if (\n      //   selectedCurrentMachine &&\n      //   selectedCurrentMachine.name &&\n      //   selectedCurrentMachine.name.toLowerCase() === \"interior socal\"\n      // ) {\n      //   setShowLocalLocCurrent(true);\n      // }\n\n      if (data.Parent) {\n        const parentDoc = await data.Parent.get();\n        setSelectedParent(_objectSpread({\n          id: parentDoc.id\n        }, parentDoc.data()));\n      } // Priority auto‑population of machine fields.\n      // const updatedFields = updateMachineFields(storedMachine, selectedCurrentMachine, selectedMachine);\n      // // console.log(\"Updated machine fields:\", updatedFields);\n      // setOem(updatedFields.oem);\n      // setModality(updatedFields.modality);\n      // setModel(updatedFields.model);\n\n\n      await fetchPhotos(id);\n      await checkIfAddedToWebsite(id);\n      await calculateItemFrequencyAndUsage(data.pn);\n    } else {\n      router.push({\n        pathname: \"../AddItem/NewItem\",\n        query: {\n          signal: id\n        }\n      });\n    }\n  }; // Returns the value for a given field from the highest-priority source.\n\n\n  function getPriorityMachineField(field, theMachine, currentMachine, fromMachine) {\n    console.log(\"the machine: \", theMachine, \"field: \", field);\n\n    if (theMachine && theMachine[field] && theMachine[field] !== \"N/A\" && theMachine[field].trim() !== \"\") {\n      return theMachine[field];\n    }\n\n    if (currentMachine && currentMachine[field] && currentMachine[field] !== \"N/A\" && currentMachine[field].trim() !== \"\") {\n      return currentMachine[field];\n    }\n\n    if (fromMachine && fromMachine[field] && fromMachine[field] !== \"N/A\" && fromMachine[field].trim() !== \"\") {\n      return fromMachine[field];\n    }\n\n    return \"\";\n  } // Returns an object with updated OEM, modality, and model fields.\n\n\n  function updateMachineFields(theMachine, currentMachine, fromMachine) {\n    return {\n      oem: getPriorityMachineField(\"OEM\", theMachine, currentMachine, fromMachine),\n      modality: getPriorityMachineField(\"Modality\", theMachine, currentMachine, fromMachine),\n      model: getPriorityMachineField(\"Model\", theMachine, currentMachine, fromMachine)\n    };\n  }\n\n  const calculateItemFrequencyAndUsage = async pn => {\n    const db = firebase.firestore();\n    const currentDate = new Date();\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(currentDate.getFullYear() - 1);\n    const normalizedPN = pn !== undefined ? pn : \"\";\n    const itemsSnapshot = await db.collection(\"Test\").where(\"pn\", \"==\", normalizedPN).get();\n    setFreqItem(itemsSnapshot.size);\n    let usagePastYear = 0;\n    itemsSnapshot.forEach(doc => {\n      const itemData = doc.data();\n      itemData.workOrders.forEach(workOrder => {\n        const workOrderDate = new Date(workOrder.date);\n\n        if (workOrderDate >= oneYearAgo && workOrderDate <= currentDate) {\n          usagePastYear++;\n        }\n      });\n    });\n    setUsagePastYear(usagePastYear);\n  };\n\n  const fetchMachine = async machineId => {\n    const db = firebase.firestore();\n    const doc = await db.collection(\"Machine\").doc(machineId).get();\n\n    if (doc.exists) {\n      const machineData = doc.data();\n      setTheMachine(machineData); // re-merge all three sources with correct priority:\n\n      const merged = updateMachineFields(machineData, selectedCurrentMachine, selectedMachine);\n      setOem(merged.oem);\n      setModality(merged.modality);\n      setModel(merged.model);\n      const machinesSnapshot = await db.collection(\"Machine\").where(\"Model\", \"==\", machineData.Model || machineData.model).get();\n      setMachineFrequency(machinesSnapshot.size);\n    } else {\n      console.error(\"Machine not found\");\n    }\n  };\n\n  const fetchPhotos = async docID => {\n    const storageRef = firebase.storage().ref();\n    const listRef = storageRef.child(`Parts/${docID}`);\n\n    try {\n      const res = await listRef.listAll();\n      const urls = await Promise.all(res.items.map(item => item.getDownloadURL()));\n      console.log(\"Fetched photo URLs:\", urls);\n      setPhotos(urls.map(url => ({\n        url,\n        file: null\n      })));\n    } catch (error) {\n      console.error(\"Error fetching photos: \", error);\n    }\n  };\n\n  const checkIfAddedToWebsite = async docID => {\n    const db = firebase.firestore();\n    const partsDoc = await db.collection(\"Parts\").doc(docID).get();\n\n    if (partsDoc.exists) {\n      setAddToWebsite(true);\n    }\n  };\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const handleCloseErr = () => setShowErr(false);\n\n  const handleShowErr = () => setShowErr(true);\n\n  const handleCloseSaveModal = () => setShowSaveModal(false);\n\n  const handleClosePrintModal = () => setShowPrintModal(false);\n\n  const handleShowSaveModal = () => setShowSaveModal(true);\n\n  const handleShowPrintModal = () => setShowPrintModal(true);\n\n  const handleMachineSelectionModal = () => setMachineSelectionModal(false);\n\n  const handleCloseDescModal = () => setShowDescModal(false);\n\n  const handleShowDescModal = () => setShowDescModal(true);\n\n  const handleCloseWoModal = () => setShowWoModal(false);\n\n  const handleShowWoModal = () => setShowWoModal(true);\n\n  const handleCloseClientModal = () => setShowClientModal(false);\n\n  const handleShowClientModal = () => setShowClientModal(true);\n\n  const handleCloseMachineModal = () => setShowMachineModal(false);\n\n  const handleShowMachineModal = () => {\n    setShowMachineModal(true);\n    setShowClientModal(false);\n  };\n\n  const handleCloseParentModal = () => setShowParentModal(false);\n\n  const handleShowParentModal = () => setShowParentModal(true); // When a client is selected from the client table.\n\n\n  const handleClientInfo = async clientId => {\n    // Clear any previously selected machine and local loc info for this branch.\n    if (machinePick) {\n      setSelectedMachine(null);\n      setShowLocalLocFrom(false);\n    } else {\n      setSelectedCurrentMachine(null);\n      setShowLocalLocCurrent(false);\n    }\n\n    const db = firebase.firestore();\n    const clientDoc = await db.collection(\"Client\").doc(clientId).get();\n\n    if (clientDoc.exists) {\n      const clientData = _objectSpread({\n        id: clientDoc.id\n      }, clientDoc.data());\n\n      if (machinePick) {\n        setSelectedClientFrom(clientData);\n      } else {\n        setSelectedClientCurrent(clientData);\n      } // after setting selectedClientFrom/Current:\n\n\n      if (clientData.name === \"SoCalWarehouse\") {\n        if (machinePick) setShowLocalLocFrom(true);else setShowLocalLocCurrent(true);\n      } // Fetch machines for this client:\n\n\n      const machinePromises = clientData.machines.map(machineRef => machineRef.get());\n      const machineDocs = await Promise.all(machinePromises);\n      const machines = machineDocs.map(machineDoc => _objectSpread({\n        id: machineDoc.id\n      }, machineDoc.data()));\n      setMachineOptions(machines); // Close the client modal\n\n      handleCloseClientModal();\n    }\n  }; // Reordering function for dropdowns.\n\n\n  const reorderArray = (arr, selectedValue) => {\n    const newArr = arr.filter(val => val !== selectedValue);\n    return [selectedValue, ...newArr];\n  };\n\n  const {\n    0: addingNewPn,\n    1: setAddingNewPn\n  } = useState(false);\n  const {\n    0: newPn,\n    1: setNewPn\n  } = useState(\"\");\n  const {\n    0: addingNewSn,\n    1: setAddingNewSn\n  } = useState(false);\n  const {\n    0: newSn,\n    1: setNewSn\n  } = useState(\"\");\n\n  const handlePnSelect = e => {\n    const selected = e.target.value;\n    setItems(prev => {\n      let updatedPn = Array.isArray(prev.pn) ? [...prev.pn] : [];\n      updatedPn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: updatedPn\n      });\n    });\n  };\n\n  const handleSnSelect = e => {\n    const selected = e.target.value;\n    setItems(prev => {\n      let updatedSn = Array.isArray(prev.sn) ? [...prev.sn] : [];\n      updatedSn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: updatedSn\n      });\n    });\n  };\n\n  const handleAddNewPn = () => {\n    if (newPn.trim() !== \"\") {\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        pn: [...prev.pn, newPn.trim()]\n      }));\n    }\n\n    setNewPn(\"\");\n    setAddingNewPn(false);\n  };\n\n  const handleAddNewSn = () => {\n    if (newSn.trim() !== \"\") {\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        sn: [...prev.sn, newSn.trim()]\n      }));\n    }\n\n    setNewSn(\"\");\n    setAddingNewSn(false);\n  }; // Generate custom document ID if needed.\n\n\n  const generateCustomID = () => {\n    const randomNum = Math.floor(10000 + Math.random() * 90000);\n    return `AIS${randomNum}`;\n  };\n\n  function shallowClean(obj) {\n    const newObj = {};\n\n    for (const key in obj) {\n      console.log(key, obj[key]);\n\n      if (obj.hasOwnProperty(key)) {\n        newObj[key] = obj[key] === undefined ? \"\" : obj[key];\n      }\n    }\n\n    return newObj;\n  }\n\n  async function toSend() {\n    var _fromDetails$section, _fromDetails$section2, _currentDetails$secti, _currentDetails$secti2;\n\n    const db = firebase.firestore();\n    const currentUser = firebase.auth().currentUser;\n    const userEmail = currentUser ? currentUser.email : \"unknown\"; // Always use the current state values for OEM, modality, and model.\n\n    const machineData = _objectSpread(_objectSpread({}, TheMachine || {}), {}, {\n      oem: oem,\n      modality: modality,\n      model: model\n    });\n\n    const formattedItems = _objectSpread(_objectSpread({}, items), {}, {\n      descriptions,\n      workOrders\n    }); // Remove any unused fields.\n\n\n    formattedItems.status = items.status || \"\";\n    formattedItems.DOM = DOM; // Date of Manufacture\n\n    formattedItems.localLocFrom = localLocFrom || \"\";\n    formattedItems.localLocCurrent = localLocCurrent || \"\";\n    formattedItems.date = items.date || \"\";\n    formattedItems.arrival_date = items.arrival_date || \"\"; // NEW: Arrival Date\n\n    formattedItems.poNumber = items.poNumber || \"\";\n    formattedItems.trackingNumber = items.trackingNumber || \"\";\n    formattedItems.TheMachine = machineData || {};\n    formattedItems.addedToWebsite = addToWebsite; // NEW: Add the user's email under the field \"user\"\n\n    formattedItems.lastEdited = userEmail; // Clean pn and sn arrays to replace undefined values with an empty string.\n\n    formattedItems.pn = (items.pn || []).map(value => value === undefined ? \"\" : value);\n    formattedItems.sn = (items.sn || []).map(value => value === undefined ? \"\" : value);\n    const fromDetails = buildLocalLocObject(newLocalFrom);\n    const currentDetails = buildLocalLocObject(newLocalCurrent);\n    console.log(\"From Details: \" + fromDetails.region + \" \" + ((_fromDetails$section = fromDetails.section) === null || _fromDetails$section === void 0 ? void 0 : _fromDetails$section.letter) + ((_fromDetails$section2 = fromDetails.section) === null || _fromDetails$section2 === void 0 ? void 0 : _fromDetails$section2.number) + \" \" + fromDetails.bin + \" \" + fromDetails.pallet);\n    console.log(\"Current Details: \" + currentDetails.region + \" \" + ((_currentDetails$secti = currentDetails.section) === null || _currentDetails$secti === void 0 ? void 0 : _currentDetails$secti.letter) + ((_currentDetails$secti2 = currentDetails.section) === null || _currentDetails$secti2 === void 0 ? void 0 : _currentDetails$secti2.number) + \" \" + currentDetails.bin + \" \" + currentDetails.pallet);\n\n    if (Object.keys(fromDetails).length) {\n      formattedItems.newLocalFrom = fromDetails;\n      formattedItems.localLocFrom = formatLoc(newLocalFrom) || \"\";\n    } else {\n      // all fields empty — force an empty string and remove any stray map\n      console.log(\"entered empty fromDetails else\");\n      formattedItems.localLocFrom = \"\";\n      formattedItems.newLocalFrom = {};\n    }\n\n    if (Object.keys(currentDetails).length) {\n      formattedItems.newLocalCurrent = currentDetails;\n      formattedItems.localLocCurrent = formatLoc(newLocalCurrent) || \"\";\n    } else {\n      // all fields empty — force an empty string and remove any stray map\n      formattedItems.localLocCurrent = \"\";\n      formattedItems.newLocalCurrent = {};\n    }\n\n    if (selectedMachine && selectedMachine.id) {\n      formattedItems.MachineFrom = db.collection(\"Machine\").doc(selectedMachine.id);\n    }\n\n    if (selectedCurrentMachine && selectedCurrentMachine.id) {\n      formattedItems.MachineCurrent = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n    }\n\n    if (selectedParent && selectedParent.id) {\n      formattedItems.Parent = db.collection(\"Test\").doc(selectedParent.id);\n    } // NEW: Set separate client references.\n\n\n    if (selectedClientFrom && selectedClientFrom.id) {\n      formattedItems.ClientFrom = db.collection(\"Client\").doc(selectedClientFrom.id);\n    }\n\n    if (selectedClientCurrent && selectedClientCurrent.id) {\n      formattedItems.ClientCurrent = db.collection(\"Client\").doc(selectedClientCurrent.id);\n    } // Only attach the richer “newLocal” map when the user actually filled something in\n\n\n    if (Object.keys(fromDetails).length) {\n      formattedItems.newLocalFrom = fromDetails;\n    }\n\n    if (Object.keys(currentDetails).length) {\n      formattedItems.newLocalCurrent = currentDetails;\n    }\n\n    let docId = id;\n\n    try {\n      if (docId) {\n        // Check if a localSN is provided and if it differs from the current docId.\n        const newDocId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : docId;\n\n        if (docId !== newDocId) {\n          // Migrate: Create a new document with the newDocId.\n          await db.collection(\"Test\").doc(newDocId).set(formattedItems);\n\n          if (selectedMachine && selectedMachine.id) {\n            const machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n            const machineDoc = await machineRef.get();\n\n            if (machineDoc.exists) {\n              await machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n            }\n          }\n\n          if (selectedCurrentMachine && selectedCurrentMachine.id) {\n            const currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n            const currentMachineDoc = await currentMachineRef.get();\n\n            if (currentMachineDoc.exists) {\n              await currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n            }\n          } // Delete the old document.\n\n\n          await db.collection(\"Test\").doc(docId).delete(); // Set docId to the new document ID.\n\n          docId = newDocId;\n        } else {\n          // Deep-clean the formattedItems to remove any undefined nested values.\n          const cleanFormattedItems = shallowClean(formattedItems);\n          await db.collection(\"Test\").doc(docId).update(cleanFormattedItems);\n\n          if (selectedMachine && selectedMachine.id) {\n            const machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n            const machineDoc = await machineRef.get();\n\n            if (machineDoc.exists) {\n              await machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n            }\n          }\n\n          if (selectedCurrentMachine && selectedCurrentMachine.id) {\n            const currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n            const currentMachineDoc = await currentMachineRef.get();\n\n            if (currentMachineDoc.exists) {\n              await currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n            }\n          }\n        }\n      } else {\n        // For a new item, if localSN is provided, use it; otherwise, generate a custom ID.\n        docId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : generateCustomID();\n        await db.collection(\"Test\").doc(docId).set(formattedItems);\n\n        if (selectedMachine && selectedMachine.id) {\n          const machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n          const machineDoc = await machineRef.get();\n\n          if (machineDoc.exists) {\n            await machineRef.update({\n              associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n            });\n          }\n        }\n\n        if (selectedCurrentMachine && selectedCurrentMachine.id) {\n          const currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n          const currentMachineDoc = await currentMachineRef.get();\n\n          if (currentMachineDoc.exists) {\n            await currentMachineRef.update({\n              associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n            });\n          }\n        }\n      } // Upload any new photos to Firebase Storage.\n\n\n      await uploadPhotos(docId);\n      console.log(\"Item saved and associatedParts updated!\"); // Redirect to the new URL using the new document id.\n\n      router.push(`/NewSearch/item/${docId}`); // Optionally, you can also show a save confirmation modal:\n\n      handleShowSaveModal();\n    } catch (error) {\n      console.error(\"Error saving data:\", error);\n    }\n  } // Additional state for local warehouse location inputs.\n\n\n  const {\n    0: showLocalLocFrom,\n    1: setShowLocalLocFrom\n  } = useState(false);\n  const {\n    0: showLocalLocCurrent,\n    1: setShowLocalLocCurrent\n  } = useState(false); // When a machine is selected from the modal.\n\n  const handleSetSelectedMachine = machine => {\n    var _machine$name;\n\n    // const condition = (name) => name && name.toLowerCase() === \"interior socal\";\n    const isSocalInterior = ((_machine$name = machine.name) === null || _machine$name === void 0 ? void 0 : _machine$name.toLowerCase()) === \"interior socal\";\n\n    if (machinePick) {\n      var _selectedClientFrom$n3;\n\n      setSelectedMachine({\n        id: machine.id,\n        name: machine.name\n      });\n      setShowLocalLocFrom(isSocalInterior || (selectedClientFrom === null || selectedClientFrom === void 0 ? void 0 : (_selectedClientFrom$n3 = selectedClientFrom.name) === null || _selectedClientFrom$n3 === void 0 ? void 0 : _selectedClientFrom$n3.toLowerCase()) === \"socalwarehouse\");\n    } else {\n      var _selectedClientCurren3;\n\n      setSelectedCurrentMachine({\n        id: machine.id,\n        name: machine.name\n      });\n      setShowLocalLocCurrent(isSocalInterior || (selectedClientCurrent === null || selectedClientCurrent === void 0 ? void 0 : (_selectedClientCurren3 = selectedClientCurrent.name) === null || _selectedClientCurren3 === void 0 ? void 0 : _selectedClientCurren3.toLowerCase()) === \"socalwarehouse\");\n    }\n\n    fetchMachine(machine.id); // Close the machine modal (assuming you're using showMachineModal to control it)\n\n    setShowMachineModal(false);\n  };\n\n  const uploadPhotos = async docID => {\n    const storageRef = firebase.storage().ref();\n\n    for (let i = 0; i < photos.length; i++) {\n      if (photos[i].file) {\n        const photoRef = storageRef.child(`Parts/${docID}/${docID}${i === 0 ? \".jpg\" : `.${i + 1}.jpg`}`);\n        const metadata = {\n          contentType: \"image/png\"\n        };\n        await photoRef.put(photos[i].file, metadata);\n        const url = await photoRef.getDownloadURL();\n        photos[i].url = url;\n      }\n    }\n  }; // Function to handle printing the label.\n\n\n  const handlePrint = async () => {\n    if (!items.name) {\n      alert(\"Missing name\");\n      return;\n    }\n\n    let clientName = \"\"; // Attempt to fetch client name from the Machine document reference.\n\n    if (items.Machine && typeof items.Machine.get === \"function\") {\n      try {\n        const machineDoc = await items.Machine.get();\n\n        if (machineDoc.exists) {\n          const machineData = machineDoc.data();\n\n          if (machineData.client && typeof machineData.client.get === \"function\") {\n            const clientDoc = await machineData.client.get();\n\n            if (clientDoc.exists) {\n              clientName = clientDoc.data().name || \"\";\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching machine or client:\", error);\n      }\n    } else {\n      console.warn(\"No Machine reference available in the item\");\n    }\n\n    console.log(clientName, \":\", items.client); // Fallback: if no client name was found, check items.client.\n\n    if (!clientName && items.client) {\n      if (typeof items.client.get === \"function\") {\n        try {\n          const clientDoc = await items.client.get();\n\n          if (clientDoc.exists) {\n            clientName = clientDoc.data().name || \"\";\n          }\n        } catch (error) {\n          console.error(\"Error fetching client from items.client:\", error);\n        }\n      } else {\n        clientName = items.client;\n      }\n    }\n\n    console.log(\"descriptions:\", descriptions[selectedDesc]);\n    const payload = {\n      name: items.name,\n      pn: items.pn,\n      sn: items.sn,\n      wo: workOrders && workOrders.length > 0 ? workOrders[0].workOrder : \"\",\n      client: clientName,\n      status: items.status,\n      local_sn: id,\n      descriptions: [descriptions[selectedDesc] || {\n        description: \"\",\n        date: \"\"\n      }],\n      date: items.dateCreated || \"\",\n      DOM: DOM,\n      oem: oem,\n      modality: modality,\n      model: model,\n      poNumber: items.poNumber,\n      arrival_date: items.arrival_date // NEW: Include arrival_date\n\n    };\n    console.log(\"Payload for printing:\", payload);\n\n    try {\n      const response = await fetch(\"https://9d70-174-76-22-138.ngrok-free.app/print-label\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      console.log(\"Print result:\", result.status);\n\n      if (result.status.includes(\"successfully.\")) {\n        handleShowPrintModal();\n      } else {\n        console.error(\"Error printing label:\", result.error);\n      }\n    } catch (error) {\n      console.error(\"Error printing label:\", error);\n    }\n  };\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // Only check that the Name field is filled out.\n\n    if (!items.name) {\n      handleShow(); // This shows the \"missing field\" modal.\n    } else {\n      toSend();\n    }\n  } // Handlers for input changes.\n\n\n  const handleChange = field => event => {\n    const value = event.target ? event.target.value : event.value;\n    setItems(prevItems => _objectSpread(_objectSpread({}, prevItems), {}, {\n      [field]: value\n    }));\n  };\n\n  const addDescription = () => {\n    setDescriptions([...descriptions, {\n      description: \"\",\n      date: \"\"\n    }]);\n  };\n\n  const removeDescription = index => {\n    setDescriptions(descriptions.filter((_, i) => i !== index));\n  };\n\n  const handleDescriptionChange = (index, field, value) => {\n    const newDescriptions = descriptions.map((desc, i) => i === index ? _objectSpread(_objectSpread({}, desc), {}, {\n      [field]: value\n    }) : desc);\n    setDescriptions(newDescriptions);\n  };\n\n  const addWorkOrder = () => {\n    setWorkOrders([...workOrders, {\n      workOrder: \"\",\n      date: \"\"\n    }]);\n  };\n\n  const removeWorkOrder = index => {\n    setWorkOrders(workOrders.filter((_, i) => i !== index));\n  };\n\n  const handleWorkOrderChange = (index, field, value) => {\n    const newWorkOrders = workOrders.map((wo, i) => i === index ? _objectSpread(_objectSpread({}, wo), {}, {\n      [field]: value\n    }) : wo);\n    setWorkOrders(newWorkOrders);\n  };\n\n  const listDescriptions = () => {\n    setShowDescModal(true);\n  };\n\n  const selectDescription = index => {\n    setSelectedDesc(index);\n    setShowDescModal(false);\n  };\n\n  const handleShowCameraModal = () => {\n    setShowCameraModal(true);\n  };\n\n  const handleCloseCameraModal = () => {\n    setShowCameraModal(false);\n    setCapturedPhoto(null);\n  };\n\n  const handleCapture = (err, result) => {\n    if (result) {\n      setCapturedPhoto(result);\n    }\n  };\n\n  const savePhoto = () => {\n    setPhotos(prevPhotos => [...prevPhotos, {\n      file: capturedPhoto,\n      url: URL.createObjectURL(capturedPhoto)\n    }]);\n    setCapturedPhoto(null);\n    handleCloseCameraModal();\n  };\n\n  const removePhoto = index => {\n    setPhotos(photos.filter((_, i) => i !== index));\n  };\n\n  const mostRecentWorkOrder = workOrders && workOrders.length > 0 ? workOrders.reduce((latest, current) => {\n    const latestDate = new Date(latest.date);\n    const currentDate = new Date(current.date);\n    return currentDate > latestDate ? current : latest;\n  }, workOrders[0]) : {};\n\n  const capturePhoto = () => {\n    const video = document.querySelector(\"video\");\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    canvas.toBlob(blob => {\n      setCapturedPhoto(blob);\n    }, \"image/png\");\n  };\n\n  const handleShowInfoModal = async () => {\n    const db = firebase.firestore();\n\n    try {\n      const doc = await db.collection(\"Test\").doc(id).get();\n\n      if (doc.exists) {\n        const data = doc.data();\n        setItemName(data.name || \"N/A\");\n        setShowInfoModal(true);\n      } else {\n        console.error(\"Item not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching item info:\", error);\n    }\n  };\n\n  const handleCloseInfoModal = () => setShowInfoModal(false);\n\n  const handlePnChange = (index, value) => {\n    setItems(prev => {\n      const newPn = [...prev.pn];\n      newPn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: newPn\n      });\n    });\n  };\n\n  const addPn = () => {\n    setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      pn: [...prev.pn, \"\"]\n    }));\n  };\n\n  const handleSnChange = (index, value) => {\n    setItems(prev => {\n      const newSn = [...prev.sn];\n      newSn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: newSn\n      });\n    });\n  };\n\n  const addSn = () => {\n    setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      sn: [...prev.sn, \"\"]\n    }));\n  };\n\n  const browseInputRef = useRef(null);\n\n  const handleBrowsePhotos = () => {\n    if (browseInputRef.current) {\n      browseInputRef.current.click();\n    }\n  };\n\n  const handleFilesSelected = e => {\n    const files = e.target.files;\n\n    if (files.length) {\n      const newPhotos = [];\n\n      for (let i = 0; i < files.length; i++) {\n        newPhotos.push({\n          file: files[i],\n          url: URL.createObjectURL(files[i])\n        });\n      }\n\n      setPhotos(prevPhotos => [...prevPhotos, ...newPhotos]);\n    }\n\n    e.target.value = \"\";\n  };\n\n  const {\n    0: currentPnIndex,\n    1: setCurrentPnIndex\n  } = useState(0);\n  const {\n    0: showDropdown,\n    1: setShowDropdown\n  } = useState(false);\n  const {\n    0: currentSnIndex,\n    1: setCurrentSnIndex\n  } = useState(0);\n  const {\n    0: showSnDropdown,\n    1: setShowSnDropdown\n  } = useState(false);\n\n  const handleAddNewClient = () => {\n    const randomNum = Math.floor(10000 + Math.random() * 90000);\n    router.push(`../client/AIS${randomNum}/addClient?from=item&itemId=${id || \"\"}`);\n  };\n\n  const handleBluefolderButton = async () => {\n    var _descriptions$selecte2;\n\n    // Check that the work order field is filled out (using workOrders[0].workOrder as current)\n    const currentWorkOrder = workOrders && workOrders.length > 0 ? workOrders[0].workOrder : \"\";\n\n    if (!currentWorkOrder) {\n      alert(\"Please fill out the work order field before adding to BlueFolder.\");\n      return;\n    } // Build the payload to send to your proxy endpoint.\n\n\n    const payload = {\n      name: items.name,\n      pn: items.pn[0] || \"\",\n      sn: items.sn[0] || \"\",\n      status: items.status,\n      description: ((_descriptions$selecte2 = descriptions[selectedDesc]) === null || _descriptions$selecte2 === void 0 ? void 0 : _descriptions$selecte2.description) || \"\",\n      workOrder: currentWorkOrder,\n      localsn: items.localSN || \"\"\n    };\n\n    try {\n      // Replace with your ngrok URL and appropriate endpoint path (e.g., /api/bluefolder)\n      const response = await fetch(\"https://9d70-174-76-22-138.ngrok-free.app/bluefolder\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      alert(\"BlueFolder service item added successfully!\");\n      console.log(\"BlueFolder result:\", result);\n    } catch (error) {\n      console.error(\"BlueFolder error:\", error);\n      alert(\"Error adding data to BlueFolder.\");\n    }\n  }; // // Slack integration handler.\n  // const handleAddToSlack = async (which) => {\n  //   try {\n  //     const pn0 = Array.isArray(items.pn) ? items.pn[0] : items.pn;\n  //     const sn0 = Array.isArray(items.sn) ? items.sn[0] : items.sn;\n  //     const linkUrl = typeof window !== \"undefined\" ? window.location.href : \"\";\n  //     const safeName = (items?.name || id || \"Untitled\").trim();\n  //     const title = `${safeName}${id ? ` (${id})` : \"\"}`;\n  //     console.log(\"[SLACK][handleAddToSlack] which:\", which);\n  //     console.log(\"[SLACK] title:\", title);\n  //     console.log(\"[SLACK] PN:\", items.pn, \"SN:\", items.sn);\n  //     const resp = await fetch(\"/api/slack/add-to-list\", {\n  //       method: \"POST\",\n  //       headers: { \"Content-Type\": \"application/json\" },\n  //       body: JSON.stringify({\n  //         listKey: which,      // \"shipping\" | \"receiving\" | \"tasks\"\n  //         title,\n  //         pn: items.pn,\n  //         sn: items.sn,\n  //         // keeping it minimal by design while we stabilize PN/SN\n  //         linkUrl,\n  //       }),\n  //     });\n  // Slack integration handler (drop-in replacement)\n  // Slack integration handler (drop-in replacement)\n  // Slack integration handler (client) — replace your existing handleAddToSlack with this\n\n\n  const handleAddToSlack = async (which = \"shipping\") => {\n    try {\n      var _sort$, _ref8, _items$trackingNumber, _json$debug, _json$debug2;\n\n      const safeName = ((items === null || items === void 0 ? void 0 : items.name) || id || \"Untitled\").trim();\n      const title = `${safeName}${id ? ` (${id})` : \"\"}`;\n      const pn0 = Array.isArray(items === null || items === void 0 ? void 0 : items.pn) ? items.pn[0] : items === null || items === void 0 ? void 0 : items.pn;\n      const sn0 = Array.isArray(items === null || items === void 0 ? void 0 : items.sn) ? items.sn[0] : items === null || items === void 0 ? void 0 : items.sn;\n      const pn_sn = [pn0 && `PN: ${pn0}`, sn0 && `SN: ${sn0}`].filter(Boolean).join(\"  \");\n      const mostRecentWO = workOrders && workOrders.length ? (_sort$ = [...workOrders].sort((a, b) => new Date((b === null || b === void 0 ? void 0 : b.date) || 0) - new Date((a === null || a === void 0 ? void 0 : a.date) || 0))[0]) === null || _sort$ === void 0 ? void 0 : _sort$.workOrder : \"\";\n      const description = selectedDesc != null && descriptions !== null && descriptions !== void 0 && descriptions[selectedDesc] ? descriptions[selectedDesc].description || \"\" : (items === null || items === void 0 ? void 0 : items.description) || \"\";\n      const tracking = (_ref8 = (_items$trackingNumber = items === null || items === void 0 ? void 0 : items.trackingNumber) !== null && _items$trackingNumber !== void 0 ? _items$trackingNumber : items === null || items === void 0 ? void 0 : items.tracking) !== null && _ref8 !== void 0 ? _ref8 : \"\";\n      const local_sn = id || (items === null || items === void 0 ? void 0 : items.localSN) || \"\";\n      const photoUrls = Array.isArray(photos) ? photos.map(p => p === null || p === void 0 ? void 0 : p.url).filter(Boolean) : [];\n      const resp = await fetch(\"/api/slack/add-to-list\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          listKey: which,\n          title,\n          pn_sn,\n          // <— server expects this\n          work_order: mostRecentWO || \"\",\n          local_sn,\n          tracking,\n          description: (description || \"\").trim(),\n          photoUrls // array of https URLs\n\n        })\n      });\n      const json = await resp.json();\n      console.log(\"[SLACK][handleAddToSlack] response:\", json);\n      if (json !== null && json !== void 0 && (_json$debug = json.debug) !== null && _json$debug !== void 0 && _json$debug.steps) console.table(json.debug.steps);\n      if (json !== null && json !== void 0 && (_json$debug2 = json.debug) !== null && _json$debug2 !== void 0 && _json$debug2.photos) console.table(json.debug.photos);\n\n      if (!resp.ok || !(json !== null && json !== void 0 && json.ok)) {\n        setErr(`Slack add failed: ${(json === null || json === void 0 ? void 0 : json.error) || \"unknown error\"}`);\n        setShowErr(true);\n        return;\n      }\n\n      alert(`Added to Slack ${which === \"shipping\" ? \"Shipping\" : which === \"receiving\" ? \"Receiving\" : \"Tasks\"} list.`);\n    } catch (e) {\n      console.error(e);\n      setErr(\"Error adding to Slack\");\n      setShowErr(true);\n    }\n  };\n\n  return __jsx(LoggedIn, null, __jsx(\"div\", null, __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, \"Missing field\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showErr,\n    onHide: handleCloseErr\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, Err), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseErr\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showSaveModal,\n    onHide: handleCloseSaveModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Save Confirmation\")), __jsx(Modal.Body, null, \"Data has been saved successfully.\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseSaveModal\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showPrintModal,\n    onHide: handleClosePrintModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Print Confirmation\")), __jsx(Modal.Body, null, \"Info has been sent to print.\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClosePrintModal\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showDescModal,\n    onHide: handleCloseDescModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Descriptions\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addDescription\n  }, \"Add Description\"), descriptions.map((desc, index) => __jsx(Row, {\n    key: index,\n    className: \"mb-3\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => selectDescription(index),\n    style: {\n      cursor: \"pointer\"\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex justify-content-between\"\n  }, __jsx(\"span\", null, desc.description || \"Description\"), __jsx(\"span\", {\n    style: {\n      borderLeft: \"1px solid #ccc\",\n      paddingLeft: \"10px\"\n    }\n  }, desc.date || \"Date\"))))), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseDescModal\n  }, \"OK\"))), __jsx(Modal, {\n    show: showWoModal,\n    onHide: handleCloseWoModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Work Orders\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addWorkOrder,\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, \"Add Work Order\"), workOrders.map((wo, index) => __jsx(Row, {\n    key: index,\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Work Order\",\n    value: wo.workOrder,\n    onChange: e => handleWorkOrderChange(index, \"workOrder\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  })), __jsx(Col, null, __jsx(Form.Control, {\n    type: \"date\",\n    placeholder: \"Date\",\n    value: wo.date,\n    onChange: e => handleWorkOrderChange(index, \"date\", e.target.value)\n  })), __jsx(Col, null, __jsx(Button, {\n    variant: \"danger\",\n    onClick: () => removeWorkOrder(index)\n  }, \"Remove\")))), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseWoModal\n  }, \"OK\"))), __jsx(ClientInfoModal, {\n    show: showMachineModal,\n    handleClose: handleCloseMachineModal,\n    selectedClient: selectedClient,\n    machineOptions: machineOptions,\n    setSelectedMachine: handleSetSelectedMachine\n  }), __jsx(Modal, {\n    show: showClientModal,\n    onHide: handleCloseClientModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Client\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: search,\n    onChange: e => setSearch(e.target.value)\n  }), __jsx(ClientTable, {\n    clients: clients.filter(client => (client.name || \"\").toLowerCase().includes(search.toLowerCase())),\n    onSelectClient: handleClientInfo,\n    onInfoClick: handleClientInfo,\n    clearSelection: () => handleClientInfo(null),\n    onAddClient: handleAddNewClient\n  }))), __jsx(ParentModal, {\n    show: showParentModal,\n    handleClose: handleCloseParentModal,\n    setSelectedParent: setSelectedParent\n  }), __jsx(MachineSelectionModal, {\n    show: machineSelectionModal,\n    handleClose: () => setMachineSelectionModal(false),\n    setMachine: setTheMachine\n  }), __jsx(Modal, {\n    show: showCameraModal,\n    onHide: handleCloseCameraModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Take a Photo\")), __jsx(Modal.Body, null, __jsx(\"div\", {\n    className: \"camera\"\n  }, !capturedPhoto && __jsx(BarcodeScannerComponent, {\n    width: \"100%\",\n    height: 300,\n    onUpdate: handleCapture,\n    facingMode: cameraFacing\n  }), capturedPhoto && __jsx(\"div\", {\n    className: \"photo-preview\"\n  }, __jsx(\"img\", {\n    src: URL.createObjectURL(capturedPhoto),\n    alt: \"captured\",\n    style: {\n      width: \"100%\"\n    }\n  })))), __jsx(Modal.Footer, null, !capturedPhoto ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: capturePhoto,\n    style: {\n      borderRadius: \"50%\",\n      width: \"60px\",\n      height: \"60px\",\n      position: \"absolute\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      bottom: \"10px\"\n    }\n  }, \"\\uD83D\\uDCF7\"), __jsx(Button, {\n    onClick: () => setCameraFacing(prev => prev === \"environment\" ? \"user\" : \"environment\")\n  }, \"Flip Camera\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseCameraModal\n  }, \"Cancel\")) : __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: () => setCapturedPhoto(null)\n  }, \"Retake\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: savePhoto\n  }, \"OK\")))), __jsx(InfoModal, {\n    show: showInfoModal,\n    handleClose: handleCloseInfoModal,\n    itemName: items.name,\n    dimensions: items.length + \",\" + items.width + \",\" + items.height,\n    price: items.price,\n    freqI: freqItem,\n    freqM: machineFrequency,\n    usage: usagePastYear\n  }), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"600px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Item\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"name\"\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items.name,\n    onChange: handleChange(\"name\")\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"pn\"\n  }, __jsx(Form.Label, null, \"Product Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.pn[currentPnIndex] || \"\",\n    onChange: e => handlePnChange(currentPnIndex, e.target.value)\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowDropdown(!showDropdown)\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setAddingNewPn(true)\n  }, \"+\"))), showDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, pnOptions.map((pnOption, idx) => __jsx(\"div\", {\n    key: idx,\n    style: {\n      padding: \"8px\",\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setCurrentPnIndex(idx);\n      setShowDropdown(false);\n    }\n  }, pnOption)))), addingNewPn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new PN\",\n    value: newPn,\n    onChange: e => setNewPn(e.target.value),\n    onBlur: handleAddNewPn,\n    onKeyDown: e => e.key === \"Enter\" && handleAddNewPn()\n  })))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"sn\"\n  }, __jsx(Form.Label, null, \"Serial Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.sn[currentSnIndex] || \"\",\n    onChange: e => handleSnChange(currentSnIndex, e.target.value)\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowSnDropdown(!showSnDropdown)\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setAddingNewSn(true)\n  }, \"+\"))), showSnDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, snOptions.map((snOption, idx) => __jsx(\"div\", {\n    key: idx,\n    style: {\n      padding: \"8px\",\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setCurrentSnIndex(idx);\n      setShowSnDropdown(false);\n    }\n  }, snOption)))), addingNewSn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new SN\",\n    value: newSn,\n    onChange: e => setNewSn(e.target.value),\n    onBlur: handleAddNewSn,\n    onKeyDown: e => e.key === \"Enter\" && handleAddNewSn()\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"status\"\n  }, __jsx(Form.Label, null, \"Status\"), __jsx(Form.Select, {\n    value: items.status || \"\",\n    onChange: handleChange(\"status\")\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select status\"), __jsx(\"option\", {\n    value: \"Good\"\n  }, \"Good\"), __jsx(\"option\", {\n    value: \"Bad\"\n  }, \"Bad\"), __jsx(\"option\", {\n    value: \"Unknown\"\n  }, \"Unknown\"))))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Label, null, \"OEM\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"OEM\",\n    value: oem,\n    onChange: e => setOem(e.target.value)\n  })), __jsx(Col, null, __jsx(Form.Label, null, \"Modality\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Modality\",\n    value: modality,\n    onChange: e => setModality(e.target.value)\n  })), __jsx(Col, null, __jsx(Form.Label, null, \"Model\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Model\",\n    value: model,\n    onChange: e => setModel(e.target.value)\n  }))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\",\n      marginTop: \"1rem\"\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowWoModal,\n    className: \"me-2\"\n  }, \"Manage Work Orders\"), workOrders.length > 0 && __jsx(\"div\", {\n    className: \"d-flex flex-column align-items-start\"\n  }, __jsx(Form.Label, null, \"Work Order\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Most Recent Work Order\",\n    value: mostRecentWorkOrder.workOrder,\n    onChange: e => handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"workOrder\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Label, null, \"Date\"), __jsx(Form.Control, {\n    type: \"date\",\n    placeholder: \"Work Order Date\",\n    value: mostRecentWorkOrder.date,\n    onChange: e => handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"date\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Form.Group, {\n    controlId: \"desc\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: listDescriptions,\n    className: \"mb-2 me-2\"\n  }, \"List Descriptions\"), __jsx(Form.Control, {\n    as: \"textarea\",\n    rows: 3,\n    placeholder: \"Enter description\",\n    value: ((_descriptions$selecte3 = descriptions[selectedDesc]) === null || _descriptions$selecte3 === void 0 ? void 0 : _descriptions$selecte3.description) || \"\",\n    onChange: e => handleDescriptionChange(selectedDesc, \"description\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Control, {\n    type: \"date\",\n    value: ((_descriptions$selecte4 = descriptions[selectedDesc]) === null || _descriptions$selecte4 === void 0 ? void 0 : _descriptions$selecte4.date) || \"\",\n    onChange: e => handleDescriptionChange(selectedDesc, \"date\", e.target.value),\n    style: {\n      marginTop: \"0.5rem\",\n      marginBottom: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => {\n      setMachinePick(true);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select From\"), selectedClientFrom && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (From):\"), \" \", selectedClientFrom.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowMachineModal(true)\n  }, \"Select Machine for \", selectedClientFrom.name), selectedMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (From):\"), \" \", selectedMachine.name), showLocalLocFrom && __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowNewLocalModalFrom(true),\n    className: \"w-100 mb-2\"\n  }, [newLocalFrom.region, ((_newLocalFrom$section = newLocalFrom.section) === null || _newLocalFrom$section === void 0 ? void 0 : _newLocalFrom$section.letter) + ((_newLocalFrom$section2 = newLocalFrom.section) === null || _newLocalFrom$section2 === void 0 ? void 0 : _newLocalFrom$section2.number), newLocalFrom.bin && `B${newLocalFrom.bin}`, newLocalFrom.pallet && `P${newLocalFrom.pallet}`].filter(Boolean).join(\"-\")), __jsx(Modal, {\n    show: showNewLocalModalFrom,\n    onHide: () => setShowNewLocalModalFrom(false),\n    centered: true\n  }, __jsx(Modal.Header, null, __jsx(Modal.Title, null, \"Edit Local Loc (From)\")), __jsx(Modal.Body, null, __jsx(NewLocal, {\n    selectedClient: selectedClientFrom,\n    showLocalLoc: showNewLocalModalFrom,\n    value: newLocalFrom,\n    onChange: setNewLocalFrom,\n    onSave: p => {\n      setNewLocalFrom(p);\n      setShowNewLocalModalFrom(false);\n    },\n    onCancel: () => setShowNewLocalModalFrom(false)\n  })))))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => {\n      setMachinePick(false);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select Current\"), selectedClientCurrent && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (Current):\"), \" \", selectedClientCurrent.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowMachineModal(true)\n  }, \"Select Machine for \", selectedClientCurrent.name), selectedCurrentMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (Current):\"), \" \", selectedCurrentMachine.name), showLocalLocCurrent && __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowNewLocalModalCurrent(true),\n    className: \"w-100 mb-2\"\n  }, [newLocalCurrent.region, ((_newLocalCurrent$sect = newLocalCurrent.section) === null || _newLocalCurrent$sect === void 0 ? void 0 : _newLocalCurrent$sect.letter) + ((_newLocalCurrent$sect2 = newLocalCurrent.section) === null || _newLocalCurrent$sect2 === void 0 ? void 0 : _newLocalCurrent$sect2.number), newLocalCurrent.bin && `B${newLocalCurrent.bin}`, newLocalCurrent.pallet && `P${newLocalCurrent.pallet}`].filter(Boolean).join(\"-\")), __jsx(Modal, {\n    show: showNewLocalModalCurrent,\n    onHide: () => setShowNewLocalModalCurrent(false),\n    centered: true\n  }, __jsx(Modal.Header, null, __jsx(Modal.Title, null, \"Edit Local Loc (Current)\")), __jsx(Modal.Body, null, __jsx(NewLocal, {\n    selectedClient: selectedClientCurrent,\n    showLocalLoc: showNewLocalModalCurrent,\n    value: newLocalCurrent,\n    onChange: setNewLocalCurrent,\n    onSave: p => {\n      setNewLocalCurrent(p);\n      setShowNewLocalModalCurrent(false);\n    },\n    onCancel: () => setShowNewLocalModalCurrent(false)\n  })))))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowParentModal,\n    className: \"me-2\"\n  }, \"Select Parent\"), selectedParent && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Selected Parent\",\n    value: selectedParent.name,\n    readOnly: true,\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, {\n    xs: 6\n  }, __jsx(ButtonGroup, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowCameraModal\n  }, \"Take Photo\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleBrowsePhotos\n  }, \"Browse\"))), __jsx(Col, {\n    xs: 6,\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: \"success\",\n    onClick: handleSendToInflow,\n    style: {\n      marginLeft: \"auto\"\n    }\n  }, \"Send to inFlow\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleBluefolderButton,\n    style: {\n      marginLeft: \"0.5rem\",\n      marginRight: \".5rem\"\n    }\n  }, \"BlueFolder\"), __jsx(Button, {\n    variant: addToWebsite ? \"primary\" : \"outline-primary\",\n    onClick: () => setAddToWebsite(prev => !prev)\n  }, addToWebsite ? \"✓ Add to Website\" : \"Add to Website\"), __jsx(Form.Check, {\n    type: \"checkbox\",\n    id: \"hide-checkbox\",\n    label: \"Hide\" // box is checked when we want visible = false\n    ,\n    checked: !items.visible,\n    onChange: e => {\n      // grab checked immediately\n      const isHidden = e.currentTarget.checked;\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        visible: !isHidden\n      }));\n    },\n    className: \"ms-3\"\n  }))), __jsx(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    multiple: true,\n    ref: browseInputRef,\n    style: {\n      display: \"none\"\n    },\n    onChange: handleFilesSelected\n  })), photos && photos.length > 0 && __jsx(\"div\", {\n    className: \"photo-gallery\",\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      gap: \"10px\",\n      marginBottom: \"1rem\"\n    }\n  }, photos.map((photo, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      position: \"relative\",\n      width: \"100px\",\n      height: \"100px\"\n    }\n  }, __jsx(\"img\", {\n    src: photo.url,\n    alt: `Photo ${index + 1}`,\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\"\n    }\n  }), photo.file && __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    style: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      padding: \"0 5px\"\n    },\n    onClick: () => removePhoto(index)\n  }, \"x\")))), __jsx(\"div\", {\n    className: \"mt-3 d-flex flex-wrap align-items-center\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"Save\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleShowInfoModal,\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"More Info\"), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"NewSearch/mainSearch\"\n  }), SHOW_SLACK_BUTTONS && __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      marginLeft: \".5rem\"\n    }\n  }, __jsx(\"span\", {\n    style: {\n      fontSize: 12,\n      lineHeight: \"12px\",\n      textAlign: \"center\"\n    }\n  }, \"Slack\"), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      border: \"1px solid #ced4da\",\n      borderRadius: 6,\n      overflow: \"hidden\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-primary\",\n    onClick: () => handleAddToSlack(\"receiving\"),\n    style: {\n      border: \"none\",\n      borderRight: \"1px solid #ced4da\"\n    }\n  }, \"Receiving\"), __jsx(Button, {\n    variant: \"outline-primary\",\n    onClick: () => handleAddToSlack(\"shipping\"),\n    style: {\n      border: \"none\"\n    }\n  }, \"Shipping\"), __jsx(Button, {\n    variant: \"outline-primary\",\n    onClick: () => handleAddToSlack(\"tasks\")\n  }, \"Tasks\"))), __jsx(Button, {\n    variant: \"info\",\n    onClick: handlePrint,\n    style: {\n      marginLeft: \"auto\"\n    }\n  }, \"Print Label\")), __jsx(\"div\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"1rem 0\"\n    }\n  }, __jsx(Button, {\n    variant: \"link\",\n    style: {\n      textDecoration: \"none\",\n      color: \"black\",\n      fontSize: \"24px\"\n    },\n    onClick: () => setShowExtra(!showExtra)\n  }, \"\\u25BC\")), __jsx(Collapse, {\n    in: showExtra\n  }, __jsx(\"div\", {\n    id: \"extra-collapse\",\n    className: \"mt-3\"\n  }, __jsx(Row, null, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"dimensions\"\n  }, __jsx(Form.Label, null, \"Dimensions\"), __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    }\n  }, __jsx(Form.Control, {\n    placeholder: \"Length\",\n    type: \"text\",\n    value: items.length,\n    onChange: handleChange(\"length\")\n  }), __jsx(\"span\", {\n    style: {\n      padding: \"0 5px\"\n    }\n  }, \"x\"), __jsx(Form.Control, {\n    placeholder: \"Width\",\n    type: \"text\",\n    value: items.width,\n    onChange: handleChange(\"width\")\n  }), __jsx(\"span\", {\n    style: {\n      padding: \"0 5px\"\n    }\n  }, \"x\"), __jsx(Form.Control, {\n    placeholder: \"Height\",\n    type: \"text\",\n    value: items.height,\n    onChange: handleChange(\"height\")\n  }))), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"trackingNumber\"\n  }, __jsx(Form.Label, null, \"Tracking Number\"), __jsx(Form.Control, {\n    placeholder: \"Tracking Number\",\n    type: \"text\",\n    value: items.trackingNumber,\n    onChange: handleChange(\"trackingNumber\")\n  }))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"Price\"\n  }, __jsx(Form.Label, null, \"Price\"), __jsx(Form.Control, {\n    placeholder: \"Price\",\n    type: \"text\",\n    value: items.price,\n    onChange: handleChange(\"price\")\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"DOM\"\n  }, __jsx(Form.Label, null, \"DOM\"), __jsx(Form.Control, {\n    placeholder: \"Date of Manufacture\",\n    type: \"date\",\n    value: DOM,\n    onChange: e => setDOM(e.target.value)\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"poNumber\"\n  }, __jsx(Form.Label, null, \"PO Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"PO Number\",\n    value: items.poNumber || \"\",\n    onChange: handleChange(\"poNumber\")\n  }))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"localSN\"\n  }, __jsx(Form.Label, null, \"Local SN\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Local SN\",\n    value: items.localSN || \"\",\n    onChange: handleChange(\"localSN\")\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"arrivalDate\"\n  }, __jsx(Form.Label, null, \"Arrival Date\"), __jsx(Form.Control, {\n    placeholder: \"Enter Arrival Date\",\n    type: \"date\",\n    value: items.arrival_date,\n    onChange: e => {\n      const value = e.target.value;\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        arrival_date: value\n      }));\n    }\n  }))))))))))), __jsx(Modal, {\n    show: showCameraModal,\n    onHide: handleCloseCameraModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Take a Photo\")), __jsx(Modal.Body, null, __jsx(\"div\", {\n    className: \"camera\"\n  }, !capturedPhoto ? __jsx(BarcodeScannerComponent, {\n    width: \"100%\",\n    height: 300,\n    onUpdate: handleCapture,\n    facingMode: cameraFacing\n  }) : __jsx(\"div\", {\n    className: \"photo-preview\"\n  }, __jsx(\"img\", {\n    src: URL.createObjectURL(capturedPhoto),\n    alt: \"captured\",\n    style: {\n      width: \"100%\"\n    }\n  })))), __jsx(Modal.Footer, null, !capturedPhoto ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: capturePhoto,\n    style: {\n      borderRadius: \"50%\",\n      width: \"60px\",\n      height: \"60px\",\n      position: \"absolute\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      bottom: \"10px\"\n    }\n  }, \"\\uD83D\\uDCF7\"), __jsx(Button, {\n    onClick: () => setCameraFacing(prev => prev === \"environment\" ? \"user\" : \"environment\")\n  }, \"Flip Camera\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseCameraModal\n  }, \"Cancel\")) : __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: () => setCapturedPhoto(null)\n  }, \"Retake\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: savePhoto\n  }, \"OK\")))));\n} // Server-side rendering function\n\nexport async function getServerSideProps(context) {\n  const {\n    id\n  } = context.params;\n\n  try {\n    const itemDoc = await adminDb.collection(\"Test\").doc(id).get();\n    if (!itemDoc.exists) return {\n      notFound: true\n    };\n    const itemData = itemDoc.data(); // normalize to arrays for consistent client-side handling\n\n    const pnArray = Array.isArray(itemData.pn) ? itemData.pn : itemData.pn ? [itemData.pn] : [];\n    const snArray = Array.isArray(itemData.sn) ? itemData.sn : itemData.sn ? [itemData.sn] : []; // fetch machineData (optional; you already had this)\n\n    let machineData = {};\n\n    if (itemData.Machine && itemData.Machine.path) {\n      try {\n        const machineDoc = await adminDb.doc(itemData.Machine.path).get();\n\n        if (machineDoc.exists) {\n          machineData = machineDoc.data();\n\n          if (machineData.client && machineData.client.path) {\n            const clientDoc = await adminDb.doc(machineData.client.path).get();\n            if (clientDoc.exists) machineData.Client = clientDoc.data().name;\n          }\n        }\n      } catch (e) {\n        console.error(\"Error fetching machine data:\", e);\n      }\n    }\n\n    const serializedItem = {\n      id,\n      name: itemData.name || \"\",\n      pn: pnArray,\n      sn: snArray,\n      price: itemData.price || \"\",\n      status: itemData.status || \"\",\n      length: itemData.length || \"\",\n      width: itemData.width || \"\",\n      height: itemData.height || \"\",\n      poNumber: itemData.poNumber || \"\",\n      trackingNumber: itemData.trackingNumber || \"\",\n      localSN: itemData.localSN || \"\",\n      arrival_date: itemData.arrival_date || \"\",\n      visible: itemData.visible !== undefined ? itemData.visible : true,\n      // add the pieces the UI reads directly\n      descriptions: itemData.descriptions || [],\n      workOrders: itemData.workOrders || [],\n      DOM: itemData.DOM || \"\"\n    };\n    return {\n      props: {\n        initialItem: serializedItem,\n        initialMachineData: machineData\n      }\n    };\n  } catch (error) {\n    console.error(\"Error in getServerSideProps:\", error);\n    return {\n      props: {\n        error: \"Failed to load item data\"\n      }\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// inflowAPI.js\nvar BASE_URL = 'https://cloudapi.inflowinventory.com';\nvar COMPANY_ID = 'e28dc600-32a4-4438-a374-68df72caebbd';\nvar API_KEY = '10336E10F0BF982AB7AEB639D2FEB3B2B1C9BD73634D153EA81EE2130A70F9C4-1';\n\nvar InflowAPI = /*#__PURE__*/function () {\n  function InflowAPI() {\n    _classCallCheck(this, InflowAPI);\n  }\n\n  _createClass(InflowAPI, null, [{\n    key: \"upsertProduct\",\n\n    /**\n     * Insert or update a product in inFlow.\n     * @param {{ productId?: string, name: string, description: string, imageUrls?: string[] }} params\n     */\n    value: function () {\n      var _upsertProduct = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var productId, name, description, _ref$imageUrls, imageUrls, id, url, payload, res, errText;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                productId = _ref.productId, name = _ref.name, description = _ref.description, _ref$imageUrls = _ref.imageUrls, imageUrls = _ref$imageUrls === void 0 ? [] : _ref$imageUrls;\n                // Generate a new GUID if none provided\n                id = productId || crypto.randomUUID();\n                url = \"\".concat(BASE_URL, \"/\").concat(COMPANY_ID, \"/products\"); // Build payload and include images in the body\n\n                payload = _objectSpread({\n                  productId: id,\n                  name: name,\n                  description: description\n                }, imageUrls.length > 0 && {\n                  images: imageUrls.map(function (u) {\n                    return {\n                      imageId: crypto.randomUUID(),\n                      // must supply a valid imageId\n                      originalUrl: u\n                    };\n                  })\n                });\n                _context.next = 6;\n                return fetch(url, {\n                  method: 'PUT',\n                  // write requests use PUT :contentReference[oaicite:0]{index=0}\n                  headers: {\n                    'Authorization': \"Bearer \".concat(API_KEY),\n                    // auth header :contentReference[oaicite:1]{index=1}\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json;version=2024-10-01'\n                  },\n                  body: JSON.stringify(payload)\n                });\n\n              case 6:\n                res = _context.sent;\n\n                if (res.ok) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 10;\n                return res.text();\n\n              case 10:\n                errText = _context.sent;\n                throw new Error(\"inFlow API error (\".concat(res.status, \"): \").concat(errText));\n\n              case 12:\n                return _context.abrupt(\"return\", res.json());\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function upsertProduct(_x) {\n        return _upsertProduct.apply(this, arguments);\n      }\n\n      return upsertProduct;\n    }()\n  }]);\n\n  return InflowAPI;\n}();\n\nexport default InflowAPI;","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/utils/inflowAPI.js"],"names":["BASE_URL","COMPANY_ID","API_KEY","InflowAPI","productId","name","description","imageUrls","id","crypto","randomUUID","url","payload","length","images","map","u","imageId","originalUrl","fetch","method","headers","body","JSON","stringify","res","ok","text","errText","Error","status","json"],"mappings":";;;;;;;;;;AAAA;AAEA,IAAMA,QAAQ,GAAI,sCAAlB;AACA,IAAMC,UAAU,GAAG,sCAAnB;AACA,IAAMC,OAAO,GAAM,oEAAnB;;IAEMC,S;;;;;;;;AACJ;AACF;AACA;AACA;;;;;;;;;AAC+BC,gBAAAA,S,QAAAA,S,EAAWC,I,QAAAA,I,EAAMC,W,QAAAA,W,wBAAaC,S,EAAAA,S,+BAAY,E;AACrE;AACMC,gBAAAA,E,GAAKJ,SAAS,IAAIK,MAAM,CAACC,UAAP,E;AAElBC,gBAAAA,G,aAASX,Q,cAAYC,U,gBAE3B;;AACMW,gBAAAA,O;AACJR,kBAAAA,SAAS,EAAEI,E;AACXH,kBAAAA,IAAI,EAAJA,I;AACAC,kBAAAA,WAAW,EAAXA;mBAEIC,SAAS,CAACM,MAAV,GAAmB,CAAnB,IAAwB;AAC1BC,kBAAAA,MAAM,EAAEP,SAAS,CAACQ,GAAV,CAAc,UAAAC,CAAC;AAAA,2BAAK;AAC1BC,sBAAAA,OAAO,EAAER,MAAM,CAACC,UAAP,EADiB;AACM;AAChCQ,sBAAAA,WAAW,EAAEF;AAFa,qBAAL;AAAA,mBAAf;AADkB,iB;;uBAQZG,KAAK,CAACR,GAAD,EAAM;AAC3BS,kBAAAA,MAAM,EAAE,KADmB;AACX;AAChBC,kBAAAA,OAAO,EAAE;AACP,sDAA2BnB,OAA3B,CADO;AACyC;AAChD,oCAAiB,kBAFV;AAGP,8BAAiB;AAHV,mBAFkB;AAO3BoB,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,OAAf;AAPqB,iBAAN,C;;;AAAjBa,gBAAAA,G;;oBAUDA,GAAG,CAACC,E;;;;;;uBACeD,GAAG,CAACE,IAAJ,E;;;AAAhBC,gBAAAA,O;sBACA,IAAIC,KAAJ,6BAA+BJ,GAAG,CAACK,MAAnC,gBAA+CF,OAA/C,E;;;iDAGDH,GAAG,CAACM,IAAJ,E;;;;;;;;;;;;;;;;;;;;;AAIX,eAAe5B,SAAf","sourcesContent":["// inflowAPI.js\n\nconst BASE_URL  = 'https://cloudapi.inflowinventory.com';\nconst COMPANY_ID = 'e28dc600-32a4-4438-a374-68df72caebbd';\nconst API_KEY    = '10336E10F0BF982AB7AEB639D2FEB3B2B1C9BD73634D153EA81EE2130A70F9C4-1';\n\nclass InflowAPI {\n  /**\n   * Insert or update a product in inFlow.\n   * @param {{ productId?: string, name: string, description: string, imageUrls?: string[] }} params\n   */\n  static async upsertProduct({ productId, name, description, imageUrls = [] }) {\n    // Generate a new GUID if none provided\n    const id = productId || crypto.randomUUID();\n\n    const url = `${BASE_URL}/${COMPANY_ID}/products`;\n\n    // Build payload and include images in the body\n    const payload = {\n      productId: id,\n      name,\n      description,\n      // Only include `images` if we actually have URLs\n      ...(imageUrls.length > 0 && {\n        images: imageUrls.map(u => ({\n          imageId: crypto.randomUUID(),   // must supply a valid imageId\n          originalUrl: u\n        }))\n      })\n    };\n\n    const res = await fetch(url, {\n      method: 'PUT',  // write requests use PUT :contentReference[oaicite:0]{index=0}\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,           // auth header :contentReference[oaicite:1]{index=1}\n        'Content-Type':  'application/json',\n        'Accept':        'application/json;version=2024-10-01'\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!res.ok) {\n      const errText = await res.text();\n      throw new Error(`inFlow API error (${res.status}): ${errText}`);\n    }\n\n    return res.json();\n  }\n}\n\nexport default InflowAPI;\n"]},"metadata":{},"sourceType":"module"}
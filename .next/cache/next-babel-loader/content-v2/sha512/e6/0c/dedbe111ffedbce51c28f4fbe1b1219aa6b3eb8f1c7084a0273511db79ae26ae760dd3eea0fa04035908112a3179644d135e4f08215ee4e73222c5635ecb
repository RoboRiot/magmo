{"ast":null,"code":"import _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _readOnlyError from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col, Modal, Table } from \"react-bootstrap\";\nimport { useRouter } from \"next/router\";\nimport firebase from \"../../../../context/Firebase\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport MachineCreationModal from \"../../MachineCreationModal\";\n\nvar AddClient = function AddClient() {\n  var router = useRouter();\n\n  var _useState = useState(null),\n      clientId = _useState[0],\n      setClientId = _useState[1];\n\n  var _useState2 = useState({\n    name: \"\",\n    location: \"\"\n  }),\n      client = _useState2[0],\n      setClient = _useState2[1];\n\n  var _useState3 = useState([]),\n      addedMachines = _useState3[0],\n      setAddedMachines = _useState3[1];\n\n  var _useState4 = useState(false),\n      showClientInfoModal = _useState4[0],\n      setShowClientInfoModal = _useState4[1];\n\n  var _useState5 = useState(false),\n      showMachineCreationModal = _useState5[0],\n      setShowMachineCreationModal = _useState5[1];\n\n  var _useState6 = useState([]),\n      machineOptions = _useState6[0],\n      setMachineOptions = _useState6[1];\n\n  var _useState7 = useState(null),\n      error = _useState7[0],\n      setError = _useState7[1];\n\n  useEffect(function () {\n    var handleClientId = function handleClientId() {\n      var id = router.query.id;\n\n      if (id) {\n        setClientId(id);\n        fetchClientData(id);\n      }\n    };\n\n    if (router.isReady) {\n      handleClientId();\n    }\n  }, [router.isReady, router.query]);\n\n  var fetchClientData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var db, doc, data, machineRefs, machines;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              db = firebase.firestore();\n              _context.prev = 1;\n              _context.next = 4;\n              return db.collection(\"Client\").doc(id).get();\n\n            case 4:\n              doc = _context.sent;\n\n              if (!doc.exists) {\n                _context.next = 13;\n                break;\n              }\n\n              data = doc.data();\n              setClient({\n                name: data.name || \"\",\n                location: data.local || \"\"\n              });\n              machineRefs = data.machines || [];\n              _context.next = 11;\n              return Promise.all(machineRefs.map(function (ref) {\n                return ref.get().then(function (doc) {\n                  return _objectSpread({\n                    id: doc.id\n                  }, doc.data());\n                });\n              }));\n\n            case 11:\n              machines = _context.sent;\n              setAddedMachines(machines);\n\n            case 13:\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(\"Error fetching client data:\", _context.t0);\n              setError(\"Failed to fetch client data.\");\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 15]]);\n    }));\n\n    return function fetchClientData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchAvailableMachines = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var db, snapshot, machines;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              db = firebase.firestore();\n              _context2.prev = 1;\n              _context2.next = 4;\n              return db.collection(\"Machine\").where(\"client\", \"==\", null).get();\n\n            case 4:\n              snapshot = _context2.sent;\n              machines = snapshot.docs.map(function (doc) {\n                return _objectSpread({\n                  id: doc.id\n                }, doc.data());\n              });\n              setMachineOptions(machines);\n              _context2.next = 13;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error(\"Error fetching machines:\", _context2.t0);\n              setError(\"Failed to fetch machines.\");\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }));\n\n    return function fetchAvailableMachines() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(field) {\n    return function (event) {\n      var value = event.target.value;\n      setClient(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, field, value));\n      });\n    };\n  };\n\n  var handleAddMachine = function handleAddMachine(machine) {\n    setAddedMachines(function (prev) {\n      return [].concat(_toConsumableArray(prev), [machine]);\n    });\n    setShowClientInfoModal(false);\n  }; // When creating a new machine, if a client exists (edit mode) use set with merge\n  // so that if the client document doesn't exist yet it gets created.\n\n\n  var handleCreateMachine = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(newMachine) {\n      var db, machineId, machineWithId, clientRef;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              db = firebase.firestore();\n              machineId = \"AIS\".concat(Math.floor(10000 + Math.random() * 90000));\n              _context3.prev = 2;\n              machineWithId = _objectSpread(_objectSpread({}, newMachine), {}, {\n                id: machineId,\n                // Only set the client if clientId exists; otherwise, leave it null.\n                client: clientId ? db.collection(\"Client\").doc(clientId) : null\n              });\n              _context3.next = 6;\n              return db.collection(\"Machine\").doc(machineId).set(machineWithId);\n\n            case 6:\n              if (!clientId) {\n                _context3.next = 10;\n                break;\n              }\n\n              clientRef = db.collection(\"Client\").doc(clientId);\n              _context3.next = 10;\n              return clientRef.set({\n                machines: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Machine\").doc(machineId))\n              }, {\n                merge: true\n              });\n\n            case 10:\n              setShowMachineCreationModal(false);\n              setAddedMachines(function (prev) {\n                return [].concat(_toConsumableArray(prev), [_objectSpread({\n                  id: machineId\n                }, newMachine)]);\n              });\n              _context3.next = 18;\n              break;\n\n            case 14:\n              _context3.prev = 14;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.error(\"Error creating and adding machine:\", _context3.t0);\n              setError(\"Failed to create and add machine.\");\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 14]]);\n    }));\n\n    return function handleCreateMachine(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleRemoveMachine = function handleRemoveMachine(index) {\n    setAddedMachines(function (prev) {\n      return prev.filter(function (_, i) {\n        return i !== index;\n      });\n    });\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var db, newClientId;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              db = firebase.firestore();\n              _context4.prev = 1;\n\n              if (!clientId) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 5;\n              return db.collection(\"Client\").doc(clientId).set(_objectSpread(_objectSpread({}, client), {}, {\n                machines: addedMachines.map(function (machine) {\n                  return db.collection(\"Machine\").doc(machine.id);\n                })\n              }), {\n                merge: true\n              });\n\n            case 5:\n              _context4.next = 11;\n              break;\n\n            case 7:\n              // Create new client\n              newClientId = \"AIS\".concat(Math.floor(10000 + Math.random() * 90000));\n              _context4.next = 10;\n              return db.collection(\"Client\").doc(newClientId).set(_objectSpread(_objectSpread({}, client), {}, {\n                machines: addedMachines.map(function (machine) {\n                  return db.collection(\"Machine\").doc(machine.id);\n                })\n              }));\n\n            case 10:\n              // (Update machines with the new client reference as needed.)\n              clientId = (_readOnlyError(\"clientId\"), newClientId);\n\n            case 11:\n              alert(\"Client and machines saved successfully.\"); // Check if we came from an item; if so, route back to that item page.\n\n              if (router.query.from === \"item\" && router.query.itemId) {\n                router.push(\"/NewSearch/item/\".concat(router.query.itemId));\n              } else if (router.query.from === \"addItem\" && router.query.itemId) {\n                router.push(\"AddItem/NewItem\");\n              } else {\n                router.push(\"../../clientSearch\");\n              }\n\n              _context4.next = 19;\n              break;\n\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(\"Error saving client:\", _context4.t0);\n              setError(\"Failed to save client.\");\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 15]]);\n    }));\n\n    return function handleSubmit() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Container, {\n    className: \"mt-5\"\n  }, __jsx(Row, {\n    className: \"justify-content-md-center\"\n  }, __jsx(Col, {\n    md: \"8\"\n  }, __jsx(Card, null, __jsx(Card.Header, null, __jsx(\"h4\", null, clientId ? \"Edit Client\" : \"Add New Client\")), __jsx(Card.Body, null, error && __jsx(\"p\", {\n    className: \"text-danger\"\n  }, error), __jsx(Form, null, __jsx(Row, null, __jsx(Col, {\n    md: 6\n  }, __jsx(Form.Group, {\n    controlId: \"clientName\"\n  }, __jsx(Form.Label, null, \"Client Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter client name\",\n    value: client.name,\n    onChange: handleChange(\"name\")\n  }))), __jsx(Col, {\n    md: 6\n  }, __jsx(Form.Group, {\n    controlId: \"clientLocation\"\n  }, __jsx(Form.Label, null, \"Location\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter location\",\n    value: client.location,\n    onChange: handleChange(\"location\")\n  })))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Col, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: function onClick() {\n      return setShowClientInfoModal(true);\n    }\n  }, \"Add Machine\"), __jsx(Button, {\n    variant: \"secondary\",\n    className: \"ms-2\",\n    onClick: function onClick() {\n      return setShowMachineCreationModal(true);\n    }\n  }, \"Create Machine\"))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Col, null, __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Machine Name\"), __jsx(\"th\", null, \"Location\"), __jsx(\"th\", null, \"Actions\"))), __jsx(\"tbody\", null, addedMachines.map(function (machine, index) {\n    return __jsx(\"tr\", {\n      key: index\n    }, __jsx(\"td\", null, machine.name), __jsx(\"td\", null, machine.local), __jsx(\"td\", null, __jsx(Button, {\n      variant: \"danger\",\n      size: \"sm\",\n      onClick: function onClick() {\n        return handleRemoveMachine(index);\n      }\n    }, \"Remove\")));\n  }))))), __jsx(Row, {\n    className: \"mt-4\"\n  }, __jsx(Col, {\n    md: 6\n  }, __jsx(Button, {\n    variant: \"success\",\n    onClick: handleSubmit,\n    className: \"w-100\"\n  }, \"Submit\")), __jsx(Col, {\n    md: 6\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: function onClick() {\n      return router.back();\n    },\n    className: \"w-100\"\n  }, \"Back\")))))))), __jsx(ClientInfoModal, {\n    show: showClientInfoModal,\n    handleClose: function handleClose() {\n      return setShowClientInfoModal(false);\n    },\n    machineOptions: machineOptions,\n    setSelectedMachine: handleAddMachine\n  }), __jsx(MachineCreationModal, {\n    show: showMachineCreationModal,\n    handleClose: function handleClose() {\n      return setShowMachineCreationModal(false);\n    },\n    onCreateMachine: handleCreateMachine\n  }));\n};\n\nexport default AddClient;","map":null,"metadata":{},"sourceType":"module"}
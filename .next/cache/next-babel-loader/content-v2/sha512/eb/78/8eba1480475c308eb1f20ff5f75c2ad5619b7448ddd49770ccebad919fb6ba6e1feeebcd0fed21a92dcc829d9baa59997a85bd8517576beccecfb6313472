{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport Modal from \"react-bootstrap/Modal\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col } from \"react-bootstrap\";\nimport styles from \"../../../../styles/Home.module.css\";\nimport Link from \"next/link\";\nimport { useAuth } from \"../../../../context/AuthUserContext\";\nimport firebase from \"../../../../context/Firebase\";\nimport LoggedIn from \"../../../LoggedIn\"; //setup for loading buttons\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n}\n\nfunction LoadingButton(type, name, route) {\n  var _useState = useState({\n    name: false\n  }),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    if (isLoading.name) {\n      simulateNetworkRequest().then(function () {\n        setLoading({\n          name: false\n        });\n      });\n    }\n  }, [isLoading.name]);\n\n  var handleClick = function handleClick() {\n    return setLoading({\n      name: true\n    });\n  };\n\n  return __jsx(Link, {\n    href: \"/\".concat(route)\n  }, __jsx(\"a\", {\n    className: \"btn btn-\".concat(type),\n    disabled: isLoading.name,\n    onClick: !isLoading.name ? handleClick : null\n  }, isLoading.name ? \"Loadingâ€¦\" : name));\n}\n\nvar article = function article() {\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useState2 = useState(false),\n      show = _useState2[0],\n      setShow = _useState2[1];\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  var _useAuth = useAuth(),\n      signOut = _useAuth.signOut;\n\n  var _useState3 = useState({}),\n      items = _useState3[0],\n      setItems = _useState3[1];\n\n  var db = firebase.firestore();\n\n  var _useState4 = useState([]),\n      info = _useState4[0],\n      setInfo = _useState4[1];\n\n  var _useState5 = useState([]),\n      ids = _useState5[0],\n      setID = _useState5[1];\n\n  var _useState6 = useState([]),\n      idSelect = _useState6[0],\n      setIDSelect = _useState6[1];\n\n  var selectedID = 0;\n\n  var _useState7 = useState([false]),\n      newItem = _useState7[0],\n      setNewItem = _useState7[1]; //\n  //\n  //functions for sending item\n  //\n  //\n\n\n  function toSend() {\n    return _toSend.apply(this, arguments);\n  } //checks to make sure all fields are completed\n\n\n  function _toSend() {\n    _toSend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tempDate, _tempDate$split$map, _tempDate$split$map2, year, month, day, returnData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tempDate = items.date;\n              _tempDate$split$map = tempDate.split(\"-\").map(Number), _tempDate$split$map2 = _slicedToArray(_tempDate$split$map, 3), year = _tempDate$split$map2[0], month = _tempDate$split$map2[1], day = _tempDate$split$map2[2];\n              tempDate = new Date(year, month - 1, day);\n              returnData = Object.assign({}, items, {\n                date: tempDate\n              });\n              console.log(\"this is the id: \" + selectedID); // creates a new id incase the id does not exist\n\n              if (!newItem) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 8;\n              return db.collection(\"Test\").doc(idSelect).set(returnData).then(function () {\n                console.log(\"Items added!\");\n                router.push(\"../WarehouseList\");\n              });\n\n            case 8:\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return db.collection(\"Test\").doc(idSelect).update(returnData).then(function () {\n                console.log(\"Items added!\");\n                router.push(\"../WarehouseList\");\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _toSend.apply(this, arguments);\n  }\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  } //all the change handlers for the input boxes for the item\n\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var check;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              check = false;\n\n              if (items[\"name\"] == \"\") {\n                console.log(\"error!!!!! name\");\n                check = true;\n              }\n\n              if (items[\"wo\"] == \"\") {\n                console.log(\"error!!!!! work order\");\n                check = true;\n              }\n\n              if (items[\"pn\"] == \"\") {\n                console.log(\"error!!!!! product number\");\n                check = true;\n              }\n\n              if (items[\"sn\"] == \"\") {\n                console.log(\"error!!!!! serial number\");\n                check = true;\n              }\n\n              if (items[\"date\"] == \"\") {\n                console.log(\"error!!!!! date\");\n                check = true;\n              }\n\n              if (items[\"desc\"] == \"\") {\n                console.log(\"error!!!!! description\");\n                check = true;\n              }\n\n              if (check) {\n                console.log(\"entered\");\n                handleShow();\n              } else {\n                console.log(\"try submit\");\n                console.log(items);\n                toSend();\n              }\n\n              event.preventDefault();\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  var nameChangeHandler = function nameChangeHandler(event) {\n    setItems(Object.assign({}, items, {\n      name: event.target.value\n    }));\n  };\n\n  var woChangeHandler = function woChangeHandler(event) {\n    setItems(Object.assign({}, items, {\n      wo: event.target.value\n    }));\n  };\n\n  var pnChangeHandler = function pnChangeHandler(event) {\n    setItems(Object.assign({}, items, {\n      pn: event.target.value\n    }));\n  };\n\n  var snChangeHandler = function snChangeHandler(event) {\n    setItems(Object.assign({}, items, {\n      sn: event.target.value\n    }));\n  };\n\n  var dateChangeHandler = function dateChangeHandler(event) {\n    setItems(Object.assign({}, items, {\n      date: event.target.value\n    }));\n    console.log(items.date);\n  };\n\n  var descChangeHandler = function descChangeHandler(event) {\n    setItems(Object.assign({}, items, {\n      desc: event.target.value\n    }));\n  }; //\n  //\n  //functions for pulling item\n  //\n  //\n  //\n  // Start the fetch operation as soon as\n  // the page loads\n  // if (typeof window !== \"undefined\") {\n  //   window.addEventListener(\"load\", () => {\n\n\n  useEffect(function () {\n    console.log(\"enter 1\");\n    fetchData();\n  }, [router.route]); // runs every time `router.route` changes\n  // displayData();\n  //   });\n  // }\n\n  function fetchStuff() {\n    return _fetchStuff.apply(this, arguments);\n  }\n\n  function _fetchStuff() {\n    _fetchStuff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var data, id, cityRef;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              data = 0;\n              id = 0;\n              _context3.next = 4;\n              return db.collection(\"Test\").get().then(function (querySnapshot) {\n                // Loop through the data and store\n                // it in array to display\n                querySnapshot.forEach(function (element) {\n                  // console.log(\"enter 2\");\n                  // console.log(element.id);\n                  if (element.id == selectedID) {\n                    data = element.data();\n                    id = element.id;\n                  }\n                });\n              });\n\n            case 4:\n              cityRef = _context3.sent;\n              return _context3.abrupt(\"return\", [data, id]);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _fetchStuff.apply(this, arguments);\n  }\n\n  function toDateTime(secs) {\n    var t = new Date(1970, 0, 1); // Epoch\n\n    t.setSeconds(secs);\n    return t;\n  }\n\n  function fetchData() {\n    return _fetchData.apply(this, arguments);\n  }\n\n  function _fetchData() {\n    _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var datas, data, itemValue, dateStorage, mSpace, dSpace;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(window.location.pathname.substring(window.location.pathname.lastIndexOf(\"/\") + 1));\n              selectedID = window.location.pathname.substring(window.location.pathname.lastIndexOf(\"/\") + 1);\n              _context4.next = 4;\n              return fetchStuff();\n\n            case 4:\n              datas = _context4.sent;\n              data = datas[0];\n              console.log(data);\n\n              if (data == 0) {\n                console.log(\"new item\");\n                setIDSelect(selectedID);\n                setNewItem(true);\n              } else {\n                itemValue = [];\n                dateStorage = [];\n                mSpace = \"-\";\n                dSpace = \"-\";\n                if (toDateTime(data.date.seconds).getMonth() + 1 < 10) mSpace = \"-0\";\n                if (toDateTime(data.date.seconds).getDate() + 1 < 10) dSpace = \"-0\";\n                data.date = toDateTime(data.date.seconds).getFullYear() + mSpace + (toDateTime(data.date.seconds).getMonth() + 1) + dSpace + toDateTime(data.date.seconds).getDate();\n                console.log(data.date);\n                setIDSelect(selectedID);\n                setItems(data);\n              }\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _fetchData.apply(this, arguments);\n  }\n\n  return __jsx(LoggedIn, null, __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, \"Missing field\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"Ok\"))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Item\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"name\"\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"name\"],\n    onChange: nameChangeHandler\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"wo\"\n  }, __jsx(Form.Label, null, \"Work Order\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"wo\"],\n    onChange: woChangeHandler\n  }))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"pn\"\n  }, __jsx(Form.Label, null, \"Product Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"pn\"],\n    onChange: pnChangeHandler\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"sn\"\n  }, __jsx(Form.Label, null, \"Serial Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"sn\"],\n    onChange: snChangeHandler\n  }))), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"date\"\n  }, __jsx(Form.Label, null, \"Date\"), __jsx(Form.Control, {\n    type: \"date\",\n    value: items[\"date\"],\n    onChange: dateChangeHandler\n  })), __jsx(Form.Label, null), __jsx(Form.Group, {\n    className: \"mb-3\",\n    controlId: \"desc\"\n  }, __jsx(Form.Label, null, \"Description\"), __jsx(Form.Control, {\n    as: \"textarea\" // Convert it to textarea\n    ,\n    className: \"auto-grow-textarea\",\n    value: items[\"desc\"],\n    onChange: descChangeHandler\n  })), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\"\n  }, \"Submit Changes\"), __jsx(Link, {\n    href: \"../WarehouseList\"\n  }, __jsx(Button, {\n    className: \"m-3\",\n    variant: \"secondary\"\n  }, \"Go Back\"))))))));\n};\n\nexport default article;","map":null,"metadata":{},"sourceType":"module"}
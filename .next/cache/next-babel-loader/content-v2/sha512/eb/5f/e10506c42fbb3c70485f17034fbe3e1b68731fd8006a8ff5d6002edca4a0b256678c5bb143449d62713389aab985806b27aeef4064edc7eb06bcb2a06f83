{"ast":null,"code":"// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  var _req$body, _items;\n\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    error: \"Missing SLACK_BOT_TOKEN\"\n  });\n  const {\n    listKey,\n    // \"receiving\" | \"shipping\" | \"tasks\"\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body;\n  const LISTS = {\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment\n\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment\n\n      }\n    },\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n      }\n    }\n  };\n  const CHANNELS = {\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n    shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n    tasks: process.env.SLACK_CHANNEL_TASKS_ID\n  };\n  const headersJson = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n\n  const slack = (method, body, headers = headersJson) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers,\n    body\n  }).then(r => r.json());\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const createBody = {\n    list_id: cfg.id,\n    title: plain(title) || plain(localSN) || \"Untitled\",\n    // plain text title\n    fields\n  }; // --- PATH A: Write to a LIST (preferred for SHIPPING/RECEIVING) ---\n\n  const cfg = LISTS[listKey];\n\n  if (cfg !== null && cfg !== void 0 && cfg.id) {\n    const fields = []; // column: description\n\n    if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n      const textBits = [description, bodyText && listKey === \"tasks\" ? bodyText : null, linkUrl ? `<${linkUrl}|Open in Magmo>` : null].filter(Boolean).join(\"\\n\");\n      fields.push({\n        column_id: cfg.cols.desc,\n        value: {\n          text: textBits\n        }\n      });\n    }\n\n    if (cfg.cols.date && date) fields.push({\n      column_id: cfg.cols.date,\n      value: {\n        date\n      }\n    });\n    if (cfg.cols.pn && (pn || sn || dom)) fields.push({\n      column_id: cfg.cols.pn,\n      value: {\n        text: [Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : pn ? `PN: ${pn}` : \"\", Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : sn ? `SN: ${sn}` : \"\", dom ? `DOM: ${dom}` : \"\"].filter(Boolean).join(\"  \")\n      }\n    });\n    if (cfg.cols.track && (trackingNumber || poNumber)) fields.push({\n      column_id: cfg.cols.track,\n      value: {\n        text: [trackingNumber ? `RL: ${trackingNumber}` : \"\", poNumber ? `PO: ${poNumber}` : \"\"].filter(Boolean).join(\"  \")\n      }\n    });\n    if (cfg.cols.wo && workOrder) fields.push({\n      column_id: cfg.cols.wo,\n      value: {\n        text: `WO: ${workOrder}`\n      }\n    });\n    if (cfg.cols.lsn && localSN) fields.push({\n      column_id: cfg.cols.lsn,\n      value: {\n        text: localSN\n      }\n    });\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n\n    if (!(created !== null && created !== void 0 && created.ok)) {\n      return res.status(400).json({\n        error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n        raw: created\n      });\n    } // 2) Upload photos and attach to the \"attachment\" column\n\n\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n      const fileIds = [];\n\n      for (const url of photoUrls) {\n        var _complete$files, _complete$files$;\n\n        // a) get external upload URL\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: new URLSearchParams({\n            filename: url.split(\"/\").pop() || \"image.jpg\"\n          })\n        }).then(r => r.json());\n        if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n        try {\n          const img = await fetch(url);\n          const buf = await img.arrayBuffer();\n          await fetch(init.upload_url, {\n            method: \"PUT\",\n            body: Buffer.from(buf)\n          });\n        } catch {\n          /* ignore individual image failures */\n        }\n\n        const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n          files: [{\n            id: init.file_id,\n            title: \"photo\"\n          }]\n        }));\n        if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) fileIds.push(complete.files[0].id);\n      }\n\n      if (fileIds.length) {\n        // Patch the row with attachment field\n        await slack(\"slackLists.items.update\", JSON.stringify({\n          list_id: cfg.id,\n          item_id: created.item.id,\n          fields: [{\n            column_id: cfg.cols.photos,\n            value: {\n              attachment: {\n                file_ids: fileIds\n              }\n            }\n          }]\n        }));\n      }\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.id,\n      item_id: created.item.id\n    });\n  } // --- PATH B: Fallback to a channel post ---\n\n\n  const channel = CHANNELS[listKey];\n  if (!channel) return res.status(400).json({\n    error: \"Unknown listKey (no list or channel configured)\"\n  }); // Try to join public channels so chat.postMessage wonâ€™t fail with channel_not_found\n\n  await fetch(\"https://slack.com/api/conversations.join\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      channel\n    })\n  }); // Build safe helpers\n\n  const safe = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(safe).join(\", \") : safe(a); // Build a non-empty title\n\n\n  const safeId = safe(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop()) || safe(localSN) || \"\";\n  const safeTitle = safe(title) || safe((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.title) || // belt & suspenders\n  safe((_items = items) === null || _items === void 0 ? void 0 : _items.name) || ( // if you ever pass items.name later\n  safeId ? `Item ${safeId}` : \"New Item\"); // Rebuild the message text\n\n  const lines = [];\n  lines.push(`*${safeTitle}*`);\n  const pnStr = joinArr(pn);\n  const snStr = joinArr(sn);\n  if (pnStr) lines.push(`PN: ${pnStr}`);\n  if (snStr) lines.push(`SN: ${snStr}`);\n  if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n  if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n  if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n  if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n  if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n  if (safe(date)) lines.push(`Date: ${safe(date)}`); // If they sent a description, prefer that over bodyText\n\n  const desc = safe(description);\n  if (desc) lines.push(desc);else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n  if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`); // NEVER allow empty text\n\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({\n    channel,\n    text\n  }) // <-- use the joined string, not the array\n  );\n  if (!(posted !== null && posted !== void 0 && posted.ok)) return res.status(400).json({\n    error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error\",\n    raw: posted\n  });\n  return res.status(200).json({\n    ok: true,\n    mode: \"channel\",\n    channel,\n    ts: posted.ts\n  });\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","receiving","id","SLACK_LIST_RECEIVING_ID","cols","desc","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","track","SLACK_LIST_RECEIVING_TRACKING_COL","wo","SLACK_LIST_RECEIVING_WO_COL","lsn","SLACK_LIST_RECEIVING_LOCALSN_COL","photos","SLACK_LIST_RECEIVING_PHOTOS_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_TRACKING_COL","SLACK_LIST_SHIPPING_WO_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_DESCRIPTION_COL","CHANNELS","SLACK_CHANNEL_RECEIVING_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_TASKS_ID","headersJson","Authorization","slack","headers","fetch","then","r","plain","v","toString","trim","createBody","list_id","cfg","fields","textBits","filter","Boolean","join","push","column_id","value","text","Array","isArray","created","JSON","stringify","ok","raw","length","fileIds","url","init","URLSearchParams","filename","split","pop","upload_url","img","buf","arrayBuffer","Buffer","from","complete","files","file_id","item_id","item","attachment","file_ids","mode","channel","safe","joinArr","a","map","safeId","safeTitle","items","name","lines","pnStr","snStr","posted","ts"],"mappings":"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","sourcesContent":["// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n  const {\r\n    listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n    title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body;\r\n\r\n  const LISTS = {\r\n    receiving: {\r\n      id: process.env.SLACK_LIST_RECEIVING_ID,\r\n      cols: {\r\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n        pn:   process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        track:process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n        wo:   process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n        lsn:  process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n      },\r\n    },\r\n    shipping: {\r\n      id: process.env.SLACK_LIST_SHIPPING_ID,\r\n      cols: {\r\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n        pn:   process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        track:process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n        wo:   process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n        lsn:  process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n      },\r\n    },\r\n    tasks: {\r\n      id: process.env.SLACK_LIST_TASKS_ID,\r\n      cols: {\r\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n      },\r\n    },\r\n  };\r\n\r\n  const CHANNELS = {\r\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n    shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n    tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n  };\r\n\r\n    const headersJson = {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json; charset=utf-8\",\r\n    };\r\n    const slack = (method, body, headers = headersJson) =>\r\n        fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n            .then(r => r.json());\r\n\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n\r\n    const createBody = {\r\n        list_id: cfg.id,\r\n        title: plain(title) || plain(localSN) || \"Untitled\", // plain text title\r\n        fields,\r\n    };\r\n\r\n    // --- PATH A: Write to a LIST (preferred for SHIPPING/RECEIVING) ---\r\n    const cfg = LISTS[listKey];\r\n    if (cfg?.id) {\r\n        const fields = [];\r\n\r\n        // column: description\r\n        if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n            const textBits = [\r\n        description,\r\n        bodyText && listKey === \"tasks\" ? bodyText : null,\r\n        linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n      ].filter(Boolean).join(\"\\n\");\r\n      fields.push({ column_id: cfg.cols.desc, value: { text: textBits }});\r\n    }\r\n\r\n    if (cfg.cols.date && date)             fields.push({ column_id: cfg.cols.date, value: { date }});\r\n    if (cfg.cols.pn && (pn || sn || dom))  fields.push({ column_id: cfg.cols.pn,   value: { text: [\r\n      Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\"),\r\n      Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\"),\r\n      dom ? `DOM: ${dom}` : \"\",\r\n    ].filter(Boolean).join(\"  \") }});\r\n    if (cfg.cols.track && (trackingNumber || poNumber)) fields.push({\r\n      column_id: cfg.cols.track, value: { text: [\r\n        trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n        poNumber ? `PO: ${poNumber}` : \"\",\r\n      ].filter(Boolean).join(\"  \") }\r\n    });\r\n    if (cfg.cols.wo && workOrder)          fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` }});\r\n    if (cfg.cols.lsn && localSN)           fields.push({ column_id: cfg.cols.lsn, value: { text: localSN }});\r\n\r\n   \r\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n    if (!created?.ok) {\r\n      return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n    }\r\n\r\n    // 2) Upload photos and attach to the \"attachment\" column\r\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n      const fileIds = [];\r\n      for (const url of photoUrls) {\r\n        // a) get external upload URL\r\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n          method: \"POST\",\r\n          headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n          body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n        }).then(r => r.json());\r\n\r\n        if (!init?.ok || !init?.upload_url) continue;\r\n\r\n        try {\r\n          const img = await fetch(url);\r\n          const buf = await img.arrayBuffer();\r\n          await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n        } catch { /* ignore individual image failures */ }\r\n\r\n        const complete = await slack(\"files.completeUploadExternal\",\r\n          JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }]}));\r\n        if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n      }\r\n\r\n      if (fileIds.length) {\r\n        // Patch the row with attachment field\r\n        await slack(\"slackLists.items.update\", JSON.stringify({\r\n          list_id: cfg.id,\r\n          item_id: created.item.id,\r\n          fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds }}}],\r\n        }));\r\n      }\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n  }\r\n\r\n  // --- PATH B: Fallback to a channel post ---\r\n  const channel = CHANNELS[listKey];\r\n  if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n  // Try to join public channels so chat.postMessage wonâ€™t fail with channel_not_found\r\n  await fetch(\"https://slack.com/api/conversations.join\", {\r\n    method: \"POST\",\r\n    headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n    body: new URLSearchParams({ channel }),\r\n  });\r\n\r\n // Build safe helpers\r\nconst safe = v => (v ?? \"\").toString().trim();\r\nconst joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(safe).join(\", \") : safe(a);\r\n\r\n// Build a non-empty title\r\nconst safeId = safe(linkUrl?.split(\"/\").pop()) || safe(localSN) || \"\";\r\nconst safeTitle =\r\n  safe(title) ||\r\n        (safe(req.body?.title)) ||                              // belt & suspenders\r\n        (safe(items?.name)) ||                                  // if you ever pass items.name later\r\n        (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n    // Rebuild the message text\r\n    const lines = [];\r\n    lines.push(`*${safeTitle}*`);\r\n\r\n    const pnStr = joinArr(pn);\r\n    const snStr = joinArr(sn);\r\n    if (pnStr) lines.push(`PN: ${pnStr}`);\r\n    if (snStr) lines.push(`SN: ${snStr}`);\r\n    if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n    if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n    if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n    if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n    if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n    if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n    // If they sent a description, prefer that over bodyText\r\n    const desc = safe(description);\r\n    if (desc) lines.push(desc);\r\n    else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n    if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n    // NEVER allow empty text\r\n    const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n    const posted = await slack(\"chat.postMessage\",\r\n        JSON.stringify({ channel, text }) // <-- use the joined string, not the array\r\n    );\r\n\r\n\r\n    if (!posted?.ok) return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n\r\n    return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
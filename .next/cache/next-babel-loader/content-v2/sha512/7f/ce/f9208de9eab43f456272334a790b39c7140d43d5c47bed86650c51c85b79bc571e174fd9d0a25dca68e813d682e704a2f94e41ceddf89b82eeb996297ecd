{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\mainSearch.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Card, Row, Col, InputGroup, Dropdown, FormControl, Button, NavDropdown, Form, Modal, Spinner } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { fetchPartsWithMachineData, fetchClients, fetchModels, formatDate } from \"../../utils/fetchAssociations\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\nimport ClientTable from \"../../utils/ClientTable\";\nimport ModelTable from \"../../utils/ModelTable\";\nimport PartTable from \"../../utils/PartTable\";\nimport styles from \"../../styles/MainSearch.module.css\";\nimport firebase from \"../../context/Firebase\"; // Predefined warehouse client IDs and display names\n\nconst SOCAL_CLIENT_ID = \"AIS17182\";\nconst NORCAL_CLIENT_ID = \"AIS25097\";\nconst UNASSIGNED_CLIENT_ID = \"AIS00404\"; // Simulates a network request delay\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n} // Custom LoadingButton component\n\n\nfunction LoadingButton({\n  type,\n  name,\n  route\n}) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n  return __jsx(Link, {\n    href: `/${route}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading,\n    onClick: () => !isLoading && setLoading(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, isLoading ? \"Loading…\" : name));\n}\n\nexport default function MainSearch() {\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: info,\n    1: setInfo\n  } = useState([]);\n  const {\n    0: backupInfo,\n    1: setBackupInfo\n  } = useState([]);\n  const {\n    0: augmentedInfo,\n    1: setAugmentedInfo\n  } = useState([]); // items with clientFromId/currentId added\n\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: ids,\n    1: setID\n  } = useState([]);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: dItem,\n    1: setDItem\n  } = useState();\n  const {\n    0: select,\n    1: setSelect\n  } = useState(\"Name\");\n  const {\n    0: showList,\n    1: setShowList\n  } = useState(false);\n  const {\n    0: showListSearch,\n    1: setShowListSearch\n  } = useState(\"text\");\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: selectedOEM,\n    1: setSelectedOEM\n  } = useState(null);\n  const {\n    0: selectedModality,\n    1: setSelectedModality\n  } = useState(null); // Replace the old single client state with two sets:\n\n  const {\n    0: selectedClientFrom,\n    1: setSelectedClientFrom\n  } = useState(null);\n  const {\n    0: clientFromButtonText,\n    1: setClientFromButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: selectedClientCurrent,\n    1: setSelectedClientCurrent\n  } = useState(null);\n  const {\n    0: clientCurrentButtonText,\n    1: setClientCurrentButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: showClientModal,\n    1: setShowClientModal\n  } = useState(false); // This state tells the modal which client box is being updated: \"from\" or \"current\"\n\n  const {\n    0: clientSelectionType,\n    1: setClientSelectionType\n  } = useState(null);\n  const router = useRouter();\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  const sortCheckBase = [false, false, false, false, false, false];\n\n  function withSortIcon(baseLabels, activeIndex, isDesc) {\n    return baseLabels.map((text, i) => {\n      if (i !== activeIndex) return text; // untouched\n\n      const arrow = isDesc ? \" ▼\" : \" ▲\";\n      return `${text}${arrow}`;\n    });\n  }\n\n  const {\n    0: labels,\n    1: setLabels\n  } = useState(labelBase);\n  const {\n    0: sortCheck,\n    1: setSortCheck\n  } = useState(sortCheckBase);\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState(null);\n  const {\n    0: selectedModel,\n    1: setSelectedModel\n  } = useState(null);\n  const {\n    0: gPos,\n    1: setGPos\n  } = useState(null);\n  const {\n    0: gIde,\n    1: setGIde\n  } = useState(null);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false); // Fetch data on component mount and route change\n\n  useEffect(() => {\n    fetchData();\n  }, [router.route]);\n\n  async function fetchData() {\n    setIsLoading(true);\n\n    try {\n      if (router.query.inputText && router.query.selectedType) {\n        setSelect(router.query.selectedType);\n        setSearch(router.query.inputText);\n      } // light retry for transient Firestore hiccups\n\n\n      const load = async (attempt = 1) => {\n        try {\n          return await fetchPartsWithMachineData();\n        } catch (e) {\n          if (attempt >= 3) throw e;\n          await new Promise(r => setTimeout(r, 250 * Math.pow(2, attempt - 1)));\n          return load(attempt + 1);\n        }\n      };\n\n      const data = await load();\n      setBackupInfo(data);\n      setLabels(labelBase); // <-- add this line after setBackupInfo(data)\n\n      setID(data.map(item => item.id)); // --- Pre-augment: resolve client ids of Machine / CurrentMachine once ---\n\n      const db = firebase.firestore();\n      const machineIds = [];\n      const curMachineIds = [];\n\n      for (const item of data) {\n        var _item$Machine, _item$CurrentMachine;\n\n        if (item !== null && item !== void 0 && (_item$Machine = item.Machine) !== null && _item$Machine !== void 0 && _item$Machine.id) machineIds.push(item.Machine.id);\n        if (item !== null && item !== void 0 && (_item$CurrentMachine = item.CurrentMachine) !== null && _item$CurrentMachine !== void 0 && _item$CurrentMachine.id) curMachineIds.push(item.CurrentMachine.id);\n      }\n\n      const uniq = arr => [...new Set(arr)];\n\n      const mIds = uniq(machineIds);\n      const cIds = uniq(curMachineIds);\n\n      const fetchMachineClients = async ids => {\n        if (!ids.length) return {};\n        const out = {}; // Firestore \"in\" supports up to 10 document IDs per query\n\n        const chunks = [];\n\n        for (let i = 0; i < ids.length; i += 10) chunks.push(ids.slice(i, i + 10));\n\n        for (const chunk of chunks) {\n          const snap = await db.collection(\"Machine\").where(firebase.firestore.FieldPath.documentId(), \"in\", chunk).get();\n          snap.forEach(doc => {\n            var _md$client;\n\n            const md = doc.data() || {};\n            out[doc.id] = ((_md$client = md.client) === null || _md$client === void 0 ? void 0 : _md$client.id) || null;\n          });\n        }\n\n        return out;\n      };\n\n      const [fromMap, curMap] = await Promise.all([fetchMachineClients(mIds), fetchMachineClients(cIds)]);\n      const augmented = data.map(item => {\n        var _item$Machine2, _fromMap$item$Machine, _item$CurrentMachine2, _curMap$item$CurrentM;\n\n        return _objectSpread(_objectSpread({}, item), {}, {\n          // keep existing fields; add fast client id fields for sync filtering\n          clientFromId: item !== null && item !== void 0 && (_item$Machine2 = item.Machine) !== null && _item$Machine2 !== void 0 && _item$Machine2.id ? (_fromMap$item$Machine = fromMap[item.Machine.id]) !== null && _fromMap$item$Machine !== void 0 ? _fromMap$item$Machine : null : null,\n          clientCurrentId: item !== null && item !== void 0 && (_item$CurrentMachine2 = item.CurrentMachine) !== null && _item$CurrentMachine2 !== void 0 && _item$CurrentMachine2.id ? (_curMap$item$CurrentM = curMap[item.CurrentMachine.id]) !== null && _curMap$item$CurrentM !== void 0 ? _curMap$item$CurrentM : null : null\n        });\n      });\n      setAugmentedInfo(augmented); // default view = everything not explicitly hidden\n\n      setInfo(augmented.filter(it => it.visible !== false));\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n      setInfo([]);\n      setAugmentedInfo([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const searchChangeHandler = event => setSearch(event.target.value); // Asynchronous filter function that loops through backupInfo and,\n  // for each item, fetches its Machine and CurrentMachine documents,\n  // then compares the client id (from machineData.client.id) to the selected client.\n\n\n  useEffect(() => {\n    function filterParts() {\n      const base = augmentedInfo; // already has clientFromId/clientCurrentId\n\n      const noFilters = !selectedOEM && !selectedModality && !selectedModel && !selectedClientFrom && !selectedClientCurrent && !search;\n\n      if (noFilters) {\n        setInfo(base.filter(it => it.visible !== false));\n        return;\n      }\n\n      const filtered = base.filter(item => {\n        // only hide when explicitly false\n        if (item.visible === false) return false; // OEM/modality/model via machineData (you already put this in items)\n\n        if (item.machineData) {\n          if (selectedOEM && item.machineData.OEM !== selectedOEM) return false;\n          if (selectedModality && item.machineData.Modality !== selectedModality) return false;\n          if (selectedModel && item.machineData.Model !== selectedModel) return false;\n        } // Client filters (now instant)\n\n\n        if (selectedClientFrom && item.clientFromId !== selectedClientFrom) return false;\n        if (selectedClientCurrent && item.clientCurrentId !== selectedClientCurrent) return false; // Search\n\n        if (search) {\n          const s = String(search).toLowerCase();\n\n          if (select === \"Name\") {\n            return (item.name || \"\").toLowerCase().includes(s);\n          }\n\n          if (select === \"Date\") {\n            // If user hasn't picked a date yet, don't hide anything\n            if (!search) return true;\n            const wantedDay = search; // already 'yyyy-mm-dd' from <input type=\"date\">\n            // 1) Match item.date, regardless of its format or type\n\n            const itemYMD = toYMD(item.date);\n            if (itemYMD && itemYMD === wantedDay) return true; // 2) Also check any description dates (if you store dates there)\n\n            if (Array.isArray(item.descriptions)) {\n              const hitDesc = item.descriptions.some(d => toYMD(d === null || d === void 0 ? void 0 : d.date) === wantedDay);\n              if (hitDesc) return true;\n            } // 3) And work order dates (if present)\n\n\n            if (Array.isArray(item.workOrders)) {\n              const hitWO = item.workOrders.some(w => toYMD(w === null || w === void 0 ? void 0 : w.date) === wantedDay);\n              if (hitWO) return true;\n            }\n\n            return false;\n          }\n\n          if (select === \"Work Order\") {\n            return Array.isArray(item.workOrders) && item.workOrders.some(wo => String(wo.workOrder || \"\").toLowerCase().includes(s));\n          }\n\n          if (select === \"Product Number\") {\n            return String(item.pn || \"\").toLowerCase().includes(s);\n          }\n\n          if (select === \"Description\") {\n            return String(item.desc || \"\").toLowerCase().includes(s);\n          }\n\n          if (select === \"SKU\") {\n            return String(item.id || \"\").toLowerCase().includes(s);\n          }\n        }\n\n        return true;\n      });\n      setInfo(filtered);\n    }\n\n    filterParts();\n  }, [selectedOEM, selectedModality, selectedClientFrom, selectedClientCurrent, selectedModel, search, select, augmentedInfo]);\n\n  function sortCheckAll(pos) {\n    // Determine next direction: toggle the clicked column only\n    const nextSortCheck = sortCheck.map((v, i) => i === pos ? !v : v);\n    const isDesc = nextSortCheck[pos]; // true means descending\n\n    const sortedInfo = [...info].sort((a, b) => {\n      const key = labelBaseNames[pos];\n\n      if (pos === 1) {\n        // DATE column\n        const ta = toTime(a[key]);\n        const tb = toTime(b[key]); // Put missing dates at the end for ascending, at the start for descending\n\n        if (ta === null && tb === null) return 0;\n        if (ta === null) return isDesc ? -1 : 1;\n        if (tb === null) return isDesc ? 1 : -1;\n        return isDesc ? tb - ta : ta - tb;\n      } // NAME or SKU (string-y columns): indexes 0 or 5 in your original logic\n\n\n      if (pos === 0 || pos === 5) {\n        var _a$key, _b$key;\n\n        const av = ((_a$key = a[key]) !== null && _a$key !== void 0 ? _a$key : \"\").toString();\n        const bv = ((_b$key = b[key]) !== null && _b$key !== void 0 ? _b$key : \"\").toString();\n        return isDesc ? bv.localeCompare(av) : av.localeCompare(bv);\n      } // Numeric-ish columns (wo, pn, sn) — fall back to string compare if NaN\n\n\n      const an = Number(a[key]);\n      const bn = Number(b[key]);\n\n      if (!isNaN(an) && !isNaN(bn)) {\n        return isDesc ? bn - an : an - bn;\n      } else {\n        var _a$key2, _b$key2;\n\n        const av = ((_a$key2 = a[key]) !== null && _a$key2 !== void 0 ? _a$key2 : \"\").toString();\n        const bv = ((_b$key2 = b[key]) !== null && _b$key2 !== void 0 ? _b$key2 : \"\").toString();\n        return isDesc ? bv.localeCompare(av) : av.localeCompare(bv);\n      }\n    });\n    setInfo(sortedInfo);\n    setSortCheck(nextSortCheck); // Update header labels to show the little arrow on the active column\n\n    setLabels(withSortIcon(labelBase, pos, isDesc));\n  }\n\n  const rowSelect = item => {\n    if (item && item.id) {\n      console.log(\"Selected item:\", item);\n      router.push(\"./item/\" + item.id);\n    } else {\n      console.error(\"Unable to determine the selected item’s ID: \", item);\n    }\n  };\n\n  const {\n    0: selectedItems,\n    1: setSelectedItems\n  } = useState([]);\n  const {\n    0: showDeleteModal,\n    1: setShowDeleteModal\n  } = useState(false);\n\n  const handleSelectItem = id => {\n    setSelectedItems(prev => prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]);\n  }; // setSelectedItems((prev) => {\n  //   const newSelection = prev.includes(id)\n  //     ? prev.filter((itemId) => itemId !== id)\n  //     : [...prev, id];\n  //   console.log(\"Selected items:\", newSelection);\n  //   return newSelection; // <- important\n  // });\n\n\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n\n  const handleDeleteSelected = async () => {\n    setIsDeleting(true);\n    const db = firebase.firestore();\n\n    try {\n      // Loop over each selected item one at a time\n      for (const itemId of selectedItems) {\n        console.log(itemId);\n\n        try {\n          // Delete from \"Test\" collection\n          await db.collection(\"Test\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Test:`, err);\n        }\n\n        try {\n          // Delete from \"Parts\" collection\n          await db.collection(\"Parts\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Parts:`, err);\n        }\n\n        try {\n          // Delete associated photos from storage\n          await deleteFromStorage(itemId);\n        } catch (err) {\n          console.error(`Error deleting storage for ${itemId}:`, err);\n        }\n      } // Update local state by filtering out the deleted items\n\n\n      setInfo(info.filter(item => !selectedItems.includes(item.id)));\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Error deleting items:\", error);\n    } finally {\n      setIsDeleting(false);\n      handleCloseDeleteModal(); // Optionally, reload the page\n      // router.reload();\n    }\n  };\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const checkDelete = (event, pos, idsToDelete, name) => {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    console.log(\"Selected IDs to delete:\", idsToDelete);\n    setSelectedItems(idsToDelete);\n    setDItem(name);\n    setShowDeleteModal(true);\n  }; // const handleDelete = async () => {\n  //   let itemId = gIde;\n  //   try {\n  //     setIsDeleting(true);\n  //     const db = firebase.firestore();\n  //     await db.collection(\"Test\").doc(itemId).delete();\n  //     await deleteFromPartsCollection(itemId);\n  //     await deleteFromStorage(itemId);\n  //     setInfo(info.filter((_, i) => gPos !== i));\n  //     console.log(`Deleted item: ${itemId}`);\n  //   } catch (error) {\n  //     console.error(\"Error deleting item:\", error);\n  //   } finally {\n  //     setIsDeleting(false);\n  //   }\n  //   handleClose();\n  // };\n\n\n  const hoverStyle = index => ({\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n    textAlign: \"center\",\n    cursor: \"default\"\n  });\n\n  const {\n    0: dropdown1Text,\n    1: setDropdown1Text\n  } = useState(\"Select Option\");\n  const {\n    0: dropdown2Text,\n    1: setDropdown2Text\n  } = useState(\"Select Option\");\n\n  const handleSelect1 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  const handleSelect2 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  }; // --------------------\n  // CLIENT SELECTION HANDLING\n  // --------------------\n  // This function fetches clients and opens the client modal.\n\n\n  const handleClientClick = async () => {\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\n    setClients(clientsData);\n    setClientSearchTerm(\"\");\n    setShowClientModal(true);\n  }; // When a client is selected in the modal, we now assume the parameter is a client ID.\n  // If the passed value is null, we clear the selection.\n\n\n  const handleClientSelect = async clientId => {\n    console.log(\"User selected client id:\", clientId);\n\n    if (!clientId) {\n      if (clientSelectionType === \"from\") {\n        setClientFromButtonText(\"Select Option\");\n        setSelectedClientFrom(null);\n      } else if (clientSelectionType === \"current\") {\n        setClientCurrentButtonText(\"Select Option\");\n        setSelectedClientCurrent(null);\n      }\n\n      setShowClientModal(false);\n      return;\n    }\n\n    try {\n      const clientSnap = await firebase.firestore().collection(\"Client\").doc(clientId).get();\n\n      if (clientSnap.exists) {\n        const clientData = clientSnap.data();\n\n        if (clientSelectionType === \"from\") {\n          setClientFromButtonText(clientData.name);\n          setSelectedClientFrom(clientId);\n        } else if (clientSelectionType === \"current\") {\n          setClientCurrentButtonText(clientData.name);\n          setSelectedClientCurrent(clientId);\n        }\n      } else {\n        console.error(\"No client document found for id:\", clientId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n    }\n\n    setShowClientModal(false);\n  };\n\n  const handleClientInfo = (clientId, clientName) => {\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\n    router.push(\"client/\" + clientId);\n  };\n\n  const handleClearClientSelection = () => {\n    if (clientSelectionType === \"from\") {\n      setClientFromButtonText(\"Select Option\");\n      setSelectedClientFrom(null);\n    } else if (clientSelectionType === \"current\") {\n      setClientCurrentButtonText(\"Select Option\");\n      setSelectedClientCurrent(null);\n    }\n\n    setShowClientModal(false);\n  }; // --------------------\n  // MODEL SELECTION HANDLING\n  // --------------------\n\n\n  const {\n    0: models,\n    1: setModels\n  } = useState([]);\n  const {\n    0: showModelModal,\n    1: setShowModelModal\n  } = useState(false);\n  const {\n    0: modelButtonText,\n    1: setModelButtonText\n  } = useState(\"Select Option\");\n\n  const handleModelClick = async () => {\n    const modelsData = await fetchModels(selectedOEM, selectedModality, selectedClientFrom);\n    setModels(modelsData);\n    setModelSearchTerm(\"\");\n    setShowModelModal(true);\n  };\n\n  const handleModelSelect = modelName => {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  };\n\n  const handleClearModelSelection = () => {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n  }; // --------------------\n  // WAREHOUSE BUTTONS (for Client Current)\n  // --------------------\n\n\n  const handleSoCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"SoCal Warehouse\");\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\n  };\n\n  const handleNorCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"NorCal Warehouse\");\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\n  };\n\n  const handleWarehouseUnassignedClick = () => {\n    setClientCurrentButtonText(\"Unassigned\");\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\n  };\n\n  const {\n    0: clientSearchTerm,\n    1: setClientSearchTerm\n  } = useState(\"\");\n  const {\n    0: modelSearchTerm,\n    1: setModelSearchTerm\n  } = useState(\"\");\n\n  const deleteFromStorage = async itemId => {\n    const storageRef = firebase.storage().ref();\n    const folderRef = storageRef.child(`Parts/${itemId}/`);\n\n    try {\n      const listResult = await folderRef.listAll();\n      const deletePromises = listResult.items.map(item => item.delete());\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\"Error deleting from storage:\", error);\n    }\n  };\n\n  const deleteFromPartsCollection = async itemId => {\n    const db = firebase.firestore();\n\n    try {\n      await db.collection(\"Parts\").doc(itemId).delete();\n      console.log(`Deleted item from Parts collection: ${itemId}`);\n    } catch (error) {\n      console.error(\"Error deleting from Parts collection:\", error);\n    }\n  }; // Safely convert any date-ish value into a comparable timestamp (ms since epoch).\n\n\n  function toTime(value) {\n    if (!value) return null; // Firestore Timestamp: { seconds, nanoseconds }\n\n    if (typeof value === \"object\" && value.seconds) {\n      try {\n        return value.seconds * 1000;\n      } catch {\n        /* fallthrough */\n      }\n    } // If already a Date\n\n\n    if (value instanceof Date) return isNaN(value.getTime()) ? null : value.getTime(); // If string: try ISO first\n\n    if (typeof value === \"string\") {\n      // yyyy-mm-dd (from your form inputs)\n      const iso = Date.parse(value);\n      if (!isNaN(iso)) return iso; // mm/dd/yyyy fallback (older items)\n\n      const parts = value.split(\"/\");\n\n      if (parts.length === 3) {\n        const [mm, dd, yyyy] = parts;\n        const alt = Date.parse(`${yyyy}-${mm}-${dd}`);\n        if (!isNaN(alt)) return alt;\n      }\n    } // Canonicalize any date-ish value to 'yyyy-mm-dd' so it matches <input type=\"date\"> values\n\n\n    function toYMD(value) {\n      const t = toTime(value);\n      if (t == null) return null;\n      const d = new Date(t);\n      const yyyy = d.getFullYear();\n      const mm = String(d.getMonth() + 1).padStart(2, \"0\");\n      const dd = String(d.getDate()).padStart(2, \"0\");\n      return `${yyyy}-${mm}-${dd}`;\n    } // Last resort\n\n\n    const t = Date.parse(value);\n    return isNaN(t) ? null : t;\n  }\n\n  return __jsx(LoggedIn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 5\n    }\n  }, isDeleting && __jsx(\"div\", {\n    className: \"loading-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    className: \"spinner-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 13\n    }\n  }, \"Loading...\"))), __jsx(Modal, {\n    show: showDeleteModal,\n    onHide: handleCloseDeleteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 11\n    }\n  }, \"Confirm Deletion\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 9\n    }\n  }, \"Are you sure you want to delete \", selectedItems.length, \" item\", selectedItems.length > 1 ? \"s\" : \"\", \"?\"), __jsx(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 11\n    }\n  }, \"Yes, delete\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseDeleteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))), __jsx(Modal, {\n    show: showClientModal,\n    onHide: () => setShowClientModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 11\n    }\n  }, \"Select \", clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: clientSearchTerm,\n    onChange: e => setClientSearchTerm(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 11\n    }\n  }), __jsx(ClientTable, {\n    clients: clients.filter(client => client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())),\n    onSelectClient: handleClientSelect,\n    onInfoClick: handleClientInfo,\n    isClientSearch: false,\n    clearSelection: () => handleClientSelect(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 11\n    }\n  }))), __jsx(Modal, {\n    show: showModelModal,\n    onHide: () => setShowModelModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 11\n    }\n  }, \"Select Model\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: modelSearchTerm,\n    onChange: e => setModelSearchTerm(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 11\n    }\n  }), __jsx(ModelTable, {\n    models: models.filter(model => typeof model === \"string\" ? model.toLowerCase().includes(modelSearchTerm.toLowerCase()) : false),\n    onSelectModel: handleModelSelect,\n    clearSelection: () => handleModelSelect(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 11\n    }\n  }))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"1200px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 732,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    className: \"text-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 15\n    }\n  }, \"Magmo\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 15\n    }\n  }, __jsx(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 19\n    }\n  }, __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 23\n    }\n  }, \"OEM\"), __jsx(Dropdown, {\n    onSelect: handleSelect1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 23\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-1\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 25\n    }\n  }, dropdown1Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 25\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 27\n    }\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"GE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 27\n    }\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 27\n    }\n  }, \"Toshiba\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 27\n    }\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 27\n    }\n  }, \"Philips\")))), __jsx(InputGroup, {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 767,\n      columnNumber: 23\n    }\n  }, \"Modality\"), __jsx(Dropdown, {\n    onSelect: handleSelect2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 23\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-2\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 25\n    }\n  }, dropdown2Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 25\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 27\n    }\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"CT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 27\n    }\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 27\n    }\n  }, \"MRI\"))))), __jsx(\"div\", {\n    className: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 19\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 19\n    }\n  }, __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 791,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 792,\n      columnNumber: 23\n    }\n  }, \"Client From\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"from\");\n      handleClientClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 23\n    }\n  }, clientFromButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 23\n    }\n  }, \"Client Current\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"current\");\n      handleClientClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 23\n    }\n  }, clientCurrentButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 23\n    }\n  }, \"Model\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleModelClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 820,\n      columnNumber: 23\n    }\n  }, modelButtonText)), __jsx(\"div\", {\n    className: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 829,\n      columnNumber: 21\n    }\n  }), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 23\n    }\n  }, \"Warehouse\"), __jsx(\"div\", {\n    className: styles.buttonGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleSoCalWarehouseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 25\n    }\n  }, \"SoCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleNorCalWarehouseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 25\n    }\n  }, \"NorCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleWarehouseUnassignedClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 25\n    }\n  }, \"Unassigned\"))))), __jsx(Col, {\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: styles.tableContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 19\n    }\n  }, isLoading ? __jsx(\"div\", {\n    className: \"d-flex justify-content-center align-items-center p-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 864,\n      columnNumber: 23\n    }\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 865,\n      columnNumber: 25\n    }\n  }, __jsx(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 27\n    }\n  }, \"M\"))) : __jsx(PartTable, {\n    info: info,\n    labels: labels,\n    ids: ids,\n    hoverStyle: hoverStyle,\n    sortCheckAll: sortCheckAll,\n    checkDelete: checkDelete,\n    isDeleting: isDeleting,\n    rowSelect: rowSelect,\n    setHoverIndex: setHoverIndex,\n    hoverIndex: hoverIndex,\n    selectedItems: selectedItems,\n    setSelectedItems: setSelectedItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 870,\n      columnNumber: 23\n    }\n  }), __jsx(\"div\", {\n    className: styles.searchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 21\n    }\n  }, __jsx(Form, {\n    className: \"d-flex pb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 887,\n      columnNumber: 23\n    }\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2 flex-grow-1\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler,\n    style: {\n      flex: \"1\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 25\n    }\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: () => setShowList(true),\n    onMouseLeave: () => setShowList(false),\n    style: {\n      marginTop: \"-5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 25\n    }\n  }, __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Name\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 905,\n      columnNumber: 27\n    }\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Date\");\n      setShowListSearch(\"date\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 908,\n      columnNumber: 27\n    }\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Work Order\");\n      setShowListSearch(\"number\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 27\n    }\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Product Number\");\n      setShowListSearch(\"number\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 27\n    }\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Description\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 27\n    }\n  }, \"Description\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"SKU\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 27\n    }\n  }, \"SKU\"))), __jsx(\"div\", {\n    className: \"d-flex justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 23\n    }\n  }, __jsx(LoadingButton, {\n    type: \"secondary\",\n    name: \"Add New Item\",\n    route: \"NewSearch/AddItem/NewItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 25\n    }\n  }), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"Warehousedb/WarehouseSelect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 25\n    }\n  })))))))))));\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/mainSearch.js"],"names":["React","useEffect","useState","Container","Card","Row","Col","InputGroup","Dropdown","FormControl","Button","NavDropdown","Form","Modal","Spinner","Link","useRouter","fetchPartsWithMachineData","fetchClients","fetchModels","formatDate","useAuth","LoggedIn","ClientTable","ModelTable","PartTable","styles","firebase","SOCAL_CLIENT_ID","NORCAL_CLIENT_ID","UNASSIGNED_CLIENT_ID","simulateNetworkRequest","Promise","resolve","setTimeout","LoadingButton","type","name","route","isLoading","setLoading","then","MainSearch","signOut","info","setInfo","backupInfo","setBackupInfo","augmentedInfo","setAugmentedInfo","setIsLoading","ids","setID","show","setShow","dItem","setDItem","select","setSelect","showList","setShowList","showListSearch","setShowListSearch","search","setSearch","selectedOEM","setSelectedOEM","selectedModality","setSelectedModality","selectedClientFrom","setSelectedClientFrom","clientFromButtonText","setClientFromButtonText","selectedClientCurrent","setSelectedClientCurrent","clientCurrentButtonText","setClientCurrentButtonText","clients","setClients","showClientModal","setShowClientModal","clientSelectionType","setClientSelectionType","router","labelBase","labelBaseNames","sortCheckBase","withSortIcon","baseLabels","activeIndex","isDesc","map","text","i","arrow","labels","setLabels","sortCheck","setSortCheck","hoverIndex","setHoverIndex","selectedModel","setSelectedModel","gPos","setGPos","gIde","setGIde","isDeleting","setIsDeleting","fetchData","query","inputText","selectedType","load","attempt","e","r","Math","pow","data","item","id","db","firestore","machineIds","curMachineIds","Machine","push","CurrentMachine","uniq","arr","Set","mIds","cIds","fetchMachineClients","length","out","chunks","slice","chunk","snap","collection","where","FieldPath","documentId","get","forEach","doc","md","client","fromMap","curMap","all","augmented","clientFromId","clientCurrentId","filter","it","visible","err","console","error","searchChangeHandler","event","target","value","filterParts","base","noFilters","filtered","machineData","OEM","Modality","Model","s","String","toLowerCase","includes","wantedDay","itemYMD","toYMD","date","Array","isArray","descriptions","hitDesc","some","d","workOrders","hitWO","w","wo","workOrder","pn","desc","sortCheckAll","pos","nextSortCheck","v","sortedInfo","sort","a","b","key","ta","toTime","tb","av","toString","bv","localeCompare","an","Number","bn","isNaN","rowSelect","log","selectedItems","setSelectedItems","showDeleteModal","setShowDeleteModal","handleSelectItem","prev","x","handleShowDeleteModal","handleCloseDeleteModal","handleDeleteSelected","itemId","delete","deleteFromStorage","handleClose","handleShow","checkDelete","idsToDelete","preventDefault","stopPropagation","hoverStyle","index","backgroundColor","textAlign","cursor","dropdown1Text","setDropdown1Text","dropdown2Text","setDropdown2Text","handleSelect1","eventKey","textContent","handleSelect2","handleClientClick","clientsData","setClientSearchTerm","handleClientSelect","clientId","clientSnap","exists","clientData","handleClientInfo","clientName","handleClearClientSelection","models","setModels","showModelModal","setShowModelModal","modelButtonText","setModelButtonText","handleModelClick","modelsData","setModelSearchTerm","handleModelSelect","modelName","handleClearModelSelection","handleSoCalWarehouseClick","handleNorCalWarehouseClick","handleWarehouseUnassignedClick","clientSearchTerm","modelSearchTerm","storageRef","storage","ref","folderRef","child","listResult","listAll","deletePromises","items","deleteFromPartsCollection","seconds","Date","getTime","iso","parse","parts","split","mm","dd","yyyy","alt","t","getFullYear","getMonth","padStart","getDate","model","minHeight","maxWidth","divider","buttonGroup","flexButton","tableContainer","searchContainer","flex","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  Row,\r\n  Col,\r\n  InputGroup,\r\n  Dropdown,\r\n  FormControl,\r\n  Button,\r\n  NavDropdown,\r\n  Form,\r\n  Modal,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport Link from \"next/link\";\r\nimport { useRouter } from \"next/router\";\r\nimport {\r\n  fetchPartsWithMachineData,\r\n  fetchClients,\r\n  fetchModels,\r\n  formatDate,\r\n} from \"../../utils/fetchAssociations\";\r\nimport { useAuth } from \"../../context/AuthUserContext\";\r\nimport LoggedIn from \"../LoggedIn\";\r\nimport ClientTable from \"../../utils/ClientTable\";\r\nimport ModelTable from \"../../utils/ModelTable\";\r\nimport PartTable from \"../../utils/PartTable\";\r\nimport styles from \"../../styles/MainSearch.module.css\";\r\nimport firebase from \"../../context/Firebase\";\r\n\r\n// Predefined warehouse client IDs and display names\r\nconst SOCAL_CLIENT_ID = \"AIS17182\";\r\nconst NORCAL_CLIENT_ID = \"AIS25097\";\r\nconst UNASSIGNED_CLIENT_ID = \"AIS00404\";\r\n\r\n\r\n// Simulates a network request delay\r\nfunction simulateNetworkRequest() {\r\n  return new Promise((resolve) => setTimeout(resolve, 2000));\r\n}\r\n\r\n// Custom LoadingButton component\r\nfunction LoadingButton({ type, name, route }) {\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      simulateNetworkRequest().then(() => setLoading(false));\r\n    }\r\n  }, [isLoading]);\r\n\r\n  return (\r\n    <Link href={`/${route}`}>\r\n      <a\r\n        className={`btn btn-${type}`}\r\n        disabled={isLoading}\r\n        onClick={() => !isLoading && setLoading(true)}\r\n      >\r\n        {isLoading ? \"Loading…\" : name}\r\n      </a>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default function MainSearch() {\r\n  const { signOut } = useAuth();\r\n  const [info, setInfo] = useState([]);\r\n  const [backupInfo, setBackupInfo] = useState([]);\r\n  const [augmentedInfo, setAugmentedInfo] = useState([]); // items with clientFromId/currentId added\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [ids, setID] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [dItem, setDItem] = useState();\r\n  const [select, setSelect] = useState(\"Name\");\r\n  const [showList, setShowList] = useState(false);\r\n  const [showListSearch, setShowListSearch] = useState(\"text\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [selectedOEM, setSelectedOEM] = useState(null);\r\n  const [selectedModality, setSelectedModality] = useState(null);\r\n  // Replace the old single client state with two sets:\r\n  const [selectedClientFrom, setSelectedClientFrom] = useState(null);\r\n  const [clientFromButtonText, setClientFromButtonText] = useState(\"Select Option\");\r\n  const [selectedClientCurrent, setSelectedClientCurrent] = useState(null);\r\n  const [clientCurrentButtonText, setClientCurrentButtonText] = useState(\"Select Option\");\r\n\r\n  const [clients, setClients] = useState([]);\r\n  const [showClientModal, setShowClientModal] = useState(false);\r\n  // This state tells the modal which client box is being updated: \"from\" or \"current\"\r\n  const [clientSelectionType, setClientSelectionType] = useState(null);\r\n\r\n  const router = useRouter();\r\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\r\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\r\n  const sortCheckBase = [false, false, false, false, false, false];\r\n\r\n  function withSortIcon(baseLabels, activeIndex, isDesc) {\r\n  return baseLabels.map((text, i) => {\r\n    if (i !== activeIndex) return text; // untouched\r\n    const arrow = isDesc ? \" ▼\" : \" ▲\";\r\n    return `${text}${arrow}`;\r\n  });\r\n}\r\n\r\n\r\n  const [labels, setLabels] = useState(labelBase);\r\n  const [sortCheck, setSortCheck] = useState(sortCheckBase);\r\n  const [hoverIndex, setHoverIndex] = useState(null);\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [gPos, setGPos] = useState(null);\r\n  const [gIde, setGIde] = useState(null);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n\r\n\r\n  // Fetch data on component mount and route change\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [router.route]);\r\n\r\n async function fetchData() {\r\n   setIsLoading(true);\r\n   try {\r\n     if (router.query.inputText && router.query.selectedType) {\r\n       setSelect(router.query.selectedType);\r\n       setSearch(router.query.inputText);\r\n     }\r\n     // light retry for transient Firestore hiccups\r\n     const load = async (attempt = 1) => {\r\n       try {\r\n         return await fetchPartsWithMachineData();\r\n       } catch (e) {\r\n         if (attempt >= 3) throw e;\r\n         await new Promise(r => setTimeout(r, 250 * Math.pow(2, attempt - 1)));\r\n         return load(attempt + 1);\r\n       }\r\n     };\r\n     const data = await load();\r\n     setBackupInfo(data);\r\n     setLabels(labelBase); // <-- add this line after setBackupInfo(data)\r\n     setID(data.map((item) => item.id));\r\n\r\n     // --- Pre-augment: resolve client ids of Machine / CurrentMachine once ---\r\n     const db = firebase.firestore();\r\n     const machineIds = [];\r\n     const curMachineIds = [];\r\n     for (const item of data) {\r\n       if (item?.Machine?.id) machineIds.push(item.Machine.id);\r\n       if (item?.CurrentMachine?.id) curMachineIds.push(item.CurrentMachine.id);\r\n     }\r\n     const uniq = (arr) => [...new Set(arr)];\r\n     const mIds = uniq(machineIds);\r\n     const cIds = uniq(curMachineIds);\r\n\r\n     const fetchMachineClients = async (ids) => {\r\n       if (!ids.length) return {};\r\n       const out = {};\r\n       // Firestore \"in\" supports up to 10 document IDs per query\r\n       const chunks = [];\r\n       for (let i = 0; i < ids.length; i += 10) chunks.push(ids.slice(i, i + 10));\r\n       for (const chunk of chunks) {\r\n         const snap = await db\r\n           .collection(\"Machine\")\r\n           .where(firebase.firestore.FieldPath.documentId(), \"in\", chunk)\r\n           .get();\r\n         snap.forEach((doc) => {\r\n           const md = doc.data() || {};\r\n           out[doc.id] = md.client?.id || null;\r\n         });\r\n       }\r\n       return out;\r\n     };\r\n\r\n     const [fromMap, curMap] = await Promise.all([\r\n       fetchMachineClients(mIds),\r\n       fetchMachineClients(cIds),\r\n     ]);\r\n\r\n     const augmented = data.map((item) => ({\r\n       ...item,\r\n       // keep existing fields; add fast client id fields for sync filtering\r\n       clientFromId: item?.Machine?.id ? fromMap[item.Machine.id] ?? null : null,\r\n       clientCurrentId: item?.CurrentMachine?.id ? curMap[item.CurrentMachine.id] ?? null : null,\r\n     }));\r\n\r\n     setAugmentedInfo(augmented);\r\n     // default view = everything not explicitly hidden\r\n     setInfo(augmented.filter((it) => it.visible !== false));\r\n   } catch (err) {\r\n     console.error(\"Error fetching data:\", err);\r\n     setInfo([]);\r\n     setAugmentedInfo([]);\r\n   } finally {\r\n     setIsLoading(false);\r\n   }\r\n }\r\n\r\n  const searchChangeHandler = (event) => setSearch(event.target.value);\r\n\r\n  // Asynchronous filter function that loops through backupInfo and,\r\n  // for each item, fetches its Machine and CurrentMachine documents,\r\n  // then compares the client id (from machineData.client.id) to the selected client.\r\n  useEffect(() => {\r\n      function filterParts() {\r\n     const base = augmentedInfo; // already has clientFromId/clientCurrentId\r\n     const noFilters =\r\n       !selectedOEM &&\r\n       !selectedModality &&\r\n       !selectedModel &&\r\n       !selectedClientFrom &&\r\n       !selectedClientCurrent &&\r\n       !search;\r\n     if (noFilters) {\r\n       setInfo(base.filter((it) => it.visible !== false));\r\n       return;\r\n     }\r\n\r\n     const filtered = base.filter((item) => {\r\n       // only hide when explicitly false\r\n       if (item.visible === false) return false;\r\n\r\n       // OEM/modality/model via machineData (you already put this in items)\r\n       if (item.machineData) {\r\n         if (selectedOEM && item.machineData.OEM !== selectedOEM) return false;\r\n         if (selectedModality && item.machineData.Modality !== selectedModality) return false;\r\n         if (selectedModel && item.machineData.Model !== selectedModel) return false;\r\n       }\r\n\r\n       // Client filters (now instant)\r\n       if (selectedClientFrom && item.clientFromId !== selectedClientFrom) return false;\r\n       if (selectedClientCurrent && item.clientCurrentId !== selectedClientCurrent) return false;\r\n\r\n       // Search\r\n       if (search) {\r\n         const s = String(search).toLowerCase();\r\n         if (select === \"Name\") {\r\n           return (item.name || \"\").toLowerCase().includes(s);\r\n         }\r\n         if (select === \"Date\") {\r\n           // If user hasn't picked a date yet, don't hide anything\r\n           if (!search) return true;\r\n\r\n           const wantedDay = search; // already 'yyyy-mm-dd' from <input type=\"date\">\r\n\r\n           // 1) Match item.date, regardless of its format or type\r\n           const itemYMD = toYMD(item.date);\r\n           if (itemYMD && itemYMD === wantedDay) return true;\r\n\r\n           // 2) Also check any description dates (if you store dates there)\r\n           if (Array.isArray(item.descriptions)) {\r\n             const hitDesc = item.descriptions.some((d) => toYMD(d?.date) === wantedDay);\r\n             if (hitDesc) return true;\r\n           }\r\n\r\n           // 3) And work order dates (if present)\r\n           if (Array.isArray(item.workOrders)) {\r\n             const hitWO = item.workOrders.some((w) => toYMD(w?.date) === wantedDay);\r\n             if (hitWO) return true;\r\n           }\r\n\r\n           return false;\r\n         }\r\n\r\n         if (select === \"Work Order\") {\r\n           return Array.isArray(item.workOrders) &&\r\n             item.workOrders.some((wo) => String(wo.workOrder || \"\").toLowerCase().includes(s));\r\n         }\r\n         if (select === \"Product Number\") {\r\n           return String(item.pn || \"\").toLowerCase().includes(s);\r\n         }\r\n         if (select === \"Description\") {\r\n           return String(item.desc || \"\").toLowerCase().includes(s);\r\n         }\r\n         if (select === \"SKU\") {\r\n           return String(item.id || \"\").toLowerCase().includes(s);\r\n         }\r\n       }\r\n       return true;\r\n     });\r\n     setInfo(filtered);\r\n   }\r\n    filterParts();\r\n  }, [selectedOEM, selectedModality, selectedClientFrom, selectedClientCurrent, selectedModel, search, select, augmentedInfo]);\r\n\r\n  function sortCheckAll(pos) {\r\n    // Determine next direction: toggle the clicked column only\r\n    const nextSortCheck = sortCheck.map((v, i) => (i === pos ? !v : v));\r\n    const isDesc = nextSortCheck[pos]; // true means descending\r\n\r\n    const sortedInfo = [...info].sort((a, b) => {\r\n      const key = labelBaseNames[pos];\r\n\r\n      if (pos === 1) {\r\n        // DATE column\r\n        const ta = toTime(a[key]);\r\n        const tb = toTime(b[key]);\r\n\r\n        // Put missing dates at the end for ascending, at the start for descending\r\n        if (ta === null && tb === null) return 0;\r\n        if (ta === null) return isDesc ? -1 : 1;\r\n        if (tb === null) return isDesc ? 1 : -1;\r\n\r\n        return isDesc ? (tb - ta) : (ta - tb);\r\n      }\r\n\r\n      // NAME or SKU (string-y columns): indexes 0 or 5 in your original logic\r\n      if (pos === 0 || pos === 5) {\r\n        const av = (a[key] ?? \"\").toString();\r\n        const bv = (b[key] ?? \"\").toString();\r\n        return isDesc ? bv.localeCompare(av) : av.localeCompare(bv);\r\n      }\r\n\r\n      // Numeric-ish columns (wo, pn, sn) — fall back to string compare if NaN\r\n      const an = Number(a[key]);\r\n      const bn = Number(b[key]);\r\n\r\n      if (!isNaN(an) && !isNaN(bn)) {\r\n        return isDesc ? (bn - an) : (an - bn);\r\n      } else {\r\n        const av = (a[key] ?? \"\").toString();\r\n        const bv = (b[key] ?? \"\").toString();\r\n        return isDesc ? bv.localeCompare(av) : av.localeCompare(bv);\r\n      }\r\n    });\r\n\r\n    setInfo(sortedInfo);\r\n    setSortCheck(nextSortCheck);\r\n\r\n    // Update header labels to show the little arrow on the active column\r\n    setLabels(withSortIcon(labelBase, pos, isDesc));\r\n  }\r\n\r\n\r\n  const rowSelect = (item) => {\r\n    if (item && item.id) {\r\n      console.log(\"Selected item:\", item);\r\n      router.push(\"./item/\" + item.id);\r\n    } else {\r\n      console.error(\"Unable to determine the selected item’s ID: \", item);\r\n    }\r\n  };\r\n\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n  const handleSelectItem = (id) => {\r\n    setSelectedItems(prev =>\r\n      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n\r\n  // setSelectedItems((prev) => {\r\n  //   const newSelection = prev.includes(id)\r\n  //     ? prev.filter((itemId) => itemId !== id)\r\n  //     : [...prev, id];\r\n  //   console.log(\"Selected items:\", newSelection);\r\n  //   return newSelection; // <- important\r\n  // });\r\n\r\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\r\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\r\n\r\n  const handleDeleteSelected = async () => {\r\n    setIsDeleting(true);\r\n    const db = firebase.firestore();\r\n    try {\r\n      // Loop over each selected item one at a time\r\n      for (const itemId of selectedItems) {\r\n        console.log(itemId)\r\n        try {\r\n          // Delete from \"Test\" collection\r\n          await db.collection(\"Test\").doc(itemId).delete();\r\n        } catch (err) {\r\n          console.error(`Error deleting document ${itemId} from Test:`, err);\r\n        }\r\n        try {\r\n          // Delete from \"Parts\" collection\r\n          await db.collection(\"Parts\").doc(itemId).delete();\r\n        } catch (err) {\r\n          console.error(`Error deleting document ${itemId} from Parts:`, err);\r\n        }\r\n        try {\r\n          // Delete associated photos from storage\r\n          await deleteFromStorage(itemId);\r\n        } catch (err) {\r\n          console.error(`Error deleting storage for ${itemId}:`, err);\r\n        }\r\n      }\r\n      // Update local state by filtering out the deleted items\r\n      setInfo(info.filter((item) => !selectedItems.includes(item.id)));\r\n      setSelectedItems([]);\r\n    } catch (error) {\r\n      console.error(\"Error deleting items:\", error);\r\n    } finally {\r\n      setIsDeleting(false);\r\n      handleCloseDeleteModal();\r\n      // Optionally, reload the page\r\n      // router.reload();\r\n    }\r\n  };\r\n\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const checkDelete = (event, pos, idsToDelete, name) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n    console.log(\"Selected IDs to delete:\", idsToDelete);\r\n    setSelectedItems(idsToDelete);\r\n    setDItem(name);\r\n    setShowDeleteModal(true);\r\n  };\r\n\r\n  // const handleDelete = async () => {\r\n  //   let itemId = gIde;\r\n  //   try {\r\n  //     setIsDeleting(true);\r\n  //     const db = firebase.firestore();\r\n  //     await db.collection(\"Test\").doc(itemId).delete();\r\n  //     await deleteFromPartsCollection(itemId);\r\n  //     await deleteFromStorage(itemId);\r\n  //     setInfo(info.filter((_, i) => gPos !== i));\r\n  //     console.log(`Deleted item: ${itemId}`);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error deleting item:\", error);\r\n  //   } finally {\r\n  //     setIsDeleting(false);\r\n  //   }\r\n  //   handleClose();\r\n  // };\r\n\r\n  const hoverStyle = (index) => ({\r\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\r\n    textAlign: \"center\",\r\n    cursor: \"default\",\r\n  });\r\n\r\n  const [dropdown1Text, setDropdown1Text] = useState(\"Select Option\");\r\n  const [dropdown2Text, setDropdown2Text] = useState(\"Select Option\");\r\n\r\n  const handleSelect1 = (eventKey, event) => {\r\n    if (eventKey === \"unassigned\") {\r\n      setDropdown1Text(\"Select Option\");\r\n      setSelectedOEM(null);\r\n    } else {\r\n      setDropdown1Text(event.target.textContent);\r\n      setSelectedOEM(event.target.textContent);\r\n    }\r\n  };\r\n\r\n  const handleSelect2 = (eventKey, event) => {\r\n    if (eventKey === \"unassigned\") {\r\n      setDropdown2Text(\"Select Option\");\r\n      setSelectedModality(null);\r\n    } else {\r\n      setDropdown2Text(event.target.textContent);\r\n      setSelectedModality(event.target.textContent);\r\n    }\r\n  };\r\n\r\n  // --------------------\r\n  // CLIENT SELECTION HANDLING\r\n  // --------------------\r\n  // This function fetches clients and opens the client modal.\r\n  const handleClientClick = async () => {\r\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\r\n    setClients(clientsData);\r\n    setClientSearchTerm(\"\");\r\n    setShowClientModal(true);\r\n  };\r\n\r\n  // When a client is selected in the modal, we now assume the parameter is a client ID.\r\n  // If the passed value is null, we clear the selection.\r\n  const handleClientSelect = async (clientId) => {\r\n    console.log(\"User selected client id:\", clientId);\r\n    if (!clientId) {\r\n      if (clientSelectionType === \"from\") {\r\n        setClientFromButtonText(\"Select Option\");\r\n        setSelectedClientFrom(null);\r\n      } else if (clientSelectionType === \"current\") {\r\n        setClientCurrentButtonText(\"Select Option\");\r\n        setSelectedClientCurrent(null);\r\n      }\r\n      setShowClientModal(false);\r\n      return;\r\n    }\r\n    try {\r\n      const clientSnap = await firebase.firestore().collection(\"Client\").doc(clientId).get();\r\n      if (clientSnap.exists) {\r\n        const clientData = clientSnap.data();\r\n        if (clientSelectionType === \"from\") {\r\n          setClientFromButtonText(clientData.name);\r\n          setSelectedClientFrom(clientId);\r\n        } else if (clientSelectionType === \"current\") {\r\n          setClientCurrentButtonText(clientData.name);\r\n          setSelectedClientCurrent(clientId);\r\n        }\r\n      } else {\r\n        console.error(\"No client document found for id:\", clientId);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching client data:\", error);\r\n    }\r\n    setShowClientModal(false);\r\n  };\r\n\r\n  const handleClientInfo = (clientId, clientName) => {\r\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\r\n    router.push(\"client/\" + clientId);\r\n  };\r\n\r\n  const handleClearClientSelection = () => {\r\n    if (clientSelectionType === \"from\") {\r\n      setClientFromButtonText(\"Select Option\");\r\n      setSelectedClientFrom(null);\r\n    } else if (clientSelectionType === \"current\") {\r\n      setClientCurrentButtonText(\"Select Option\");\r\n      setSelectedClientCurrent(null);\r\n    }\r\n    setShowClientModal(false);\r\n  };\r\n\r\n  // --------------------\r\n  // MODEL SELECTION HANDLING\r\n  // --------------------\r\n  const [models, setModels] = useState([]);\r\n  const [showModelModal, setShowModelModal] = useState(false);\r\n  const [modelButtonText, setModelButtonText] = useState(\"Select Option\");\r\n\r\n  const handleModelClick = async () => {\r\n    const modelsData = await fetchModels(\r\n      selectedOEM,\r\n      selectedModality,\r\n      selectedClientFrom\r\n    );\r\n    setModels(modelsData);\r\n    setModelSearchTerm(\"\");\r\n    setShowModelModal(true);\r\n  };\r\n\r\n  const handleModelSelect = (modelName) => {\r\n    setModelButtonText(modelName || \"Select Option\");\r\n    setSelectedModel(modelName || null);\r\n    setShowModelModal(false);\r\n  };\r\n\r\n  const handleClearModelSelection = () => {\r\n    setModelButtonText(\"Select Option\");\r\n    setSelectedModel(null);\r\n    setShowModelModal(false);\r\n  };\r\n\r\n  // --------------------\r\n  // WAREHOUSE BUTTONS (for Client Current)\r\n  // --------------------\r\n  const handleSoCalWarehouseClick = () => {\r\n    setClientCurrentButtonText(\"SoCal Warehouse\");\r\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\r\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\r\n  };\r\n\r\n  const handleNorCalWarehouseClick = () => {\r\n    setClientCurrentButtonText(\"NorCal Warehouse\");\r\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\r\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\r\n  };\r\n\r\n  const handleWarehouseUnassignedClick = () => {\r\n    setClientCurrentButtonText(\"Unassigned\");\r\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\r\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\r\n  };\r\n\r\n  const [clientSearchTerm, setClientSearchTerm] = useState(\"\");\r\n  const [modelSearchTerm, setModelSearchTerm] = useState(\"\");\r\n\r\n  const deleteFromStorage = async (itemId) => {\r\n    const storageRef = firebase.storage().ref();\r\n    const folderRef = storageRef.child(`Parts/${itemId}/`);\r\n    try {\r\n      const listResult = await folderRef.listAll();\r\n      const deletePromises = listResult.items.map((item) => item.delete());\r\n      await Promise.all(deletePromises);\r\n    } catch (error) {\r\n      console.error(\"Error deleting from storage:\", error);\r\n    }\r\n  };\r\n\r\n  const deleteFromPartsCollection = async (itemId) => {\r\n    const db = firebase.firestore();\r\n    try {\r\n      await db.collection(\"Parts\").doc(itemId).delete();\r\n      console.log(`Deleted item from Parts collection: ${itemId}`);\r\n    } catch (error) {\r\n      console.error(\"Error deleting from Parts collection:\", error);\r\n    }\r\n  };\r\n\r\n  // Safely convert any date-ish value into a comparable timestamp (ms since epoch).\r\nfunction toTime(value) {\r\n  if (!value) return null;\r\n\r\n  // Firestore Timestamp: { seconds, nanoseconds }\r\n  if (typeof value === \"object\" && value.seconds) {\r\n    try {\r\n      return value.seconds * 1000;\r\n    } catch { /* fallthrough */ }\r\n  }\r\n\r\n  // If already a Date\r\n  if (value instanceof Date) return isNaN(value.getTime()) ? null : value.getTime();\r\n\r\n  // If string: try ISO first\r\n  if (typeof value === \"string\") {\r\n    // yyyy-mm-dd (from your form inputs)\r\n    const iso = Date.parse(value);\r\n    if (!isNaN(iso)) return iso;\r\n\r\n    // mm/dd/yyyy fallback (older items)\r\n    const parts = value.split(\"/\");\r\n    if (parts.length === 3) {\r\n      const [mm, dd, yyyy] = parts;\r\n      const alt = Date.parse(`${yyyy}-${mm}-${dd}`);\r\n      if (!isNaN(alt)) return alt;\r\n    }\r\n  }\r\n\r\n  // Canonicalize any date-ish value to 'yyyy-mm-dd' so it matches <input type=\"date\"> values\r\n  function toYMD(value) {\r\n    const t = toTime(value);\r\n    if (t == null) return null;\r\n    const d = new Date(t);\r\n    const yyyy = d.getFullYear();\r\n    const mm = String(d.getMonth() + 1).padStart(2, \"0\");\r\n    const dd = String(d.getDate()).padStart(2, \"0\");\r\n    return `${yyyy}-${mm}-${dd}`;\r\n  }\r\n\r\n\r\n  // Last resort\r\n  const t = Date.parse(value);\r\n  return isNaN(t) ? null : t;\r\n}\r\n\r\n\r\n  return (\r\n    <LoggedIn>\r\n      {isDeleting && (\r\n        <div className=\"loading-overlay\">\r\n          <Spinner animation=\"border\" role=\"status\" className=\"spinner-center\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      )}\r\n      <Modal show={showDeleteModal} onHide={handleCloseDeleteModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Confirm Deletion</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to delete {selectedItems.length} item\r\n          {selectedItems.length > 1 ? \"s\" : \"\"}?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={handleDeleteSelected}>\r\n            Yes, delete\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={handleCloseDeleteModal}>\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal show={showClientModal} onHide={() => setShowClientModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            Select {clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\"}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FormControl\r\n            type=\"text\"\r\n            placeholder=\"Search by name\"\r\n            className=\"mb-3\"\r\n            value={clientSearchTerm}\r\n            onChange={(e) => setClientSearchTerm(e.target.value)}\r\n          />\r\n          <ClientTable\r\n            clients={clients.filter((client) =>\r\n              client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())\r\n            )}\r\n            onSelectClient={handleClientSelect}\r\n            onInfoClick={handleClientInfo}\r\n            isClientSearch={false}\r\n            clearSelection={() => handleClientSelect(null)}\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      <Modal show={showModelModal} onHide={() => setShowModelModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Select Model</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FormControl\r\n            type=\"text\"\r\n            placeholder=\"Search by name\"\r\n            className=\"mb-3\"\r\n            value={modelSearchTerm}\r\n            onChange={(e) => setModelSearchTerm(e.target.value)}\r\n          />\r\n          <ModelTable\r\n            models={models.filter((model) =>\r\n              typeof model === \"string\"\r\n                ? model.toLowerCase().includes(modelSearchTerm.toLowerCase())\r\n                : false\r\n            )}\r\n            onSelectModel={handleModelSelect}\r\n            clearSelection={() => handleModelSelect(null)}\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      <Container\r\n        className=\"d-flex align-items-center justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"w-100\" style={{ maxWidth: \"1200px\" }}>\r\n          <Card>\r\n            <Card.Body>\r\n              <h2 className=\"text-center mb-4\">Magmo</h2>\r\n              <Row>\r\n                <Col md={4}>\r\n                  {/* Dropdowns */}\r\n                  <div>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroup.Text>OEM</InputGroup.Text>\r\n                      <Dropdown onSelect={handleSelect1}>\r\n                        <Dropdown.Toggle\r\n                          variant=\"outline-secondary\"\r\n                          id=\"dropdown-button-1\"\r\n                          className=\"w-100\"\r\n                        >\r\n                          {dropdown1Text}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"w-100\">\r\n                          <Dropdown.Item eventKey=\"unassigned\">\r\n                            Select Option\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item eventKey=\"GE\">GE</Dropdown.Item>\r\n                          <Dropdown.Item eventKey=\"Toshiba\">\r\n                            Toshiba\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item eventKey=\"Siemens\">\r\n                            Siemens\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item eventKey=\"Philips\">\r\n                            Philips\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </InputGroup>\r\n\r\n                    <InputGroup className=\"mb-5\">\r\n                      <InputGroup.Text>Modality</InputGroup.Text>\r\n                      <Dropdown onSelect={handleSelect2}>\r\n                        <Dropdown.Toggle\r\n                          variant=\"outline-secondary\"\r\n                          id=\"dropdown-button-2\"\r\n                          className=\"w-100\"\r\n                        >\r\n                          {dropdown2Text}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"w-100\">\r\n                          <Dropdown.Item eventKey=\"unassigned\">\r\n                            Select Option\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item eventKey=\"CT\">CT</Dropdown.Item>\r\n                          <Dropdown.Item eventKey=\"MRI\">MRI</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </InputGroup>\r\n                  </div>\r\n\r\n                  <div className={styles.divider}></div>\r\n\r\n                  {/* Client selection boxes */}\r\n                  <div>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroup.Text>Client From</InputGroup.Text>\r\n                      <Button\r\n                        variant=\"outline-secondary\"\r\n                        className=\"w-100\"\r\n                        onClick={() => {\r\n                          setClientSelectionType(\"from\");\r\n                          handleClientClick();\r\n                        }}\r\n                      >\r\n                        {clientFromButtonText}\r\n                      </Button>\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroup.Text>Client Current</InputGroup.Text>\r\n                      <Button\r\n                        variant=\"outline-secondary\"\r\n                        className=\"w-100\"\r\n                        onClick={() => {\r\n                          setClientSelectionType(\"current\");\r\n                          handleClientClick();\r\n                        }}\r\n                      >\r\n                        {clientCurrentButtonText}\r\n                      </Button>\r\n                    </InputGroup>\r\n\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroup.Text>Model</InputGroup.Text>\r\n                      <Button\r\n                        variant=\"outline-secondary\"\r\n                        className=\"w-100\"\r\n                        onClick={handleModelClick}\r\n                      >\r\n                        {modelButtonText}\r\n                      </Button>\r\n                    </InputGroup>\r\n\r\n                    <div className={styles.divider}></div>\r\n\r\n                    {/* Warehouse buttons for Client Current */}\r\n                    <InputGroup className=\"mb-3\">\r\n                      <InputGroup.Text>Warehouse</InputGroup.Text>\r\n                      <div className={styles.buttonGroup}>\r\n                        <Button\r\n                          variant=\"outline-secondary\"\r\n                          className={styles.flexButton}\r\n                          onClick={handleSoCalWarehouseClick}\r\n                        >\r\n                          SoCal Warehouse\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outline-secondary\"\r\n                          className={styles.flexButton}\r\n                          onClick={handleNorCalWarehouseClick}\r\n                        >\r\n                          NorCal Warehouse\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outline-secondary\"\r\n                          className={styles.flexButton}\r\n                          onClick={handleWarehouseUnassignedClick}\r\n                        >\r\n                          Unassigned\r\n                        </Button>\r\n                      </div>\r\n                    </InputGroup>\r\n                  </div>\r\n                </Col>\r\n\r\n                <Col md={8}>\r\n                  <div className={styles.tableContainer}>\r\n                    {isLoading ? (\r\n                      <div className=\"d-flex justify-content-center align-items-center p-5\">\r\n                        <Spinner animation=\"border\" role=\"status\">\r\n                          <span className=\"sr-only\">M</span>\r\n                        </Spinner>\r\n                      </div>\r\n                    ) : (\r\n                      <PartTable\r\n                        info={info}\r\n                        labels={labels}\r\n                        ids={ids}\r\n                        hoverStyle={hoverStyle}\r\n                        sortCheckAll={sortCheckAll}\r\n                        checkDelete={checkDelete}\r\n                        isDeleting={isDeleting}\r\n                        rowSelect={rowSelect}\r\n                        setHoverIndex={setHoverIndex}\r\n                        hoverIndex={hoverIndex}\r\n                        selectedItems={selectedItems}\r\n                        setSelectedItems={setSelectedItems}\r\n                      />\r\n                    )}\r\n\r\n                    <div className={styles.searchContainer}>\r\n                      <Form className=\"d-flex pb-2\">\r\n                        <FormControl\r\n                          type={showListSearch}\r\n                          placeholder=\"Search\"\r\n                          className=\"me-2 flex-grow-1\"\r\n                          aria-label=\"Search\"\r\n                          value={search}\r\n                          onChange={searchChangeHandler}\r\n                          style={{ flex: \"1\" }}\r\n                        />\r\n                        <NavDropdown\r\n                          title={select}\r\n                          id=\"collasible-nav-dropdown\"\r\n                          show={showList}\r\n                          onMouseEnter={() => setShowList(true)}\r\n                          onMouseLeave={() => setShowList(false)}\r\n                          style={{ marginTop: \"-5px\" }}\r\n                        >\r\n                          <NavDropdown.Item onClick={() => { setSelect(\"Name\"); setShowListSearch(\"text\"); }}>\r\n                            Name\r\n                          </NavDropdown.Item>\r\n                          <NavDropdown.Item onClick={() => { setSelect(\"Date\"); setShowListSearch(\"date\"); }}>\r\n                            Date\r\n                          </NavDropdown.Item>\r\n                          <NavDropdown.Item onClick={() => { setSelect(\"Work Order\"); setShowListSearch(\"number\"); }}>\r\n                            Work Order\r\n                          </NavDropdown.Item>\r\n                          <NavDropdown.Item onClick={() => { setSelect(\"Product Number\"); setShowListSearch(\"number\"); }}>\r\n                            Product Number\r\n                          </NavDropdown.Item>\r\n                          <NavDropdown.Item onClick={() => { setSelect(\"Description\"); setShowListSearch(\"text\"); }}>\r\n                            Description\r\n                          </NavDropdown.Item>\r\n                          <NavDropdown.Item\r\n                            onClick={() => {\r\n                              setSelect(\"SKU\");\r\n                              setShowListSearch(\"text\");\r\n                            }}\r\n                          >\r\n                            SKU\r\n                          </NavDropdown.Item>\r\n                        </NavDropdown>\r\n                      </Form>\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <LoadingButton type=\"secondary\" name=\"Add New Item\" route=\"NewSearch/AddItem/NewItem\" />\r\n                        <LoadingButton type=\"primary\" name=\"Back\" route=\"Warehousedb/WarehouseSelect\" />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      </Container>\r\n    </LoggedIn>\r\n  );\r\n\r\n  \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}
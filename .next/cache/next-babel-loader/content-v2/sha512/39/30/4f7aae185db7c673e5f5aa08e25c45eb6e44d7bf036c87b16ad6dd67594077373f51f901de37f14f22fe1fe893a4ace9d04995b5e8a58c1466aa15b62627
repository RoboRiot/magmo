{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") {\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//   }\n//   const token = process.env.SLACK_BOT_TOKEN;\n//   if (!token) {\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//   }\n//   // ---- Payload from client (your UI already sends these) ----\n//   const {\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\n//     title,              // the thing we want to show in the Task column\n//     linkUrl, bodyText,\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//     photoUrls = [],\n//   } = req.body || {};\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\n//   const LISTS = {\n//     tasks: {\n//       id: process.env.SLACK_LIST_TASKS_ID,\n//       // OPTIONAL: if you know the \"Task\" column id already\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\n//       cols: {\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\n//       },\n//     },\n//     shipping: {\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\n//       },\n//     },\n//     receiving: {\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\n//       },\n//     },\n//   };\n//   const cfg = LISTS[listKey];\n//   if (!cfg?.id) {\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\n//   }\n//   // ---- Slack helpers ----\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\n//     const r = await fetch(`https://slack.com/api/${method}`, {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\n//     });\n//     return r.json();\n//   }\n//   const plain = (v) => (v ?? \"\").toString().trim();\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//   // Never send an empty title\n//   const safeTitle =\n//     plain(title) ||\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\n//     joinArr(pn) ||\n//     \"New Item\";\n//   // Convert plain text to Slack rich_text for text columns\n//   function toRichText(text) {\n//     return [{\n//       type: \"rich_text\",\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\n//     }];\n//   }\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\n//   async function resolveTitleColumnId(listId, provided) {\n//     if (provided) return { colId: provided, source: \"env\" };\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\n//     let candidate = null;\n//     for (const item of probe.items || []) {\n//       for (const f of item.fields || []) {\n//         const key = (f.key || \"\").trim().toLowerCase();\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\n//       }\n//     }\n//     return { colId: candidate, source: \"auto:first_text\" };\n//   }\n//   try {\n//     // 1) Find the column to write the Task name into; fall back to top-level title\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\n//     const createBody = {\n//       list_id: cfg.id,\n//       ...(titleCol.colId\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\n//     };\n//     const created = await slack(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 2) (Optional) Patch other columns you actually have IDs for\n//     const fields = [];\n//     const cols = cfg.cols || {};\n//     const addText = (colId, text) => {\n//       const t = plain(text);\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\n//     };\n//     // Description / Notes column (for tasks we include your assembled bodyText)\n//     if (cols.desc) {\n//       const bits = [\n//         plain(description),\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\n//       ].filter(Boolean).join(\"\\n\");\n//       addText(cols.desc, bits);\n//     }\n//     // Dates and grouped PN/SN/DOM example\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\n//     if (cols.pn) {\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.pn, combo);\n//     }\n//     if (cols.track) {\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.track, t);\n//     }\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\n//     if (fields.length) {\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id: cfg.id,\n//       item_id: created.item.id,\n//       used_title_col: titleCol.colId || null,\n//       title_col_source: titleCol.source || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      ok: false,\n      error: \"method_not_allowed\"\n    });\n  }\n\n  const token = process.env.SLACK_BOT_TOKEN;\n\n  if (!token) {\n    return res.status(500).json({\n      ok: false,\n      error: \"missing_SLACK_BOT_TOKEN\"\n    });\n  } // Only the bits we need now (name -> Item/Task cell, and PN/SN)\n\n\n  const {\n    listKey,\n    title,\n    pn,\n    sn\n  } = req.body || {}; // Only list IDs are required to get a visible row in Slack\n\n  const LISTS = {\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\n      cols: {}\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\n      cols: {\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL || null\n      }\n    },\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\n      cols: {\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL || null\n      }\n    }\n  };\n  const cfg = LISTS[listKey];\n\n  if (!(cfg !== null && cfg !== void 0 && cfg.id)) {\n    return res.status(400).json({\n      ok: false,\n      error: `unknown_or_unconfigured_listKey_${listKey}`\n    });\n  } // Helpers\n\n\n  async function slack(method, payload, headers = {\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  }) {\n    const r = await fetch(`https://slack.com/api/${method}`, {\n      method: \"POST\",\n      headers: _objectSpread({\n        Authorization: `Bearer ${token}`\n      }, headers),\n      body: typeof payload === \"string\" ? payload : JSON.stringify(payload)\n    });\n    return r.json();\n  }\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n\n  const safeTitle = plain(title) || joinArr(pn) || // gives you something non-empty even if name was blank\n  \"New Item\"; // rich_text helper (matches your working version’s approach)\n\n  const toRichText = text => [{\n    type: \"rich_text\",\n    elements: [{\n      type: \"rich_text_section\",\n      elements: [{\n        type: \"text\",\n        text\n      }]\n    }]\n  }]; // Auto-discover a text column for the Item/Task name if not provided in env\n\n\n  async function resolveTitleColumnId(listId, provided) {\n    if (provided) return {\n      colId: provided,\n      source: \"env\"\n    };\n    const probe = await slack(\"slackLists.items.list\", {\n      list_id: listId,\n      limit: 50\n    });\n    if (!(probe !== null && probe !== void 0 && probe.ok)) return {\n      colId: null,\n      source: \"auto\",\n      error: (probe === null || probe === void 0 ? void 0 : probe.error) || \"items.list_failed\"\n    };\n    let candidate = null;\n\n    for (const item of probe.items || []) {\n      for (const f of item.fields || []) {\n        const key = (f.key || \"\").trim().toLowerCase();\n        const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\n        if (key === \"task\" && f.column_id && hasText) return {\n          colId: f.column_id,\n          source: \"auto:key_task\"\n        };\n        if (!candidate && f.column_id && hasText) candidate = f.column_id;\n      }\n    }\n\n    return {\n      colId: candidate,\n      source: \"auto:first_text\"\n    };\n  }\n\n  try {\n    var _cfg$cols;\n\n    // 1) Create the row ensuring the visible “Item/Task” cell gets the name\n    const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\n\n    const createBody = _objectSpread({\n      list_id: cfg.id\n    }, titleCol.colId ? {\n      initial_fields: [{\n        column_id: titleCol.colId,\n        rich_text: toRichText(safeTitle)\n      }]\n    } : {\n      title: safeTitle\n    } // fallback if we couldn’t resolve a column\n    );\n\n    const created = await slack(\"slackLists.items.create\", createBody);\n\n    if (!(created !== null && created !== void 0 && created.ok)) {\n      return res.status(200).json({\n        ok: false,\n        error: (created === null || created === void 0 ? void 0 : created.error) || \"create_failed\",\n        mode: \"list\",\n        sent: createBody\n      });\n    } // 2) (Optional) patch PN/SN if you have that column id\n\n\n    const fields = [];\n\n    if ((_cfg$cols = cfg.cols) !== null && _cfg$cols !== void 0 && _cfg$cols.pn) {\n      const pnStr = joinArr(pn);\n      const snStr = joinArr(sn);\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`].filter(Boolean).join(\"  \");\n      if (combo) fields.push({\n        column_id: cfg.cols.pn,\n        value: {\n          text: combo\n        }\n      });\n    }\n\n    if (fields.length) {\n      await slack(\"slackLists.items.update\", {\n        list_id: cfg.id,\n        item_id: created.item.id,\n        fields\n      });\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.id,\n      item_id: created.item.id,\n      used_title_col: titleCol.colId || null,\n      title_col_source: titleCol.source || null,\n      sent_title: safeTitle\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n    return res.status(500).json({\n      ok: false,\n      error: \"exception\",\n      message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","pn","sn","body","LISTS","tasks","id","SLACK_LIST_TASKS_ID","titleColId","SLACK_LIST_TASKS_TITLE_COL","cols","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_TITLE_COL","SLACK_LIST_SHIPPING_PNSN_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_PNSN_COL","cfg","slack","payload","headers","r","fetch","Authorization","JSON","stringify","plain","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","safeTitle","toRichText","text","type","elements","resolveTitleColumnId","listId","provided","colId","source","probe","list_id","limit","candidate","item","items","f","fields","key","toLowerCase","hasText","rich_text","column_id","titleCol","createBody","initial_fields","created","mode","sent","pnStr","snStr","combo","push","value","length","item_id","used_title_col","title_col_source","sent_title","err","console","message","String"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") {\r\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//   }\r\n\r\n//   const token = process.env.SLACK_BOT_TOKEN;\r\n//   if (!token) {\r\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//   }\r\n\r\n//   // ---- Payload from client (your UI already sends these) ----\r\n//   const {\r\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\r\n//     title,              // the thing we want to show in the Task column\r\n//     linkUrl, bodyText,\r\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//     photoUrls = [],\r\n//   } = req.body || {};\r\n\r\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\r\n//   const LISTS = {\r\n//     tasks: {\r\n//       id: process.env.SLACK_LIST_TASKS_ID,\r\n//       // OPTIONAL: if you know the \"Task\" column id already\r\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\r\n//       cols: {\r\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\r\n//       },\r\n//     },\r\n//     shipping: {\r\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//     receiving: {\r\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//   };\r\n\r\n//   const cfg = LISTS[listKey];\r\n//   if (!cfg?.id) {\r\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\r\n//   }\r\n\r\n//   // ---- Slack helpers ----\r\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\r\n//     const r = await fetch(`https://slack.com/api/${method}`, {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\r\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\r\n//     });\r\n//     return r.json();\r\n//   }\r\n\r\n//   const plain = (v) => (v ?? \"\").toString().trim();\r\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//   // Never send an empty title\r\n//   const safeTitle =\r\n//     plain(title) ||\r\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\r\n//     joinArr(pn) ||\r\n//     \"New Item\";\r\n\r\n//   // Convert plain text to Slack rich_text for text columns\r\n//   function toRichText(text) {\r\n//     return [{\r\n//       type: \"rich_text\",\r\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\r\n//     }];\r\n//   }\r\n\r\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\r\n//   async function resolveTitleColumnId(listId, provided) {\r\n//     if (provided) return { colId: provided, source: \"env\" };\r\n\r\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\r\n\r\n//     let candidate = null;\r\n//     for (const item of probe.items || []) {\r\n//       for (const f of item.fields || []) {\r\n//         const key = (f.key || \"\").trim().toLowerCase();\r\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\r\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\r\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\r\n//       }\r\n//     }\r\n//     return { colId: candidate, source: \"auto:first_text\" };\r\n//   }\r\n\r\n//   try {\r\n//     // 1) Find the column to write the Task name into; fall back to top-level title\r\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\r\n\r\n//     const createBody = {\r\n//       list_id: cfg.id,\r\n//       ...(titleCol.colId\r\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\r\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\r\n//     };\r\n\r\n//     const created = await slack(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 2) (Optional) Patch other columns you actually have IDs for\r\n//     const fields = [];\r\n//     const cols = cfg.cols || {};\r\n//     const addText = (colId, text) => {\r\n//       const t = plain(text);\r\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\r\n//     };\r\n\r\n//     // Description / Notes column (for tasks we include your assembled bodyText)\r\n//     if (cols.desc) {\r\n//       const bits = [\r\n//         plain(description),\r\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n//       ].filter(Boolean).join(\"\\n\");\r\n//       addText(cols.desc, bits);\r\n//     }\r\n\r\n//     // Dates and grouped PN/SN/DOM example\r\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\r\n//     if (cols.pn) {\r\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\r\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.pn, combo);\r\n//     }\r\n//     if (cols.track) {\r\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.track, t);\r\n//     }\r\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\r\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\r\n\r\n//     if (fields.length) {\r\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id: cfg.id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleCol.colId || null,\r\n//       title_col_source: titleCol.source || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n  }\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) {\r\n    return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n  }\r\n\r\n  // Only the bits we need now (name -> Item/Task cell, and PN/SN)\r\n  const { listKey, title, pn, sn } = req.body || {};\r\n\r\n  // Only list IDs are required to get a visible row in Slack\r\n  const LISTS = {\r\n    tasks:     { id: process.env.SLACK_LIST_TASKS_ID,     titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,     cols: {} },\r\n    shipping:  { id: process.env.SLACK_LIST_SHIPPING_ID,  titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,  cols: { pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL || null } },\r\n    receiving: { id: process.env.SLACK_LIST_RECEIVING_ID, titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null, cols: { pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL || null } },\r\n  };\r\n\r\n  const cfg = LISTS[listKey];\r\n  if (!cfg?.id) {\r\n    return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\r\n  }\r\n\r\n  // Helpers\r\n  async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\r\n    const r = await fetch(`https://slack.com/api/${method}`, {\r\n      method: \"POST\",\r\n      headers: { Authorization: `Bearer ${token}`, ...headers },\r\n      body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\r\n    });\r\n    return r.json();\r\n  }\r\n  const plain   = (v) => (v ?? \"\").toString().trim();\r\n  const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n  const safeTitle =\r\n    plain(title) ||\r\n    joinArr(pn)  || // gives you something non-empty even if name was blank\r\n    \"New Item\";\r\n\r\n  // rich_text helper (matches your working version’s approach)\r\n  const toRichText = (text) => ([{\r\n    type: \"rich_text\",\r\n    elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\r\n  }]);\r\n\r\n  // Auto-discover a text column for the Item/Task name if not provided in env\r\n  async function resolveTitleColumnId(listId, provided) {\r\n    if (provided) return { colId: provided, source: \"env\" };\r\n\r\n    const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n    if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\r\n\r\n    let candidate = null;\r\n    for (const item of probe.items || []) {\r\n      for (const f of item.fields || []) {\r\n        const key = (f.key || \"\").trim().toLowerCase();\r\n        const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\r\n        if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\r\n        if (!candidate && f.column_id && hasText) candidate = f.column_id;\r\n      }\r\n    }\r\n    return { colId: candidate, source: \"auto:first_text\" };\r\n  }\r\n\r\n  try {\r\n    // 1) Create the row ensuring the visible “Item/Task” cell gets the name\r\n    const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\r\n\r\n    const createBody = {\r\n      list_id: cfg.id,\r\n      ...(titleCol.colId\r\n        ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\r\n        : { title: safeTitle } // fallback if we couldn’t resolve a column\r\n      ),\r\n    };\r\n\r\n    const created = await slack(\"slackLists.items.create\", createBody);\r\n    if (!created?.ok) {\r\n      return res.status(200).json({\r\n        ok: false,\r\n        error: created?.error || \"create_failed\",\r\n        mode: \"list\",\r\n        sent: createBody,\r\n      });\r\n    }\r\n\r\n    // 2) (Optional) patch PN/SN if you have that column id\r\n    const fields = [];\r\n    if (cfg.cols?.pn) {\r\n      const pnStr = joinArr(pn);\r\n      const snStr = joinArr(sn);\r\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`]\r\n        .filter(Boolean)\r\n        .join(\"  \");\r\n      if (combo) fields.push({ column_id: cfg.cols.pn, value: { text: combo } });\r\n    }\r\n\r\n    if (fields.length) {\r\n      await slack(\"slackLists.items.update\", {\r\n        list_id: cfg.id,\r\n        item_id: created.item.id,\r\n        fields,\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      ok: true,\r\n      mode: \"list\",\r\n      list_id: cfg.id,\r\n      item_id: created.item.id,\r\n      used_title_col: titleCol.colId || null,\r\n      title_col_source: titleCol.source || null,\r\n      sent_title: safeTitle,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API /slack/add-to-list crashed:\", err);\r\n    return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
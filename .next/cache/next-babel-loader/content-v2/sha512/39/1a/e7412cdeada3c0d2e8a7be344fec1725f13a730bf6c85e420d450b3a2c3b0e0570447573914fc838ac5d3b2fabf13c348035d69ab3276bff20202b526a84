{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\item\\\\[id]\\\\MachineSelectionModal.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Modal, Button, Dropdown, FormControl, Spinner } from \"react-bootstrap\";\nimport { fetchModels } from \"../../../../utils/fetchAssociations\"; // Assuming you already have this\n\nexport default function MachineSelectionModal(_ref) {\n  _s();\n\n  var _this = this;\n\n  var show = _ref.show,\n      handleClose = _ref.handleClose,\n      setMachine = _ref.setMachine;\n\n  var _useState = useState(null),\n      Modality = _useState[0],\n      setModality = _useState[1];\n\n  var _useState2 = useState(null),\n      OEM = _useState2[0],\n      setOEM = _useState2[1];\n\n  var _useState3 = useState([]),\n      models = _useState3[0],\n      setModels = _useState3[1];\n\n  var _useState4 = useState(null),\n      selectedModel = _useState4[0],\n      setSelectedModel = _useState4[1];\n\n  var _useState5 = useState(false),\n      loadingModels = _useState5[0],\n      setLoadingModels = _useState5[1]; // Fetch models when Modality and OEM are selected\n\n\n  useEffect(function () {\n    if (Modality && OEM) {\n      setLoadingModels(true);\n      fetchModels(OEM, Modality).then(function (fetchedModels) {\n        setModels(fetchedModels);\n        setLoadingModels(false);\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching models: \", error);\n        setLoadingModels(false);\n      });\n    }\n  }, [Modality, OEM]);\n\n  var handleModalitySelect = function handleModalitySelect(selectedModality) {\n    setModality(selectedModality);\n    setOEM(null); // Reset OEM and Model when Modality changes\n\n    setSelectedModel(null);\n  };\n\n  var handleOEMSelect = function handleOEMSelect(selectedOEM) {\n    setOEM(selectedOEM);\n    setSelectedModel(null); // Reset Model when OEM changes\n  };\n\n  var handleModelSelect = function handleModelSelect(model) {\n    setSelectedModel(model);\n  };\n\n  var handleSaveSelection = function handleSaveSelection() {\n    if (selectedModel) {\n      // Pass selected machine data back to the parent\n      setMachine({\n        Modality: Modality,\n        OEM: OEM,\n        Model: selectedModel\n      });\n      handleClose(); // Close the modal\n    }\n  };\n\n  return __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Select Machine\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Dropdown, {\n    onSelect: handleModalitySelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, Modality || \"Select Modality\"), __jsx(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"CT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, \"MRI\")))), Modality && __jsx(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, __jsx(Dropdown, {\n    onSelect: handleOEMSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, OEM || \"Select OEM\"), __jsx(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"GE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \"Philips\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"Toshiba\")))), Modality && OEM && __jsx(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(FormControl, {\n    placeholder: \"Search models\",\n    \"aria-label\": \"Search models\",\n    \"aria-describedby\": \"basic-addon2\",\n    onChange: function onChange(e) {\n      return setSelectedModel(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), loadingModels ? __jsx(Spinner, {\n    animation: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }) : models.length > 0 && __jsx(Dropdown, {\n    onSelect: handleModelSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, selectedModel || \"Select Model\"), __jsx(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, models.map(function (model) {\n    return __jsx(Dropdown.Item, {\n      key: model,\n      eventKey: model,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }, model);\n  }))))), __jsx(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Close\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleSaveSelection,\n    disabled: !selectedModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Save Selection\")));\n}\n\n_s(MachineSelectionModal, \"hG4n5MTNQHHfWl+el/Ol8CAgWU8=\");\n\n_c = MachineSelectionModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineSelectionModal\");","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/item/[id]/MachineSelectionModal.js"],"names":["React","useState","useEffect","Modal","Button","Dropdown","FormControl","Spinner","fetchModels","MachineSelectionModal","show","handleClose","setMachine","Modality","setModality","OEM","setOEM","models","setModels","selectedModel","setSelectedModel","loadingModels","setLoadingModels","then","fetchedModels","error","console","handleModalitySelect","selectedModality","handleOEMSelect","selectedOEM","handleModelSelect","model","handleSaveSelection","Model","e","target","value","length","map"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+CC,OAA/C,QAA8D,iBAA9D;AACA,SAASC,WAAT,QAA4B,qCAA5B,C,CAAmE;;AAEnE,eAAe,SAASC,qBAAT,OAAkE;AAAA;;AAAA;;AAAA,MAAjCC,IAAiC,QAAjCA,IAAiC;AAAA,MAA3BC,WAA2B,QAA3BA,WAA2B;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBAC/CX,QAAQ,CAAC,IAAD,CADuC;AAAA,MACxEY,QADwE;AAAA,MAC9DC,WAD8D;;AAAA,mBAEzDb,QAAQ,CAAC,IAAD,CAFiD;AAAA,MAExEc,GAFwE;AAAA,MAEnEC,MAFmE;;AAAA,mBAGnDf,QAAQ,CAAC,EAAD,CAH2C;AAAA,MAGxEgB,MAHwE;AAAA,MAGhEC,SAHgE;;AAAA,mBAIrCjB,QAAQ,CAAC,IAAD,CAJ6B;AAAA,MAIxEkB,aAJwE;AAAA,MAIzDC,gBAJyD;;AAAA,mBAKrCnB,QAAQ,CAAC,KAAD,CAL6B;AAAA,MAKxEoB,aALwE;AAAA,MAKzDC,gBALyD,kBAO/E;;;AACApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,QAAQ,IAAIE,GAAhB,EAAqB;AACnBO,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAd,MAAAA,WAAW,CAACO,GAAD,EAAMF,QAAN,CAAX,CACGU,IADH,CACQ,UAACC,aAAD,EAAmB;AACvBN,QAAAA,SAAS,CAACM,aAAD,CAAT;AACAF,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,OAJH,WAKS,UAACG,KAAD,EAAW;AAChBC,QAAAA,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACAH,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,OARH;AASD;AACF,GAbQ,EAaN,CAACT,QAAD,EAAWE,GAAX,CAbM,CAAT;;AAeA,MAAMY,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,gBAAD,EAAsB;AACjDd,IAAAA,WAAW,CAACc,gBAAD,CAAX;AACAZ,IAAAA,MAAM,CAAC,IAAD,CAAN,CAFiD,CAEnC;;AACdI,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAJD;;AAMA,MAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACvCd,IAAAA,MAAM,CAACc,WAAD,CAAN;AACAV,IAAAA,gBAAgB,CAAC,IAAD,CAAhB,CAFuC,CAEf;AACzB,GAHD;;AAKA,MAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnCZ,IAAAA,gBAAgB,CAACY,KAAD,CAAhB;AACD,GAFD;;AAIA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAId,aAAJ,EAAmB;AACjB;AACAP,MAAAA,UAAU,CAAC;AAAEC,QAAAA,QAAQ,EAARA,QAAF;AAAYE,QAAAA,GAAG,EAAHA,GAAZ;AAAiBmB,QAAAA,KAAK,EAAEf;AAAxB,OAAD,CAAV;AACAR,MAAAA,WAAW,GAHM,CAGF;AAChB;AACF,GAND;;AAQA,SACE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAED,IAAb;AAAmB,IAAA,MAAM,EAAEC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,MAAP;AAAc,IAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,EAIE,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEgB,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,mBAAzB;AAA6C,IAAA,SAAS,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,QAAQ,IAAI,iBADf,CADF,EAIE,MAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE,MAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,CAJF,CADF,CADF,EAaGA,QAAQ,IACP;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEgB,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,mBAAzB;AAA6C,IAAA,SAAS,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,GAAG,IAAI,YADV,CADF,EAIE,MAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE,MAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE,MAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,EAIE,MAAC,QAAD,CAAU,IAAV;AAAe,IAAA,QAAQ,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CAJF,CADF,CAdJ,EA6BGF,QAAQ,IAAIE,GAAZ,IACC;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AACE,IAAA,WAAW,EAAC,eADd;AAEE,kBAAW,eAFb;AAGE,wBAAiB,cAHnB;AAIE,IAAA,QAAQ,EAAE,kBAACoB,CAAD;AAAA,aAAOf,gBAAgB,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAAvB;AAAA,KAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGhB,aAAa,GACZ,MAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADY,GAGZJ,MAAM,CAACqB,MAAP,GAAgB,CAAhB,IACE,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEP,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,mBAAzB;AAA6C,IAAA,SAAS,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,aAAa,IAAI,cADpB,CADF,EAIE,MAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,CAACsB,GAAP,CAAW,UAACP,KAAD;AAAA,WACV,MAAC,QAAD,CAAU,IAAV;AAAe,MAAA,GAAG,EAAEA,KAApB;AAA2B,MAAA,QAAQ,EAAEA,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KADH,CADU;AAAA,GAAX,CADH,CAJF,CAXN,CA9BJ,CAJF,EA8DE,MAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,OAAO,EAAErB,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAIE,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,SADV;AAEE,IAAA,OAAO,EAAEsB,mBAFX;AAGE,IAAA,QAAQ,EAAE,CAACd,aAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CA9DF,CADF;AA6ED;;GA3HuBV,qB;;KAAAA,qB","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Modal, Button, Dropdown, FormControl, Spinner } from \"react-bootstrap\";\nimport { fetchModels } from \"../../../../utils/fetchAssociations\"; // Assuming you already have this\n\nexport default function MachineSelectionModal({ show, handleClose, setMachine }) {\n  const [Modality, setModality] = useState(null);\n  const [OEM, setOEM] = useState(null);\n  const [models, setModels] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [loadingModels, setLoadingModels] = useState(false);\n\n  // Fetch models when Modality and OEM are selected\n  useEffect(() => {\n    if (Modality && OEM) {\n      setLoadingModels(true);\n      fetchModels(OEM, Modality)\n        .then((fetchedModels) => {\n          setModels(fetchedModels);\n          setLoadingModels(false);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching models: \", error);\n          setLoadingModels(false);\n        });\n    }\n  }, [Modality, OEM]);\n\n  const handleModalitySelect = (selectedModality) => {\n    setModality(selectedModality);\n    setOEM(null); // Reset OEM and Model when Modality changes\n    setSelectedModel(null);\n  };\n\n  const handleOEMSelect = (selectedOEM) => {\n    setOEM(selectedOEM);\n    setSelectedModel(null); // Reset Model when OEM changes\n  };\n\n  const handleModelSelect = (model) => {\n    setSelectedModel(model);\n  };\n\n  const handleSaveSelection = () => {\n    if (selectedModel) {\n      // Pass selected machine data back to the parent\n      setMachine({ Modality, OEM, Model: selectedModel });\n      handleClose(); // Close the modal\n    }\n  };\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Select Machine</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"mb-3\">\n          <Dropdown onSelect={handleModalitySelect}>\n            <Dropdown.Toggle variant=\"outline-secondary\" className=\"w-100\">\n              {Modality || \"Select Modality\"}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item eventKey=\"CT\">CT</Dropdown.Item>\n              <Dropdown.Item eventKey=\"MRI\">MRI</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n\n        {Modality && (\n          <div className=\"mb-3\">\n            <Dropdown onSelect={handleOEMSelect}>\n              <Dropdown.Toggle variant=\"outline-secondary\" className=\"w-100\">\n                {OEM || \"Select OEM\"}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item eventKey=\"GE\">GE</Dropdown.Item>\n                <Dropdown.Item eventKey=\"Philips\">Philips</Dropdown.Item>\n                <Dropdown.Item eventKey=\"Siemens\">Siemens</Dropdown.Item>\n                <Dropdown.Item eventKey=\"Toshiba\">Toshiba</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n        )}\n\n        {Modality && OEM && (\n          <div className=\"mb-3\">\n            <FormControl\n              placeholder=\"Search models\"\n              aria-label=\"Search models\"\n              aria-describedby=\"basic-addon2\"\n              onChange={(e) => setSelectedModel(e.target.value)}\n            />\n            {loadingModels ? (\n              <Spinner animation=\"border\" />\n            ) : (\n              models.length > 0 && (\n                <Dropdown onSelect={handleModelSelect}>\n                  <Dropdown.Toggle variant=\"outline-secondary\" className=\"w-100\">\n                    {selectedModel || \"Select Model\"}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {models.map((model) => (\n                      <Dropdown.Item key={model} eventKey={model}>\n                        {model}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              )\n            )}\n          </div>\n        )}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n        <Button\n          variant=\"primary\"\n          onClick={handleSaveSelection}\n          disabled={!selectedModel}\n        >\n          Save Selection\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") {\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//   }\n//   const token = process.env.SLACK_BOT_TOKEN;\n//   if (!token) {\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//   }\n//   // ---- Payload from client (your UI already sends these) ----\n//   const {\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\n//     title,              // the thing we want to show in the Task column\n//     linkUrl, bodyText,\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//     photoUrls = [],\n//   } = req.body || {};\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\n//   const LISTS = {\n//     tasks: {\n//       id: process.env.SLACK_LIST_TASKS_ID,\n//       // OPTIONAL: if you know the \"Task\" column id already\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\n//       cols: {\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\n//       },\n//     },\n//     shipping: {\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\n//       },\n//     },\n//     receiving: {\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\n//       },\n//     },\n//   };\n//   const cfg = LISTS[listKey];\n//   if (!cfg?.id) {\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\n//   }\n//   // ---- Slack helpers ----\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\n//     const r = await fetch(`https://slack.com/api/${method}`, {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\n//     });\n//     return r.json();\n//   }\n//   const plain = (v) => (v ?? \"\").toString().trim();\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//   // Never send an empty title\n//   const safeTitle =\n//     plain(title) ||\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\n//     joinArr(pn) ||\n//     \"New Item\";\n//   // Convert plain text to Slack rich_text for text columns\n//   function toRichText(text) {\n//     return [{\n//       type: \"rich_text\",\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\n//     }];\n//   }\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\n//   async function resolveTitleColumnId(listId, provided) {\n//     if (provided) return { colId: provided, source: \"env\" };\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\n//     let candidate = null;\n//     for (const item of probe.items || []) {\n//       for (const f of item.fields || []) {\n//         const key = (f.key || \"\").trim().toLowerCase();\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\n//       }\n//     }\n//     return { colId: candidate, source: \"auto:first_text\" };\n//   }\n//   try {\n//     // 1) Find the column to write the Task name into; fall back to top-level title\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\n//     const createBody = {\n//       list_id: cfg.id,\n//       ...(titleCol.colId\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\n//     };\n//     const created = await slack(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 2) (Optional) Patch other columns you actually have IDs for\n//     const fields = [];\n//     const cols = cfg.cols || {};\n//     const addText = (colId, text) => {\n//       const t = plain(text);\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\n//     };\n//     // Description / Notes column (for tasks we include your assembled bodyText)\n//     if (cols.desc) {\n//       const bits = [\n//         plain(description),\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\n//       ].filter(Boolean).join(\"\\n\");\n//       addText(cols.desc, bits);\n//     }\n//     // Dates and grouped PN/SN/DOM example\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\n//     if (cols.pn) {\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.pn, combo);\n//     }\n//     if (cols.track) {\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.track, t);\n//     }\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\n//     if (fields.length) {\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id: cfg.id,\n//       item_id: created.item.id,\n//       used_title_col: titleCol.colId || null,\n//       title_col_source: titleCol.source || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    ok: false,\n    error: \"method_not_allowed\"\n  });\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    ok: false,\n    error: \"missing_SLACK_BOT_TOKEN\"\n  });\n\n  try {\n    var _created$item;\n\n    const {\n      listKey,\n      title,\n      pn,\n      sn\n    } = req.body || {}; // --- Only support Shipping for this minimal version ---\n\n    if (listKey !== \"shipping\") {\n      return res.status(400).json({\n        ok: false,\n        error: \"only_shipping_supported_in_min_version\"\n      });\n    } // Required envs for shipping\n\n\n    const LIST_ID = process.env.SLACK_LIST_SHIPPING_ID;\n    const COL_PNSN = process.env.SLACK_LIST_SHIPPING_PNSN_COL; // <- the \"PN and SN and DOM\" column id\n\n    if (!LIST_ID) return res.status(500).json({\n      ok: false,\n      error: \"missing_SLACK_LIST_SHIPPING_ID\"\n    });\n    if (!COL_PNSN) return res.status(500).json({\n      ok: false,\n      error: \"missing_SLACK_LIST_SHIPPING_PNSN_COL\"\n    });\n\n    const toList = v => Array.isArray(v) ? v.filter(Boolean).map(x => `${x}`.trim()) : v ? [`${v}`.trim()] : [];\n\n    const pnList = toList(pn);\n    const snList = toList(sn);\n    const pnStr = pnList.join(\", \");\n    const snStr = snList.join(\", \");\n    const pnsnText = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`].filter(Boolean).join(\"  \"); // Safety: never send empty title to create\n\n    const safeTitle = (title || \"\").toString().trim() || \"Untitled\"; // Create the row and set PN/SN at creation time\n\n    const created = await fetch(\"https://slack.com/api/slackLists.items.create\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        list_id: LIST_ID,\n        title: safeTitle,\n        // shows in the left-most \"item\" column\n        fields: pnsnText ? [{\n          column_id: COL_PNSN,\n          value: {\n            text: pnsnText\n          }\n        }] : [] // PN/SN column\n\n      })\n    }).then(r => r.json());\n\n    if (!(created !== null && created !== void 0 && created.ok)) {\n      console.error(\"slackLists.items.create failed:\", created);\n      return res.status(400).json({\n        ok: false,\n        error: (created === null || created === void 0 ? void 0 : created.error) || \"create_failed\"\n      });\n    }\n\n    return res.status(200).json({\n      ok: true,\n      list_id: LIST_ID,\n      item_id: (_created$item = created.item) === null || _created$item === void 0 ? void 0 : _created$item.id,\n      sent_title: safeTitle,\n      sent_pnsn: pnsnText\n    });\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({\n      ok: false,\n      error: \"server_error\"\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","pn","sn","body","LIST_ID","SLACK_LIST_SHIPPING_ID","COL_PNSN","SLACK_LIST_SHIPPING_PNSN_COL","toList","v","Array","isArray","filter","Boolean","map","x","trim","pnList","snList","pnStr","join","snStr","pnsnText","safeTitle","toString","created","fetch","headers","Authorization","JSON","stringify","list_id","fields","column_id","value","text","then","r","console","item_id","item","id","sent_title","sent_pnsn","e"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") {\r\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//   }\r\n\r\n//   const token = process.env.SLACK_BOT_TOKEN;\r\n//   if (!token) {\r\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//   }\r\n\r\n//   // ---- Payload from client (your UI already sends these) ----\r\n//   const {\r\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\r\n//     title,              // the thing we want to show in the Task column\r\n//     linkUrl, bodyText,\r\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//     photoUrls = [],\r\n//   } = req.body || {};\r\n\r\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\r\n//   const LISTS = {\r\n//     tasks: {\r\n//       id: process.env.SLACK_LIST_TASKS_ID,\r\n//       // OPTIONAL: if you know the \"Task\" column id already\r\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\r\n//       cols: {\r\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\r\n//       },\r\n//     },\r\n//     shipping: {\r\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//     receiving: {\r\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//   };\r\n\r\n//   const cfg = LISTS[listKey];\r\n//   if (!cfg?.id) {\r\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\r\n//   }\r\n\r\n//   // ---- Slack helpers ----\r\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\r\n//     const r = await fetch(`https://slack.com/api/${method}`, {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\r\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\r\n//     });\r\n//     return r.json();\r\n//   }\r\n\r\n//   const plain = (v) => (v ?? \"\").toString().trim();\r\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//   // Never send an empty title\r\n//   const safeTitle =\r\n//     plain(title) ||\r\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\r\n//     joinArr(pn) ||\r\n//     \"New Item\";\r\n\r\n//   // Convert plain text to Slack rich_text for text columns\r\n//   function toRichText(text) {\r\n//     return [{\r\n//       type: \"rich_text\",\r\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\r\n//     }];\r\n//   }\r\n\r\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\r\n//   async function resolveTitleColumnId(listId, provided) {\r\n//     if (provided) return { colId: provided, source: \"env\" };\r\n\r\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\r\n\r\n//     let candidate = null;\r\n//     for (const item of probe.items || []) {\r\n//       for (const f of item.fields || []) {\r\n//         const key = (f.key || \"\").trim().toLowerCase();\r\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\r\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\r\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\r\n//       }\r\n//     }\r\n//     return { colId: candidate, source: \"auto:first_text\" };\r\n//   }\r\n\r\n//   try {\r\n//     // 1) Find the column to write the Task name into; fall back to top-level title\r\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\r\n\r\n//     const createBody = {\r\n//       list_id: cfg.id,\r\n//       ...(titleCol.colId\r\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\r\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\r\n//     };\r\n\r\n//     const created = await slack(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 2) (Optional) Patch other columns you actually have IDs for\r\n//     const fields = [];\r\n//     const cols = cfg.cols || {};\r\n//     const addText = (colId, text) => {\r\n//       const t = plain(text);\r\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\r\n//     };\r\n\r\n//     // Description / Notes column (for tasks we include your assembled bodyText)\r\n//     if (cols.desc) {\r\n//       const bits = [\r\n//         plain(description),\r\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n//       ].filter(Boolean).join(\"\\n\");\r\n//       addText(cols.desc, bits);\r\n//     }\r\n\r\n//     // Dates and grouped PN/SN/DOM example\r\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\r\n//     if (cols.pn) {\r\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\r\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.pn, combo);\r\n//     }\r\n//     if (cols.track) {\r\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.track, t);\r\n//     }\r\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\r\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\r\n\r\n//     if (fields.length) {\r\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id: cfg.id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleCol.colId || null,\r\n//       title_col_source: titleCol.source || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n\r\n  try {\r\n    const { listKey, title, pn, sn } = req.body || {};\r\n\r\n    // --- Only support Shipping for this minimal version ---\r\n    if (listKey !== \"shipping\") {\r\n      return res.status(400).json({ ok: false, error: \"only_shipping_supported_in_min_version\" });\r\n    }\r\n\r\n    // Required envs for shipping\r\n    const LIST_ID = process.env.SLACK_LIST_SHIPPING_ID;\r\n    const COL_PNSN = process.env.SLACK_LIST_SHIPPING_PNSN_COL; // <- the \"PN and SN and DOM\" column id\r\n\r\n    if (!LIST_ID) return res.status(500).json({ ok: false, error: \"missing_SLACK_LIST_SHIPPING_ID\" });\r\n    if (!COL_PNSN) return res.status(500).json({ ok: false, error: \"missing_SLACK_LIST_SHIPPING_PNSN_COL\" });\r\n\r\n    const toList = (v) => (Array.isArray(v) ? v.filter(Boolean).map(x => `${x}`.trim()) : (v ? [`${v}`.trim()] : []));\r\n    const pnList = toList(pn);\r\n    const snList = toList(sn);\r\n\r\n    const pnStr = pnList.join(\", \");\r\n    const snStr = snList.join(\", \");\r\n    const pnsnText = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`].filter(Boolean).join(\"  \");\r\n\r\n    // Safety: never send empty title to create\r\n    const safeTitle = (title || \"\").toString().trim() || \"Untitled\";\r\n\r\n    // Create the row and set PN/SN at creation time\r\n    const created = await fetch(\"https://slack.com/api/slackLists.items.create\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json; charset=utf-8\",\r\n      },\r\n      body: JSON.stringify({\r\n        list_id: LIST_ID,\r\n        title: safeTitle,                                     // shows in the left-most \"item\" column\r\n        fields: pnsnText ? [{ column_id: COL_PNSN, value: { text: pnsnText } }] : [], // PN/SN column\r\n      }),\r\n    }).then(r => r.json());\r\n\r\n    if (!created?.ok) {\r\n      console.error(\"slackLists.items.create failed:\", created);\r\n      return res.status(400).json({ ok: false, error: created?.error || \"create_failed\" });\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, list_id: LIST_ID, item_id: created.item?.id, sent_title: safeTitle, sent_pnsn: pnsnText });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return res.status(500).json({ ok: false, error: \"server_error\" });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
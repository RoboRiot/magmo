{"ast":null,"code":"import _slicedToArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Button, Card, Container, Row, Col, Table } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\"; // Adjust the path as needed\n\nimport LoggedIn from \"../../../LoggedIn\";\n\nvar ClientComponent = function ClientComponent() {\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useState = useState({\n    Company: '',\n    Name: '',\n    Location: '',\n    LastPM: '',\n    NextPM: '',\n    Machines: []\n  }),\n      client = _useState[0],\n      setClient = _useState[1];\n\n  var _useState2 = useState(false),\n      editMode = _useState2[0],\n      setEditMode = _useState2[1];\n\n  var _useState3 = useState([]),\n      machineRefs = _useState3[0],\n      setMachineRefs = _useState3[1];\n\n  useEffect(function () {\n    if (id) {\n      var db = firebase.firestore();\n      db.collection('Client').doc(id).get().then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(doc) {\n          var clientData, machineReferences, machines;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!doc.exists) {\n                    _context2.next = 8;\n                    break;\n                  }\n\n                  clientData = doc.data();\n                  machineReferences = clientData.Machines;\n                  setMachineRefs(machineReferences);\n                  _context2.next = 6;\n                  return Promise.all(machineReferences.map( /*#__PURE__*/function () {\n                    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ref) {\n                      var machineDoc;\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return ref.get();\n\n                            case 2:\n                              machineDoc = _context.sent;\n                              return _context.abrupt(\"return\", machineDoc.exists ? machineDoc.data() : null);\n\n                            case 4:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    return function (_x2) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }()));\n\n                case 6:\n                  machines = _context2.sent;\n                  setClient(_objectSpread(_objectSpread({}, clientData), {}, {\n                    Machines: machines.filter(function (m) {\n                      return m;\n                    })\n                  }));\n\n                case 8:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }())[\"catch\"](function (error) {\n        return console.error('Error fetching client data:', error);\n      });\n    }\n  }, [id]);\n\n  var handleChange = function handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setClient(_objectSpread(_objectSpread({}, client), {}, _defineProperty({}, name, value)));\n  };\n\n  var addMachine = function addMachine() {\n    var newId = 'AIS' + Math.floor(100000 + Math.random() * 900000);\n    router.push(\"../Machines/\".concat(newId));\n  };\n\n  var deleteMachine = function deleteMachine(machineIndex) {\n    var newMachines = client.Machines.filter(function (_, index) {\n      return index !== machineIndex;\n    });\n    var newMachineRefs = machineRefs.filter(function (_, index) {\n      return index !== machineIndex;\n    });\n    setClient(_objectSpread(_objectSpread({}, client), {}, {\n      Machines: newMachines\n    }));\n    setMachineRefs(newMachineRefs);\n  };\n\n  var handleSubmit = function handleSubmit() {\n    var db = firebase.firestore();\n\n    var clientDataToSave = _objectSpread(_objectSpread({}, client), {}, {\n      Machines: machineRefs // Save only the references\n\n    });\n\n    db.collection('Client').doc(id).set(clientDataToSave).then(function () {\n      return console.log('Client updated successfully');\n    })[\"catch\"](function (error) {\n      return console.error('Error updating client:', error);\n    });\n  };\n\n  function convertDateToInputFormat(dateStr) {\n    if (!dateStr) return '';\n\n    var _dateStr$split = dateStr.split('/'),\n        _dateStr$split2 = _slicedToArray(_dateStr$split, 3),\n        month = _dateStr$split2[0],\n        day = _dateStr$split2[1],\n        year = _dateStr$split2[2];\n\n    return \"\".concat(year, \"-\").concat(month.padStart(2, '0'), \"-\").concat(day.padStart(2, '0'));\n  }\n\n  function convertInputDateBack(dateStr) {\n    if (!dateStr) return '';\n\n    var _dateStr$split3 = dateStr.split('-'),\n        _dateStr$split4 = _slicedToArray(_dateStr$split3, 3),\n        year = _dateStr$split4[0],\n        month = _dateStr$split4[1],\n        day = _dateStr$split4[2];\n\n    return \"\".concat(month, \"/\").concat(day, \"/\").concat(year);\n  }\n\n  var handleBack = function handleBack() {\n    router.back();\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Client Details\"), __jsx(Form, null, __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Company\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    name: \"Company\",\n    value: client.Company,\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Name\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    name: \"Name\",\n    value: client.Name,\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Location\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"text\",\n    name: \"Location\",\n    value: client.Location,\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Last PM\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"date\",\n    name: \"LastPM\",\n    value: convertDateToInputFormat(client.LastPM),\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Form.Group, {\n    as: Row,\n    className: \"mb-3\"\n  }, __jsx(Form.Label, {\n    column: true,\n    sm: 3\n  }, \"Next PM\"), __jsx(Col, {\n    sm: 8\n  }, __jsx(Form.Control, {\n    type: \"date\",\n    name: \"NextPM\",\n    value: convertDateToInputFormat(client.NextPM),\n    onChange: handleChange,\n    readOnly: !editMode\n  }))), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Machine Brand\"), __jsx(\"th\", null, \"Machine Model\"), __jsx(\"th\", null, \"Actions\"))), __jsx(\"tbody\", null, client.Machines.map(function (machine, index) {\n    return __jsx(\"tr\", {\n      key: index\n    }, __jsx(\"td\", null, machine.Brand), __jsx(\"td\", null, machine.Model), __jsx(\"td\", null, __jsx(Button, {\n      variant: \"danger\",\n      onClick: function onClick() {\n        return deleteMachine(index);\n      }\n    }, \"Delete\")));\n  }))), __jsx(Row, null, __jsx(Col, {\n    xs: 6,\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: addMachine\n  }, \"Add Machine\")), __jsx(Col, {\n    xs: 6,\n    className: \"mb-2\"\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: function onClick() {\n      return setEditMode(!editMode);\n    }\n  }, editMode ? 'Lock Fields' : 'Edit Fields')), __jsx(Col, {\n    xs: 6\n  }, __jsx(Button, {\n    variant: \"info\",\n    onClick: handleBack\n  }, \"Back\")), __jsx(Col, {\n    xs: 6\n  }, __jsx(Button, {\n    variant: \"success\",\n    onClick: handleSubmit\n  }, \"Submit Changes\")))))))));\n};\n\nexport default ClientComponent;","map":null,"metadata":{},"sourceType":"module"}
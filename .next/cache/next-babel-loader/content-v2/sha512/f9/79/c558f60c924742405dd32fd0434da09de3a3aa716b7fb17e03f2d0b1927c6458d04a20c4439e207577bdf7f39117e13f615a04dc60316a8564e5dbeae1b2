{"ast":null,"code":"import { initializeApp, getApps, cert } from \"firebase-admin/app\";\nimport { getFirestore } from \"firebase-admin/firestore\"; // Import Firebase Functions for config access\n\nlet functions;\n\ntry {\n  functions = require(\"firebase-functions\");\n} catch (error) {\n  // Not running in Firebase Functions environment\n  functions = null;\n} // Initialize Firebase Admin if it hasn't been initialized\n\n\nif (!getApps().length) {\n  var _functions$config$adm, _functions$config$ssr, _functions$config$adm2, _functions$config$ssr2;\n\n  // Only initialize if we have valid credentials\n  const clientEmail = process.env.FIREBASE_CLIENT_EMAIL || process.env.FIREBASE_FUNCTIONS_CLIENT_EMAIL || process.env.FIREBASE_ADMIN_CLIENT_EMAIL || (functions ? ((_functions$config$adm = functions.config().admin) === null || _functions$config$adm === void 0 ? void 0 : _functions$config$adm.client_email) || ((_functions$config$ssr = functions.config().ssr) === null || _functions$config$ssr === void 0 ? void 0 : _functions$config$ssr.firebase_client_email) : undefined);\n  const privateKey = process.env.FIREBASE_PRIVATE_KEY || process.env.FIREBASE_FUNCTIONS_PRIVATE_KEY || process.env.FIREBASE_ADMIN_PRIVATE_KEY || (functions ? ((_functions$config$adm2 = functions.config().admin) === null || _functions$config$adm2 === void 0 ? void 0 : _functions$config$adm2.private_key) || ((_functions$config$ssr2 = functions.config().ssr) === null || _functions$config$ssr2 === void 0 ? void 0 : _functions$config$ssr2.firebase_private_key) : undefined);\n\n  if (clientEmail && privateKey) {\n    try {\n      initializeApp({\n        credential: cert({\n          projectId: \"magmo-ac10c\",\n          clientEmail: clientEmail,\n          privateKey: privateKey.replace(/\\\\n/g, \"\\n\")\n        }),\n        databaseURL: \"https://magmo-ac10c.firebaseio.com\"\n      });\n    } catch (error) {\n      console.warn(\"Firebase Admin initialization failed:\", error.message); // Don't throw error during build process\n    }\n  } else {\n    console.warn(\"Firebase Admin credentials not available, skipping initialization\");\n  }\n} // Only export Firestore if Firebase Admin is properly initialized\n\n\nlet adminDb = null;\n\ntry {\n  if (getApps().length > 0) {\n    adminDb = getFirestore();\n  }\n} catch (error) {\n  console.warn(\"Firebase Admin not available:\", error.message);\n}\n\nexport { adminDb };\nexport default adminDb;","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/context/FirebaseAdmin.js"],"names":["initializeApp","getApps","cert","getFirestore","functions","require","error","length","clientEmail","process","env","FIREBASE_CLIENT_EMAIL","FIREBASE_FUNCTIONS_CLIENT_EMAIL","FIREBASE_ADMIN_CLIENT_EMAIL","config","admin","client_email","ssr","firebase_client_email","undefined","privateKey","FIREBASE_PRIVATE_KEY","FIREBASE_FUNCTIONS_PRIVATE_KEY","FIREBASE_ADMIN_PRIVATE_KEY","private_key","firebase_private_key","credential","projectId","replace","databaseURL","console","warn","message","adminDb"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,OAAxB,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,YAAT,QAA6B,0BAA7B,C,CAEA;;AACA,IAAIC,SAAJ;;AACA,IAAI;AACFA,EAAAA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAnB;AACD,CAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACAF,EAAAA,SAAS,GAAG,IAAZ;AACD,C,CAED;;;AACA,IAAI,CAACH,OAAO,GAAGM,MAAf,EAAuB;AAAA;;AACrB;AACA,QAAMC,WAAW,GACfC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,IACAF,OAAO,CAACC,GAAR,CAAYE,+BADZ,IAEAH,OAAO,CAACC,GAAR,CAAYG,2BAFZ,KAGCT,SAAS,GAAG,0BAAAA,SAAS,CAACU,MAAV,GAAmBC,KAAnB,gFAA0BC,YAA1B,+BAA0CZ,SAAS,CAACU,MAAV,GAAmBG,GAA7D,0DAA0C,sBAAwBC,qBAAlE,CAAH,GAA6FC,SAHvG,CADF;AAMA,QAAMC,UAAU,GACdX,OAAO,CAACC,GAAR,CAAYW,oBAAZ,IACAZ,OAAO,CAACC,GAAR,CAAYY,8BADZ,IAEAb,OAAO,CAACC,GAAR,CAAYa,0BAFZ,KAGCnB,SAAS,GAAG,2BAAAA,SAAS,CAACU,MAAV,GAAmBC,KAAnB,kFAA0BS,WAA1B,gCAAyCpB,SAAS,CAACU,MAAV,GAAmBG,GAA5D,2DAAyC,uBAAwBQ,oBAAjE,CAAH,GAA2FN,SAHrG,CADF;;AAMA,MAAIX,WAAW,IAAIY,UAAnB,EAA+B;AAC7B,QAAI;AACFpB,MAAAA,aAAa,CAAC;AACZ0B,QAAAA,UAAU,EAAExB,IAAI,CAAC;AACfyB,UAAAA,SAAS,EAAE,aADI;AAEfnB,UAAAA,WAAW,EAAEA,WAFE;AAGfY,UAAAA,UAAU,EAAEA,UAAU,CAACQ,OAAX,CAAmB,MAAnB,EAA2B,IAA3B;AAHG,SAAD,CADJ;AAMZC,QAAAA,WAAW,EAAE;AAND,OAAD,CAAb;AAQD,KATD,CASE,OAAOvB,KAAP,EAAc;AACdwB,MAAAA,OAAO,CAACC,IAAR,CAAa,uCAAb,EAAsDzB,KAAK,CAAC0B,OAA5D,EADc,CAEd;AACD;AACF,GAdD,MAcO;AACLF,IAAAA,OAAO,CAACC,IAAR,CACE,mEADF;AAGD;AACF,C,CAED;;;AACA,IAAIE,OAAO,GAAG,IAAd;;AACA,IAAI;AACF,MAAIhC,OAAO,GAAGM,MAAV,GAAmB,CAAvB,EAA0B;AACxB0B,IAAAA,OAAO,GAAG9B,YAAY,EAAtB;AACD;AACF,CAJD,CAIE,OAAOG,KAAP,EAAc;AACdwB,EAAAA,OAAO,CAACC,IAAR,CAAa,+BAAb,EAA8CzB,KAAK,CAAC0B,OAApD;AACD;;AAED,SAASC,OAAT;AACA,eAAeA,OAAf","sourcesContent":["import { initializeApp, getApps, cert } from \"firebase-admin/app\";\nimport { getFirestore } from \"firebase-admin/firestore\";\n\n// Import Firebase Functions for config access\nlet functions;\ntry {\n  functions = require(\"firebase-functions\");\n} catch (error) {\n  // Not running in Firebase Functions environment\n  functions = null;\n}\n\n// Initialize Firebase Admin if it hasn't been initialized\nif (!getApps().length) {\n  // Only initialize if we have valid credentials\n  const clientEmail =\n    process.env.FIREBASE_CLIENT_EMAIL ||\n    process.env.FIREBASE_FUNCTIONS_CLIENT_EMAIL ||\n    process.env.FIREBASE_ADMIN_CLIENT_EMAIL ||\n    (functions ? functions.config().admin?.client_email || functions.config().ssr?.firebase_client_email : undefined);\n\n  const privateKey =\n    process.env.FIREBASE_PRIVATE_KEY ||\n    process.env.FIREBASE_FUNCTIONS_PRIVATE_KEY ||\n    process.env.FIREBASE_ADMIN_PRIVATE_KEY ||\n    (functions ? functions.config().admin?.private_key || functions.config().ssr?.firebase_private_key : undefined);\n\n  if (clientEmail && privateKey) {\n    try {\n      initializeApp({\n        credential: cert({\n          projectId: \"magmo-ac10c\",\n          clientEmail: clientEmail,\n          privateKey: privateKey.replace(/\\\\n/g, \"\\n\"),\n        }),\n        databaseURL: \"https://magmo-ac10c.firebaseio.com\",\n      });\n    } catch (error) {\n      console.warn(\"Firebase Admin initialization failed:\", error.message);\n      // Don't throw error during build process\n    }\n  } else {\n    console.warn(\n      \"Firebase Admin credentials not available, skipping initialization\"\n    );\n  }\n}\n\n// Only export Firestore if Firebase Admin is properly initialized\nlet adminDb = null;\ntry {\n  if (getApps().length > 0) {\n    adminDb = getFirestore();\n  }\n} catch (error) {\n  console.warn(\"Firebase Admin not available:\", error.message);\n}\n\nexport { adminDb };\nexport default adminDb;\n"]},"metadata":{},"sourceType":"module"}
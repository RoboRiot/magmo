{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// inflowAPI.js\nconst BASE_URL = 'https://cloudapi.inflowinventory.com';\nconst COMPANY_ID = 'e28dc600-32a4-4438-a374-68df72caebbd';\nconst API_KEY = '10336E10F0BF982AB7AEB639D2FEB3B2B1C9BD73634D153EA81EE2130A70F9C4-1';\n\nclass InflowAPI {\n  /**\n   * Insert or update a product in inFlow.\n   * @param {{ productId?: string, name: string, description: string, imageUrls?: string[] }} params\n   */\n  static async upsertProduct({\n    productId,\n    name,\n    description,\n    imageUrls = []\n  }) {\n    // Generate a new GUID if none provided\n    const id = productId || crypto.randomUUID();\n    const url = `${BASE_URL}/${COMPANY_ID}/products`; // Build payload and include images in the body\n\n    const payload = _objectSpread({\n      productId: id,\n      name,\n      description\n    }, imageUrls.length > 0 && {\n      images: imageUrls.map(u => ({\n        imageId: crypto.randomUUID(),\n        // must supply a valid imageId\n        originalUrl: u\n      }))\n    });\n\n    const res = await fetch(url, {\n      method: 'PUT',\n      // write requests use PUT :contentReference[oaicite:0]{index=0}\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,\n        // auth header :contentReference[oaicite:1]{index=1}\n        'Content-Type': 'application/json',\n        'Accept': 'application/json;version=2024-10-01'\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!res.ok) {\n      const errText = await res.text();\n      throw new Error(`inFlow API error (${res.status}): ${errText}`);\n    }\n\n    return res.json();\n  }\n\n}\n\nexport default InflowAPI;","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/utils/inflowAPI.js"],"names":["BASE_URL","COMPANY_ID","API_KEY","InflowAPI","upsertProduct","productId","name","description","imageUrls","id","crypto","randomUUID","url","payload","length","images","map","u","imageId","originalUrl","res","fetch","method","headers","body","JSON","stringify","ok","errText","text","Error","status","json"],"mappings":";;;;;;AAAA;AAEA,MAAMA,QAAQ,GAAI,sCAAlB;AACA,MAAMC,UAAU,GAAG,sCAAnB;AACA,MAAMC,OAAO,GAAM,oEAAnB;;AAEA,MAAMC,SAAN,CAAgB;AACd;AACF;AACA;AACA;AACE,eAAaC,aAAb,CAA2B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA,SAAS,GAAG;AAA5C,GAA3B,EAA6E;AAC3E;AACA,UAAMC,EAAE,GAAGJ,SAAS,IAAIK,MAAM,CAACC,UAAP,EAAxB;AAEA,UAAMC,GAAG,GAAI,GAAEZ,QAAS,IAAGC,UAAW,WAAtC,CAJ2E,CAM3E;;AACA,UAAMY,OAAO;AACXR,MAAAA,SAAS,EAAEI,EADA;AAEXH,MAAAA,IAFW;AAGXC,MAAAA;AAHW,OAKPC,SAAS,CAACM,MAAV,GAAmB,CAAnB,IAAwB;AAC1BC,MAAAA,MAAM,EAAEP,SAAS,CAACQ,GAAV,CAAcC,CAAC,KAAK;AAC1BC,QAAAA,OAAO,EAAER,MAAM,CAACC,UAAP,EADiB;AACM;AAChCQ,QAAAA,WAAW,EAAEF;AAFa,OAAL,CAAf;AADkB,KALjB,CAAb;;AAaA,UAAMG,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAC3BU,MAAAA,MAAM,EAAE,KADmB;AACX;AAChBC,MAAAA,OAAO,EAAE;AACP,yBAAkB,UAASrB,OAAQ,EAD5B;AACyC;AAChD,wBAAiB,kBAFV;AAGP,kBAAiB;AAHV,OAFkB;AAO3BsB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeb,OAAf;AAPqB,KAAN,CAAvB;;AAUA,QAAI,CAACO,GAAG,CAACO,EAAT,EAAa;AACX,YAAMC,OAAO,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAtB;AACA,YAAM,IAAIC,KAAJ,CAAW,qBAAoBV,GAAG,CAACW,MAAO,MAAKH,OAAQ,EAAvD,CAAN;AACD;;AAED,WAAOR,GAAG,CAACY,IAAJ,EAAP;AACD;;AAzCa;;AA4ChB,eAAe7B,SAAf","sourcesContent":["// inflowAPI.js\n\nconst BASE_URL  = 'https://cloudapi.inflowinventory.com';\nconst COMPANY_ID = 'e28dc600-32a4-4438-a374-68df72caebbd';\nconst API_KEY    = '10336E10F0BF982AB7AEB639D2FEB3B2B1C9BD73634D153EA81EE2130A70F9C4-1';\n\nclass InflowAPI {\n  /**\n   * Insert or update a product in inFlow.\n   * @param {{ productId?: string, name: string, description: string, imageUrls?: string[] }} params\n   */\n  static async upsertProduct({ productId, name, description, imageUrls = [] }) {\n    // Generate a new GUID if none provided\n    const id = productId || crypto.randomUUID();\n\n    const url = `${BASE_URL}/${COMPANY_ID}/products`;\n\n    // Build payload and include images in the body\n    const payload = {\n      productId: id,\n      name,\n      description,\n      // Only include `images` if we actually have URLs\n      ...(imageUrls.length > 0 && {\n        images: imageUrls.map(u => ({\n          imageId: crypto.randomUUID(),   // must supply a valid imageId\n          originalUrl: u\n        }))\n      })\n    };\n\n    const res = await fetch(url, {\n      method: 'PUT',  // write requests use PUT :contentReference[oaicite:0]{index=0}\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,           // auth header :contentReference[oaicite:1]{index=1}\n        'Content-Type':  'application/json',\n        'Accept':        'application/json;version=2024-10-01'\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!res.ok) {\n      const errText = await res.text();\n      throw new Error(`inFlow API error (${res.status}): ${errText}`);\n    }\n\n    return res.json();\n  }\n}\n\nexport default InflowAPI;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useRouter } from \"next/router\";\nimport dynamic from \"next/dynamic\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Table } from \"react-bootstrap\";\nimport styles from \"../../styles/Home.module.css\"; // import PdfViewer from '../../components/PdfViewer';\n\nimport Link from \"next/link\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport firebase from \"../../context/Firebase\";\nimport LoggedIn from \"./../LoggedIn\";\nvar DynamicPdfViewer = dynamic(function () {\n  return import(\"../../components/pdfViewer\");\n}, {\n  ssr: false // This disables server-side rendering for PdfViewer\n  ,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak(\"../../components/pdfViewer\")];\n    },\n    modules: [\"ServiceDocs\\\\Explorer.js -> \" + \"../../components/pdfViewer\"]\n  }\n});\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n}\n\nfunction LoadingButton(type, name, route) {\n  var _useState = useState({\n    name: false\n  }),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    if (isLoading.name) {\n      simulateNetworkRequest().then(function () {\n        setLoading({\n          name: false\n        });\n      });\n    }\n  }, [isLoading.name]);\n\n  var handleClick = function handleClick() {\n    return setLoading({\n      name: true\n    });\n  };\n\n  return __jsx(\"a\", {\n    href: route,\n    className: \"btn btn-\".concat(type),\n    disabled: isLoading.name,\n    onClick: !isLoading.name ? handleClick : null\n  }, isLoading.name ? \"Loading…\" : name);\n}\n\nvar baseURL = \"\";\nexport default function dashboard() {\n  var router = useRouter();\n\n  var _useAuth = useAuth(),\n      signOut = _useAuth.signOut;\n\n  var labels = [\"folders\", \"←\"];\n  var fLabels = [\"files\"];\n  var storage = firebase.storage().ref();\n  var directoryRef = storage.child(\"/\"); //this is the file selected to open\n\n  var _useState2 = useState(null),\n      selectedFile = _useState2[0],\n      setSelectedFile = _useState2[1]; // const [baseURL, setURL] = useState(\" \");\n\n\n  var _useState3 = useState({}),\n      info = _useState3[0],\n      setInfo = _useState3[1];\n\n  var _useState4 = useState([{}]),\n      items = _useState4[0],\n      setItems = _useState4[1];\n\n  useEffect(function () {\n    fetchData(\"\");\n  }, [router.route]);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n      var fileURLs, fileNames, folderNames, toSend;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fileURLs = [];\n              fileNames = [];\n              folderNames = []; // setURL(baseURL + url)\n\n              baseURL = baseURL + url;\n              console.log(baseURL);\n              directoryRef = storage.child(baseURL);\n\n              if (baseURL.length < 2) {\n                directoryRef = storage.child(\"/\");\n              }\n\n              _context.next = 9;\n              return directoryRef.listAll().then(function (res) {\n                var downloadURLPromises = []; // Get file references and their download URLs\n\n                res.items.forEach(function (fileRef) {\n                  fileNames.push(fileRef.name); // Push the download URL promises into an array\n\n                  downloadURLPromises.push(fileRef.getDownloadURL());\n                }); // Get folder names\n\n                res.prefixes.forEach(function (folderRef) {\n                  folderNames.push(folderRef.name);\n                }); // Wait for all download URLs to be fetched\n\n                return Promise.all(downloadURLPromises);\n              }).then(function (urls) {\n                fileURLs = urls;\n              })[\"catch\"](function (error) {\n                console.log(\"Error getting documents: \", error);\n              });\n\n            case 9:\n              console.log(\"File Names:\", fileNames);\n              console.log(\"File URLs:\", fileURLs);\n              console.log(\"Folder Names:\", folderNames);\n              toSend = {\n                folders: folderNames.map(function (name) {\n                  return {\n                    folder: name\n                  };\n                }),\n                files: fileNames.map(function (name) {\n                  return {\n                    file: name\n                  };\n                })\n              };\n              setInfo(toSend);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); //this is style stuff for the table headers\n\n\n  var _useState5 = useState(null),\n      hoverIndex = _useState5[0],\n      setHoverIndex = _useState5[1];\n\n  var hoverStyle = function hoverStyle(index) {\n    return {\n      backgroundColor: index === 1 && hoverIndex === index ? \"#ddd\" : \"transparent\",\n      textAlign: \"center\",\n      cursor: \"default\"\n    };\n  };\n\n  var goBack = function goBack() {\n    baseURL = baseURL.substring(0, baseURL.lastIndexOf(\"/\"));\n    fetchData(\"\");\n  }; //handle openinng file\n\n\n  var openFile = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(index) {\n      var filePath, url;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              filePath = baseURL + \"/\" + info.files[index].file;\n              console.log(filePath);\n              _context2.next = 4;\n              return getDownloadUrl(filePath);\n\n            case 4:\n              url = _context2.sent;\n\n              if (url) {\n                setSelectedFile(url);\n              } else {\n                console.error(\"Failed to get PDF URL\");\n              } // const fileName = /* extract filename based on index */;\n              // setSelectedFile(fileName);\n\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function openFile(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getDownloadUrl = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filePath) {\n      var fileRef, url;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              fileRef = storage.child(filePath);\n              _context3.prev = 1;\n              _context3.next = 4;\n              return fileRef.getDownloadURL();\n\n            case 4:\n              url = _context3.sent;\n              return _context3.abrupt(\"return\", url);\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error(\"Error fetching the download URL: \", _context3.t0);\n              return _context3.abrupt(\"return\", null);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 8]]);\n    }));\n\n    return function getDownloadUrl(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var closePdfViewer = function closePdfViewer() {\n    setSelectedFile(null);\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Explorer\"), __jsx(\"div\", {\n    className: \"d-grid gap-3\"\n  }, selectedFile ? __jsx(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, __jsx(DynamicPdfViewer, {\n    file: selectedFile\n  }), __jsx(\"button\", {\n    style: {\n      position: \"absolute\",\n      top: 10,\n      right: 10,\n      background: \"white\",\n      border: \"none\",\n      fontSize: \"1.5rem\",\n      cursor: \"pointer\"\n    },\n    onClick: closePdfViewer\n  }, \"x\")) : __jsx(React.Fragment, null, __jsx(Table, {\n    style: {\n      width: \"100%\"\n    },\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, labels.map(function (item, index) {\n    return __jsx(\"th\", {\n      style: hoverStyle(index),\n      onMouseOver: function onMouseOver() {\n        return setHoverIndex(index);\n      },\n      onMouseOut: function onMouseOut() {\n        return setHoverIndex(null);\n      },\n      onClick: function onClick() {\n        return goBack(index);\n      }\n    }, item);\n  }))), __jsx(\"tbody\", null, info.folders && info.folders.map(function (item, index) {\n    return __jsx(\"tr\", {\n      \"class\": \"clickable-row\",\n      key: index\n    }, __jsx(\"td\", {\n      style: {\n        textAlign: \"center\",\n        cursor: \"default\"\n      },\n      onClick: function onClick() {\n        return fetchData(\"/\" + item.folder);\n      }\n    }, item.folder));\n  }))), __jsx(Table, {\n    style: {\n      width: \"100%\"\n    },\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, fLabels.map(function (item, index) {\n    return __jsx(\"th\", null, item);\n  }))), __jsx(\"tbody\", null, info.files && info.files.map(function (item, index) {\n    return __jsx(\"tr\", {\n      \"class\": \"clickable-row\",\n      key: index\n    }, __jsx(\"td\", {\n      style: {\n        textAlign: \"center\",\n        cursor: \"default\"\n      },\n      onClick: function onClick() {\n        return openFile(index);\n      }\n    }, item.file));\n  }))), __jsx(Button, {\n    variant: \"link\",\n    onClick: signOut\n  }, \"Sign out\"))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
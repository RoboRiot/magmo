{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    error: \"Missing SLACK_BOT_TOKEN\"\n  });\n  const {\n    listKey,\n    // \"receiving\" | \"shipping\" | \"tasks\"\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body || {};\n  const LISTS = {\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      cols: {\n        title: process.env.SLACK_LIST_TASKS_TITLE_COL,\n        // REQUIRED to avoid blank items\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL // rich_text\n\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      cols: {\n        title: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\n        // REQUIRED to avoid blank items\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        // date\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        // rich_text\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        // rich_text\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        // rich_text\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        // rich_text\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment\n\n      }\n    },\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      cols: {\n        title: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\n        // REQUIRED to avoid blank items\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        // date\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        // rich_text\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        // rich_text\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        // rich_text\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        // rich_text\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment\n\n      }\n    }\n  };\n  const headersJson = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n  const headersForm = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  };\n\n  const slack = (method, body, headers = headersJson) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers,\n    body\n  }).then(r => r.json());\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n\n  const rt = t => [{\n    type: \"rich_text\",\n    elements: [{\n      type: \"rich_text_section\",\n      elements: [{\n        type: \"text\",\n        text: plain(t)\n      }]\n    }]\n  }]; // --- Upload photos first (to get file IDs) ---\n\n\n  const fileIds = [];\n\n  if (Array.isArray(photoUrls) && photoUrls.length) {\n    for (const url of photoUrls) {\n      var _complete$files, _complete$files$;\n\n      const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n        method: \"POST\",\n        headers: headersForm,\n        body: new URLSearchParams({\n          filename: url.split(\"/\").pop() || \"image.jpg\"\n        })\n      }).then(r => r.json());\n      if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n      try {\n        const img = await fetch(url);\n        const buf = await img.arrayBuffer();\n        await fetch(init.upload_url, {\n          method: \"PUT\",\n          body: Buffer.from(buf)\n        });\n      } catch {\n        /* swallow per-file errors */\n      }\n\n      const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n        files: [{\n          id: init.file_id,\n          title: \"photo\"\n        }]\n      }));\n      if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) fileIds.push(complete.files[0].id);\n    }\n  } // --- Build Slack Lists payload (correct shape) ---\n\n\n  const cfg = LISTS[listKey];\n  if (!(cfg !== null && cfg !== void 0 && cfg.id)) return res.status(400).json({\n    error: \"Unknown listKey (no list configured)\"\n  });\n  const safeId = plain(localSN) || plain(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop());\n  const safeTitle = plain(title) || safeId || joinArr(pn) || \"New item\";\n  const initial_fields = []; // TITLE cell — this is what prevents blank rows\n\n  if (cfg.cols.title) initial_fields.push({\n    column_id: cfg.cols.title,\n    rich_text: rt(safeTitle)\n  }); // Description cell (rich_text). For tasks, prefer bodyText if description is empty.\n\n  if (cfg.cols.desc) {\n    const descText = listKey === \"tasks\" ? plain(description) || plain(bodyText) : plain(description);\n    const combined = [descText, plain(linkUrl) && `Open: ${plain(linkUrl)}`].filter(Boolean).join(\"\\n\");\n    if (combined) initial_fields.push({\n      column_id: cfg.cols.desc,\n      rich_text: rt(combined)\n    });\n  } // Date cell\n\n\n  if (cfg.cols.date && plain(date)) {\n    initial_fields.push({\n      column_id: cfg.cols.date,\n      date: [plain(date)]\n    }); // YYYY-MM-DD\n  } // PN/SN/DOM combined into a text column\n\n\n  if (cfg.cols.pn && (pn || sn || dom)) {\n    const pnStr = joinArr(pn);\n    const snStr = joinArr(sn);\n    const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`].filter(Boolean).join(\"  \");\n    if (combo) initial_fields.push({\n      column_id: cfg.cols.pn,\n      rich_text: rt(combo)\n    });\n  } // Tracking / PO\n\n\n  if (cfg.cols.track && (trackingNumber || poNumber)) {\n    const combo = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`].filter(Boolean).join(\"  \");\n    if (combo) initial_fields.push({\n      column_id: cfg.cols.track,\n      rich_text: rt(combo)\n    });\n  }\n\n  if (cfg.cols.wo && plain(workOrder)) initial_fields.push({\n    column_id: cfg.cols.wo,\n    rich_text: rt(`WO: ${plain(workOrder)}`)\n  });\n  if (cfg.cols.lsn && plain(localSN)) initial_fields.push({\n    column_id: cfg.cols.lsn,\n    rich_text: rt(plain(localSN))\n  });\n\n  if (cfg.cols.photos && fileIds.length) {\n    initial_fields.push({\n      column_id: cfg.cols.photos,\n      attachment: fileIds\n    });\n  } // Safety: ensure the title cell exists\n\n\n  if (!initial_fields.length) {\n    return res.status(400).json({\n      error: \"No columns configured for this list; at minimum set the *_TITLE_COL env var.\"\n    });\n  }\n\n  const created = await slack(\"slackLists.items.create\", JSON.stringify({\n    list_id: cfg.id,\n    initial_fields\n  }));\n\n  if (!(created !== null && created !== void 0 && created.ok)) {\n    // Common cause: wrong shape/keys -> Slack returns invalid_arguments\n    return res.status(400).json({\n      error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n      raw: created\n    });\n  }\n\n  return res.status(200).json({\n    ok: true,\n    item: created.item\n  });\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","tasks","id","SLACK_LIST_TASKS_ID","cols","SLACK_LIST_TASKS_TITLE_COL","desc","SLACK_LIST_TASKS_DESCRIPTION_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_TITLE_COL","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","track","SLACK_LIST_SHIPPING_TRACKING_COL","wo","SLACK_LIST_SHIPPING_WO_COL","lsn","SLACK_LIST_SHIPPING_LOCALSN_COL","photos","SLACK_LIST_SHIPPING_PHOTOS_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","SLACK_LIST_RECEIVING_TRACKING_COL","SLACK_LIST_RECEIVING_WO_COL","SLACK_LIST_RECEIVING_LOCALSN_COL","SLACK_LIST_RECEIVING_PHOTOS_COL","headersJson","Authorization","headersForm","slack","headers","fetch","then","r","plain","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","rt","t","type","elements","text","fileIds","length","url","init","URLSearchParams","filename","split","pop","ok","upload_url","img","buf","arrayBuffer","Buffer","from","complete","JSON","stringify","files","file_id","push","cfg","safeId","safeTitle","initial_fields","column_id","rich_text","descText","combined","pnStr","snStr","combo","attachment","created","list_id","raw","item"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n  const {\r\n    listKey,                 // \"receiving\" | \"shipping\" | \"tasks\"\r\n    title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body || {};\r\n\r\n  const LISTS = {\r\n    tasks: {\r\n      id: process.env.SLACK_LIST_TASKS_ID,\r\n      cols: {\r\n        title: process.env.SLACK_LIST_TASKS_TITLE_COL,        // REQUIRED to avoid blank items\r\n        desc:  process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,   // rich_text\r\n      },\r\n    },\r\n    shipping: {\r\n      id: process.env.SLACK_LIST_SHIPPING_ID,\r\n      cols: {\r\n        title:  process.env.SLACK_LIST_SHIPPING_TITLE_COL,     // REQUIRED to avoid blank items\r\n        desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,      // date\r\n        pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,      // rich_text\r\n        track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,  // rich_text\r\n        wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,        // rich_text\r\n        lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,   // rich_text\r\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,    // attachment\r\n      },\r\n    },\r\n    receiving: {\r\n      id: process.env.SLACK_LIST_RECEIVING_ID,\r\n      cols: {\r\n        title:  process.env.SLACK_LIST_RECEIVING_TITLE_COL,    // REQUIRED to avoid blank items\r\n        desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,     // date\r\n        pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,     // rich_text\r\n        track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL, // rich_text\r\n        wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,       // rich_text\r\n        lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,  // rich_text\r\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,   // attachment\r\n      },\r\n    },\r\n  };\r\n\r\n  const headersJson = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n  };\r\n  const headersForm = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n  };\r\n  const slack = (method, body, headers = headersJson) =>\r\n    fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body }).then(r => r.json());\r\n\r\n  const plain = v => (v ?? \"\").toString().trim();\r\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n  const rt = (t) => [{\r\n    type: \"rich_text\",\r\n    elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text: plain(t) }]}],\r\n  }];\r\n\r\n  // --- Upload photos first (to get file IDs) ---\r\n  const fileIds = [];\r\n  if (Array.isArray(photoUrls) && photoUrls.length) {\r\n    for (const url of photoUrls) {\r\n      const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n        method: \"POST\",\r\n        headers: headersForm,\r\n        body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n      }).then(r => r.json());\r\n\r\n      if (!init?.ok || !init?.upload_url) continue;\r\n\r\n      try {\r\n        const img = await fetch(url);\r\n        const buf = await img.arrayBuffer();\r\n        await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n      } catch { /* swallow per-file errors */ }\r\n\r\n      const complete = await slack(\r\n        \"files.completeUploadExternal\",\r\n        JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n      );\r\n      if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n    }\r\n  }\r\n\r\n  // --- Build Slack Lists payload (correct shape) ---\r\n  const cfg = LISTS[listKey];\r\n  if (!cfg?.id) return res.status(400).json({ error: \"Unknown listKey (no list configured)\" });\r\n\r\n  const safeId = plain(localSN) || plain(linkUrl?.split(\"/\").pop());\r\n  const safeTitle =\r\n    plain(title) ||\r\n    safeId ||\r\n    joinArr(pn) ||\r\n    \"New item\";\r\n\r\n  const initial_fields = [];\r\n\r\n  // TITLE cell — this is what prevents blank rows\r\n  if (cfg.cols.title) initial_fields.push({ column_id: cfg.cols.title, rich_text: rt(safeTitle) });\r\n\r\n  // Description cell (rich_text). For tasks, prefer bodyText if description is empty.\r\n  if (cfg.cols.desc) {\r\n    const descText = listKey === \"tasks\" ? (plain(description) || plain(bodyText)) : plain(description);\r\n    const combined = [descText, plain(linkUrl) && `Open: ${plain(linkUrl)}`].filter(Boolean).join(\"\\n\");\r\n    if (combined) initial_fields.push({ column_id: cfg.cols.desc, rich_text: rt(combined) });\r\n  }\r\n\r\n  // Date cell\r\n  if (cfg.cols.date && plain(date)) {\r\n    initial_fields.push({ column_id: cfg.cols.date, date: [ plain(date) ] }); // YYYY-MM-DD\r\n  }\r\n\r\n  // PN/SN/DOM combined into a text column\r\n  if (cfg.cols.pn && (pn || sn || dom)) {\r\n    const pnStr = joinArr(pn);\r\n    const snStr = joinArr(sn);\r\n    const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n      .filter(Boolean).join(\"  \");\r\n    if (combo) initial_fields.push({ column_id: cfg.cols.pn, rich_text: rt(combo) });\r\n  }\r\n\r\n  // Tracking / PO\r\n  if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n    const combo = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n      .filter(Boolean).join(\"  \");\r\n    if (combo) initial_fields.push({ column_id: cfg.cols.track, rich_text: rt(combo) });\r\n  }\r\n\r\n  if (cfg.cols.wo  && plain(workOrder)) initial_fields.push({ column_id: cfg.cols.wo,  rich_text: rt(`WO: ${plain(workOrder)}`) });\r\n  if (cfg.cols.lsn && plain(localSN))   initial_fields.push({ column_id: cfg.cols.lsn, rich_text: rt(plain(localSN)) });\r\n\r\n  if (cfg.cols.photos && fileIds.length) {\r\n    initial_fields.push({ column_id: cfg.cols.photos, attachment: fileIds });\r\n  }\r\n\r\n  // Safety: ensure the title cell exists\r\n  if (!initial_fields.length) {\r\n    return res.status(400).json({ error: \"No columns configured for this list; at minimum set the *_TITLE_COL env var.\" });\r\n  }\r\n\r\n  const created = await slack(\"slackLists.items.create\", JSON.stringify({\r\n    list_id: cfg.id,\r\n    initial_fields,\r\n  }));\r\n\r\n  if (!created?.ok) {\r\n    // Common cause: wrong shape/keys -> Slack returns invalid_arguments\r\n    return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n  }\r\n\r\n  return res.status(200).json({ ok: true, item: created.item });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
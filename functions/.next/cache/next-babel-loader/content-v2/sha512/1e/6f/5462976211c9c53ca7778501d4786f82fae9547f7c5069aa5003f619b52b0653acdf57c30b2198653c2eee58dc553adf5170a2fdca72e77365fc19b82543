{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useRouter } from \"next/router\";\nimport { Form, Button, Card, Container } from \"react-bootstrap\"; // import BarcodeScannerComponent from \"react-qr-barcode-scanner\";\n\nimport dynamic from 'next/dynamic'; // This will only load the component on the client-side.\n\nvar BarcodeScannerComponent = dynamic(function () {\n  return import('react-qr-barcode-scanner');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('react-qr-barcode-scanner')];\n    },\n    modules: [\"Warehousedb\\\\WarehouseScan.js -> \" + 'react-qr-barcode-scanner']\n  }\n});\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n}\n\nfunction LoadingButton(type, name, route) {\n  var _useState = useState({\n    name: false\n  }),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    if (isLoading.name) {\n      simulateNetworkRequest().then(function () {\n        setLoading({\n          name: false\n        });\n      });\n    }\n  }, [isLoading.name]);\n\n  var handleClick = function handleClick() {\n    return setLoading({\n      name: true\n    });\n  };\n\n  return __jsx(Link, {\n    href: \"/\".concat(route)\n  }, __jsx(\"a\", {\n    className: \"btn btn-\".concat(type),\n    disabled: isLoading.name,\n    onClick: !isLoading.name ? handleClick : null\n  }, isLoading.name ? \"Loadingâ€¦\" : name));\n}\n\nexport default function dashboard() {\n  var _useAuth = useAuth(),\n      signOut = _useAuth.signOut;\n\n  var _useState2 = useState(\"No result\"),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(\"environment\"),\n      cameraFacing = _useState3[0],\n      setCameraFacing = _useState3[1]; // default to back camera\n\n\n  var _useState4 = useState(true),\n      scanning = _useState4[0],\n      setScanning = _useState4[1];\n\n  var router = useRouter();\n\n  var readQR = function readQR(qrData) {\n    console.log(\"this is the qr data: \" + qrData);\n    router.push(\"../NewSearch/item/\" + qrData);\n    return qrData;\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Main Menu\"), __jsx(\"div\", {\n    className: \"d-grid gap-3\"\n  }, __jsx(BarcodeScannerComponent, {\n    width: \"100%\",\n    height: 300,\n    onUpdate: function onUpdate(err, result) {\n      if (result && result.text !== \"Not%20Found\") {\n        setData(result.text);\n        setScanning(false); // Stop scanning once a valid barcode is found\n      }\n    },\n    facingMode: cameraFacing // Add this to control the camera\n\n  }), __jsx(Button, {\n    variant: data === \"No result\" ? \"danger\" : \"success\",\n    disabled: data === \"No result\"\n  }, data === \"No result\" ? \"No code located\" : \"Code located! \" + readQR(data)), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setCameraFacing(function (prev) {\n        return prev === \"environment\" ? \"user\" : \"environment\";\n      });\n    }\n  }, \"Flip Camera\"), LoadingButton(\"primary\", \"Back\", \"Warehousedb/WarehouseSelect\"), __jsx(Button, {\n    variant: \"link\",\n    onClick: signOut\n  }, \"Sign out\")))))));\n}","map":null,"metadata":{},"sourceType":"module"}
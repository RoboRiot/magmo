{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport LoggedIn from \"../../LoggedIn\";\nimport firebase from \"../../../context/Firebase\";\nimport { Table, Form, Button, Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Link from \"next/link\";\nexport default function InventoryManage() {\n  const {\n    0: items,\n    1: setItems\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: selectedIds,\n    1: setSelectedIds\n  } = useState(new Set());\n  const {\n    0: filters,\n    1: setFilters\n  } = useState({\n    region: \"\",\n    section: \"\",\n    bin: \"\",\n    pallet: \"\",\n    localSN: \"\"\n  });\n  const {\n    0: bulkField,\n    1: setBulkField\n  } = useState(\"\");\n  const {\n    0: bulkValue,\n    1: setBulkValue\n  } = useState(\"\"); // ---- load data once ----\n\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection(\"Test\").get().then(snap => {\n      const data = snap.docs.map(d => {\n        var _loc$region$toString, _loc$region, _loc$section$toString, _loc$section, _loc$bin$toString, _loc$bin, _loc$pallet$toString, _loc$pallet;\n\n        const doc = d.data();\n        const loc = doc.newLocalCurrent || {};\n        return {\n          id: d.id,\n          name: doc.name || \"\",\n          pn: doc.pn || \"\",\n          sn: doc.sn || \"\",\n          localSN: doc.localSN || \"\",\n          region: (_loc$region$toString = (_loc$region = loc.region) === null || _loc$region === void 0 ? void 0 : _loc$region.toString()) !== null && _loc$region$toString !== void 0 ? _loc$region$toString : \"\",\n          section: (_loc$section$toString = (_loc$section = loc.section) === null || _loc$section === void 0 ? void 0 : _loc$section.toString()) !== null && _loc$section$toString !== void 0 ? _loc$section$toString : \"\",\n          bin: (_loc$bin$toString = (_loc$bin = loc.bin) === null || _loc$bin === void 0 ? void 0 : _loc$bin.toString()) !== null && _loc$bin$toString !== void 0 ? _loc$bin$toString : \"\",\n          pallet: (_loc$pallet$toString = (_loc$pallet = loc.pallet) === null || _loc$pallet === void 0 ? void 0 : _loc$pallet.toString()) !== null && _loc$pallet$toString !== void 0 ? _loc$pallet$toString : \"\"\n        };\n      });\n      setItems(data);\n    }).finally(() => setLoading(false));\n  }, []); // ---- derive distinct filter options ----\n\n  const distinct = arr => Array.from(new Set(arr.filter(v => v))).sort();\n\n  const regions = useMemo(() => distinct(items.map(i => i.region)), [items]);\n  const sections = useMemo(() => distinct(items.map(i => i.section)), [items]);\n  const bins = useMemo(() => distinct(items.map(i => i.bin)), [items]);\n  const pallets = useMemo(() => distinct(items.map(i => i.pallet)), [items]); // ---- toggles ----\n\n  const toggleSelect = id => {\n    setSelectedIds(prev => {\n      const next = new Set(prev);\n      next.has(id) ? next.delete(id) : next.add(id);\n      return next;\n    });\n  };\n\n  const toggleSelectAll = () => {\n    const visibleIds = filteredItems.map(i => i.id);\n    setSelectedIds(prev => {\n      const next = new Set(prev);\n\n      if (visibleIds.every(id => next.has(id))) {\n        visibleIds.forEach(id => next.delete(id));\n      } else {\n        visibleIds.forEach(id => next.add(id));\n      }\n\n      return next;\n    });\n  }; // ---- filtered list ----\n\n\n  const filteredItems = items.filter(it => [\"region\", \"section\", \"bin\", \"pallet\", \"localSN\"].every(f => !filters[f] || it[f] === filters[f])); // ---- bulk update handler ----\n\n  const applyBulkUpdate = () => {\n    if (!bulkField || !bulkValue) return;\n    const db = firebase.firestore();\n    const updates = Array.from(selectedIds).map(id => {\n      const orig = items.find(i => i.id === id) || {};\n      const newRegion = bulkField === \"region\" ? bulkValue : orig.region;\n      const newSection = bulkField === \"section\" ? bulkValue : orig.section;\n      const newBin = bulkField === \"bin\" ? bulkValue : orig.bin;\n      const newPallet = bulkField === \"pallet\" ? bulkValue : orig.pallet;\n      const parts = [];\n      if (newRegion) parts.push(newRegion);\n      if (newSection) parts.push(newSection);\n      if (newBin) parts.push(`B${newBin}`);\n      if (newPallet) parts.push(`P${newPallet}`);\n      const newLocString = parts.join(\"-\");\n      const updateObj = {\n        region: newRegion,\n        section: newSection,\n        bin: newBin,\n        pallet: newPallet,\n        localLocCurrent: newLocString,\n        newLocalCurrent: {\n          region: newRegion,\n          section: newSection,\n          bin: newBin,\n          pallet: newPallet\n        }\n      };\n      return db.collection(\"Test\").doc(id).update(updateObj).then(() => {\n        setItems(prev => prev.map(item => item.id === id ? _objectSpread(_objectSpread({}, item), {}, {\n          region: newRegion,\n          section: newSection,\n          bin: newBin,\n          pallet: newPallet\n        }) : item));\n      });\n    });\n    Promise.all(updates).then(() => {\n      setSelectedIds(new Set());\n      setBulkField(\"\");\n      setBulkValue(\"\");\n    });\n  }; // ---- loading state ----\n\n\n  if (loading) {\n    return __jsx(Container, {\n      className: \"py-5 text-center\"\n    }, __jsx(Spinner, {\n      animation: \"border\"\n    }));\n  }\n\n  function LoadingButton({\n    type,\n    name,\n    route\n  }) {\n    const {\n      0: isLoading,\n      1: setLoading\n    } = useState(false);\n    useEffect(() => {\n      if (isLoading) {\n        simulateNetworkRequest().then(() => setLoading(false));\n      }\n    }, [isLoading]);\n\n    const handleClick = () => setLoading(true);\n\n    return __jsx(Link, {\n      href: `/${route}`\n    }, __jsx(\"a\", {\n      className: `btn btn-${type}`,\n      disabled: isLoading,\n      onClick: !isLoading ? handleClick : null\n    }, isLoading ? \"Loadingâ€¦\" : name));\n  }\n\n  function simulateNetworkRequest() {\n    return new Promise(resolve => setTimeout(resolve, 2000));\n  }\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"py-4\"\n  }, __jsx(\"h2\", null, \"Inventory Management\"), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"Warehousedb/WarehouseSelect\"\n  }), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Label, null, \"Region\"), __jsx(Form.Select, {\n    value: filters.region,\n    onChange: e => {\n      const v = e.target.value;\n      setFilters(p => _objectSpread(_objectSpread({}, p), {}, {\n        region: v\n      }));\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All regions\"), regions.map(r => __jsx(\"option\", {\n    key: r,\n    value: r\n  }, r)))), __jsx(Col, null, __jsx(Form.Label, null, \"Section\"), __jsx(Form.Select, {\n    value: filters.section,\n    onChange: e => {\n      const v = e.target.value;\n      setFilters(p => _objectSpread(_objectSpread({}, p), {}, {\n        section: v\n      }));\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All sections\"), sections.map(s => __jsx(\"option\", {\n    key: s,\n    value: s\n  }, s)))), __jsx(Col, null, __jsx(Form.Label, null, \"Bin\"), __jsx(Form.Select, {\n    value: filters.bin,\n    onChange: e => {\n      const v = e.target.value;\n      setFilters(p => _objectSpread(_objectSpread({}, p), {}, {\n        bin: v\n      }));\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All bins\"), bins.map(b => __jsx(\"option\", {\n    key: b,\n    value: b\n  }, b)))), __jsx(Col, null, __jsx(Form.Label, null, \"Pallet\"), __jsx(Form.Select, {\n    value: filters.pallet,\n    onChange: e => {\n      const v = e.target.value;\n      setFilters(p => _objectSpread(_objectSpread({}, p), {}, {\n        pallet: v\n      }));\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All pallets\"), pallets.map(p => __jsx(\"option\", {\n    key: p,\n    value: p\n  }, p)))), __jsx(Col, null, __jsx(Form.Label, null, \"Local SN\"), __jsx(Form.Control, {\n    placeholder: \"Search SN\",\n    value: filters.localSN,\n    onChange: e => {\n      const v = e.target.value;\n      setFilters(p => _objectSpread(_objectSpread({}, p), {}, {\n        localSN: v\n      }));\n    }\n  }))), __jsx(\"div\", {\n    className: \"d-flex mb-2 align-items-center\"\n  }, __jsx(Form.Check, {\n    type: \"checkbox\",\n    label: \"Select All\",\n    onChange: toggleSelectAll,\n    checked: filteredItems.length > 0 && filteredItems.every(i => selectedIds.has(i.id))\n  }), selectedIds.size > 0 && __jsx(React.Fragment, null, __jsx(Form.Select, {\n    className: \"mx-2\",\n    value: bulkField,\n    onChange: e => setBulkField(e.target.value),\n    style: {\n      width: \"150px\"\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Change\\u2026\"), __jsx(\"option\", {\n    value: \"region\"\n  }, \"Region\"), __jsx(\"option\", {\n    value: \"section\"\n  }, \"Section\"), __jsx(\"option\", {\n    value: \"bin\"\n  }, \"Bin\"), __jsx(\"option\", {\n    value: \"pallet\"\n  }, \"Pallet\")), __jsx(Form.Control, {\n    style: {\n      width: \"100px\"\n    },\n    placeholder: \"New value\",\n    value: bulkValue,\n    onChange: e => setBulkValue(e.target.value)\n  }), __jsx(Button, {\n    className: \"ms-2\",\n    onClick: applyBulkUpdate\n  }, \"Apply\"))), __jsx(Table, {\n    bordered: true,\n    hover: true,\n    responsive: true\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null), __jsx(\"th\", null, \"Name\"), __jsx(\"th\", null, \"PN\"), __jsx(\"th\", null, \"SN\"), __jsx(\"th\", null, \"LocalSN\"), __jsx(\"th\", null, \"Region\"), __jsx(\"th\", null, \"Section\"), __jsx(\"th\", null, \"Bin\"), __jsx(\"th\", null, \"Pallet\"))), __jsx(\"tbody\", null, filteredItems.map(it => __jsx(\"tr\", {\n    key: it.id\n  }, __jsx(\"td\", null, __jsx(Form.Check, {\n    type: \"checkbox\",\n    checked: selectedIds.has(it.id),\n    onChange: () => toggleSelect(it.id)\n  })), __jsx(\"td\", null, it.name), __jsx(\"td\", null, it.pn), __jsx(\"td\", null, it.sn), __jsx(\"td\", null, it.localSN), __jsx(\"td\", null, it.region), __jsx(\"td\", null, it.section), __jsx(\"td\", null, it.bin), __jsx(\"td\", null, it.pallet)))))));\n}","map":null,"metadata":{},"sourceType":"module"}
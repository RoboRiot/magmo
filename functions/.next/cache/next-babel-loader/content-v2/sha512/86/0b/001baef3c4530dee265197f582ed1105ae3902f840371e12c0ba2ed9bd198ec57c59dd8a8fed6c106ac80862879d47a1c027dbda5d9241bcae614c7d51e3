{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Table, NavDropdown, FormControl } from \"react-bootstrap\";\nimport styles from \"../../styles/Home.module.css\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport firebase from \"../../context/Firebase\"; // import { useCollection } from \"react-firebase-hooks/firebase\";\n\nimport LoggedIn from \"../LoggedIn\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton(type, name, route) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState({\n    name: false\n  });\n  useEffect(() => {\n    if (isLoading.name) {\n      simulateNetworkRequest().then(() => {\n        setLoading({\n          name: false\n        });\n      });\n    }\n  }, [isLoading.name]);\n\n  const handleClick = () => setLoading({\n    name: true\n  });\n\n  return (// <a\n    //   class={\"btn btn-\" + type}\n    //   variant={type}\n    //   href={\"/\" + route}\n    //   disabled={isLoading.name}\n    //   onClick={!isLoading.name ? handleClick : null}\n    // >\n    //   {isLoading.name ? \"Loading…\" : name}\n    // </a>\n    __jsx(Link, {\n      href: `/${route}`\n    }, __jsx(\"a\", {\n      className: `btn btn-${type}`,\n      disabled: isLoading.name,\n      onClick: !isLoading.name ? handleClick : null\n    }, isLoading.name ? \"Loading…\" : name))\n  );\n}\n\nexport default function WarehouseList() {\n  const {\n    signOut\n  } = useAuth([]);\n  const {\n    0: info,\n    1: setInfo\n  } = useState([]);\n  const {\n    0: backupInfo,\n    1: setBackupInfo\n  } = useState([]);\n  const {\n    0: ids,\n    1: setID\n  } = useState([]);\n  const db = firebase.firestore();\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const {\n    0: dItem,\n    1: setDItem\n  } = useState(); //search features//////\n\n  const {\n    0: select,\n    1: setSelect\n  } = useState(\"Name\");\n  const {\n    0: showList,\n    1: setShowList\n  } = useState(false);\n  const {\n    0: showListSearch,\n    1: setShowListSearch\n  } = useState(\"text\");\n  const {\n    0: search,\n    1: setSearch\n  } = useState(); //This is getting input from warehouse select\n  //needs to reload page\n\n  const router = useRouter();\n  useEffect(() => {\n    if (backupInfo.length > 0 && search) {\n      // Call the function here\n      collectDataFromSearch();\n    }\n  }, [backupInfo]);\n\n  const collectDataFromSearch = () => {\n    // useEffect(() => {\n    // checking if we have the query params and do something with it\n    if (router.query.inputText && router.query.selectedType) {\n      // const input = router.query.inputText;\n      // const type = router.query.selectedType;\n      // // window.location.reload();\n      // // Now you have the input and type, you can do whatever you want with it\n      // console.log(input, type);\n      // setSelect(type);\n      // setSearch(input);\n      searchFilter();\n    } else {\n      console.log(\"no input from previous page\");\n    } // }, [router.query]);\n\n  }; //dropdown and search management\n\n\n  const showDropdown = e => {\n    setShowList(!show);\n  };\n\n  const hideDropdown = e => {\n    setShowList(false);\n  };\n\n  const searchChangeHandler = event => {\n    setSearch(event.target.value);\n  };\n\n  function searchFilter() {\n    var temp = [];\n    console.log(\"entered search filter\");\n    console.log(backupInfo);\n    backupInfo.map(item => {\n      console.log(select);\n      console.log(search);\n\n      if (select == \"Name\") {\n        if (item.name.toLowerCase().indexOf(search.toLowerCase()) > -1) {\n          temp.push(item);\n          console.log(\"enter Name\");\n        }\n      }\n\n      if (select == \"Date\") {\n        const dateComponents = item.date.split(\"/\");\n        const paddedMonth = String(dateComponents[0]).padStart(2, \"0\"); // Ensure month has 2 digits\n\n        const paddedDay = String(dateComponents[1]).padStart(2, \"0\"); // Ensure day has 2 digits\n\n        const reformattedItemDate = `${dateComponents[2]}-${paddedMonth}-${paddedDay}`; // Convert to \"YYYY-MM-DD\"\n\n        console.log(reformattedItemDate, search);\n\n        if (reformattedItemDate === search) {\n          temp.push(item);\n          console.log(\"enterDate\");\n        }\n      }\n\n      if (select == \"Work Order\") {\n        // WO for Work Order or whatever it stands for in your context\n        if (Number(item.wo) === Number(search)) {\n          temp.push(item);\n          console.log(\"enterWO\");\n        }\n      }\n\n      if (select == \"Product Number\") {\n        // WO for Work Order or whatever it stands for in your context\n        if (Number(item.pn) === Number(search)) {\n          temp.push(item);\n          console.log(\"enterWO\");\n        }\n      }\n\n      if (select == \"Description\") {\n        if (item.desc.toLowerCase().indexOf(search.toLowerCase()) > -1) {\n          temp.push(item);\n          console.log(\"enterDescription\");\n        }\n      } // if (select == \"Number\") {\n      //   const numberFromItem = item.split(\",\")[1].split(\":\")[1];\n      //   if (Number(numberFromItem) === Number(search)) {\n      //     temp.push(item);\n      //     console.log(\"enter Number\");\n      //   }\n      // }\n\n    });\n    console.log(temp);\n    setLabels(labelBase);\n    setSortCheck(sortCheckBase);\n    setInfo(temp);\n  } //////sorting items//////\n\n\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  const sortCheckBase = [false, false, false, false, false];\n  const {\n    0: labels,\n    1: setLabels\n  } = useState(labelBase);\n  const {\n    0: sortCheck,\n    1: setSortCheck\n  } = useState(sortCheckBase);\n  const hold = \"↓↑\";\n\n  function sortCheckAll(pos) {\n    if (!sortCheck[pos]) {\n      info.sort((a, b) => {\n        if (pos === 0 || pos === 5) {\n          return a[labelBaseNames[pos]].localeCompare(b[labelBaseNames[pos]]);\n        } else if (pos === 1) {\n          return Date.parse(a[labelBaseNames[pos]]) - Date.parse(b[labelBaseNames[pos]]);\n        } else {\n          return Number(a[labelBaseNames[pos]]) - Number(b[labelBaseNames[pos]]);\n        }\n      });\n      setLabels(labelBase);\n      setLabels(prevLabels => [...prevLabels.slice(0, pos), labelBase[pos] + \"↓\", ...prevLabels.slice(pos + 1)]);\n      setSortCheck(prevSortCheck => prevSortCheck.map((_, index) => index === pos));\n    } else {\n      info.sort((a, b) => Number(b.wo) - Number(a.wo));\n      info.sort((a, b) => {\n        if (pos === 0 || pos === 5) {\n          return b[labelBaseNames[pos]].localeCompare(a[labelBaseNames[pos]]);\n        } else if (pos === 1) {\n          return Date.parse(b[labelBaseNames[pos]]) - Date.parse(a[labelBaseNames[pos]]);\n        } else {\n          return Number(b[labelBaseNames[pos]]) - Number(a[labelBaseNames[pos]]);\n        }\n      });\n      setLabels(prevLabels => [...prevLabels.slice(0, pos), labelBase[pos] + \"↑\", ...prevLabels.slice(pos + 1)]);\n      setSortCheck(prevSortCheck => [...prevSortCheck.slice(0, pos), false, ...prevSortCheck.slice(pos + 1)]);\n    }\n  } // Start the fetch operation as soon as\n  // the page loads\n  // if (typeof window !== \"undefined\") {\n\n\n  useEffect(() => {\n    // window.addEventListener(\"load\", () => {\n    console.log(\"enter 1\");\n    fetchData(); // displayData();\n\n    console.log(\"not too bad\"); // });\n    // }\n  }, [router.route]); // runs every time `router.route` changes\n\n  async function fetchStuff() {\n    let data = [];\n    let id = [];\n    const cityRef = await db.collection(\"Test\").get().then(querySnapshot => {\n      // Loop through the data and store\n      // it in array to display\n      querySnapshot.forEach(element => {\n        console.log(\"enter 2\");\n        console.log(element.id);\n        id.push(element.id);\n        data.push(element.data());\n      });\n    });\n    console.log(data);\n    setID(id);\n    console.log(ids);\n    return [data, id];\n  }\n\n  function toDateTime(secs) {\n    var t = new Date(1970, 0, 1); // Epoch\n\n    t.setSeconds(secs);\n    return t;\n  }\n\n  async function fetchData() {\n    if (router.query.inputText && router.query.selectedType) {\n      const input = router.query.inputText;\n      const type = router.query.selectedType; // window.location.reload();\n      // Now you have the input and type, you can do whatever you want with it\n\n      console.log(input, type);\n      setSelect(type);\n      setSearch(input);\n    }\n\n    let datas = await fetchStuff();\n    let data = datas[0];\n    let itemValue = [];\n    let dateStorage = [];\n    data.map(elements => dateStorage.push(toDateTime(elements.date.seconds).getMonth() + 1 + \"/\" + toDateTime(elements.date.seconds).getDate() + \"/\" + toDateTime(elements.date.seconds).getFullYear()));\n\n    for (const [index, value] of data.entries()) {\n      data[index].date = dateStorage[index];\n    }\n\n    console.log(data);\n    setInfo(oldArray => [...oldArray, ...data]);\n    setBackupInfo(oldArray => [...oldArray, ...data]);\n    setID(oldArray => [...oldArray, ...datas[1]]);\n    console.log(data);\n    console.log(info);\n    console.log(ids); // router.reload();\n  }\n\n  const rowSelect = id => {\n    console.log(id);\n    router.push(\"item/\" + id);\n  };\n\n  const {\n    0: gPos,\n    1: setGPos\n  } = useState();\n  let {\n    0: gIde,\n    1: setGIde\n  } = useState();\n\n  const checkDelete = async (pos, ide, name) => {\n    setDItem(name);\n    setGPos(pos);\n    setGIde(ide);\n    console.log(gPos + \",\" + gIde);\n    handleShow();\n  };\n\n  const deleteItem = async () => {\n    console.log(gPos + \",\" + gIde);\n    setInfo(info.filter((o, i) => gPos !== i));\n    const cityRef = db.collection(\"Test\").doc(gIde).delete();\n    handleClose();\n  }; //styling\n\n\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState(null);\n\n  const hoverStyle = index => ({\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n    // Change colors as needed\n    textAlign: \"center\",\n    cursor: \"default\"\n  });\n\n  return __jsx(LoggedIn, null, __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Delete\")), __jsx(Modal.Body, null, \"Would you like to delete \\\"\", dItem, \"\\\"\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: deleteItem\n  }, \"Yes\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"No\"))), __jsx(Container, {\n    className: `${styles.myCustomContainer} d-flex align-items-center justify-content-center`,\n    style: {\n      minHeight: \"100vh\",\n      width: \"100%\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"100%\",\n      margin: \"0 auto\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\",\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(Card.Body, {\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Main Menu\"), __jsx(Table, {\n    style: {\n      width: \"100%\"\n    },\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, labels.map((item, index) => __jsx(\"th\", {\n    style: hoverStyle(index),\n    onMouseOver: () => setHoverIndex(index),\n    onMouseOut: () => setHoverIndex(null),\n    onClick: () => sortCheckAll(index)\n  }, item)))), __jsx(\"tbody\", null, info.map((item, index) => __jsx(\"tr\", {\n    class: \"clickable-row\",\n    key: index // onClick={() => rowSelect(ids[index])}\n\n  }, __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    onClick: () => rowSelect(ids[index])\n  }, item.name), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    onClick: () => rowSelect(ids[index])\n  }, \" \", item.date, \" \"), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    onClick: () => rowSelect(ids[index])\n  }, \" \", item.wo, \" \"), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    onClick: () => rowSelect(ids[index])\n  }, \" \", item.pn, \" \"), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    onClick: () => rowSelect(ids[index])\n  }, \" \", item.sn, \" \"), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(Button, {\n    onClick: () => checkDelete(index, ids[index], item.name),\n    id: ids[index],\n    variant: \"danger\"\n  }, \"X\")))))), __jsx(Form, {\n    className: \"d-flex\",\n    style: {\n      paddingBottom: \"10px\"\n    }\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: showDropdown,\n    onMouseLeave: hideDropdown,\n    style: {\n      marginTop: \"-5px\"\n    } // Adjust this value as needed\n\n  }, __jsx(NavDropdown.Item, {\n    href: \"\",\n    onClick: () => setSelect(\"Name\") & setShowListSearch(\"text\")\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    href: \"\",\n    onClick: () => setSelect(\"Date\") & setShowListSearch(\"date\")\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    href: \"\",\n    onClick: () => setSelect(\"Work Order\") & setShowListSearch(\"number\")\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    href: \"\",\n    onClick: () => setSelect(\"Product Number\") & setShowListSearch(\"number\")\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    href: \"\",\n    onClick: () => setSelect(\"Description\") & setShowListSearch(\"text\")\n  }, \"Description\")), __jsx(Button, {\n    variant: \"info\",\n    onClick: searchFilter\n  }, \"Search\")), LoadingButton(\"secondary\", \"Add New Item\", \"Warehousedb/ModItem\"), __jsx(\"a\", {\n    style: {\n      paddingLeft: \"10px\",\n      paddingRight: \"10px\"\n    }\n  }), \" \", LoadingButton(\"primary\", \"Back\", \"Warehousedb/WarehouseSelect\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}
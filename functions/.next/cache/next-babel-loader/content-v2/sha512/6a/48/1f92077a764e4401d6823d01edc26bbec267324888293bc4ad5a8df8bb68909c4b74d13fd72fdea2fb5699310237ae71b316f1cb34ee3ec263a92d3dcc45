{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Card, Container, Table } from \"react-bootstrap\";\nimport styles from \"../../styles/Home.module.css\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport firebase from \"../../context/Firebase\";\nimport LoggedIn from \"../LoggedIn\";\nexport default function ClientList() {\n  // Hooks and state initialization\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const db = firebase.firestore();\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const {\n    0: dItem,\n    1: setDItem\n  } = useState();\n  const router = useRouter(); // Fetch data when the component mounts or route changes\n\n  useEffect(() => {\n    fetchData();\n  }, [router.route]); // Function to fetch clients from Firebase\n\n  async function fetchClients() {\n    let data = [];\n    let id = [];\n    await db.collection(\"Client\").get().then(querySnapshot => {\n      querySnapshot.forEach(element => {\n        id.push(element.id);\n        data.push(element.data());\n      });\n    });\n    return [data, id];\n  } // Function to initiate fetching of data and setting state\n\n\n  async function fetchData() {\n    let [data, id] = await fetchClients();\n    setClients(data.map((client, index) => _objectSpread(_objectSpread({}, client), {}, {\n      id: id[index]\n    })));\n  } // Handler for row selection (navigation)\n\n\n  const rowSelect = id => {\n    router.push(\"client/\" + id);\n  }; // Handler for checking deletion confirmation\n\n\n  const checkDelete = async client => {\n    setDItem(client.Name);\n    handleShow();\n  }; // Handler for actual deletion of a client\n\n\n  const deleteItem = async clientId => {\n    await db.collection(\"Client\").doc(clientId).delete();\n    setClients(clients.filter(client => client.id !== clientId));\n    handleClose();\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Delete\")), __jsx(Modal.Body, null, \"Would you like to delete \\\"\", dItem, \"\\\"\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: () => deleteItem(dItem)\n  }, \"Yes\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"No\"))), __jsx(Container, {\n    className: `${styles.myCustomContainer} d-flex align-items-center justify-content-center`,\n    style: {\n      minHeight: \"100vh\",\n      width: \"100%\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"100%\",\n      margin: \"0 auto\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\",\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(Card.Body, {\n    style: {\n      width: \"100%\"\n    }\n  }, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Client List\"), __jsx(Table, {\n    style: {\n      width: \"100%\"\n    },\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Name\"), __jsx(\"th\", null, \"Company\"), __jsx(\"th\", null, \"Location\"), __jsx(\"th\", null, \"Last PM\"), __jsx(\"th\", null, \"Next PM\"), __jsx(\"th\", null, \"Delete\"))), __jsx(\"tbody\", null, clients.map((client, index) => __jsx(\"tr\", {\n    key: client.id\n  }, __jsx(\"td\", {\n    onClick: () => rowSelect(client.id)\n  }, client.Name), __jsx(\"td\", {\n    onClick: () => rowSelect(client.id)\n  }, client.Company), __jsx(\"td\", {\n    onClick: () => rowSelect(client.id)\n  }, client.Location), __jsx(\"td\", {\n    onClick: () => rowSelect(client.id)\n  }, client.LastPM), __jsx(\"td\", {\n    onClick: () => rowSelect(client.id)\n  }, client.NextPM), __jsx(\"td\", null, __jsx(Button, {\n    onClick: () => checkDelete(client),\n    variant: \"danger\"\n  }, \"X\")))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
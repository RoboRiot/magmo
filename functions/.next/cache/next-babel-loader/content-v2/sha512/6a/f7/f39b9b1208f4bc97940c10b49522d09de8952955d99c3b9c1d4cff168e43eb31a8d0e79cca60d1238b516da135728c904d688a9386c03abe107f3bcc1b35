{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  var _cfg$cols, _cfg$cols2, _cfg$cols3, _cfg$cols4, _cfg$cols5, _cfg$cols6, _cfg$cols7, _created$item;\n\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      error: \"Method not allowed\"\n    });\n  }\n\n  const token = process.env.SLACK_BOT_TOKEN;\n\n  if (!token) {\n    return res.status(500).json({\n      error: \"Missing SLACK_BOT_TOKEN\"\n    });\n  } // ---- request body ----\n\n\n  const {\n    listKey,\n    // \"tasks\" | \"shipping\" | \"receiving\"\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body || {}; // Small helpers\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // Build a safe, non-empty title server-side (belt + suspenders)\n\n\n  const safeId = plain(localSN) || plain(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop());\n  const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\"; // ---- env mapping ----\n\n  const LISTS = {\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL,\n      // optional (preferred if set)\n      titleKey: process.env.SLACK_LIST_TASKS_TITLE_KEY,\n      // e.g. \"Task\" (first column's name/key)\n      cols: {\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL // optional\n\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\n      titleKey: process.env.SLACK_LIST_SHIPPING_TITLE_KEY,\n      // e.g. \"item\"\n      cols: {\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment col (optional)\n\n      }\n    },\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\n      titleKey: process.env.SLACK_LIST_RECEIVING_TITLE_KEY,\n      // e.g. \"item\"\n      cols: {\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment col (optional)\n\n      }\n    }\n  };\n  const cfg = LISTS[listKey];\n  console.log(\"[add-to-list] incoming body:\", {\n    listKey,\n    title: safeTitle,\n    localSN: plain(localSN),\n    pn: Array.isArray(pn) ? pn : [pn].filter(Boolean),\n    sn: Array.isArray(sn) ? sn : [sn].filter(Boolean),\n    hasPhotos: Array.isArray(photoUrls) ? photoUrls.length : 0\n  });\n\n  if (!(cfg !== null && cfg !== void 0 && cfg.id)) {\n    return res.status(400).json({\n      error: `Unknown listKey or list id missing for: ${listKey}`\n    });\n  } // Slack API helper\n\n\n  const slack = async (method, body, headers = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  }) => {\n    const url = `https://slack.com/api/${method}`;\n    const resp = await fetch(url, {\n      method: \"POST\",\n      headers,\n      body\n    });\n    const json = await resp.json();\n    return json;\n  }; // Try to resolve the title column id.\n\n\n  let titleColId = plain(cfg.titleColId); // If no explicit title column id, and we have a titleKey (column name), try to look it up.\n\n  if (!titleColId && plain(cfg.titleKey)) {\n    var _getResp$list;\n\n    console.log(\"[add-to-list] looking up columns by key for list\", cfg.id, \"key:\", cfg.titleKey);\n    const getResp = await slack(\"slackLists.lists.get\", JSON.stringify({\n      list_id: cfg.id\n    }));\n    console.log(\"[add-to-list] lists.get response ok?\", getResp === null || getResp === void 0 ? void 0 : getResp.ok, \"status:\", getResp === null || getResp === void 0 ? void 0 : getResp.error);\n\n    if (getResp !== null && getResp !== void 0 && getResp.ok && Array.isArray(getResp === null || getResp === void 0 ? void 0 : (_getResp$list = getResp.list) === null || _getResp$list === void 0 ? void 0 : _getResp$list.columns)) {\n      const cols = getResp.list.columns;\n      console.log(\"[add-to-list] columns:\", cols.map(c => ({\n        id: c.id,\n        key: c.key,\n        name: c.name,\n        type: c.type\n      })));\n      const match = cols.find(c => (c === null || c === void 0 ? void 0 : c.key) === cfg.titleKey || (c === null || c === void 0 ? void 0 : c.name) === cfg.titleKey);\n\n      if (match !== null && match !== void 0 && match.id) {\n        titleColId = match.id;\n        console.log(\"[add-to-list] resolved title column id:\", titleColId);\n      } else {\n        console.log(\"[add-to-list] could not match a column for key/name:\", cfg.titleKey);\n      }\n    } else {\n      console.log(\"[add-to-list] failed to fetch columns for list\", cfg.id, getResp);\n    }\n  } // Build fields\n\n\n  const fields = []; // 1) Always try to set the first column (title) if we have a column id\n\n  if (titleColId && plain(safeTitle)) {\n    fields.push({\n      column_id: titleColId,\n      value: {\n        text: safeTitle\n      }\n    });\n  } // 2) Optional columns (only if env ids are set AND values exist)\n\n\n  if ((_cfg$cols = cfg.cols) !== null && _cfg$cols !== void 0 && _cfg$cols.desc && (description || listKey === \"tasks\" && bodyText || linkUrl)) {\n    const textBits = [plain(description), listKey === \"tasks\" ? plain(bodyText) : \"\", plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n    if (textBits) fields.push({\n      column_id: cfg.cols.desc,\n      value: {\n        text: textBits\n      }\n    });\n  }\n\n  if ((_cfg$cols2 = cfg.cols) !== null && _cfg$cols2 !== void 0 && _cfg$cols2.date && plain(date)) {\n    fields.push({\n      column_id: cfg.cols.date,\n      value: {\n        date: plain(date)\n      }\n    });\n  }\n\n  if ((_cfg$cols3 = cfg.cols) !== null && _cfg$cols3 !== void 0 && _cfg$cols3.pn && (pn || sn || dom)) {\n    const pnStr = joinArr(pn);\n    const snStr = joinArr(sn);\n    const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`].filter(Boolean).join(\"  \");\n    if (combo) fields.push({\n      column_id: cfg.cols.pn,\n      value: {\n        text: combo\n      }\n    });\n  }\n\n  if ((_cfg$cols4 = cfg.cols) !== null && _cfg$cols4 !== void 0 && _cfg$cols4.track && (trackingNumber || poNumber)) {\n    const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`].filter(Boolean).join(\"  \");\n    if (t) fields.push({\n      column_id: cfg.cols.track,\n      value: {\n        text: t\n      }\n    });\n  }\n\n  if ((_cfg$cols5 = cfg.cols) !== null && _cfg$cols5 !== void 0 && _cfg$cols5.wo && plain(workOrder)) {\n    fields.push({\n      column_id: cfg.cols.wo,\n      value: {\n        text: `WO: ${plain(workOrder)}`\n      }\n    });\n  }\n\n  if ((_cfg$cols6 = cfg.cols) !== null && _cfg$cols6 !== void 0 && _cfg$cols6.lsn && plain(localSN)) {\n    fields.push({\n      column_id: cfg.cols.lsn,\n      value: {\n        text: plain(localSN)\n      }\n    });\n  } // Build create payload. Even if we set the first column, also set a title fallback as rich_text.\n\n\n  const createBody = {\n    list_id: cfg.id,\n    title: [{\n      type: \"rich_text\",\n      elements: [{\n        type: \"rich_text_section\",\n        elements: [{\n          type: \"text\",\n          text: safeTitle\n        }]\n      }]\n    }],\n    fields\n  };\n  console.log(\"[add-to-list] createBody preview:\", {\n    list_id: createBody.list_id,\n    title_text: safeTitle,\n    fields: fields.map(f => ({\n      column_id: f.column_id,\n      value: Object.keys(f.value)\n    }))\n  });\n  const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n  console.log(\"[add-to-list] items.create response:\", created);\n\n  if (!(created !== null && created !== void 0 && created.ok)) {\n    return res.status(400).json({\n      error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n      raw: created\n    });\n  } // Attach photos if:\n  // - you’ve configured an attachment column id for this list\n  // - and we actually have photo URLs\n\n\n  if ((_cfg$cols7 = cfg.cols) !== null && _cfg$cols7 !== void 0 && _cfg$cols7.photos && Array.isArray(photoUrls) && photoUrls.length) {\n    try {\n      const fileIds = [];\n\n      for (const url of photoUrls) {\n        var _complete$files, _complete$files$;\n\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: new URLSearchParams({\n            filename: url.split(\"/\").pop() || \"image.jpg\"\n          })\n        }).then(r => r.json());\n        console.log(\"[add-to-list] getUploadURLExternal:\", init);\n        if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n        try {\n          const img = await fetch(url);\n          const buf = await img.arrayBuffer();\n          await fetch(init.upload_url, {\n            method: \"PUT\",\n            body: Buffer.from(buf)\n          });\n        } catch (e) {\n          console.log(\"[add-to-list] image upload error (ignored):\", (e === null || e === void 0 ? void 0 : e.message) || e);\n        }\n\n        const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n          files: [{\n            id: init.file_id,\n            title: \"photo\"\n          }]\n        }));\n        console.log(\"[add-to-list] completeUploadExternal:\", complete);\n\n        if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) {\n          fileIds.push(complete.files[0].id);\n        }\n      }\n\n      if (fileIds.length) {\n        const patch = await slack(\"slackLists.items.update\", JSON.stringify({\n          list_id: cfg.id,\n          item_id: created.item.id,\n          fields: [{\n            column_id: cfg.cols.photos,\n            value: {\n              attachment: {\n                file_ids: fileIds\n              }\n            }\n          }]\n        }));\n        console.log(\"[add-to-list] items.update (attachments) response:\", patch);\n      }\n    } catch (e) {\n      console.log(\"[add-to-list] attachment flow error (non-fatal):\", (e === null || e === void 0 ? void 0 : e.message) || e); // We won't fail the whole request because of photos.\n    }\n  }\n\n  return res.status(200).json({\n    ok: true,\n    mode: \"list\",\n    list_id: cfg.id,\n    item_id: (created === null || created === void 0 ? void 0 : (_created$item = created.item) === null || _created$item === void 0 ? void 0 : _created$item.id) || \"(unknown)\"\n  });\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","plain","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","safeId","split","pop","safeTitle","LISTS","tasks","id","SLACK_LIST_TASKS_ID","titleColId","SLACK_LIST_TASKS_TITLE_COL","titleKey","SLACK_LIST_TASKS_TITLE_KEY","cols","desc","SLACK_LIST_TASKS_DESCRIPTION_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_TITLE_COL","SLACK_LIST_SHIPPING_TITLE_KEY","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","track","SLACK_LIST_SHIPPING_TRACKING_COL","wo","SLACK_LIST_SHIPPING_WO_COL","lsn","SLACK_LIST_SHIPPING_LOCALSN_COL","photos","SLACK_LIST_SHIPPING_PHOTOS_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_TITLE_KEY","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","SLACK_LIST_RECEIVING_TRACKING_COL","SLACK_LIST_RECEIVING_WO_COL","SLACK_LIST_RECEIVING_LOCALSN_COL","SLACK_LIST_RECEIVING_PHOTOS_COL","cfg","console","log","hasPhotos","length","slack","headers","Authorization","url","resp","fetch","getResp","JSON","stringify","list_id","ok","list","columns","c","key","name","type","match","find","fields","push","column_id","value","text","textBits","pnStr","snStr","combo","t","createBody","elements","title_text","f","Object","keys","created","raw","fileIds","init","URLSearchParams","filename","then","r","upload_url","img","buf","arrayBuffer","Buffer","from","e","message","complete","files","file_id","patch","item_id","item","attachment","file_ids","mode"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method not allowed\" });\r\n  }\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) {\r\n    return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n  }\r\n\r\n  // ---- request body ----\r\n  const {\r\n    listKey, // \"tasks\" | \"shipping\" | \"receiving\"\r\n    title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body || {};\r\n\r\n  // Small helpers\r\n  const plain = (v) => (v ?? \"\").toString().trim();\r\n  const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n  // Build a safe, non-empty title server-side (belt + suspenders)\r\n  const safeId = plain(localSN) || plain(linkUrl?.split(\"/\").pop());\r\n  const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\";\r\n\r\n  // ---- env mapping ----\r\n  const LISTS = {\r\n    tasks: {\r\n      id: process.env.SLACK_LIST_TASKS_ID,\r\n      titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL, // optional (preferred if set)\r\n      titleKey:   process.env.SLACK_LIST_TASKS_TITLE_KEY, // e.g. \"Task\" (first column's name/key)\r\n      cols: {\r\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL, // optional\r\n      },\r\n    },\r\n    shipping: {\r\n      id: process.env.SLACK_LIST_SHIPPING_ID,\r\n      titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\r\n      titleKey:   process.env.SLACK_LIST_SHIPPING_TITLE_KEY, // e.g. \"item\"\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL, // attachment col (optional)\r\n      },\r\n    },\r\n    receiving: {\r\n      id: process.env.SLACK_LIST_RECEIVING_ID,\r\n      titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\r\n      titleKey:   process.env.SLACK_LIST_RECEIVING_TITLE_KEY, // e.g. \"item\"\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment col (optional)\r\n      },\r\n    },\r\n  };\r\n\r\n  const cfg = LISTS[listKey];\r\n\r\n  console.log(\"[add-to-list] incoming body:\", {\r\n    listKey,\r\n    title: safeTitle,\r\n    localSN: plain(localSN),\r\n    pn: Array.isArray(pn) ? pn : [pn].filter(Boolean),\r\n    sn: Array.isArray(sn) ? sn : [sn].filter(Boolean),\r\n    hasPhotos: Array.isArray(photoUrls) ? photoUrls.length : 0,\r\n  });\r\n\r\n  if (!cfg?.id) {\r\n    return res.status(400).json({ error: `Unknown listKey or list id missing for: ${listKey}` });\r\n  }\r\n\r\n  // Slack API helper\r\n  const slack = async (method, body, headers = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n  }) => {\r\n    const url = `https://slack.com/api/${method}`;\r\n    const resp = await fetch(url, { method: \"POST\", headers, body });\r\n    const json = await resp.json();\r\n    return json;\r\n  };\r\n\r\n  // Try to resolve the title column id.\r\n  let titleColId = plain(cfg.titleColId);\r\n\r\n  // If no explicit title column id, and we have a titleKey (column name), try to look it up.\r\n  if (!titleColId && plain(cfg.titleKey)) {\r\n    console.log(\"[add-to-list] looking up columns by key for list\", cfg.id, \"key:\", cfg.titleKey);\r\n    const getResp = await slack(\r\n      \"slackLists.lists.get\",\r\n      JSON.stringify({ list_id: cfg.id })\r\n    );\r\n    console.log(\"[add-to-list] lists.get response ok?\", getResp?.ok, \"status:\", getResp?.error);\r\n    if (getResp?.ok && Array.isArray(getResp?.list?.columns)) {\r\n      const cols = getResp.list.columns;\r\n      console.log(\"[add-to-list] columns:\", cols.map(c => ({ id: c.id, key: c.key, name: c.name, type: c.type })));\r\n      const match = cols.find(c =>\r\n        c?.key === cfg.titleKey || c?.name === cfg.titleKey\r\n      );\r\n      if (match?.id) {\r\n        titleColId = match.id;\r\n        console.log(\"[add-to-list] resolved title column id:\", titleColId);\r\n      } else {\r\n        console.log(\"[add-to-list] could not match a column for key/name:\", cfg.titleKey);\r\n      }\r\n    } else {\r\n      console.log(\"[add-to-list] failed to fetch columns for list\", cfg.id, getResp);\r\n    }\r\n  }\r\n\r\n  // Build fields\r\n  const fields = [];\r\n\r\n  // 1) Always try to set the first column (title) if we have a column id\r\n  if (titleColId && plain(safeTitle)) {\r\n    fields.push({ column_id: titleColId, value: { text: safeTitle } });\r\n  }\r\n\r\n  // 2) Optional columns (only if env ids are set AND values exist)\r\n  if (cfg.cols?.desc && (description || (listKey === \"tasks\" && bodyText) || linkUrl)) {\r\n    const textBits = [\r\n      plain(description),\r\n      listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n      plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n    ].filter(Boolean).join(\"\\n\");\r\n    if (textBits) fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n  }\r\n\r\n  if (cfg.cols?.date && plain(date)) {\r\n    fields.push({ column_id: cfg.cols.date, value: { date: plain(date) } });\r\n  }\r\n\r\n  if (cfg.cols?.pn && (pn || sn || dom)) {\r\n    const pnStr = joinArr(pn);\r\n    const snStr = joinArr(sn);\r\n    const combo = [\r\n      pnStr && `PN: ${pnStr}`,\r\n      snStr && `SN: ${snStr}`,\r\n      plain(dom) && `DOM: ${plain(dom)}`\r\n    ].filter(Boolean).join(\"  \");\r\n    if (combo) fields.push({ column_id: cfg.cols.pn, value: { text: combo } });\r\n  }\r\n\r\n  if (cfg.cols?.track && (trackingNumber || poNumber)) {\r\n    const t = [\r\n      plain(trackingNumber) && `RL: ${plain(trackingNumber)}`,\r\n      plain(poNumber) && `PO: ${plain(poNumber)}`\r\n    ].filter(Boolean).join(\"  \");\r\n    if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n  }\r\n\r\n  if (cfg.cols?.wo && plain(workOrder)) {\r\n    fields.push({ column_id: cfg.cols.wo, value: { text: `WO: ${plain(workOrder)}` } });\r\n  }\r\n\r\n  if (cfg.cols?.lsn && plain(localSN)) {\r\n    fields.push({ column_id: cfg.cols.lsn, value: { text: plain(localSN) } });\r\n  }\r\n\r\n  // Build create payload. Even if we set the first column, also set a title fallback as rich_text.\r\n  const createBody = {\r\n    list_id: cfg.id,\r\n    title: [{\r\n      type: \"rich_text\",\r\n      elements: [{\r\n        type: \"rich_text_section\",\r\n        elements: [{ type: \"text\", text: safeTitle }]\r\n      }]\r\n    }],\r\n    fields,\r\n  };\r\n\r\n  console.log(\"[add-to-list] createBody preview:\", {\r\n    list_id: createBody.list_id,\r\n    title_text: safeTitle,\r\n    fields: fields.map(f => ({ column_id: f.column_id, value: Object.keys(f.value) })),\r\n  });\r\n\r\n  const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n  console.log(\"[add-to-list] items.create response:\", created);\r\n\r\n  if (!created?.ok) {\r\n    return res.status(400).json({\r\n      error: created?.error || \"Slack Lists API error\",\r\n      raw: created\r\n    });\r\n  }\r\n\r\n  // Attach photos if:\r\n  // - you’ve configured an attachment column id for this list\r\n  // - and we actually have photo URLs\r\n  if (cfg.cols?.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n    try {\r\n      const fileIds = [];\r\n      for (const url of photoUrls) {\r\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n          body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n        }).then(r => r.json());\r\n\r\n        console.log(\"[add-to-list] getUploadURLExternal:\", init);\r\n\r\n        if (!init?.ok || !init?.upload_url) continue;\r\n\r\n        try {\r\n          const img = await fetch(url);\r\n          const buf = await img.arrayBuffer();\r\n          await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n        } catch (e) {\r\n          console.log(\"[add-to-list] image upload error (ignored):\", e?.message || e);\r\n        }\r\n\r\n        const complete = await slack(\r\n          \"files.completeUploadExternal\",\r\n          JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n        );\r\n        console.log(\"[add-to-list] completeUploadExternal:\", complete);\r\n\r\n        if (complete?.ok && complete?.files?.[0]?.id) {\r\n          fileIds.push(complete.files[0].id);\r\n        }\r\n      }\r\n\r\n      if (fileIds.length) {\r\n        const patch = await slack(\r\n          \"slackLists.items.update\",\r\n          JSON.stringify({\r\n            list_id: cfg.id,\r\n            item_id: created.item.id,\r\n            fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n          })\r\n        );\r\n        console.log(\"[add-to-list] items.update (attachments) response:\", patch);\r\n      }\r\n    } catch (e) {\r\n      console.log(\"[add-to-list] attachment flow error (non-fatal):\", e?.message || e);\r\n      // We won't fail the whole request because of photos.\r\n    }\r\n  }\r\n\r\n  return res.status(200).json({\r\n    ok: true,\r\n    mode: \"list\",\r\n    list_id: cfg.id,\r\n    item_id: created?.item?.id || \"(unknown)\",\r\n  });\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\pages\\\\NewSearch\\\\mainSearch.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Card, Row, Col, InputGroup, Dropdown, FormControl, Button, NavDropdown, Form, Modal, Spinner } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { fetchPartsWithMachineData, fetchClients, fetchModels, formatDate } from \"../../utils/fetchAssociations\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\nimport ClientTable from \"../../utils/ClientTable\";\nimport ModelTable from \"../../utils/ModelTable\";\nimport PartTable from \"../../utils/PartTable\";\nimport styles from \"../../styles/MainSearch.module.css\";\nimport firebase from \"../../context/Firebase\"; // Predefined warehouse client IDs and display names\n\nconst SOCAL_CLIENT_ID = \"AIS17182\";\nconst NORCAL_CLIENT_ID = \"AIS25097\";\nconst UNASSIGNED_CLIENT_ID = \"AIS00404\"; // Simulates a network request delay\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n} // Custom LoadingButton component\n\n\nfunction LoadingButton({\n  type,\n  name,\n  route\n}) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n  return __jsx(Link, {\n    href: `/${route}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading,\n    onClick: () => !isLoading && setLoading(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, isLoading ? \"Loadingâ€¦\" : name));\n}\n\nexport default function MainSearch() {\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: info,\n    1: setInfo\n  } = useState([]);\n  const {\n    0: backupInfo,\n    1: setBackupInfo\n  } = useState([]);\n  const {\n    0: augmentedInfo,\n    1: setAugmentedInfo\n  } = useState([]); // items with clientFromId/currentId added\n\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: ids,\n    1: setID\n  } = useState([]);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: dItem,\n    1: setDItem\n  } = useState();\n  const {\n    0: select,\n    1: setSelect\n  } = useState(\"Name\");\n  const {\n    0: showList,\n    1: setShowList\n  } = useState(false);\n  const {\n    0: showListSearch,\n    1: setShowListSearch\n  } = useState(\"text\");\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: selectedOEM,\n    1: setSelectedOEM\n  } = useState(null);\n  const {\n    0: selectedModality,\n    1: setSelectedModality\n  } = useState(null); // Replace the old single client state with two sets:\n\n  const {\n    0: selectedClientFrom,\n    1: setSelectedClientFrom\n  } = useState(null);\n  const {\n    0: clientFromButtonText,\n    1: setClientFromButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: selectedClientCurrent,\n    1: setSelectedClientCurrent\n  } = useState(null);\n  const {\n    0: clientCurrentButtonText,\n    1: setClientCurrentButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: showClientModal,\n    1: setShowClientModal\n  } = useState(false); // This state tells the modal which client box is being updated: \"from\" or \"current\"\n\n  const {\n    0: clientSelectionType,\n    1: setClientSelectionType\n  } = useState(null);\n  const router = useRouter();\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  const sortCheckBase = [false, false, false, false, false, false];\n  const {\n    0: labels,\n    1: setLabels\n  } = useState(labelBase);\n  const {\n    0: sortCheck,\n    1: setSortCheck\n  } = useState(sortCheckBase);\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState(null);\n  const {\n    0: selectedModel,\n    1: setSelectedModel\n  } = useState(null);\n  const {\n    0: gPos,\n    1: setGPos\n  } = useState(null);\n  const {\n    0: gIde,\n    1: setGIde\n  } = useState(null);\n  const {\n    0: isDeleting,\n    1: setIsDeleting\n  } = useState(false); // Fetch data on component mount and route change\n\n  useEffect(() => {\n    fetchData();\n  }, [router.route]);\n\n  async function fetchData() {\n    setIsLoading(true);\n\n    try {\n      if (router.query.inputText && router.query.selectedType) {\n        setSelect(router.query.selectedType);\n        setSearch(router.query.inputText);\n      } // light retry for transient Firestore hiccups\n\n\n      const load = async (attempt = 1) => {\n        try {\n          return await fetchPartsWithMachineData();\n        } catch (e) {\n          if (attempt >= 3) throw e;\n          await new Promise(r => setTimeout(r, 250 * Math.pow(2, attempt - 1)));\n          return load(attempt + 1);\n        }\n      };\n\n      const data = await load();\n      setBackupInfo(data);\n      setID(data.map(item => item.id)); // --- Pre-augment: resolve client ids of Machine / CurrentMachine once ---\n\n      const db = firebase.firestore();\n      const machineIds = [];\n      const curMachineIds = [];\n\n      for (const item of data) {\n        var _item$Machine, _item$CurrentMachine;\n\n        if (item !== null && item !== void 0 && (_item$Machine = item.Machine) !== null && _item$Machine !== void 0 && _item$Machine.id) machineIds.push(item.Machine.id);\n        if (item !== null && item !== void 0 && (_item$CurrentMachine = item.CurrentMachine) !== null && _item$CurrentMachine !== void 0 && _item$CurrentMachine.id) curMachineIds.push(item.CurrentMachine.id);\n      }\n\n      const uniq = arr => [...new Set(arr)];\n\n      const mIds = uniq(machineIds);\n      const cIds = uniq(curMachineIds);\n\n      const fetchMachineClients = async ids => {\n        if (!ids.length) return {};\n        const out = {}; // Firestore \"in\" supports up to 10 document IDs per query\n\n        const chunks = [];\n\n        for (let i = 0; i < ids.length; i += 10) chunks.push(ids.slice(i, i + 10));\n\n        for (const chunk of chunks) {\n          const snap = await db.collection(\"Machine\").where(firebase.firestore.FieldPath.documentId(), \"in\", chunk).get();\n          snap.forEach(doc => {\n            var _md$client;\n\n            const md = doc.data() || {};\n            out[doc.id] = ((_md$client = md.client) === null || _md$client === void 0 ? void 0 : _md$client.id) || null;\n          });\n        }\n\n        return out;\n      };\n\n      const [fromMap, curMap] = await Promise.all([fetchMachineClients(mIds), fetchMachineClients(cIds)]);\n      const augmented = data.map(item => {\n        var _item$Machine2, _fromMap$item$Machine, _item$CurrentMachine2, _curMap$item$CurrentM;\n\n        return _objectSpread(_objectSpread({}, item), {}, {\n          // keep existing fields; add fast client id fields for sync filtering\n          clientFromId: item !== null && item !== void 0 && (_item$Machine2 = item.Machine) !== null && _item$Machine2 !== void 0 && _item$Machine2.id ? (_fromMap$item$Machine = fromMap[item.Machine.id]) !== null && _fromMap$item$Machine !== void 0 ? _fromMap$item$Machine : null : null,\n          clientCurrentId: item !== null && item !== void 0 && (_item$CurrentMachine2 = item.CurrentMachine) !== null && _item$CurrentMachine2 !== void 0 && _item$CurrentMachine2.id ? (_curMap$item$CurrentM = curMap[item.CurrentMachine.id]) !== null && _curMap$item$CurrentM !== void 0 ? _curMap$item$CurrentM : null : null\n        });\n      });\n      setAugmentedInfo(augmented); // default view = everything not explicitly hidden\n\n      setInfo(augmented.filter(it => it.visible !== false));\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n      setInfo([]);\n      setAugmentedInfo([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const searchChangeHandler = event => setSearch(event.target.value); // Asynchronous filter function that loops through backupInfo and,\n  // for each item, fetches its Machine and CurrentMachine documents,\n  // then compares the client id (from machineData.client.id) to the selected client.\n\n\n  useEffect(() => {\n    function filterParts() {\n      const base = augmentedInfo; // already has clientFromId/clientCurrentId\n\n      const noFilters = !selectedOEM && !selectedModality && !selectedModel && !selectedClientFrom && !selectedClientCurrent && !search;\n\n      if (noFilters) {\n        setInfo(base.filter(it => it.visible !== false));\n        return;\n      }\n\n      const filtered = base.filter(item => {\n        // only hide when explicitly false\n        if (item.visible === false) return false; // OEM/modality/model via machineData (you already put this in items)\n\n        if (item.machineData) {\n          if (selectedOEM && item.machineData.OEM !== selectedOEM) return false;\n          if (selectedModality && item.machineData.Modality !== selectedModality) return false;\n          if (selectedModel && item.machineData.Model !== selectedModel) return false;\n        } // Client filters (now instant)\n\n\n        if (selectedClientFrom && item.clientFromId !== selectedClientFrom) return false;\n        if (selectedClientCurrent && item.clientCurrentId !== selectedClientCurrent) return false; // Search\n\n        if (search) {\n          const s = String(search).toLowerCase();\n\n          if (select === \"Name\") {\n            return (item.name || \"\").toLowerCase().includes(s);\n          }\n\n          if (select === \"Date\") {\n            // your items look like mm/dd/yyyy\n            const parts = (item.date || \"\").split(\"/\");\n\n            if (parts.length === 3) {\n              const [mm, dd, yyyy] = parts;\n              const reformatted = `${yyyy}-${mm}-${dd}`;\n              return reformatted === search;\n            }\n\n            return false;\n          }\n\n          if (select === \"Work Order\") {\n            return Array.isArray(item.workOrders) && item.workOrders.some(wo => String(wo.workOrder || \"\").toLowerCase().includes(s));\n          }\n\n          if (select === \"Product Number\") {\n            return String(item.pn || \"\").toLowerCase().includes(s);\n          }\n\n          if (select === \"Description\") {\n            return String(item.desc || \"\").toLowerCase().includes(s);\n          }\n\n          if (select === \"SKU\") {\n            return String(item.id || \"\").toLowerCase().includes(s);\n          }\n        }\n\n        return true;\n      });\n      setInfo(filtered);\n    }\n\n    filterParts();\n  }, [selectedOEM, selectedModality, selectedClientFrom, selectedClientCurrent, selectedModel, search, select, augmentedInfo]);\n\n  function sortCheckAll(pos) {\n    const sortedInfo = [...info].sort((a, b) => {\n      if (pos === 0 || pos === 5) {\n        return sortCheck[pos] ? b[labelBaseNames[pos]].localeCompare(a[labelBaseNames[pos]]) : a[labelBaseNames[pos]].localeCompare(b[labelBaseNames[pos]]);\n      }\n\n      if (pos === 1) {\n        return sortCheck[pos] ? Date.parse(b[labelBaseNames[pos]]) - Date.parse(a[labelBaseNames[pos]]) : Date.parse(a[labelBaseNames[pos]]) - Date.parse(b[labelBaseNames[pos]]);\n      }\n\n      return sortCheck[pos] ? Number(b[labelBaseNames[pos]]) - Number(a[labelBaseNames[pos]]) : Number(a[labelBaseNames[pos]]) - Number(b[labelBaseNames[pos]]);\n    });\n    setInfo(sortedInfo);\n    setSortCheck(prevSortCheck => prevSortCheck.map((_, index) => index === pos ? !prevSortCheck[pos] : prevSortCheck[index]));\n  }\n\n  const rowSelect = item => {\n    if (item && item.id) {\n      console.log(\"Selected item:\", item);\n      router.push(\"./item/\" + item.id);\n    } else {\n      console.error(\"Unable to determine the selected itemâ€™s ID: \", item);\n    }\n  };\n\n  const {\n    0: selectedItems,\n    1: setSelectedItems\n  } = useState([]);\n  const {\n    0: showDeleteModal,\n    1: setShowDeleteModal\n  } = useState(false);\n\n  const handleSelectItem = id => {\n    setSelectedItems(prev => prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]);\n  }; // setSelectedItems((prev) => {\n  //   const newSelection = prev.includes(id)\n  //     ? prev.filter((itemId) => itemId !== id)\n  //     : [...prev, id];\n  //   console.log(\"Selected items:\", newSelection);\n  //   return newSelection; // <- important\n  // });\n\n\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n\n  const handleDeleteSelected = async () => {\n    setIsDeleting(true);\n    const db = firebase.firestore();\n\n    try {\n      // Loop over each selected item one at a time\n      for (const itemId of selectedItems) {\n        console.log(itemId);\n\n        try {\n          // Delete from \"Test\" collection\n          await db.collection(\"Test\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Test:`, err);\n        }\n\n        try {\n          // Delete from \"Parts\" collection\n          await db.collection(\"Parts\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Parts:`, err);\n        }\n\n        try {\n          // Delete associated photos from storage\n          await deleteFromStorage(itemId);\n        } catch (err) {\n          console.error(`Error deleting storage for ${itemId}:`, err);\n        }\n      } // Update local state by filtering out the deleted items\n\n\n      setInfo(info.filter(item => !selectedItems.includes(item.id)));\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Error deleting items:\", error);\n    } finally {\n      setIsDeleting(false);\n      handleCloseDeleteModal(); // Optionally, reload the page\n      // router.reload();\n    }\n  };\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const checkDelete = (event, pos, idsToDelete, name) => {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    console.log(\"Selected IDs to delete:\", idsToDelete);\n    setSelectedItems(idsToDelete);\n    setDItem(name);\n    setShowDeleteModal(true);\n  }; // const handleDelete = async () => {\n  //   let itemId = gIde;\n  //   try {\n  //     setIsDeleting(true);\n  //     const db = firebase.firestore();\n  //     await db.collection(\"Test\").doc(itemId).delete();\n  //     await deleteFromPartsCollection(itemId);\n  //     await deleteFromStorage(itemId);\n  //     setInfo(info.filter((_, i) => gPos !== i));\n  //     console.log(`Deleted item: ${itemId}`);\n  //   } catch (error) {\n  //     console.error(\"Error deleting item:\", error);\n  //   } finally {\n  //     setIsDeleting(false);\n  //   }\n  //   handleClose();\n  // };\n\n\n  const hoverStyle = index => ({\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n    textAlign: \"center\",\n    cursor: \"default\"\n  });\n\n  const {\n    0: dropdown1Text,\n    1: setDropdown1Text\n  } = useState(\"Select Option\");\n  const {\n    0: dropdown2Text,\n    1: setDropdown2Text\n  } = useState(\"Select Option\");\n\n  const handleSelect1 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  const handleSelect2 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  }; // --------------------\n  // CLIENT SELECTION HANDLING\n  // --------------------\n  // This function fetches clients and opens the client modal.\n\n\n  const handleClientClick = async () => {\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\n    setClients(clientsData);\n    setClientSearchTerm(\"\");\n    setShowClientModal(true);\n  }; // When a client is selected in the modal, we now assume the parameter is a client ID.\n  // If the passed value is null, we clear the selection.\n\n\n  const handleClientSelect = async clientId => {\n    console.log(\"User selected client id:\", clientId);\n\n    if (!clientId) {\n      if (clientSelectionType === \"from\") {\n        setClientFromButtonText(\"Select Option\");\n        setSelectedClientFrom(null);\n      } else if (clientSelectionType === \"current\") {\n        setClientCurrentButtonText(\"Select Option\");\n        setSelectedClientCurrent(null);\n      }\n\n      setShowClientModal(false);\n      return;\n    }\n\n    try {\n      const clientSnap = await firebase.firestore().collection(\"Client\").doc(clientId).get();\n\n      if (clientSnap.exists) {\n        const clientData = clientSnap.data();\n\n        if (clientSelectionType === \"from\") {\n          setClientFromButtonText(clientData.name);\n          setSelectedClientFrom(clientId);\n        } else if (clientSelectionType === \"current\") {\n          setClientCurrentButtonText(clientData.name);\n          setSelectedClientCurrent(clientId);\n        }\n      } else {\n        console.error(\"No client document found for id:\", clientId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n    }\n\n    setShowClientModal(false);\n  };\n\n  const handleClientInfo = (clientId, clientName) => {\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\n    router.push(\"client/\" + clientId);\n  };\n\n  const handleClearClientSelection = () => {\n    if (clientSelectionType === \"from\") {\n      setClientFromButtonText(\"Select Option\");\n      setSelectedClientFrom(null);\n    } else if (clientSelectionType === \"current\") {\n      setClientCurrentButtonText(\"Select Option\");\n      setSelectedClientCurrent(null);\n    }\n\n    setShowClientModal(false);\n  }; // --------------------\n  // MODEL SELECTION HANDLING\n  // --------------------\n\n\n  const {\n    0: models,\n    1: setModels\n  } = useState([]);\n  const {\n    0: showModelModal,\n    1: setShowModelModal\n  } = useState(false);\n  const {\n    0: modelButtonText,\n    1: setModelButtonText\n  } = useState(\"Select Option\");\n\n  const handleModelClick = async () => {\n    const modelsData = await fetchModels(selectedOEM, selectedModality, selectedClientFrom);\n    setModels(modelsData);\n    setModelSearchTerm(\"\");\n    setShowModelModal(true);\n  };\n\n  const handleModelSelect = modelName => {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  };\n\n  const handleClearModelSelection = () => {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n  }; // --------------------\n  // WAREHOUSE BUTTONS (for Client Current)\n  // --------------------\n\n\n  const handleSoCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"SoCal Warehouse\");\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\n  };\n\n  const handleNorCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"NorCal Warehouse\");\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\n  };\n\n  const handleWarehouseUnassignedClick = () => {\n    setClientCurrentButtonText(\"Unassigned\");\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\n  };\n\n  const {\n    0: clientSearchTerm,\n    1: setClientSearchTerm\n  } = useState(\"\");\n  const {\n    0: modelSearchTerm,\n    1: setModelSearchTerm\n  } = useState(\"\");\n\n  const deleteFromStorage = async itemId => {\n    const storageRef = firebase.storage().ref();\n    const folderRef = storageRef.child(`Parts/${itemId}/`);\n\n    try {\n      const listResult = await folderRef.listAll();\n      const deletePromises = listResult.items.map(item => item.delete());\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\"Error deleting from storage:\", error);\n    }\n  };\n\n  const deleteFromPartsCollection = async itemId => {\n    const db = firebase.firestore();\n\n    try {\n      await db.collection(\"Parts\").doc(itemId).delete();\n      console.log(`Deleted item from Parts collection: ${itemId}`);\n    } catch (error) {\n      console.error(\"Error deleting from Parts collection:\", error);\n    }\n  };\n\n  return __jsx(LoggedIn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 5\n    }\n  }, isDeleting && __jsx(\"div\", {\n    className: \"loading-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    className: \"spinner-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 13\n    }\n  }, \"Loading...\"))), __jsx(Modal, {\n    show: showDeleteModal,\n    onHide: handleCloseDeleteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 11\n    }\n  }, \"Confirm Deletion\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 9\n    }\n  }, \"Are you sure you want to delete \", selectedItems.length, \" item\", selectedItems.length > 1 ? \"s\" : \"\", \"?\"), __jsx(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 11\n    }\n  }, \"Yes, delete\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseDeleteModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))), __jsx(Modal, {\n    show: showClientModal,\n    onHide: () => setShowClientModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 11\n    }\n  }, \"Select \", clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: clientSearchTerm,\n    onChange: e => setClientSearchTerm(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 11\n    }\n  }), __jsx(ClientTable, {\n    clients: clients.filter(client => client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())),\n    onSelectClient: handleClientSelect,\n    onInfoClick: handleClientInfo,\n    isClientSearch: false,\n    clearSelection: () => handleClientSelect(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 11\n    }\n  }))), __jsx(Modal, {\n    show: showModelModal,\n    onHide: () => setShowModelModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 9\n    }\n  }, __jsx(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 11\n    }\n  }, \"Select Model\")), __jsx(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: modelSearchTerm,\n    onChange: e => setModelSearchTerm(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 11\n    }\n  }), __jsx(ModelTable, {\n    models: models.filter(model => typeof model === \"string\" ? model.toLowerCase().includes(modelSearchTerm.toLowerCase()) : false),\n    onSelectModel: handleModelSelect,\n    clearSelection: () => handleModelSelect(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 11\n    }\n  }))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"1200px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 11\n    }\n  }, __jsx(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    className: \"text-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 15\n    }\n  }, \"Magmo\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 15\n    }\n  }, __jsx(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 19\n    }\n  }, __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 23\n    }\n  }, \"OEM\"), __jsx(Dropdown, {\n    onSelect: handleSelect1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 23\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-1\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 25\n    }\n  }, dropdown1Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 25\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 27\n    }\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"GE\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 27\n    }\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 27\n    }\n  }, \"Toshiba\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 27\n    }\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 27\n    }\n  }, \"Philips\")))), __jsx(InputGroup, {\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 23\n    }\n  }, \"Modality\"), __jsx(Dropdown, {\n    onSelect: handleSelect2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 23\n    }\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-2\",\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 25\n    }\n  }, dropdown2Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 25\n    }\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 27\n    }\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"CT\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 27\n    }\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 27\n    }\n  }, \"MRI\"))))), __jsx(\"div\", {\n    className: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 19\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 19\n    }\n  }, __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 23\n    }\n  }, \"Client From\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"from\");\n      handleClientClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 23\n    }\n  }, clientFromButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 23\n    }\n  }, \"Client Current\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => {\n      setClientSelectionType(\"current\");\n      handleClientClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 23\n    }\n  }, clientCurrentButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 23\n    }\n  }, \"Model\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleModelClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 23\n    }\n  }, modelButtonText)), __jsx(\"div\", {\n    className: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 21\n    }\n  }), __jsx(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 21\n    }\n  }, __jsx(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 23\n    }\n  }, \"Warehouse\"), __jsx(\"div\", {\n    className: styles.buttonGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleSoCalWarehouseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 25\n    }\n  }, \"SoCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleNorCalWarehouseClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 25\n    }\n  }, \"NorCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleWarehouseUnassignedClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 25\n    }\n  }, \"Unassigned\"))))), __jsx(Col, {\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: styles.tableContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 19\n    }\n  }, isLoading ? __jsx(\"div\", {\n    className: \"d-flex justify-content-center align-items-center p-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 23\n    }\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 767,\n      columnNumber: 25\n    }\n  }, __jsx(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 27\n    }\n  }, \"Loading...\"))) : __jsx(PartTable, {\n    info: info,\n    labels: labels,\n    ids: ids,\n    hoverStyle: hoverStyle,\n    sortCheckAll: sortCheckAll,\n    checkDelete: checkDelete,\n    isDeleting: isDeleting,\n    rowSelect: rowSelect,\n    setHoverIndex: setHoverIndex,\n    hoverIndex: hoverIndex,\n    selectedItems: selectedItems,\n    setSelectedItems: setSelectedItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 23\n    }\n  }), __jsx(\"div\", {\n    className: styles.searchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 21\n    }\n  }, __jsx(Form, {\n    className: \"d-flex pb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 23\n    }\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2 flex-grow-1\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler,\n    style: {\n      flex: \"1\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 25\n    }\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: () => setShowList(true),\n    onMouseLeave: () => setShowList(false),\n    style: {\n      marginTop: \"-5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 25\n    }\n  }, __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Name\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 807,\n      columnNumber: 27\n    }\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Date\");\n      setShowListSearch(\"date\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 27\n    }\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Work Order\");\n      setShowListSearch(\"number\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 27\n    }\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Product Number\");\n      setShowListSearch(\"number\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 27\n    }\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"Description\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 27\n    }\n  }, \"Description\"), __jsx(NavDropdown.Item, {\n    onClick: () => {\n      setSelect(\"SKU\");\n      setShowListSearch(\"text\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 822,\n      columnNumber: 27\n    }\n  }, \"SKU\"))), __jsx(\"div\", {\n    className: \"d-flex justify-content-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 23\n    }\n  }, __jsx(LoadingButton, {\n    type: \"secondary\",\n    name: \"Add New Item\",\n    route: \"NewSearch/AddItem/NewItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 25\n    }\n  }), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"Warehousedb/WarehouseSelect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 25\n    }\n  })))))))))));\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/NewSearch/mainSearch.js"],"names":["React","useEffect","useState","Container","Card","Row","Col","InputGroup","Dropdown","FormControl","Button","NavDropdown","Form","Modal","Spinner","Link","useRouter","fetchPartsWithMachineData","fetchClients","fetchModels","formatDate","useAuth","LoggedIn","ClientTable","ModelTable","PartTable","styles","firebase","SOCAL_CLIENT_ID","NORCAL_CLIENT_ID","UNASSIGNED_CLIENT_ID","simulateNetworkRequest","Promise","resolve","setTimeout","LoadingButton","type","name","route","isLoading","setLoading","then","MainSearch","signOut","info","setInfo","backupInfo","setBackupInfo","augmentedInfo","setAugmentedInfo","setIsLoading","ids","setID","show","setShow","dItem","setDItem","select","setSelect","showList","setShowList","showListSearch","setShowListSearch","search","setSearch","selectedOEM","setSelectedOEM","selectedModality","setSelectedModality","selectedClientFrom","setSelectedClientFrom","clientFromButtonText","setClientFromButtonText","selectedClientCurrent","setSelectedClientCurrent","clientCurrentButtonText","setClientCurrentButtonText","clients","setClients","showClientModal","setShowClientModal","clientSelectionType","setClientSelectionType","router","labelBase","labelBaseNames","sortCheckBase","labels","setLabels","sortCheck","setSortCheck","hoverIndex","setHoverIndex","selectedModel","setSelectedModel","gPos","setGPos","gIde","setGIde","isDeleting","setIsDeleting","fetchData","query","inputText","selectedType","load","attempt","e","r","Math","pow","data","map","item","id","db","firestore","machineIds","curMachineIds","Machine","push","CurrentMachine","uniq","arr","Set","mIds","cIds","fetchMachineClients","length","out","chunks","i","slice","chunk","snap","collection","where","FieldPath","documentId","get","forEach","doc","md","client","fromMap","curMap","all","augmented","clientFromId","clientCurrentId","filter","it","visible","err","console","error","searchChangeHandler","event","target","value","filterParts","base","noFilters","filtered","machineData","OEM","Modality","Model","s","String","toLowerCase","includes","parts","date","split","mm","dd","yyyy","reformatted","Array","isArray","workOrders","some","wo","workOrder","pn","desc","sortCheckAll","pos","sortedInfo","sort","a","b","localeCompare","Date","parse","Number","prevSortCheck","_","index","rowSelect","log","selectedItems","setSelectedItems","showDeleteModal","setShowDeleteModal","handleSelectItem","prev","x","handleShowDeleteModal","handleCloseDeleteModal","handleDeleteSelected","itemId","delete","deleteFromStorage","handleClose","handleShow","checkDelete","idsToDelete","preventDefault","stopPropagation","hoverStyle","backgroundColor","textAlign","cursor","dropdown1Text","setDropdown1Text","dropdown2Text","setDropdown2Text","handleSelect1","eventKey","textContent","handleSelect2","handleClientClick","clientsData","setClientSearchTerm","handleClientSelect","clientId","clientSnap","exists","clientData","handleClientInfo","clientName","handleClearClientSelection","models","setModels","showModelModal","setShowModelModal","modelButtonText","setModelButtonText","handleModelClick","modelsData","setModelSearchTerm","handleModelSelect","modelName","handleClearModelSelection","handleSoCalWarehouseClick","handleNorCalWarehouseClick","handleWarehouseUnassignedClick","clientSearchTerm","modelSearchTerm","storageRef","storage","ref","folderRef","child","listResult","listAll","deletePromises","items","deleteFromPartsCollection","model","minHeight","maxWidth","divider","buttonGroup","flexButton","tableContainer","searchContainer","flex","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Card,\n  Row,\n  Col,\n  InputGroup,\n  Dropdown,\n  FormControl,\n  Button,\n  NavDropdown,\n  Form,\n  Modal,\n  Spinner,\n} from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport {\n  fetchPartsWithMachineData,\n  fetchClients,\n  fetchModels,\n  formatDate,\n} from \"../../utils/fetchAssociations\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\nimport ClientTable from \"../../utils/ClientTable\";\nimport ModelTable from \"../../utils/ModelTable\";\nimport PartTable from \"../../utils/PartTable\";\nimport styles from \"../../styles/MainSearch.module.css\";\nimport firebase from \"../../context/Firebase\";\n\n// Predefined warehouse client IDs and display names\nconst SOCAL_CLIENT_ID = \"AIS17182\";\nconst NORCAL_CLIENT_ID = \"AIS25097\";\nconst UNASSIGNED_CLIENT_ID = \"AIS00404\";\n\n\n// Simulates a network request delay\nfunction simulateNetworkRequest() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\n// Custom LoadingButton component\nfunction LoadingButton({ type, name, route }) {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n\n  return (\n    <Link href={`/${route}`}>\n      <a\n        className={`btn btn-${type}`}\n        disabled={isLoading}\n        onClick={() => !isLoading && setLoading(true)}\n      >\n        {isLoading ? \"Loadingâ€¦\" : name}\n      </a>\n    </Link>\n  );\n}\n\nexport default function MainSearch() {\n  const { signOut } = useAuth();\n  const [info, setInfo] = useState([]);\n  const [backupInfo, setBackupInfo] = useState([]);\n  const [augmentedInfo, setAugmentedInfo] = useState([]); // items with clientFromId/currentId added\n  const [isLoading, setIsLoading] = useState(true);\n  const [ids, setID] = useState([]);\n  const [show, setShow] = useState(false);\n  const [dItem, setDItem] = useState();\n  const [select, setSelect] = useState(\"Name\");\n  const [showList, setShowList] = useState(false);\n  const [showListSearch, setShowListSearch] = useState(\"text\");\n  const [search, setSearch] = useState(\"\");\n  const [selectedOEM, setSelectedOEM] = useState(null);\n  const [selectedModality, setSelectedModality] = useState(null);\n  // Replace the old single client state with two sets:\n  const [selectedClientFrom, setSelectedClientFrom] = useState(null);\n  const [clientFromButtonText, setClientFromButtonText] = useState(\"Select Option\");\n  const [selectedClientCurrent, setSelectedClientCurrent] = useState(null);\n  const [clientCurrentButtonText, setClientCurrentButtonText] = useState(\"Select Option\");\n\n  const [clients, setClients] = useState([]);\n  const [showClientModal, setShowClientModal] = useState(false);\n  // This state tells the modal which client box is being updated: \"from\" or \"current\"\n  const [clientSelectionType, setClientSelectionType] = useState(null);\n\n  const router = useRouter();\n  const labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  const labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  const sortCheckBase = [false, false, false, false, false, false];\n  const [labels, setLabels] = useState(labelBase);\n  const [sortCheck, setSortCheck] = useState(sortCheckBase);\n  const [hoverIndex, setHoverIndex] = useState(null);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [gPos, setGPos] = useState(null);\n  const [gIde, setGIde] = useState(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n\n  // Fetch data on component mount and route change\n  useEffect(() => {\n    fetchData();\n  }, [router.route]);\n\n async function fetchData() {\n   setIsLoading(true);\n   try {\n     if (router.query.inputText && router.query.selectedType) {\n       setSelect(router.query.selectedType);\n       setSearch(router.query.inputText);\n     }\n     // light retry for transient Firestore hiccups\n     const load = async (attempt = 1) => {\n       try {\n         return await fetchPartsWithMachineData();\n       } catch (e) {\n         if (attempt >= 3) throw e;\n         await new Promise(r => setTimeout(r, 250 * Math.pow(2, attempt - 1)));\n         return load(attempt + 1);\n       }\n     };\n     const data = await load();\n     setBackupInfo(data);\n     setID(data.map((item) => item.id));\n\n     // --- Pre-augment: resolve client ids of Machine / CurrentMachine once ---\n     const db = firebase.firestore();\n     const machineIds = [];\n     const curMachineIds = [];\n     for (const item of data) {\n       if (item?.Machine?.id) machineIds.push(item.Machine.id);\n       if (item?.CurrentMachine?.id) curMachineIds.push(item.CurrentMachine.id);\n     }\n     const uniq = (arr) => [...new Set(arr)];\n     const mIds = uniq(machineIds);\n     const cIds = uniq(curMachineIds);\n\n     const fetchMachineClients = async (ids) => {\n       if (!ids.length) return {};\n       const out = {};\n       // Firestore \"in\" supports up to 10 document IDs per query\n       const chunks = [];\n       for (let i = 0; i < ids.length; i += 10) chunks.push(ids.slice(i, i + 10));\n       for (const chunk of chunks) {\n         const snap = await db\n           .collection(\"Machine\")\n           .where(firebase.firestore.FieldPath.documentId(), \"in\", chunk)\n           .get();\n         snap.forEach((doc) => {\n           const md = doc.data() || {};\n           out[doc.id] = md.client?.id || null;\n         });\n       }\n       return out;\n     };\n\n     const [fromMap, curMap] = await Promise.all([\n       fetchMachineClients(mIds),\n       fetchMachineClients(cIds),\n     ]);\n\n     const augmented = data.map((item) => ({\n       ...item,\n       // keep existing fields; add fast client id fields for sync filtering\n       clientFromId: item?.Machine?.id ? fromMap[item.Machine.id] ?? null : null,\n       clientCurrentId: item?.CurrentMachine?.id ? curMap[item.CurrentMachine.id] ?? null : null,\n     }));\n\n     setAugmentedInfo(augmented);\n     // default view = everything not explicitly hidden\n     setInfo(augmented.filter((it) => it.visible !== false));\n   } catch (err) {\n     console.error(\"Error fetching data:\", err);\n     setInfo([]);\n     setAugmentedInfo([]);\n   } finally {\n     setIsLoading(false);\n   }\n }\n\n  const searchChangeHandler = (event) => setSearch(event.target.value);\n\n  // Asynchronous filter function that loops through backupInfo and,\n  // for each item, fetches its Machine and CurrentMachine documents,\n  // then compares the client id (from machineData.client.id) to the selected client.\n  useEffect(() => {\n      function filterParts() {\n     const base = augmentedInfo; // already has clientFromId/clientCurrentId\n     const noFilters =\n       !selectedOEM &&\n       !selectedModality &&\n       !selectedModel &&\n       !selectedClientFrom &&\n       !selectedClientCurrent &&\n       !search;\n     if (noFilters) {\n       setInfo(base.filter((it) => it.visible !== false));\n       return;\n     }\n\n     const filtered = base.filter((item) => {\n       // only hide when explicitly false\n       if (item.visible === false) return false;\n\n       // OEM/modality/model via machineData (you already put this in items)\n       if (item.machineData) {\n         if (selectedOEM && item.machineData.OEM !== selectedOEM) return false;\n         if (selectedModality && item.machineData.Modality !== selectedModality) return false;\n         if (selectedModel && item.machineData.Model !== selectedModel) return false;\n       }\n\n       // Client filters (now instant)\n       if (selectedClientFrom && item.clientFromId !== selectedClientFrom) return false;\n       if (selectedClientCurrent && item.clientCurrentId !== selectedClientCurrent) return false;\n\n       // Search\n       if (search) {\n         const s = String(search).toLowerCase();\n         if (select === \"Name\") {\n           return (item.name || \"\").toLowerCase().includes(s);\n         }\n         if (select === \"Date\") {\n           // your items look like mm/dd/yyyy\n           const parts = (item.date || \"\").split(\"/\");\n           if (parts.length === 3) {\n             const [mm, dd, yyyy] = parts;\n             const reformatted = `${yyyy}-${mm}-${dd}`;\n             return reformatted === search;\n           }\n           return false;\n         }\n         if (select === \"Work Order\") {\n           return Array.isArray(item.workOrders) &&\n             item.workOrders.some((wo) => String(wo.workOrder || \"\").toLowerCase().includes(s));\n         }\n         if (select === \"Product Number\") {\n           return String(item.pn || \"\").toLowerCase().includes(s);\n         }\n         if (select === \"Description\") {\n           return String(item.desc || \"\").toLowerCase().includes(s);\n         }\n         if (select === \"SKU\") {\n           return String(item.id || \"\").toLowerCase().includes(s);\n         }\n       }\n       return true;\n     });\n     setInfo(filtered);\n   }\n   filterParts();\n }, [selectedOEM, selectedModality, selectedClientFrom, selectedClientCurrent, selectedModel, search, select, augmentedInfo]);\n\n  function sortCheckAll(pos) {\n    const sortedInfo = [...info].sort((a, b) => {\n      if (pos === 0 || pos === 5) {\n        return sortCheck[pos]\n          ? b[labelBaseNames[pos]].localeCompare(a[labelBaseNames[pos]])\n          : a[labelBaseNames[pos]].localeCompare(b[labelBaseNames[pos]]);\n      }\n      if (pos === 1) {\n        return sortCheck[pos]\n          ? Date.parse(b[labelBaseNames[pos]]) - Date.parse(a[labelBaseNames[pos]])\n          : Date.parse(a[labelBaseNames[pos]]) - Date.parse(b[labelBaseNames[pos]]);\n      }\n      return sortCheck[pos]\n        ? Number(b[labelBaseNames[pos]]) - Number(a[labelBaseNames[pos]])\n        : Number(a[labelBaseNames[pos]]) - Number(b[labelBaseNames[pos]]);\n    });\n    setInfo(sortedInfo);\n    setSortCheck((prevSortCheck) =>\n      prevSortCheck.map((_, index) =>\n        index === pos ? !prevSortCheck[pos] : prevSortCheck[index]\n      )\n    );\n  }\n\n  const rowSelect = (item) => {\n    if (item && item.id) {\n      console.log(\"Selected item:\", item);\n      router.push(\"./item/\" + item.id);\n    } else {\n      console.error(\"Unable to determine the selected itemâ€™s ID: \", item);\n    }\n  };\n\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const handleSelectItem = (id) => {\n    setSelectedItems(prev =>\n      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]\n    );\n  };\n\n\n  // setSelectedItems((prev) => {\n  //   const newSelection = prev.includes(id)\n  //     ? prev.filter((itemId) => itemId !== id)\n  //     : [...prev, id];\n  //   console.log(\"Selected items:\", newSelection);\n  //   return newSelection; // <- important\n  // });\n\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n\n  const handleDeleteSelected = async () => {\n    setIsDeleting(true);\n    const db = firebase.firestore();\n    try {\n      // Loop over each selected item one at a time\n      for (const itemId of selectedItems) {\n        console.log(itemId)\n        try {\n          // Delete from \"Test\" collection\n          await db.collection(\"Test\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Test:`, err);\n        }\n        try {\n          // Delete from \"Parts\" collection\n          await db.collection(\"Parts\").doc(itemId).delete();\n        } catch (err) {\n          console.error(`Error deleting document ${itemId} from Parts:`, err);\n        }\n        try {\n          // Delete associated photos from storage\n          await deleteFromStorage(itemId);\n        } catch (err) {\n          console.error(`Error deleting storage for ${itemId}:`, err);\n        }\n      }\n      // Update local state by filtering out the deleted items\n      setInfo(info.filter((item) => !selectedItems.includes(item.id)));\n      setSelectedItems([]);\n    } catch (error) {\n      console.error(\"Error deleting items:\", error);\n    } finally {\n      setIsDeleting(false);\n      handleCloseDeleteModal();\n      // Optionally, reload the page\n      // router.reload();\n    }\n  };\n\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const checkDelete = (event, pos, idsToDelete, name) => {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    console.log(\"Selected IDs to delete:\", idsToDelete);\n    setSelectedItems(idsToDelete);\n    setDItem(name);\n    setShowDeleteModal(true);\n  };\n\n  // const handleDelete = async () => {\n  //   let itemId = gIde;\n  //   try {\n  //     setIsDeleting(true);\n  //     const db = firebase.firestore();\n  //     await db.collection(\"Test\").doc(itemId).delete();\n  //     await deleteFromPartsCollection(itemId);\n  //     await deleteFromStorage(itemId);\n  //     setInfo(info.filter((_, i) => gPos !== i));\n  //     console.log(`Deleted item: ${itemId}`);\n  //   } catch (error) {\n  //     console.error(\"Error deleting item:\", error);\n  //   } finally {\n  //     setIsDeleting(false);\n  //   }\n  //   handleClose();\n  // };\n\n  const hoverStyle = (index) => ({\n    backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n    textAlign: \"center\",\n    cursor: \"default\",\n  });\n\n  const [dropdown1Text, setDropdown1Text] = useState(\"Select Option\");\n  const [dropdown2Text, setDropdown2Text] = useState(\"Select Option\");\n\n  const handleSelect1 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  const handleSelect2 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  };\n\n  // --------------------\n  // CLIENT SELECTION HANDLING\n  // --------------------\n  // This function fetches clients and opens the client modal.\n  const handleClientClick = async () => {\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\n    setClients(clientsData);\n    setClientSearchTerm(\"\");\n    setShowClientModal(true);\n  };\n\n  // When a client is selected in the modal, we now assume the parameter is a client ID.\n  // If the passed value is null, we clear the selection.\n  const handleClientSelect = async (clientId) => {\n    console.log(\"User selected client id:\", clientId);\n    if (!clientId) {\n      if (clientSelectionType === \"from\") {\n        setClientFromButtonText(\"Select Option\");\n        setSelectedClientFrom(null);\n      } else if (clientSelectionType === \"current\") {\n        setClientCurrentButtonText(\"Select Option\");\n        setSelectedClientCurrent(null);\n      }\n      setShowClientModal(false);\n      return;\n    }\n    try {\n      const clientSnap = await firebase.firestore().collection(\"Client\").doc(clientId).get();\n      if (clientSnap.exists) {\n        const clientData = clientSnap.data();\n        if (clientSelectionType === \"from\") {\n          setClientFromButtonText(clientData.name);\n          setSelectedClientFrom(clientId);\n        } else if (clientSelectionType === \"current\") {\n          setClientCurrentButtonText(clientData.name);\n          setSelectedClientCurrent(clientId);\n        }\n      } else {\n        console.error(\"No client document found for id:\", clientId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n    }\n    setShowClientModal(false);\n  };\n\n  const handleClientInfo = (clientId, clientName) => {\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\n    router.push(\"client/\" + clientId);\n  };\n\n  const handleClearClientSelection = () => {\n    if (clientSelectionType === \"from\") {\n      setClientFromButtonText(\"Select Option\");\n      setSelectedClientFrom(null);\n    } else if (clientSelectionType === \"current\") {\n      setClientCurrentButtonText(\"Select Option\");\n      setSelectedClientCurrent(null);\n    }\n    setShowClientModal(false);\n  };\n\n  // --------------------\n  // MODEL SELECTION HANDLING\n  // --------------------\n  const [models, setModels] = useState([]);\n  const [showModelModal, setShowModelModal] = useState(false);\n  const [modelButtonText, setModelButtonText] = useState(\"Select Option\");\n\n  const handleModelClick = async () => {\n    const modelsData = await fetchModels(\n      selectedOEM,\n      selectedModality,\n      selectedClientFrom\n    );\n    setModels(modelsData);\n    setModelSearchTerm(\"\");\n    setShowModelModal(true);\n  };\n\n  const handleModelSelect = (modelName) => {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  };\n\n  const handleClearModelSelection = () => {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n  };\n\n  // --------------------\n  // WAREHOUSE BUTTONS (for Client Current)\n  // --------------------\n  const handleSoCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"SoCal Warehouse\");\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\n  };\n\n  const handleNorCalWarehouseClick = () => {\n    setClientCurrentButtonText(\"NorCal Warehouse\");\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\n  };\n\n  const handleWarehouseUnassignedClick = () => {\n    setClientCurrentButtonText(\"Unassigned\");\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\n  };\n\n  const [clientSearchTerm, setClientSearchTerm] = useState(\"\");\n  const [modelSearchTerm, setModelSearchTerm] = useState(\"\");\n\n  const deleteFromStorage = async (itemId) => {\n    const storageRef = firebase.storage().ref();\n    const folderRef = storageRef.child(`Parts/${itemId}/`);\n    try {\n      const listResult = await folderRef.listAll();\n      const deletePromises = listResult.items.map((item) => item.delete());\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\"Error deleting from storage:\", error);\n    }\n  };\n\n  const deleteFromPartsCollection = async (itemId) => {\n    const db = firebase.firestore();\n    try {\n      await db.collection(\"Parts\").doc(itemId).delete();\n      console.log(`Deleted item from Parts collection: ${itemId}`);\n    } catch (error) {\n      console.error(\"Error deleting from Parts collection:\", error);\n    }\n  };\n\n  return (\n    <LoggedIn>\n      {isDeleting && (\n        <div className=\"loading-overlay\">\n          <Spinner animation=\"border\" role=\"status\" className=\"spinner-center\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        </div>\n      )}\n      <Modal show={showDeleteModal} onHide={handleCloseDeleteModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Confirm Deletion</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to delete {selectedItems.length} item\n          {selectedItems.length > 1 ? \"s\" : \"\"}?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={handleDeleteSelected}>\n            Yes, delete\n          </Button>\n          <Button variant=\"secondary\" onClick={handleCloseDeleteModal}>\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal show={showClientModal} onHide={() => setShowClientModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            Select {clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\"}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Search by name\"\n            className=\"mb-3\"\n            value={clientSearchTerm}\n            onChange={(e) => setClientSearchTerm(e.target.value)}\n          />\n          <ClientTable\n            clients={clients.filter((client) =>\n              client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())\n            )}\n            onSelectClient={handleClientSelect}\n            onInfoClick={handleClientInfo}\n            isClientSearch={false}\n            clearSelection={() => handleClientSelect(null)}\n          />\n        </Modal.Body>\n      </Modal>\n\n      <Modal show={showModelModal} onHide={() => setShowModelModal(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Select Model</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Search by name\"\n            className=\"mb-3\"\n            value={modelSearchTerm}\n            onChange={(e) => setModelSearchTerm(e.target.value)}\n          />\n          <ModelTable\n            models={models.filter((model) =>\n              typeof model === \"string\"\n                ? model.toLowerCase().includes(modelSearchTerm.toLowerCase())\n                : false\n            )}\n            onSelectModel={handleModelSelect}\n            clearSelection={() => handleModelSelect(null)}\n          />\n        </Modal.Body>\n      </Modal>\n\n      <Container\n        className=\"d-flex align-items-center justify-content-center\"\n        style={{ minHeight: \"100vh\" }}\n      >\n        <div className=\"w-100\" style={{ maxWidth: \"1200px\" }}>\n          <Card>\n            <Card.Body>\n              <h2 className=\"text-center mb-4\">Magmo</h2>\n              <Row>\n                <Col md={4}>\n                  {/* Dropdowns */}\n                  <div>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>OEM</InputGroup.Text>\n                      <Dropdown onSelect={handleSelect1}>\n                        <Dropdown.Toggle\n                          variant=\"outline-secondary\"\n                          id=\"dropdown-button-1\"\n                          className=\"w-100\"\n                        >\n                          {dropdown1Text}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu className=\"w-100\">\n                          <Dropdown.Item eventKey=\"unassigned\">\n                            Select Option\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"GE\">GE</Dropdown.Item>\n                          <Dropdown.Item eventKey=\"Toshiba\">\n                            Toshiba\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"Siemens\">\n                            Siemens\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"Philips\">\n                            Philips\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </InputGroup>\n\n                    <InputGroup className=\"mb-5\">\n                      <InputGroup.Text>Modality</InputGroup.Text>\n                      <Dropdown onSelect={handleSelect2}>\n                        <Dropdown.Toggle\n                          variant=\"outline-secondary\"\n                          id=\"dropdown-button-2\"\n                          className=\"w-100\"\n                        >\n                          {dropdown2Text}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu className=\"w-100\">\n                          <Dropdown.Item eventKey=\"unassigned\">\n                            Select Option\n                          </Dropdown.Item>\n                          <Dropdown.Item eventKey=\"CT\">CT</Dropdown.Item>\n                          <Dropdown.Item eventKey=\"MRI\">MRI</Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </InputGroup>\n                  </div>\n\n                  <div className={styles.divider}></div>\n\n                  {/* Client selection boxes */}\n                  <div>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Client From</InputGroup.Text>\n                      <Button\n                        variant=\"outline-secondary\"\n                        className=\"w-100\"\n                        onClick={() => {\n                          setClientSelectionType(\"from\");\n                          handleClientClick();\n                        }}\n                      >\n                        {clientFromButtonText}\n                      </Button>\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Client Current</InputGroup.Text>\n                      <Button\n                        variant=\"outline-secondary\"\n                        className=\"w-100\"\n                        onClick={() => {\n                          setClientSelectionType(\"current\");\n                          handleClientClick();\n                        }}\n                      >\n                        {clientCurrentButtonText}\n                      </Button>\n                    </InputGroup>\n\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Model</InputGroup.Text>\n                      <Button\n                        variant=\"outline-secondary\"\n                        className=\"w-100\"\n                        onClick={handleModelClick}\n                      >\n                        {modelButtonText}\n                      </Button>\n                    </InputGroup>\n\n                    <div className={styles.divider}></div>\n\n                    {/* Warehouse buttons for Client Current */}\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Text>Warehouse</InputGroup.Text>\n                      <div className={styles.buttonGroup}>\n                        <Button\n                          variant=\"outline-secondary\"\n                          className={styles.flexButton}\n                          onClick={handleSoCalWarehouseClick}\n                        >\n                          SoCal Warehouse\n                        </Button>\n                        <Button\n                          variant=\"outline-secondary\"\n                          className={styles.flexButton}\n                          onClick={handleNorCalWarehouseClick}\n                        >\n                          NorCal Warehouse\n                        </Button>\n                        <Button\n                          variant=\"outline-secondary\"\n                          className={styles.flexButton}\n                          onClick={handleWarehouseUnassignedClick}\n                        >\n                          Unassigned\n                        </Button>\n                      </div>\n                    </InputGroup>\n                  </div>\n                </Col>\n\n                <Col md={8}>\n                  <div className={styles.tableContainer}>\n                    {isLoading ? (\n                      <div className=\"d-flex justify-content-center align-items-center p-5\">\n                        <Spinner animation=\"border\" role=\"status\">\n                          <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                      </div>\n                    ) : (\n                      <PartTable\n                        info={info}\n                        labels={labels}\n                        ids={ids}\n                        hoverStyle={hoverStyle}\n                        sortCheckAll={sortCheckAll}\n                        checkDelete={checkDelete}\n                        isDeleting={isDeleting}\n                        rowSelect={rowSelect}\n                        setHoverIndex={setHoverIndex}\n                        hoverIndex={hoverIndex}\n                        selectedItems={selectedItems}\n                        setSelectedItems={setSelectedItems}\n                      />\n                    )}\n\n                    <div className={styles.searchContainer}>\n                      <Form className=\"d-flex pb-2\">\n                        <FormControl\n                          type={showListSearch}\n                          placeholder=\"Search\"\n                          className=\"me-2 flex-grow-1\"\n                          aria-label=\"Search\"\n                          value={search}\n                          onChange={searchChangeHandler}\n                          style={{ flex: \"1\" }}\n                        />\n                        <NavDropdown\n                          title={select}\n                          id=\"collasible-nav-dropdown\"\n                          show={showList}\n                          onMouseEnter={() => setShowList(true)}\n                          onMouseLeave={() => setShowList(false)}\n                          style={{ marginTop: \"-5px\" }}\n                        >\n                          <NavDropdown.Item onClick={() => { setSelect(\"Name\"); setShowListSearch(\"text\"); }}>\n                            Name\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Date\"); setShowListSearch(\"date\"); }}>\n                            Date\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Work Order\"); setShowListSearch(\"number\"); }}>\n                            Work Order\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Product Number\"); setShowListSearch(\"number\"); }}>\n                            Product Number\n                          </NavDropdown.Item>\n                          <NavDropdown.Item onClick={() => { setSelect(\"Description\"); setShowListSearch(\"text\"); }}>\n                            Description\n                          </NavDropdown.Item>\n                          <NavDropdown.Item\n                            onClick={() => {\n                              setSelect(\"SKU\");\n                              setShowListSearch(\"text\");\n                            }}\n                          >\n                            SKU\n                          </NavDropdown.Item>\n                        </NavDropdown>\n                      </Form>\n                      <div className=\"d-flex justify-content-between\">\n                        <LoadingButton type=\"secondary\" name=\"Add New Item\" route=\"NewSearch/AddItem/NewItem\" />\n                        <LoadingButton type=\"primary\" name=\"Back\" route=\"Warehousedb/WarehouseSelect\" />\n                      </div>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </div>\n      </Container>\n    </LoggedIn>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Modal, Container, Card, Row, Col, InputGroup, Dropdown, FormControl, Button, NavDropdown, Form, Table } from \"react-bootstrap\";\nimport { fetchPartsWithMachineData, fetchClients, fetchModels, formatDate } from \"../../../utils/fetchAssociations\";\nimport { useAuth } from \"../../../context/AuthUserContext\";\nimport LoggedIn from \"../../LoggedIn\";\nimport ClientTable from \"../../../utils/ClientTable\";\nimport ModelTable from \"../../../utils/ModelTable\";\nimport PartTable from \"../../../utils/PartTable\";\nimport styles from \"../../../styles/MainSearch.module.css\";\nimport firebase from \"../../../context/Firebase\";\nvar CLIENT_WAREHOUSE = \"igor-house\";\nvar CLIENT_UNASSIGNED = \"unassigned\";\n\nvar ParentModal = function ParentModal(_ref) {\n  var show = _ref.show,\n      handleClose = _ref.handleClose,\n      setSelectedParent = _ref.setSelectedParent,\n      parts = _ref.parts;\n\n  var _useState = useState([]),\n      info = _useState[0],\n      setInfo = _useState[1];\n\n  var _useState2 = useState([]),\n      backupInfo = _useState2[0],\n      setBackupInfo = _useState2[1]; // const [ids, setID] = useState([]);\n\n\n  var _useState3 = useState(\"\"),\n      search = _useState3[0],\n      setSearch = _useState3[1];\n\n  var _useState4 = useState(\"Name\"),\n      select = _useState4[0],\n      setSelect = _useState4[1];\n\n  var _useState5 = useState(false),\n      showList = _useState5[0],\n      setShowList = _useState5[1];\n\n  var _useState6 = useState(\"text\"),\n      showListSearch = _useState6[0],\n      setShowListSearch = _useState6[1];\n\n  var _useState7 = useState(null),\n      selectedOEM = _useState7[0],\n      setSelectedOEM = _useState7[1];\n\n  var _useState8 = useState(null),\n      selectedModality = _useState8[0],\n      setSelectedModality = _useState8[1];\n\n  var _useState9 = useState(null),\n      selectedClient = _useState9[0],\n      setSelectedClient = _useState9[1];\n\n  var _useState10 = useState([]),\n      clients = _useState10[0],\n      setClients = _useState10[1];\n\n  var _useState11 = useState(false),\n      showClientModal = _useState11[0],\n      setShowClientModal = _useState11[1];\n\n  var _useState12 = useState(\"Select Option\"),\n      clientButtonText = _useState12[0],\n      setClientButtonText = _useState12[1];\n\n  var _useState13 = useState(null),\n      hoverIndex = _useState13[0],\n      setHoverIndex = _useState13[1];\n\n  var _useState14 = useState(null),\n      selectedModel = _useState14[0],\n      setSelectedModel = _useState14[1];\n\n  var _useState15 = useState([]),\n      models = _useState15[0],\n      setModels = _useState15[1];\n\n  var _useState16 = useState(false),\n      showModelModal = _useState16[0],\n      setShowModelModal = _useState16[1];\n\n  var _useState17 = useState(\"Select Option\"),\n      modelButtonText = _useState17[0],\n      setModelButtonText = _useState17[1];\n\n  var _useState18 = useState(\"\"),\n      clientSearchTerm = _useState18[0],\n      setClientSearchTerm = _useState18[1];\n\n  var _useState19 = useState(\"\"),\n      modelSearchTerm = _useState19[0],\n      setModelSearchTerm = _useState19[1];\n\n  useEffect(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetchPartsWithMachineData();\n\n              case 2:\n                data = _context.sent;\n                setInfo(data);\n                setBackupInfo(data); // setID(data.map((item) => item.id)); // Ensure IDs are correctly set here\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, []);\n\n  var handleCloseClientModal = function handleCloseClientModal() {\n    return setShowClientModal(false);\n  };\n\n  var handleShowClientModal = function handleShowClientModal() {\n    return setShowClientModal(true);\n  };\n\n  var handleCloseModelModal = function handleCloseModelModal() {\n    return setShowModelModal(false);\n  };\n\n  var handleShowModelModal = function handleShowModelModal() {\n    return setShowModelModal(true);\n  }; // Handle search input changes\n\n\n  var searchChangeHandler = function searchChangeHandler(event) {\n    return setSearch(event.target.value);\n  }; // Filter items based on search criteria\n\n\n  function searchFilter() {\n    var temp = backupInfo.filter(function (item) {\n      if (item.machineData) {\n        if (selectedOEM && item.machineData.OEM !== selectedOEM) return false;\n        if (selectedModality && item.machineData.Modality !== selectedModality) return false;\n        if (selectedClient && item.machineData.Client !== selectedClient) return false;\n        if (selectedModel && item.machineData.Model !== selectedModel) return false;\n      }\n\n      if (select === \"Name\" && item.name.toLowerCase().includes(search.toLowerCase())) return true;\n\n      if (select === \"Date\") {\n        var _item$date$split = item.date.split(\"/\"),\n            _item$date$split2 = _slicedToArray(_item$date$split, 3),\n            month = _item$date$split2[0],\n            day = _item$date$split2[1],\n            year = _item$date$split2[2];\n\n        var reformattedDate = \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n        return reformattedDate === search;\n      }\n\n      if (select === \"Work Order\" && Number(item.wo) === Number(search)) return true;\n      if (select === \"Product Number\" && Number(item.pn) === Number(search)) return true;\n      if (select === \"Description\" && item.desc.toLowerCase().includes(search.toLowerCase())) return true;\n      return false;\n    });\n    setInfo(temp);\n  } // Sort items based on column\n\n\n  function sortCheckAll(pos) {\n    var sortedInfo = _toConsumableArray(info).sort(function (a, b) {\n      if (pos === 0 || pos === 5) {\n        return b[select].localeCompare(a[select]);\n      }\n\n      if (pos === 1) {\n        return Date.parse(b[select]) - Date.parse(a[select]);\n      }\n\n      return Number(b[select]) - Number(a[select]);\n    });\n\n    setInfo(sortedInfo);\n  } // Row selection handler\n\n\n  var rowSelect = function rowSelect(item) {\n    // item.id must be present in fetchPartsWithMachineData() results\n    setSelectedParent({\n      id: item.id,\n      name: item.name,\n      pn: item.pn\n    });\n    handleClose();\n  }; // Dropdown handlers\n\n\n  var _useState20 = useState(\"Select Option\"),\n      dropdown1Text = _useState20[0],\n      setDropdown1Text = _useState20[1];\n\n  var _useState21 = useState(\"Select Option\"),\n      dropdown2Text = _useState21[0],\n      setDropdown2Text = _useState21[1];\n\n  var handleSelect1 = function handleSelect1(eventKey, event) {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  var handleSelect2 = function handleSelect2(eventKey, event) {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  };\n\n  useEffect(function () {\n    searchFilter();\n  }, [selectedOEM, selectedModality, selectedClient, selectedModel, search]); // Fetch clients and show modal\n\n  var handleClientClick = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var clientsData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"clicked\");\n              _context2.next = 3;\n              return fetchClients(selectedOEM, selectedModality);\n\n            case 3:\n              clientsData = _context2.sent;\n              setClients(clientsData);\n              setClientSearchTerm(\"\"); // Reset search term\n\n              setShowClientModal(true);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleClientClick() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Client selection handler\n\n\n  var handleClientSelect = function handleClientSelect(clientName) {\n    setClientButtonText(clientName || \"Select Option\");\n    setSelectedClient(clientName || null);\n    setShowClientModal(false);\n  }; // Client info handler\n\n\n  var handleClientInfo = function handleClientInfo(clientId, clientName) {\n    console.log(\"Client ID: \".concat(clientId, \", Client Name: \").concat(clientName));\n  }; // Clear client selection handler\n\n\n  var handleClearClientSelection = function handleClearClientSelection() {\n    setClientButtonText(\"Select Option\");\n    setSelectedClient(null);\n    setShowClientModal(false);\n    searchFilter();\n  }; // Fetch models and show modal\n\n\n  var handleModelClick = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var modelsData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetchModels(selectedOEM, selectedModality, selectedClient);\n\n            case 2:\n              modelsData = _context3.sent;\n              setModels(modelsData);\n              setModelSearchTerm(\"\"); // Reset search term\n\n              setShowModelModal(true);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleModelClick() {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // Model selection handler\n\n\n  var handleModelSelect = function handleModelSelect(modelName) {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  }; // Clear model selection handler\n\n\n  var handleClearModelSelection = function handleClearModelSelection() {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n    searchFilter();\n  };\n\n  var handleWarehouseClick = function handleWarehouseClick() {\n    setClientButtonText(CLIENT_WAREHOUSE);\n    setSelectedClient(CLIENT_WAREHOUSE);\n    searchFilter();\n  };\n\n  var handleUnassignedClick = function handleUnassignedClick() {\n    setClientButtonText(CLIENT_UNASSIGNED);\n    setSelectedClient(CLIENT_UNASSIGNED);\n    searchFilter();\n  };\n\n  return __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    size: \"lg\",\n    centered: true,\n    scrollable: true,\n    dialogClassName: \"parent-modal-dialog\"\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Parent\")), __jsx(Modal.Body, {\n    style: {\n      maxHeight: \"75vh\",\n      overflowY: \"auto\"\n    }\n  }, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"unset\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"1200px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(Row, null, __jsx(Col, {\n    md: 4\n  }, __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"OEM\"), __jsx(Dropdown, {\n    onSelect: handleSelect1\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-1\",\n    className: \"w-100\"\n  }, dropdown1Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"GE\"\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\"\n  }, \"Toshiba\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\"\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\"\n  }, \"Philips\")))), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Modality\"), __jsx(Dropdown, {\n    onSelect: handleSelect2\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-2\",\n    className: \"w-100\"\n  }, dropdown2Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"CT\"\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\"\n  }, \"MRI\")))), __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleClientClick\n  }, clientButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client-2\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    disabled: true\n  }, \"Select Option\")), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Model\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleModelClick\n  }, modelButtonText)), __jsx(\"div\", {\n    className: styles.divider\n  }), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Warehouse\"), __jsx(\"div\", {\n    className: styles.buttonGroup\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleWarehouseClick\n  }, \"Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleUnassignedClick\n  }, \"Unassigned\")))))), __jsx(Col, {\n    md: 8\n  }, __jsx(\"div\", {\n    className: styles.tableContainer\n  }, __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    className: \"mb-0\"\n  }, __jsx(\"thead\", {\n    className: styles.stickyHeader\n  }, __jsx(\"tr\", null, __jsx(\"th\", {\n    onClick: function onClick() {\n      return sortCheckAll(0);\n    }\n  }, \"Name\"), __jsx(\"th\", {\n    onClick: function onClick() {\n      return sortCheckAll(1);\n    }\n  }, \"Date\"), __jsx(\"th\", {\n    onClick: function onClick() {\n      return sortCheckAll(2);\n    }\n  }, \"Work Order\"), __jsx(\"th\", {\n    onClick: function onClick() {\n      return sortCheckAll(3);\n    }\n  }, \"Product Number\"), __jsx(\"th\", {\n    onClick: function onClick() {\n      return sortCheckAll(4);\n    }\n  }, \"Serial Number\"), __jsx(\"th\", null, \"Select\"))), __jsx(\"tbody\", null, info.map(function (item) {\n    return __jsx(\"tr\", {\n      className: \"clickable-row\",\n      key: item.id\n    }, __jsx(\"td\", null, item.name), __jsx(\"td\", null, formatDate(item.date)), __jsx(\"td\", null, item.workOrders && item.workOrders.length > 0 ? item.workOrders[item.workOrders.length - 1].workOrder : \"N/A\"), __jsx(\"td\", null, item.pn), __jsx(\"td\", null, item.sn), __jsx(\"td\", null, __jsx(Button, {\n      variant: \"primary\",\n      onClick: function onClick() {\n        return rowSelect(item);\n      }\n    }, \"Select\")));\n  }))), __jsx(\"div\", {\n    className: styles.searchContainer\n  }, __jsx(Form, {\n    className: \"d-flex pb-2\"\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2 flex-grow-1\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler,\n    style: {\n      flex: \"1\"\n    }\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: function onMouseEnter() {\n      return setShowList(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setShowList(false);\n    },\n    style: {\n      marginTop: \"-5px\"\n    }\n  }, __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      return setSelect(\"Name\") & setShowListSearch(\"text\");\n    }\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      return setSelect(\"Date\") & setShowListSearch(\"date\");\n    }\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      return setSelect(\"Work Order\") & setShowListSearch(\"number\");\n    }\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      return setSelect(\"Product Number\") & setShowListSearch(\"number\");\n    }\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      return setSelect(\"Description\") & setShowListSearch(\"text\");\n    }\n  }, \"Description\")))))))))))), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleClose\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"warning\",\n    onClick: function onClick() {\n      setSelectedParent(null);\n      handleClose();\n    }\n  }, \"Clear Selection\")), __jsx(Modal, {\n    show: showClientModal,\n    onHide: handleCloseClientModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Client\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: clientSearchTerm,\n    onChange: function onChange(e) {\n      return setClientSearchTerm(e.target.value);\n    }\n  }), __jsx(ClientTable, {\n    clients: clients.filter(function (client) {\n      return client.name.toLowerCase().includes(clientSearchTerm.toLowerCase());\n    }),\n    disableInfo: true,\n    onSelectClient: handleClientSelect,\n    onInfoClick: handleClientInfo,\n    clearSelection: function clearSelection() {\n      return handleClientSelect(null);\n    } // Clear selection handler\n\n  }))), __jsx(Modal, {\n    show: showModelModal,\n    onHide: handleCloseModelModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Model\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: modelSearchTerm,\n    onChange: function onChange(e) {\n      return setModelSearchTerm(e.target.value);\n    }\n  }), __jsx(ModelTable, {\n    models: models.filter(function (model) {\n      return typeof model === \"string\" ? model.toLowerCase().includes(modelSearchTerm.toLowerCase()) : false;\n    }),\n    onSelectModel: handleModelSelect,\n    clearSelection: function clearSelection() {\n      return handleModelSelect(null);\n    } // Clear selection handler\n\n  }))));\n};\n\n__jsx(_JSXStyle, {\n  id: \"2081140824\",\n  dynamic: [styles.tableContainer]\n}, [\".parent-modal-dialog{max-width:95vw;margin:0 auto;}\", \".parent-modal-dialog .modal-body .\".concat(styles.tableContainer, \"{max-height:70vh;overflow:auto;}\")]);\n\nexport default ParentModal;","map":null,"metadata":{},"sourceType":"module"}
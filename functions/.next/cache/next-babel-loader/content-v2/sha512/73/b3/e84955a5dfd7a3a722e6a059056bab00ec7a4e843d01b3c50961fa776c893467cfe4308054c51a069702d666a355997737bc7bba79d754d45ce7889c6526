{"ast":null,"code":"import _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { Table, Button, Container, Card, Row, Col, Alert } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\nimport ClientInfoModal from \"../../ClientInfoModal\";\nimport MachineCreationModal from \"../../MachineCreationModal\"; // Import for SSR\n\nvar Client = function Client() {\n  var router = useRouter();\n\n  var _useState = useState(null),\n      selectedClient = _useState[0],\n      setSelectedClient = _useState[1];\n\n  var _useState2 = useState([]),\n      machineOptions = _useState2[0],\n      setMachineOptions = _useState2[1];\n\n  var _useState3 = useState(null),\n      error = _useState3[0],\n      setError = _useState3[1]; // State for machine addition modals\n\n\n  var _useState4 = useState(false),\n      showAddMachineModal = _useState4[0],\n      setShowAddMachineModal = _useState4[1];\n\n  var _useState5 = useState(false),\n      showCreateMachineModal = _useState5[0],\n      setShowCreateMachineModal = _useState5[1];\n\n  var _useState6 = useState([]),\n      availableMachines = _useState6[0],\n      setAvailableMachines = _useState6[1];\n\n  useEffect(function () {\n    if (router.isReady) {\n      var clientId = router.query.clientId; // Extract clientId from query or URL path\n\n      var id = clientId || router.asPath.split(\"/\").pop();\n      fetchClientData(id);\n    }\n  }, [router.isReady]);\n\n  var fetchClientData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(clientId) {\n      var db, clientDoc, clientData, machinePromises, machineDocs, machines;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              db = firebase.firestore();\n              _context.next = 4;\n              return db.collection(\"Client\").doc(clientId).get();\n\n            case 4:\n              clientDoc = _context.sent;\n\n              if (!clientDoc.exists) {\n                _context.next = 16;\n                break;\n              }\n\n              clientData = clientDoc.data();\n              setSelectedClient(clientData); // Fetch machine documents referenced in the client's machines array\n\n              machinePromises = clientData.machines.map(function (machineRef) {\n                return machineRef.get();\n              });\n              _context.next = 11;\n              return Promise.all(machinePromises);\n\n            case 11:\n              machineDocs = _context.sent;\n              machines = machineDocs.map(function (machineDoc) {\n                return _objectSpread({\n                  id: machineDoc.id\n                }, machineDoc.data());\n              });\n              setMachineOptions(machines);\n              _context.next = 17;\n              break;\n\n            case 16:\n              setError(\"Client not found\");\n\n            case 17:\n              _context.next = 23;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching client data:\", _context.t0);\n              setError(\"Error fetching client data\");\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 19]]);\n    }));\n\n    return function fetchClientData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Fetch available machines (those not yet assigned to a client)\n\n\n  var fetchAvailableMachines = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var db, snapshot, machines;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              db = firebase.firestore();\n              _context2.next = 4;\n              return db.collection(\"Machine\").where(\"client\", \"==\", null).get();\n\n            case 4:\n              snapshot = _context2.sent;\n              machines = snapshot.docs.map(function (doc) {\n                return _objectSpread({\n                  id: doc.id\n                }, doc.data());\n              });\n              setAvailableMachines(machines);\n              _context2.next = 13;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"Error fetching available machines:\", _context2.t0);\n              setError(\"Failed to fetch available machines.\");\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n\n    return function fetchAvailableMachines() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleSelectMachine = function handleSelectMachine(id, name) {\n    // Navigate to the machine details page if needed\n    router.push(\"../machine/\" + id);\n  }; // When adding an existing machine\n\n\n  var handleAddMachine = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(machine) {\n      var db, clientId;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              db = firebase.firestore();\n              clientId = router.query.clientId || router.asPath.split(\"/\").pop(); // Update client's \"machines\" array with the machine reference\n\n              _context3.next = 5;\n              return db.collection(\"Client\").doc(clientId).update({\n                machines: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Machine\").doc(machine.id))\n              });\n\n            case 5:\n              // Update local state to include the newly added machine\n              setMachineOptions(function (prev) {\n                return [].concat(_toConsumableArray(prev), [machine]);\n              });\n              setShowAddMachineModal(false);\n              _context3.next = 13;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error adding machine to client:\", _context3.t0);\n              setError(\"Failed to add machine to client.\");\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 9]]);\n    }));\n\n    return function handleAddMachine(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // When creating a new machine for the client\n\n\n  var handleCreateMachine = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(newMachine) {\n      var db, clientId, machineId, machineWithId;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              db = firebase.firestore();\n              clientId = router.query.clientId || router.asPath.split(\"/\").pop();\n              machineId = \"AIS\".concat(Math.floor(10000 + Math.random() * 90000));\n              machineWithId = _objectSpread(_objectSpread({}, newMachine), {}, {\n                id: machineId,\n                client: db.collection(\"Client\").doc(clientId)\n              }); // Create the machine document\n\n              _context4.next = 7;\n              return db.collection(\"Machine\").doc(machineId).set(machineWithId);\n\n            case 7:\n              _context4.next = 9;\n              return db.collection(\"Client\").doc(clientId).update({\n                machines: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Machine\").doc(machineId))\n              });\n\n            case 9:\n              // Update local state\n              setMachineOptions(function (prev) {\n                return [].concat(_toConsumableArray(prev), [_objectSpread({\n                  id: machineId\n                }, newMachine)]);\n              });\n              setShowCreateMachineModal(false);\n              _context4.next = 17;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error(\"Error creating and adding machine:\", _context4.t0);\n              setError(\"Failed to create and add machine.\");\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 13]]);\n    }));\n\n    return function handleCreateMachine(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Open the modal to add an existing machine; fetch available machines first\n\n\n  var openAddMachineModal = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetchAvailableMachines();\n\n            case 2:\n              setShowAddMachineModal(true);\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function openAddMachineModal() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Container, {\n    className: \"mt-5\"\n  }, __jsx(Row, {\n    className: \"justify-content-md-center\"\n  }, __jsx(Col, {\n    md: \"8\"\n  }, __jsx(Card, null, __jsx(Card.Header, null, __jsx(\"h4\", null, \"Client Machines\")), __jsx(Card.Body, null, error && __jsx(Alert, {\n    variant: \"danger\"\n  }, error), selectedClient ? __jsx(React.Fragment, null, __jsx(\"h5\", null, \"Client: \", selectedClient.name), __jsx(\"p\", null, \"Location: \", selectedClient.local), __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    onClick: openAddMachineModal\n  }, \"Add Existing Machine\"), __jsx(Button, {\n    variant: \"secondary\",\n    className: \"ms-2\",\n    onClick: function onClick() {\n      return setShowCreateMachineModal(true);\n    }\n  }, \"Create New Machine\")), __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\"\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Name\"), __jsx(\"th\", null, \"Location\"), __jsx(\"th\", null, \"OEM\"), __jsx(\"th\", null, \"Modality\"), __jsx(\"th\", null, \"Select\"))), __jsx(\"tbody\", null, machineOptions.map(function (machine) {\n    return __jsx(\"tr\", {\n      key: machine.id\n    }, __jsx(\"td\", null, machine.name), __jsx(\"td\", null, machine.local), __jsx(\"td\", null, machine.OEM), __jsx(\"td\", null, machine.Modality), __jsx(\"td\", null, __jsx(Button, {\n      variant: \"primary\",\n      onClick: function onClick() {\n        return handleSelectMachine(machine.id, machine.name);\n      }\n    }, \"Select\")));\n  }))), __jsx(Button, {\n    variant: \"primary\",\n    style: {\n      marginTop: \"20px\"\n    },\n    onClick: function onClick() {\n      return router.back();\n    }\n  }, \"Back\")) : !error && __jsx(\"p\", null, \"Loading client data...\"))))), __jsx(ClientInfoModal, {\n    show: showAddMachineModal,\n    handleClose: function handleClose() {\n      return setShowAddMachineModal(false);\n    },\n    machineOptions: availableMachines,\n    setSelectedMachine: handleAddMachine\n  }), __jsx(MachineCreationModal, {\n    show: showCreateMachineModal,\n    handleClose: function handleClose() {\n      return setShowCreateMachineModal(false);\n    },\n    onCreateMachine: handleCreateMachine\n  }));\n};\n\nexport var __N_SSP = true;\nexport default Client; // Server-side rendering function","map":null,"metadata":{},"sourceType":"module"}
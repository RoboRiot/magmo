{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n\n  try {\n    const {\n      listKey,\n      // \"tasks\" | \"shipping\" | \"receiving\"\n      // common\n      title,\n      linkUrl,\n      bodyText,\n      // shipping/receiving specific (all optional)\n      date,\n      // \"YYYY-MM-DD\"\n      pn,\n      sn,\n      dom,\n      trackingNumber,\n      poNumber,\n      workOrder,\n      localSN,\n      description,\n      photoUrls = []\n    } = req.body; // Map to CHANNEL ids now (not Lists)\n\n    const CHANNEL_IDS = {\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n      shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n      tasks: process.env.SLACK_CHANNEL_TASKS_ID\n    };\n    const channel = CHANNEL_IDS[listKey];\n    if (!channel) return res.status(400).json({\n      error: \"Unknown listKey (channel not configured)\"\n    });\n    const token = process.env.SLACK_BOT_TOKEN;\n    if (!token) return res.status(500).json({\n      error: \"Missing bot token\"\n    });\n\n    const slack = async (method, body, headers = {}) => {\n      const resp = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: _objectSpread({\n          Authorization: `Bearer ${token}`\n        }, headers),\n        body\n      });\n      return resp.json();\n    }; // Build a message for the channel\n\n\n    const lines = [];\n    if (title) lines.push(`*${title}*`);\n\n    if (Array.isArray(pn) || pn) {\n      const pnStr = Array.isArray(pn) ? pn.filter(Boolean).join(\", \") : pn;\n      if (pnStr) lines.push(`PN: ${pnStr}`);\n    }\n\n    if (Array.isArray(sn) || sn) {\n      const snStr = Array.isArray(sn) ? sn.filter(Boolean).join(\", \") : sn;\n      if (snStr) lines.push(`SN: ${snStr}`);\n    }\n\n    if (workOrder) lines.push(`WO: ${workOrder}`);\n    if (poNumber) lines.push(`PO: ${poNumber}`);\n    if (trackingNumber) lines.push(`RL: ${trackingNumber}`);\n    if (dom) lines.push(`DOM: ${dom}`);\n    if (localSN) lines.push(`Local SN: ${localSN}`);\n    if (date) lines.push(`Date: ${date}`);\n    if (description) lines.push(description);\n    if (bodyText && listKey === \"tasks\") lines.push(bodyText);\n    if (linkUrl) lines.push(`<${linkUrl}|Open in Magmo>`);\n    const text = lines.filter(Boolean).join(\"\\n\"); // 1) Post the main message\n\n    const postResp = await slack(\"chat.postMessage\", JSON.stringify({\n      channel,\n      text\n    }), {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    });\n\n    if (!(postResp !== null && postResp !== void 0 && postResp.ok)) {\n      return res.status(400).json({\n        error: (postResp === null || postResp === void 0 ? void 0 : postResp.error) || \"Slack API error (chat.postMessage)\",\n        raw: postResp\n      });\n    } // 2) Optionally upload photos and share to the same channel/thread\n    //    (Requires files:write scope on your bot)\n\n\n    if (Array.isArray(photoUrls) && photoUrls.length) {\n      // Upload via external URLs to avoid proxying the bytes through your server\n      const fileIds = [];\n\n      for (const url of photoUrls) {\n        var _complete$files, _complete$files$;\n\n        // Ask Slack for an external upload URL\n        const up = await slack(\"files.getUploadURLExternal\", new URLSearchParams({\n          filename: url.split(\"/\").pop() || \"image.jpg\"\n        }), {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        });\n        if (!(up !== null && up !== void 0 && up.ok) || !(up !== null && up !== void 0 && up.upload_url)) continue;\n\n        try {\n          const img = await fetch(url);\n          const buf = await img.arrayBuffer();\n          await fetch(up.upload_url, {\n            method: \"PUT\",\n            body: Buffer.from(buf)\n          });\n        } catch (_) {\n          /* ignore upload errors per-file */\n        }\n\n        const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n          files: [{\n            id: up.file_id,\n            title: \"photo\"\n          }]\n        }), {\n          \"Content-Type\": \"application/json\"\n        });\n\n        if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) {\n          fileIds.push(complete.files[0].id);\n        }\n      } // Share uploaded files to channel (in a thread under the message)\n\n\n      if (fileIds.length) {\n        await slack(\"files.share\", JSON.stringify({\n          channel_id: channel,\n          file_ids: fileIds,\n          thread_ts: postResp.ts\n        }), {\n          \"Content-Type\": \"application/json\"\n        });\n      }\n    }\n\n    return res.status(200).json({\n      ok: true,\n      channel,\n      ts: postResp.ts\n    });\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({\n      error: \"Server error\"\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","CHANNEL_IDS","receiving","process","env","SLACK_CHANNEL_RECEIVING_ID","shipping","SLACK_CHANNEL_SHIPPING_ID","tasks","SLACK_CHANNEL_TASKS_ID","channel","token","SLACK_BOT_TOKEN","slack","headers","resp","fetch","Authorization","lines","push","Array","isArray","pnStr","filter","Boolean","join","snStr","text","postResp","JSON","stringify","ok","raw","length","fileIds","url","up","URLSearchParams","filename","split","pop","upload_url","img","buf","arrayBuffer","Buffer","from","_","complete","files","id","file_id","channel_id","file_ids","thread_ts","ts","e","console"],"mappings":"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","sourcesContent":["// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  try {\r\n    const {\r\n      listKey,                // \"tasks\" | \"shipping\" | \"receiving\"\r\n      // common\r\n      title,\r\n      linkUrl,\r\n      bodyText,\r\n\r\n      // shipping/receiving specific (all optional)\r\n      date,                   // \"YYYY-MM-DD\"\r\n      pn,\r\n      sn,\r\n      dom,\r\n      trackingNumber,\r\n      poNumber,\r\n      workOrder,\r\n      localSN,\r\n      description,\r\n      photoUrls = [],\r\n    } = req.body;\r\n\r\n    // Map to CHANNEL ids now (not Lists)\r\n    const CHANNEL_IDS = {\r\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n      shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n      tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n    };\r\n    const channel = CHANNEL_IDS[listKey];\r\n    if (!channel) return res.status(400).json({ error: \"Unknown listKey (channel not configured)\" });\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) return res.status(500).json({ error: \"Missing bot token\" });\r\n\r\n    const slack = async (method, body, headers = {}) => {\r\n      const resp = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: { Authorization: `Bearer ${token}`, ...headers },\r\n        body\r\n      });\r\n      return resp.json();\r\n    };\r\n\r\n    // Build a message for the channel\r\n    const lines = [];\r\n    if (title) lines.push(`*${title}*`);\r\n    if (Array.isArray(pn) || pn) {\r\n      const pnStr = Array.isArray(pn) ? pn.filter(Boolean).join(\", \") : pn;\r\n      if (pnStr) lines.push(`PN: ${pnStr}`);\r\n    }\r\n    if (Array.isArray(sn) || sn) {\r\n      const snStr = Array.isArray(sn) ? sn.filter(Boolean).join(\", \") : sn;\r\n      if (snStr) lines.push(`SN: ${snStr}`);\r\n    }\r\n    if (workOrder)      lines.push(`WO: ${workOrder}`);\r\n    if (poNumber)       lines.push(`PO: ${poNumber}`);\r\n    if (trackingNumber) lines.push(`RL: ${trackingNumber}`);\r\n    if (dom)            lines.push(`DOM: ${dom}`);\r\n    if (localSN)        lines.push(`Local SN: ${localSN}`);\r\n    if (date)           lines.push(`Date: ${date}`);\r\n    if (description)    lines.push(description);\r\n    if (bodyText && listKey === \"tasks\") lines.push(bodyText);\r\n    if (linkUrl)        lines.push(`<${linkUrl}|Open in Magmo>`);\r\n\r\n    const text = lines.filter(Boolean).join(\"\\n\");\r\n\r\n    // 1) Post the main message\r\n    const postResp = await slack(\r\n      \"chat.postMessage\",\r\n      JSON.stringify({ channel, text }),\r\n      { \"Content-Type\": \"application/json; charset=utf-8\" }\r\n    );\r\n    if (!postResp?.ok) {\r\n      return res.status(400).json({ error: postResp?.error || \"Slack API error (chat.postMessage)\", raw: postResp });\r\n    }\r\n\r\n    // 2) Optionally upload photos and share to the same channel/thread\r\n    //    (Requires files:write scope on your bot)\r\n    if (Array.isArray(photoUrls) && photoUrls.length) {\r\n      // Upload via external URLs to avoid proxying the bytes through your server\r\n      const fileIds = [];\r\n      for (const url of photoUrls) {\r\n        // Ask Slack for an external upload URL\r\n        const up = await slack(\r\n          \"files.getUploadURLExternal\",\r\n          new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n          { \"Content-Type\": \"application/x-www-form-urlencoded\" }\r\n        );\r\n        if (!up?.ok || !up?.upload_url) continue;\r\n\r\n        try {\r\n          const img = await fetch(url);\r\n          const buf = await img.arrayBuffer();\r\n          await fetch(up.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n        } catch (_) { /* ignore upload errors per-file */ }\r\n\r\n        const complete = await slack(\r\n          \"files.completeUploadExternal\",\r\n          JSON.stringify({ files: [{ id: up.file_id, title: \"photo\" }] }),\r\n          { \"Content-Type\": \"application/json\" }\r\n        );\r\n        if (complete?.ok && complete?.files?.[0]?.id) {\r\n          fileIds.push(complete.files[0].id);\r\n        }\r\n      }\r\n\r\n      // Share uploaded files to channel (in a thread under the message)\r\n      if (fileIds.length) {\r\n        await slack(\r\n          \"files.share\",\r\n          JSON.stringify({ channel_id: channel, file_ids: fileIds, thread_ts: postResp.ts }),\r\n          { \"Content-Type\": \"application/json\" }\r\n        );\r\n      }\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, channel, ts: postResp.ts });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return res.status(500).json({ error: \"Server error\" });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
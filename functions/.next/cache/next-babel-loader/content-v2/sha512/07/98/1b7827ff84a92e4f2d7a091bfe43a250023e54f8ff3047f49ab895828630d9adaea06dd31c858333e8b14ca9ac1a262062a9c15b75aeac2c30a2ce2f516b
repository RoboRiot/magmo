{"ast":null,"code":"var _photoUrls;\n\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    error: \"Missing SLACK_BOT_TOKEN\"\n  });\n  const {\n    listKey,\n    // \"receiving\" | \"shipping\" | \"tasks\"\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body; // --- ENV mapping ---\n\n  const LISTS = {\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment\n\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment\n\n      }\n    },\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n      }\n    }\n  };\n  const CHANNELS = {\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n    shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n    tasks: process.env.SLACK_CHANNEL_TASKS_ID\n  }; // --- helpers ---\n\n  const headersJson = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n\n  const slack = (method, body, headers = headersJson) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers,\n    body\n  }).then(r => r.json());\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // Build a safe, non-empty title on the server (belt + suspenders)\n\n\n  const safeId = plain(localSN) || plain(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop());\n  const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\"; // -------- PATH A: Slack Lists (preferred for receiving/shipping/tasks lists) --------\n\n  const cfg = LISTS[listKey];\n\n  if (cfg !== null && cfg !== void 0 && cfg.id) {\n    const fields = []; // Description column\n\n    if (cfg.cols.desc && (description || listKey === \"tasks\" && bodyText || linkUrl)) {\n      const textBits = [plain(description), listKey === \"tasks\" ? plain(bodyText) : \"\", linkUrl ? `<${plain(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n      if (textBits) fields.push({\n        column_id: cfg.cols.desc,\n        value: {\n          text: textBits\n        }\n      });\n    }\n\n    if (cfg.cols.date && plain(date)) fields.push({\n      column_id: cfg.cols.date,\n      value: {\n        date: plain(date)\n      }\n    });\n\n    if (cfg.cols.pn && (pn || sn || dom)) {\n      const pnStr = joinArr(pn);\n      const snStr = joinArr(sn);\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`].filter(Boolean).join(\"  \");\n      if (combo) fields.push({\n        column_id: cfg.cols.pn,\n        value: {\n          text: combo\n        }\n      });\n    }\n\n    if (cfg.cols.track && (trackingNumber || poNumber)) {\n      const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`].filter(Boolean).join(\"  \");\n      if (t) fields.push({\n        column_id: cfg.cols.track,\n        value: {\n          text: t\n        }\n      });\n    }\n\n    if (cfg.cols.wo && plain(workOrder)) fields.push({\n      column_id: cfg.cols.wo,\n      value: {\n        text: `WO: ${plain(workOrder)}`\n      }\n    });\n    if (cfg.cols.lsn && plain(localSN)) fields.push({\n      column_id: cfg.cols.lsn,\n      value: {\n        text: plain(localSN)\n      }\n    }); // âœ… Build createBody AFTER cfg/fields exist\n\n    const createBody = {\n      list_id: cfg.id,\n      // Slack Lists expects a rich-text title; this shape renders properly\n      title: [{\n        type: \"rich_text\",\n        elements: [{\n          type: \"rich_text_section\",\n          elements: [{\n            type: \"text\",\n            text: safeTitle\n          }]\n        }]\n      }],\n      fields\n    };\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n    if (!(created !== null && created !== void 0 && created.ok)) return res.status(400).json({\n      error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n      raw: created\n    }); // Attach photos to the attachment column (if configured)\n\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n      const fileIds = [];\n\n      for (const url of photoUrls) {\n        var _complete$files, _complete$files$;\n\n        // Get external upload URL\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: new URLSearchParams({\n            filename: url.split(\"/\").pop() || \"image.jpg\"\n          })\n        }).then(r => r.json());\n        if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n        try {\n          const img = await fetch(url);\n          const buf = await img.arrayBuffer();\n          await fetch(init.upload_url, {\n            method: \"PUT\",\n            body: Buffer.from(buf)\n          });\n        } catch {\n          /* ignore individual image failures */\n        }\n\n        const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n          files: [{\n            id: init.file_id,\n            title: \"photo\"\n          }]\n        }));\n        if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) fileIds.push(complete.files[0].id);\n      }\n\n      if (fileIds.length) {\n        await slack(\"slackLists.items.update\", JSON.stringify({\n          list_id: cfg.id,\n          item_id: created.item.id,\n          fields: [{\n            column_id: cfg.cols.photos,\n            value: {\n              attachment: {\n                file_ids: fileIds\n              }\n            }\n          }]\n        }));\n      }\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.id,\n      item_id: created.item.id\n    });\n  } // -------- PATH B: Fallback to posting in a channel --------\n\n\n  const channel = CHANNELS[listKey];\n  if (!channel) return res.status(400).json({\n    error: \"Unknown listKey (no list or channel configured)\"\n  }); // Join public channel if needed to avoid channel_not_found\n\n  await fetch(\"https://slack.com/api/conversations.join\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      channel\n    })\n  });\n  const lines = [];\n  lines.push(`*${safeTitle}*`);\n  const pnStr = joinArr(pn);\n  const snStr = joinArr(sn);\n  if (pnStr) lines.push(`PN: ${pnStr}`);\n  if (snStr) lines.push(`SN: ${snStr}`);\n  if (plain(workOrder)) lines.push(`WO: ${plain(workOrder)}`);\n  if (plain(poNumber)) lines.push(`PO: ${plain(poNumber)}`);\n  if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\n  if (plain(dom)) lines.push(`DOM: ${plain(dom)}`);\n  if (plain(localSN)) lines.push(`Local SN: ${plain(localSN)}`);\n  if (plain(date)) lines.push(`Date: ${plain(date)}`);\n  const desc = plain(description);\n  if (desc) lines.push(desc);else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\n  if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({\n    channel,\n    text\n  }));\n  if (!(posted !== null && posted !== void 0 && posted.ok)) return res.status(400).json({\n    error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error\",\n    raw: posted\n  });\n  return res.status(200).json({\n    ok: true,\n    mode: \"channel\",\n    channel,\n    ts: posted.ts\n  });\n}\nconsole.log(\"add-to-list payload\", {\n  listKey,\n  title,\n  localSN,\n  pn,\n  sn,\n  hasPhotos: (_photoUrls = photoUrls) === null || _photoUrls === void 0 ? void 0 : _photoUrls.length\n});","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","receiving","id","SLACK_LIST_RECEIVING_ID","cols","desc","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","track","SLACK_LIST_RECEIVING_TRACKING_COL","wo","SLACK_LIST_RECEIVING_WO_COL","lsn","SLACK_LIST_RECEIVING_LOCALSN_COL","photos","SLACK_LIST_RECEIVING_PHOTOS_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_TRACKING_COL","SLACK_LIST_SHIPPING_WO_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_DESCRIPTION_COL","CHANNELS","SLACK_CHANNEL_RECEIVING_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_TASKS_ID","headersJson","Authorization","slack","headers","fetch","then","r","plain","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","safeId","split","pop","safeTitle","cfg","fields","textBits","push","column_id","value","text","pnStr","snStr","combo","t","createBody","list_id","type","elements","created","JSON","stringify","ok","raw","length","fileIds","url","init","URLSearchParams","filename","upload_url","img","buf","arrayBuffer","Buffer","from","complete","files","file_id","item_id","item","attachment","file_ids","mode","channel","lines","posted","ts","console","log","hasPhotos"],"mappings":"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","sourcesContent":["// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n  const {\r\n    listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n    title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body;\r\n\r\n  // --- ENV mapping ---\r\n  const LISTS = {\r\n    receiving: {\r\n      id: process.env.SLACK_LIST_RECEIVING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n      },\r\n    },\r\n    shipping: {\r\n      id: process.env.SLACK_LIST_SHIPPING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n      },\r\n    },\r\n    tasks: {\r\n      id: process.env.SLACK_LIST_TASKS_ID,\r\n      cols: {\r\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n      },\r\n    },\r\n  };\r\n\r\n  const CHANNELS = {\r\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n    shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n    tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n  };\r\n\r\n  // --- helpers ---\r\n  const headersJson = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n  };\r\n  const slack = (method, body, headers = headersJson) =>\r\n    fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body }).then(r => r.json());\r\n\r\n  const plain = v => (v ?? \"\").toString().trim();\r\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n  // Build a safe, non-empty title on the server (belt + suspenders)\r\n  const safeId    = plain(localSN) || plain(linkUrl?.split(\"/\").pop());\r\n  const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\";\r\n\r\n  // -------- PATH A: Slack Lists (preferred for receiving/shipping/tasks lists) --------\r\n  const cfg = LISTS[listKey];\r\n  if (cfg?.id) {\r\n    const fields = [];\r\n\r\n    // Description column\r\n    if (cfg.cols.desc && (description || (listKey === \"tasks\" && bodyText) || linkUrl)) {\r\n      const textBits = [\r\n        plain(description),\r\n        listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n        linkUrl ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n      ].filter(Boolean).join(\"\\n\");\r\n      if (textBits) fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n    }\r\n\r\n    if (cfg.cols.date && plain(date)) fields.push({ column_id: cfg.cols.date, value: { date: plain(date) } });\r\n\r\n    if (cfg.cols.pn && (pn || sn || dom)) {\r\n      const pnStr = joinArr(pn);\r\n      const snStr = joinArr(sn);\r\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n        .filter(Boolean).join(\"  \");\r\n      if (combo) fields.push({ column_id: cfg.cols.pn, value: { text: combo } });\r\n    }\r\n\r\n    if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n      const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n        .filter(Boolean).join(\"  \");\r\n      if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n    }\r\n\r\n    if (cfg.cols.wo  && plain(workOrder)) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${plain(workOrder)}` } });\r\n    if (cfg.cols.lsn && plain(localSN))   fields.push({ column_id: cfg.cols.lsn, value: { text: plain(localSN) } });\r\n\r\n    // âœ… Build createBody AFTER cfg/fields exist\r\n    const createBody = {\r\n      list_id: cfg.id,\r\n      // Slack Lists expects a rich-text title; this shape renders properly\r\n      title: [{\r\n        type: \"rich_text\",\r\n        elements: [{\r\n          type: \"rich_text_section\",\r\n          elements: [{ type: \"text\", text: safeTitle }]\r\n        }]\r\n      }],\r\n      fields,\r\n    };\r\n\r\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n    if (!created?.ok) return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n\r\n    // Attach photos to the attachment column (if configured)\r\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n      const fileIds = [];\r\n      for (const url of photoUrls) {\r\n        // Get external upload URL\r\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n          method: \"POST\",\r\n          headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n          body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n        }).then(r => r.json());\r\n        if (!init?.ok || !init?.upload_url) continue;\r\n\r\n        try {\r\n          const img = await fetch(url);\r\n          const buf = await img.arrayBuffer();\r\n          await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n        } catch { /* ignore individual image failures */ }\r\n\r\n        const complete = await slack(\"files.completeUploadExternal\",\r\n          JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }]}));\r\n        if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n      }\r\n\r\n      if (fileIds.length) {\r\n        await slack(\"slackLists.items.update\", JSON.stringify({\r\n          list_id: cfg.id,\r\n          item_id: created.item.id,\r\n          fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds }}}],\r\n        }));\r\n      }\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n  }\r\n\r\n  // -------- PATH B: Fallback to posting in a channel --------\r\n  const channel = CHANNELS[listKey];\r\n  if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n  // Join public channel if needed to avoid channel_not_found\r\n  await fetch(\"https://slack.com/api/conversations.join\", {\r\n    method: \"POST\",\r\n    headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n    body: new URLSearchParams({ channel }),\r\n  });\r\n\r\n  const lines = [];\r\n  lines.push(`*${safeTitle}*`);\r\n  const pnStr = joinArr(pn);\r\n  const snStr = joinArr(sn);\r\n  if (pnStr)           lines.push(`PN: ${pnStr}`);\r\n  if (snStr)           lines.push(`SN: ${snStr}`);\r\n  if (plain(workOrder))lines.push(`WO: ${plain(workOrder)}`);\r\n  if (plain(poNumber)) lines.push(`PO: ${plain(poNumber)}`);\r\n  if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\r\n  if (plain(dom))      lines.push(`DOM: ${plain(dom)}`);\r\n  if (plain(localSN))  lines.push(`Local SN: ${plain(localSN)}`);\r\n  if (plain(date))     lines.push(`Date: ${plain(date)}`);\r\n  const desc = plain(description);\r\n  if (desc)            lines.push(desc);\r\n  else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\r\n  if (plain(linkUrl))  lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\r\n\r\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n  if (!posted?.ok) return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n\r\n  return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n}\r\n\r\nconsole.log(\"add-to-list payload\", {\r\n  listKey, title, localSN, pn, sn, hasPhotos: photoUrls?.length\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
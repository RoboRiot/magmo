{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Card, Container } from \"react-bootstrap\";\nimport { useRouter } from \"next/router\";\nimport LoggedIn from \"../LoggedIn\";\n\nvar BluetoothPrint = function BluetoothPrint() {\n  var _useState = useState(\"Not Connected\"),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var router = useRouter(); // Function to scan for available services\n\n  var scanBluetoothServices = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var device, server, accessService, accessCharacteristics, attributeService, attributeCharacteristics;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setStatus(\"Requesting Bluetooth Device...\");\n              console.log(\"Requesting Bluetooth Device...\");\n              _context.next = 5;\n              return navigator.bluetooth.requestDevice({\n                acceptAllDevices: false,\n                filters: [{\n                  name: \"ZD621-LAKEFOREST\"\n                }],\n                optionalServices: [\"00001801-0000-1000-8000-00805f9b34fb\", \"00001800-0000-1000-8000-00805f9b34fb\"] // Found services\n\n              });\n\n            case 5:\n              device = _context.sent;\n              console.log(\"Connected to \".concat(device.name));\n              setStatus(\"Connected to \".concat(device.name));\n              _context.next = 10;\n              return device.gatt.connect();\n\n            case 10:\n              server = _context.sent;\n              console.log(\"Connected to GATT Server!\"); // Get Generic Access service and log its characteristics\n\n              _context.next = 14;\n              return server.getPrimaryService(\"00001800-0000-1000-8000-00805f9b34fb\");\n\n            case 14:\n              accessService = _context.sent;\n              _context.next = 17;\n              return accessService.getCharacteristics();\n\n            case 17:\n              accessCharacteristics = _context.sent;\n              console.log(\"Generic Access Characteristics:\", accessCharacteristics.map(function (c) {\n                return c.uuid;\n              })); // Get Generic Attribute service and log its characteristics\n\n              _context.next = 21;\n              return server.getPrimaryService(\"00001801-0000-1000-8000-00805f9b34fb\");\n\n            case 21:\n              attributeService = _context.sent;\n              _context.next = 24;\n              return attributeService.getCharacteristics();\n\n            case 24:\n              attributeCharacteristics = _context.sent;\n              console.log(\"Generic Attribute Characteristics:\", attributeCharacteristics.map(function (c) {\n                return c.uuid;\n              }));\n              setStatus(\"Characteristics scanned. Check console.\");\n              _context.next = 33;\n              break;\n\n            case 29:\n              _context.prev = 29;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error:\", _context.t0);\n              setStatus(\"Error: \".concat(_context.t0.message));\n\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 29]]);\n    }));\n\n    return function scanBluetoothServices() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Function to print a label using the correct service UUID\n\n\n  var printLabel = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var device, server, service, characteristic, zpl, encoder, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              setStatus(\"Requesting Bluetooth Device...\");\n              _context2.next = 4;\n              return navigator.bluetooth.requestDevice({\n                acceptAllDevices: false,\n                filters: [{\n                  name: \"ZD621-LAKEFOREST\"\n                }],\n                optionalServices: [\"49535343-fe7d-4ae5-8fa9-9fafd205e455\"] // Use the correct UUID found from scan\n\n              });\n\n            case 4:\n              device = _context2.sent;\n              _context2.next = 7;\n              return device.gatt.connect();\n\n            case 7:\n              server = _context2.sent;\n              setStatus(\"Connected to GATT Server\"); // Use the correct UUID from your scan results\n\n              _context2.next = 11;\n              return server.getPrimaryService(\"49535343-fe7d-4ae5-8fa9-9fafd205e455\");\n\n            case 11:\n              service = _context2.sent;\n              _context2.next = 14;\n              return service.getCharacteristic(\"49535343-1e4d-4bd9-ba61-23c647249616\");\n\n            case 14:\n              characteristic = _context2.sent;\n              zpl = \"^XA^FO50,50^A0N,50,50^FDTest Print^FS^XZ\";\n              encoder = new TextEncoder();\n              data = encoder.encode(zpl);\n              _context2.next = 20;\n              return characteristic.writeValue(data);\n\n            case 20:\n              setStatus(\"Label Sent to Printer!\");\n              _context2.next = 27;\n              break;\n\n            case 23:\n              _context2.prev = 23;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"Error:\", _context2.t0);\n              setStatus(\"Error: \".concat(_context2.t0.message));\n\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 23]]);\n    }));\n\n    return function printLabel() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Print via Bluetooth\"), __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: scanBluetoothServices\n  }, \"Scan for Available Services\"), __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: printLabel\n  }, \"Connect & Print Label\"), __jsx(\"p\", null, \"Status: \", status), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: function onClick() {\n      return router.back();\n    }\n  }, \"Back\"))))));\n};\n\nexport default BluetoothPrint;","map":null,"metadata":{},"sourceType":"module"}
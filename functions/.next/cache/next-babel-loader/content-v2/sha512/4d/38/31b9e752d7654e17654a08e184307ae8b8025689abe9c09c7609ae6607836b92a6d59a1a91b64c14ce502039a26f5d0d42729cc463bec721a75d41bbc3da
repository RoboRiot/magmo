{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// BluefolderService.js\nexport const API_TOKEN = \"9b224624-44db-49dd-9042-c3b15e9a39d4\"; // your token\n\nexport const ITEMS_URL = \"https://app.bluefolder.com/api/2.0/items/add.aspx\";\nexport const MATERIALS_URL = \"https://app.bluefolder.com/api/2.0/serviceRequests/addMaterial.aspx\";\nexport const HEADERS = {\n  \"Content-Type\": \"text/xml\"\n};\nexport async function addServiceItem(serviceRequestId, item) {\n  // Use \"Service Item\" for name and description\n  const uniqueName = \"Service Item\"; // Step 1: Create a new material item in BlueFolder\n\n  const itemPayload = `\n    <request>\n      <itemAdd>\n        <itemType>materials</itemType>\n        <itemName>${uniqueName}</itemName>\n        <description>Service Item</description>\n        <accountName></accountName>\n        <isFlatRate>false</isFlatRate>\n        <mfrDescription></mfrDescription>\n        <mfrItemNo></mfrItemNo>\n        <mfrName>BlueFolderTestManufacturer</mfrName>\n        <notes>Service Item</notes>\n        <taxableDefault>true</taxableDefault>\n        <unitCost>0.00</unitCost>\n        <unitPrice>0.00</unitPrice>\n        <unitListPrice>0.00</unitListPrice>\n      </itemAdd>\n    </request>\n  `;\n  const itemResponse = await fetch(ITEMS_URL, {\n    method: \"POST\",\n    headers: _objectSpread(_objectSpread({}, HEADERS), {}, {\n      Authorization: \"Basic \" + btoa(API_TOKEN + \":x\")\n    }),\n    body: itemPayload\n  });\n  const itemText = await itemResponse.text();\n  const parser = new DOMParser();\n  const itemXml = parser.parseFromString(itemText, \"application/xml\");\n\n  if (itemXml.documentElement.getAttribute(\"status\") !== \"ok\") {\n    throw new Error(\"Failed to create material item in BlueFolder\");\n  }\n\n  const itemIdElem = itemXml.getElementsByTagName(\"itemId\")[0];\n  const itemId = itemIdElem ? itemIdElem.textContent : null; // Step 2: Add the material to the specified work order\n\n  const nowStr = new Date().toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: true\n  });\n  const comment = `Name: ${item.name}\\nPN: ${item.pn}\\nSN: ${item.sn}\\nStatus: ${item.status}\\nDescription: ${item.description}`;\n  const materialPayload = `\n    <request>\n      <serviceRequestAddMaterial>\n        <serviceRequestId>${serviceRequestId}</serviceRequestId>\n        <dateUsed>${nowStr}</dateUsed>\n        <quantity>1</quantity>\n        <billingStatus>billable</billingStatus>\n        <itemNo>${uniqueName}</itemNo>\n        <itemDescription>Service Item</itemDescription>\n        <itemUnitCost>0.00</itemUnitCost>\n        <itemUnitPrice>0.00</itemUnitPrice>\n        <comment>${comment}</comment>\n        <commentIsPublic>false</commentIsPublic>\n        <taxable>true</taxable>\n      </serviceRequestAddMaterial>\n    </request>\n  `;\n  const materialResponse = await fetch(MATERIALS_URL, {\n    method: \"POST\",\n    headers: _objectSpread(_objectSpread({}, HEADERS), {}, {\n      Authorization: \"Basic \" + btoa(API_TOKEN + \":x\")\n    }),\n    body: materialPayload\n  });\n  const materialText = await materialResponse.text();\n  const materialXml = parser.parseFromString(materialText, \"application/xml\");\n\n  if (materialXml.documentElement.getAttribute(\"status\") !== \"ok\") {\n    throw new Error(\"Failed to add material to work order in BlueFolder\");\n  }\n\n  return {\n    itemId,\n    materialResponse: materialText\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
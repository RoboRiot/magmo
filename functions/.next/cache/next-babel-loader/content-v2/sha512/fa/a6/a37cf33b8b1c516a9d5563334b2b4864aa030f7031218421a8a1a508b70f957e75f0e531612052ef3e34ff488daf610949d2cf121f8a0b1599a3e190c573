{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// inflowAPI.js\nconst BASE_URL = 'https://cloudapi.inflowinventory.com';\nconst COMPANY_ID = 'e28dc600-32a4-4438-a374-68df72caebbd';\nconst API_KEY = '10336E10F0BF982AB7AEB639D2FEB3B2B1C9BD73634D153EA81EE2130A70F9C4-1';\n\nclass InflowAPI {\n  /**\n   * Insert or update a product in inFlow.\n   * @param {{ productId?: string, name: string, description: string, imageUrls?: string[] }} params\n   */\n  static async upsertProduct({\n    productId,\n    name,\n    description,\n    imageUrls = []\n  }) {\n    // Generate a new GUID if none provided\n    const id = productId || crypto.randomUUID();\n    const url = `${BASE_URL}/${COMPANY_ID}/products`; // Build payload and include images in the body\n\n    const payload = _objectSpread({\n      productId: id,\n      name,\n      description\n    }, imageUrls.length > 0 && {\n      images: imageUrls.map(u => ({\n        imageId: crypto.randomUUID(),\n        // must supply a valid imageId\n        originalUrl: u\n      }))\n    });\n\n    const res = await fetch(url, {\n      method: 'PUT',\n      // write requests use PUT :contentReference[oaicite:0]{index=0}\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,\n        // auth header :contentReference[oaicite:1]{index=1}\n        'Content-Type': 'application/json',\n        'Accept': 'application/json;version=2024-10-01'\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!res.ok) {\n      const errText = await res.text();\n      throw new Error(`inFlow API error (${res.status}): ${errText}`);\n    }\n\n    return res.json();\n  }\n\n}\n\nexport default InflowAPI;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Modal, Container, Card, Row, Col, InputGroup, Dropdown, FormControl, Button, NavDropdown, Form, Table } from \"react-bootstrap\";\nimport { fetchPartsWithMachineData, fetchClients, fetchModels, formatDate } from \"../../../utils/fetchAssociations\";\nimport { useAuth } from \"../../../context/AuthUserContext\";\nimport LoggedIn from \"../../LoggedIn\";\nimport ClientTable from \"../../../utils/ClientTable\";\nimport ModelTable from \"../../../utils/ModelTable\";\nimport PartTable from \"../../../utils/PartTable\";\nimport styles from \"../../../styles/MainSearch.module.css\";\nimport firebase from \"../../../context/Firebase\";\nconst CLIENT_WAREHOUSE = \"igor-house\";\nconst CLIENT_UNASSIGNED = \"unassigned\";\n\nconst ParentModal = ({\n  show,\n  handleClose,\n  setSelectedParent,\n  parts\n}) => {\n  const {\n    0: info,\n    1: setInfo\n  } = useState([]);\n  const {\n    0: backupInfo,\n    1: setBackupInfo\n  } = useState([]); // const [ids, setID] = useState([]);\n\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: select,\n    1: setSelect\n  } = useState(\"Name\");\n  const {\n    0: showList,\n    1: setShowList\n  } = useState(false);\n  const {\n    0: showListSearch,\n    1: setShowListSearch\n  } = useState(\"text\");\n  const {\n    0: selectedOEM,\n    1: setSelectedOEM\n  } = useState(null);\n  const {\n    0: selectedModality,\n    1: setSelectedModality\n  } = useState(null);\n  const {\n    0: selectedClient,\n    1: setSelectedClient\n  } = useState(null);\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: showClientModal,\n    1: setShowClientModal\n  } = useState(false);\n  const {\n    0: clientButtonText,\n    1: setClientButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: hoverIndex,\n    1: setHoverIndex\n  } = useState(null);\n  const {\n    0: selectedModel,\n    1: setSelectedModel\n  } = useState(null);\n  const {\n    0: models,\n    1: setModels\n  } = useState([]);\n  const {\n    0: showModelModal,\n    1: setShowModelModal\n  } = useState(false);\n  const {\n    0: modelButtonText,\n    1: setModelButtonText\n  } = useState(\"Select Option\");\n  const {\n    0: clientSearchTerm,\n    1: setClientSearchTerm\n  } = useState(\"\");\n  const {\n    0: modelSearchTerm,\n    1: setModelSearchTerm\n  } = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const data = await fetchPartsWithMachineData();\n      setInfo(data);\n      setBackupInfo(data); // setID(data.map((item) => item.id)); // Ensure IDs are correctly set here\n    }\n\n    fetchData();\n  }, []);\n\n  const handleCloseClientModal = () => setShowClientModal(false);\n\n  const handleShowClientModal = () => setShowClientModal(true);\n\n  const handleCloseModelModal = () => setShowModelModal(false);\n\n  const handleShowModelModal = () => setShowModelModal(true); // Handle search input changes\n\n\n  const searchChangeHandler = event => setSearch(event.target.value); // Filter items based on search criteria\n\n\n  function searchFilter() {\n    const temp = backupInfo.filter(item => {\n      if (item.machineData) {\n        if (selectedOEM && item.machineData.OEM !== selectedOEM) return false;\n        if (selectedModality && item.machineData.Modality !== selectedModality) return false;\n        if (selectedClient && item.machineData.Client !== selectedClient) return false;\n        if (selectedModel && item.machineData.Model !== selectedModel) return false;\n      }\n\n      if (select === \"Name\" && item.name.toLowerCase().includes(search.toLowerCase())) return true;\n\n      if (select === \"Date\") {\n        const [month, day, year] = item.date.split(\"/\");\n        const reformattedDate = `${year}-${month}-${day}`;\n        return reformattedDate === search;\n      }\n\n      if (select === \"Work Order\" && Number(item.wo) === Number(search)) return true;\n      if (select === \"Product Number\" && Number(item.pn) === Number(search)) return true;\n      if (select === \"Description\" && item.desc.toLowerCase().includes(search.toLowerCase())) return true;\n      return false;\n    });\n    setInfo(temp);\n  } // Sort items based on column\n\n\n  function sortCheckAll(pos) {\n    const sortedInfo = [...info].sort((a, b) => {\n      if (pos === 0 || pos === 5) {\n        return b[select].localeCompare(a[select]);\n      }\n\n      if (pos === 1) {\n        return Date.parse(b[select]) - Date.parse(a[select]);\n      }\n\n      return Number(b[select]) - Number(a[select]);\n    });\n    setInfo(sortedInfo);\n  } // Row selection handler\n\n\n  const rowSelect = item => {\n    // item.id must be present in fetchPartsWithMachineData() results\n    setSelectedParent({\n      id: item.id,\n      name: item.name,\n      pn: item.pn\n    });\n    handleClose();\n  }; // Dropdown handlers\n\n\n  const {\n    0: dropdown1Text,\n    1: setDropdown1Text\n  } = useState(\"Select Option\");\n  const {\n    0: dropdown2Text,\n    1: setDropdown2Text\n  } = useState(\"Select Option\");\n\n  const handleSelect1 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  const handleSelect2 = (eventKey, event) => {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  };\n\n  useEffect(() => {\n    searchFilter();\n  }, [selectedOEM, selectedModality, selectedClient, selectedModel, search]); // Fetch clients and show modal\n\n  const handleClientClick = async () => {\n    console.log(\"clicked\");\n    const clientsData = await fetchClients(selectedOEM, selectedModality);\n    setClients(clientsData);\n    setClientSearchTerm(\"\"); // Reset search term\n\n    setShowClientModal(true);\n  }; // Client selection handler\n\n\n  const handleClientSelect = clientName => {\n    setClientButtonText(clientName || \"Select Option\");\n    setSelectedClient(clientName || null);\n    setShowClientModal(false);\n  }; // Client info handler\n\n\n  const handleClientInfo = (clientId, clientName) => {\n    console.log(`Client ID: ${clientId}, Client Name: ${clientName}`);\n  }; // Clear client selection handler\n\n\n  const handleClearClientSelection = () => {\n    setClientButtonText(\"Select Option\");\n    setSelectedClient(null);\n    setShowClientModal(false);\n    searchFilter();\n  }; // Fetch models and show modal\n\n\n  const handleModelClick = async () => {\n    const modelsData = await fetchModels(selectedOEM, selectedModality, selectedClient);\n    setModels(modelsData);\n    setModelSearchTerm(\"\"); // Reset search term\n\n    setShowModelModal(true);\n  }; // Model selection handler\n\n\n  const handleModelSelect = modelName => {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  }; // Clear model selection handler\n\n\n  const handleClearModelSelection = () => {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n    searchFilter();\n  };\n\n  const handleWarehouseClick = () => {\n    setClientButtonText(CLIENT_WAREHOUSE);\n    setSelectedClient(CLIENT_WAREHOUSE);\n    searchFilter();\n  };\n\n  const handleUnassignedClick = () => {\n    setClientButtonText(CLIENT_UNASSIGNED);\n    setSelectedClient(CLIENT_UNASSIGNED);\n    searchFilter();\n  };\n\n  return __jsx(Modal, {\n    show: show,\n    onHide: handleClose,\n    size: \"lg\",\n    centered: true,\n    scrollable: true,\n    dialogClassName: \"parent-modal-dialog\"\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Parent\")), __jsx(Modal.Body, {\n    style: {\n      maxHeight: \"75vh\",\n      overflowY: \"auto\"\n    }\n  }, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"unset\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"1200px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(Row, null, __jsx(Col, {\n    md: 4\n  }, __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"OEM\"), __jsx(Dropdown, {\n    onSelect: handleSelect1\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-1\",\n    className: \"w-100\"\n  }, dropdown1Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"GE\"\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\"\n  }, \"Toshiba\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\"\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\"\n  }, \"Philips\")))), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Modality\"), __jsx(Dropdown, {\n    onSelect: handleSelect2\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-2\",\n    className: \"w-100\"\n  }, dropdown2Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"CT\"\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\"\n  }, \"MRI\")))), __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleClientClick\n  }, clientButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client-2\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    disabled: true\n  }, \"Select Option\")), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Model\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleModelClick\n  }, modelButtonText)), __jsx(\"div\", {\n    className: styles.divider\n  }), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Warehouse\"), __jsx(\"div\", {\n    className: styles.buttonGroup\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleWarehouseClick\n  }, \"Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleUnassignedClick\n  }, \"Unassigned\")))))), __jsx(Col, {\n    md: 8\n  }, __jsx(\"div\", {\n    className: styles.tableContainer\n  }, __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    className: \"mb-0\"\n  }, __jsx(\"thead\", {\n    className: styles.stickyHeader\n  }, __jsx(\"tr\", null, __jsx(\"th\", {\n    onClick: () => sortCheckAll(0)\n  }, \"Name\"), __jsx(\"th\", {\n    onClick: () => sortCheckAll(1)\n  }, \"Date\"), __jsx(\"th\", {\n    onClick: () => sortCheckAll(2)\n  }, \"Work Order\"), __jsx(\"th\", {\n    onClick: () => sortCheckAll(3)\n  }, \"Product Number\"), __jsx(\"th\", {\n    onClick: () => sortCheckAll(4)\n  }, \"Serial Number\"), __jsx(\"th\", null, \"Select\"))), __jsx(\"tbody\", null, info.map(item => __jsx(\"tr\", {\n    className: \"clickable-row\",\n    key: item.id\n  }, __jsx(\"td\", null, item.name), __jsx(\"td\", null, formatDate(item.date)), __jsx(\"td\", null, item.workOrders && item.workOrders.length > 0 ? item.workOrders[item.workOrders.length - 1].workOrder : \"N/A\"), __jsx(\"td\", null, item.pn), __jsx(\"td\", null, item.sn), __jsx(\"td\", null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: () => rowSelect(item)\n  }, \"Select\")))))), __jsx(\"div\", {\n    className: styles.searchContainer\n  }, __jsx(Form, {\n    className: \"d-flex pb-2\"\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2 flex-grow-1\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler,\n    style: {\n      flex: \"1\"\n    }\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: () => setShowList(true),\n    onMouseLeave: () => setShowList(false),\n    style: {\n      marginTop: \"-5px\"\n    }\n  }, __jsx(NavDropdown.Item, {\n    onClick: () => setSelect(\"Name\") & setShowListSearch(\"text\")\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    onClick: () => setSelect(\"Date\") & setShowListSearch(\"date\")\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    onClick: () => setSelect(\"Work Order\") & setShowListSearch(\"number\")\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    onClick: () => setSelect(\"Product Number\") & setShowListSearch(\"number\")\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    onClick: () => setSelect(\"Description\") & setShowListSearch(\"text\")\n  }, \"Description\")))))))))))), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleClose\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"warning\",\n    onClick: () => {\n      setSelectedParent(null);\n      handleClose();\n    }\n  }, \"Clear Selection\")), __jsx(Modal, {\n    show: showClientModal,\n    onHide: handleCloseClientModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Client\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: clientSearchTerm,\n    onChange: e => setClientSearchTerm(e.target.value)\n  }), __jsx(ClientTable, {\n    clients: clients.filter(client => client.name.toLowerCase().includes(clientSearchTerm.toLowerCase())),\n    disableInfo: true,\n    onSelectClient: handleClientSelect,\n    onInfoClick: handleClientInfo,\n    clearSelection: () => handleClientSelect(null) // Clear selection handler\n\n  }))), __jsx(Modal, {\n    show: showModelModal,\n    onHide: handleCloseModelModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Model\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: modelSearchTerm,\n    onChange: e => setModelSearchTerm(e.target.value)\n  }), __jsx(ModelTable, {\n    models: models.filter(model => typeof model === \"string\" ? model.toLowerCase().includes(modelSearchTerm.toLowerCase()) : false),\n    onSelectModel: handleModelSelect,\n    clearSelection: () => handleModelSelect(null) // Clear selection handler\n\n  }))));\n};\n\n__jsx(_JSXStyle, {\n  id: \"2081140824\",\n  dynamic: [styles.tableContainer]\n}, [\".parent-modal-dialog{max-width:95vw;margin:0 auto;}\", `.parent-modal-dialog .modal-body .${styles.tableContainer}{max-height:70vh;overflow:auto;}`]);\n\nexport default ParentModal;","map":null,"metadata":{},"sourceType":"module"}
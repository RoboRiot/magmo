{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col, Modal, FormControl, Collapse, InputGroup, ButtonGroup, Spinner } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport dynamic from \"next/dynamic\";\nimport { useAuth } from \"../../../context/AuthUserContext\";\nimport firebase from \"../../../context/Firebase\";\nimport LoggedIn from \"../../LoggedIn\";\nimport { useRouter } from \"next/router\";\nimport { fetchClients } from \"../../../utils/fetchAssociations\";\nimport ClientTable from \"../../../utils/ClientTable\";\nimport ClientInfoModal from \"../ClientInfoModal\";\nimport ParentModal from \"./parentModal\";\nimport MachineSelectionModal from \"../item/[id]/MachineSelectionModal\";\nimport InfoModal from \"../InfoModal\"; // Load BarcodeScannerComponent only on the client-side.\n\nconst BarcodeScannerComponent = dynamic(() => import(\"react-qr-barcode-scanner\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-qr-barcode-scanner\")],\n    modules: [\"NewSearch\\\\AddItem\\\\NewItem.js -> \" + \"react-qr-barcode-scanner\"]\n  }\n}); // Simulate network delay.\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n} // Custom LoadingButton component.\n\n\nfunction LoadingButton({\n  type,\n  name,\n  route\n}) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => setLoading(false));\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return __jsx(Link, {\n    href: `/${route}`\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null\n  }, isLoading ? \"Loading…\" : name));\n}\n\nexport default function NewItem() {\n  var _descriptions$selecte, _descriptions$selecte2;\n\n  const router = useRouter();\n  const {\n    signOut\n  } = useAuth(); // Initialize item state – for a new item, these start empty.\n  // We store PN and SN as arrays.\n\n  const {\n    0: items,\n    1: setItems\n  } = useState({\n    name: \"\",\n    pn: [\"\"],\n    sn: [\"\"],\n    // This will be overridden on submit.\n    localSN: \"\",\n    // NEW FIELD: holds user input for a local serial number.\n    price: \"\",\n    status: \"\",\n    poNumber: \"\",\n    length: \"\",\n    width: \"\",\n    height: \"\",\n    arrival_date: \"\",\n    // NEW FIELD: Arrival Date\n    visible: true\n  });\n  const {\n    0: editingPn,\n    1: setEditingPn\n  } = useState(true); // const [newPn, setNewPn] = useState(\"\"); // for the input value when editing\n\n  const {\n    0: editingSn,\n    1: setEditingSn\n  } = useState(true); // const [newSn, setNewSn] = useState(\"\");\n  // DOM is the Date of Manufacture input (user provided).\n\n  const {\n    0: DOM,\n    1: setDOM\n  } = useState(\"\"); // OEM, Modality, Model fields.\n\n  const {\n    0: oem,\n    1: setOem\n  } = useState(\"\");\n  const {\n    0: modality,\n    1: setModality\n  } = useState(\"\");\n  const {\n    0: model,\n    1: setModel\n  } = useState(\"\"); // Local location states.\n\n  const {\n    0: localLocFrom,\n    1: setLocalLocFrom\n  } = useState(\"\");\n  const {\n    0: localLocCurrent,\n    1: setLocalLocCurrent\n  } = useState(\"\"); // Other states.\n\n  const {\n    0: pnOptions,\n    1: setPnOptions\n  } = useState([]);\n  const {\n    0: snOptions,\n    1: setSnOptions\n  } = useState([]);\n  const {\n    0: descriptions,\n    1: setDescriptions\n  } = useState([{\n    description: \"\",\n    date: \"\"\n  }]);\n  const {\n    0: workOrders,\n    1: setWorkOrders\n  } = useState([{\n    workOrder: \"\",\n    date: \"\"\n  }]);\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: photos,\n    1: setPhotos\n  } = useState([]);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false); // error modal for missing required fields\n\n  const {\n    0: showErr,\n    1: setShowErr\n  } = useState(false);\n  const {\n    0: Err,\n    1: setErr\n  } = useState(\"Missing required field: Name and Description\");\n  const {\n    0: showDescModal,\n    1: setShowDescModal\n  } = useState(false);\n  const {\n    0: showWoModal,\n    1: setShowWoModal\n  } = useState(false);\n  const {\n    0: showClientModal,\n    1: setShowClientModal\n  } = useState(false);\n  const {\n    0: showMachineModal,\n    1: setShowMachineModal\n  } = useState(false);\n  const {\n    0: showParentModal,\n    1: setShowParentModal\n  } = useState(false);\n  const {\n    0: showCameraModal,\n    1: setShowCameraModal\n  } = useState(false);\n  const {\n    0: showSaveModal,\n    1: setShowSaveModal\n  } = useState(false);\n  const {\n    0: machineSelectionModal,\n    1: setMachineSelectionModal\n  } = useState(false);\n  const {\n    0: selectedDesc,\n    1: setSelectedDesc\n  } = useState(0);\n  const {\n    0: selectedClient,\n    1: setSelectedClient\n  } = useState(null);\n  const {\n    0: selectedMachine,\n    1: setSelectedMachine\n  } = useState(null);\n  const {\n    0: selectedCurrentMachine,\n    1: setSelectedCurrentMachine\n  } = useState(null);\n  const {\n    0: selectedParent,\n    1: setSelectedParent\n  } = useState(null);\n  const {\n    0: TheMachine,\n    1: setTheMachine\n  } = useState(null);\n  const {\n    0: machineOptions,\n    1: setMachineOptions\n  } = useState([]);\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const {\n    0: capturedPhoto,\n    1: setCapturedPhoto\n  } = useState(null);\n  const {\n    0: cameraFacing,\n    1: setCameraFacing\n  } = useState(\"environment\");\n  const {\n    0: addToWebsite,\n    1: setAddToWebsite\n  } = useState(false);\n  const {\n    0: machinePick,\n    1: setMachinePick\n  } = useState(false);\n  const {\n    0: freqItem,\n    1: setFreqItem\n  } = useState(0);\n  const {\n    0: usagePastYear,\n    1: setUsagePastYear\n  } = useState(0);\n  const {\n    0: machineFrequency,\n    1: setMachineFrequency\n  } = useState(0); // For extra (dimensions/price/DOM) section collapse.\n\n  const {\n    0: showExtra,\n    1: setShowExtra\n  } = useState(false); // For PN/SN \"add new\" functionality.\n\n  const {\n    0: addingNewPn,\n    1: setAddingNewPn\n  } = useState(false);\n  const {\n    0: newPn,\n    1: setNewPn\n  } = useState(\"\");\n  const {\n    0: addingNewSn,\n    1: setAddingNewSn\n  } = useState(false);\n  const {\n    0: newSn,\n    1: setNewSn\n  } = useState(\"\"); // For browsing photos.\n\n  const browseInputRef = useRef(null); // Inside your NewItem component:\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  if (!router.isReady) {\n    return null; // or a loading indicator\n  } // -------------------- Since this is \"add\" mode, we do not fetch an existing document.\n  // However, we still fetch global PN and SN options and clients for selection.\n\n\n  useEffect(() => {\n    async function fetchClientsData() {\n      try {\n        const clientsData = await fetchClients();\n        console.log(\"Clients:\", clientsData);\n        setClients(clientsData);\n      } catch (error) {\n        console.error(\"Error fetching clients: \", error);\n      }\n    }\n\n    fetchClientsData();\n  }, []);\n  useEffect(() => {\n    async function fetchPnSn() {\n      const db = firebase.firestore();\n      const snapshot = await db.collection(\"Test\").get();\n      let pnSet = new Set();\n      let snSet = new Set();\n      snapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.pn) pnSet.add(data.pn);\n        if (data.sn) snSet.add(data.sn);\n      });\n      setPnOptions([...pnSet]);\n      setSnOptions([...snSet]);\n    }\n\n    fetchPnSn();\n  }, []);\n  const {\n    0: machineFieldsInitialized,\n    1: setMachineFieldsInitialized\n  } = useState(false);\n  useEffect(() => {\n    if (!machineFieldsInitialized && (TheMachine || selectedCurrentMachine || selectedMachine)) {\n      const updatedFields = updateMachineFields(TheMachine, selectedCurrentMachine, selectedMachine); // Only set fields if they are empty or \"N/A\"\n\n      if (!oem || oem === \"N/A\") setOem(updatedFields.oem);\n      if (!modality || modality === \"N/A\") setModality(updatedFields.modality);\n      if (!model || model === \"N/A\") setModel(updatedFields.model);\n      setMachineFieldsInitialized(true);\n    }\n  }, [TheMachine, selectedCurrentMachine, selectedMachine, machineFieldsInitialized]);\n  const {\n    0: signal,\n    1: setSignal\n  } = useState(null);\n  useEffect(() => {\n    if (router.isReady) {\n      setSignal(router.query.signal || null);\n    }\n  }, [router.isReady, router.query.signal]); // -------------------- Handlers for PN and SN dropdowns\n  // PN: when a user selects an existing PN value.\n\n  const handlePnSelect = e => {\n    const selected = e.target.value;\n    setItems(prev => {\n      let updatedPn = Array.isArray(prev.pn) ? [...prev.pn] : [];\n      updatedPn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: updatedPn\n      });\n    });\n  };\n\n  const handlePnChange = (index, value) => {\n    setItems(prev => {\n      const newPn = [...prev.pn];\n      newPn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pn: newPn\n      });\n    });\n  };\n\n  const addPn = () => {\n    if (newPn.trim() !== \"\") {\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        pn: [...prev.pn, newPn.trim()]\n      }));\n    }\n\n    setNewPn(\"\");\n    setAddingNewPn(false);\n  }; // SN: when a user selects an existing SN value.\n\n\n  const handleSnSelect = e => {\n    const selected = e.target.value;\n    setItems(prev => {\n      let updatedSn = Array.isArray(prev.sn) ? [...prev.sn] : [];\n      updatedSn[0] = selected;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: updatedSn\n      });\n    });\n  };\n\n  const handleSnChange = (index, value) => {\n    setItems(prev => {\n      const newSn = [...prev.sn];\n      newSn[index] = value;\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        sn: newSn\n      });\n    });\n  };\n\n  const addSn = () => {\n    if (newSn.trim() !== \"\") {\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        sn: [...prev.sn, newSn.trim()]\n      }));\n    }\n\n    setNewSn(\"\");\n    setAddingNewSn(false);\n  }; // -------------------- Photo Browse Handlers\n\n\n  const handleBrowsePhotos = () => {\n    if (browseInputRef.current) {\n      browseInputRef.current.click();\n    }\n  };\n\n  const handleFilesSelected = e => {\n    const files = e.target.files;\n\n    if (files.length) {\n      const newPhotos = [];\n\n      for (let i = 0; i < files.length; i++) {\n        newPhotos.push({\n          file: files[i],\n          url: URL.createObjectURL(files[i])\n        });\n      }\n\n      setPhotos(prevPhotos => [...prevPhotos, ...newPhotos]);\n    }\n\n    e.target.value = \"\";\n  }; // -------------------- Photo Capture Handlers remain as in your index.js\n\n\n  const handleCapture = (err, result) => {\n    if (result) {\n      setCapturedPhoto(result);\n    }\n  };\n\n  const capturePhoto = () => {\n    const video = document.querySelector(\"video\");\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    canvas.toBlob(blob => {\n      setCapturedPhoto(blob);\n    }, \"image/png\");\n  };\n\n  const savePhoto = () => {\n    setPhotos(prevPhotos => [...prevPhotos, {\n      file: capturedPhoto,\n      url: URL.createObjectURL(capturedPhoto)\n    }]);\n    setCapturedPhoto(null);\n    setShowCameraModal(false);\n  };\n\n  const removePhoto = index => {\n    setPhotos(photos.filter((_, i) => i !== index));\n  }; // -------------------- Modal Handlers\n\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const handleCloseErr = () => setShowErr(false);\n\n  const handleShowErr = () => setShowErr(true);\n\n  const handleCloseSaveModal = () => setShowSaveModal(false);\n\n  const handleShowSaveModal = () => setShowSaveModal(true);\n\n  const handleCloseDescModal = () => setShowDescModal(false);\n\n  const handleShowDescModal = () => setShowDescModal(true);\n\n  const handleCloseWoModal = () => setShowWoModal(false);\n\n  const handleShowWoModal = () => setShowWoModal(true);\n\n  const handleCloseClientModal = () => setShowClientModal(false);\n\n  const handleShowClientModal = () => setShowClientModal(true);\n\n  const handleCloseMachineModal = () => setShowMachineModal(false);\n\n  const handleShowMachineModal = () => {\n    setShowMachineModal(true);\n    setShowClientModal(false);\n  };\n\n  const handleCloseParentModal = () => setShowParentModal(false);\n\n  const handleShowParentModal = () => setShowParentModal(true); // -------------------- Work Orders / Descriptions Handlers (unchanged)\n\n\n  const addDescription = () => {\n    setDescriptions([...descriptions, {\n      description: \"\",\n      date: \"\"\n    }]);\n  };\n\n  const removeDescription = index => {\n    setDescriptions(descriptions.filter((_, i) => i !== index));\n  };\n\n  const handleDescriptionChange = (index, field, value) => {\n    const newDescriptions = descriptions.map((desc, i) => i === index ? _objectSpread(_objectSpread({}, desc), {}, {\n      [field]: value\n    }) : desc);\n    setDescriptions(newDescriptions);\n  };\n\n  const addWorkOrder = () => {\n    setWorkOrders([...workOrders, {\n      workOrder: \"\",\n      date: \"\"\n    }]);\n  };\n\n  const removeWorkOrder = index => {\n    setWorkOrders(workOrders.filter((_, i) => i !== index));\n  };\n\n  const handleWorkOrderChange = (index, field, value) => {\n    const newWorkOrders = workOrders.map((wo, i) => i === index ? _objectSpread(_objectSpread({}, wo), {}, {\n      [field]: value\n    }) : wo);\n    setWorkOrders(newWorkOrders);\n  };\n\n  const listDescriptions = () => {\n    setShowDescModal(true);\n  };\n\n  const selectDescription = index => {\n    setSelectedDesc(index);\n    setShowDescModal(false);\n  }; // -------------------- Machine Selection (unchanged)\n\n\n  const handleClientInfo = async clientId => {\n    // Clear any previously selected machine/local loc for the branch\n    if (machinePick) {\n      setSelectedMachine(null);\n      setShowLocalLocFrom(false);\n    } else {\n      setSelectedCurrentMachine(null);\n      setShowLocalLocCurrent(false);\n    }\n\n    const db = firebase.firestore();\n    const clientDoc = await db.collection(\"Client\").doc(clientId).get();\n\n    if (clientDoc.exists) {\n      const clientData = clientDoc.data();\n\n      if (machinePick) {\n        setSelectedClientFrom(_objectSpread({\n          id: clientDoc.id\n        }, clientData));\n      } else {\n        setSelectedClientCurrent(_objectSpread({\n          id: clientDoc.id\n        }, clientData));\n      } // Fetch machines for this client:\n\n\n      const machinePromises = clientData.machines.map(machineRef => machineRef.get());\n      const machineDocs = await Promise.all(machinePromises);\n      const machines = machineDocs.map(machineDoc => _objectSpread({\n        id: machineDoc.id\n      }, machineDoc.data()));\n      setMachineOptions(machines);\n      handleCloseClientModal();\n    }\n  };\n\n  const fetchMachine = async machineId => {\n    const db = firebase.firestore();\n    const doc = await db.collection(\"Machine\").doc(machineId).get();\n\n    if (doc.exists) {\n      const machineData = doc.data();\n      setTheMachine(machineData); // Ensure OEM, Modality, and Model update properly only if necessary\n\n      if (!oem || oem === \"N/A\") setOem(machineData.oem || machineData.OEM || \"\");\n      if (!modality || modality === \"N/A\") setModality(machineData.modality || machineData.Modality || \"\");\n      if (!model || model === \"N/A\") setModel(machineData.model || machineData.Model || \"\"); // Set machine frequency count\n\n      const machinesSnapshot = await db.collection(\"Machine\").where(\"Model\", \"==\", machineData.Model || machineData.model).get();\n      setMachineFrequency(machinesSnapshot.size);\n    } else {\n      console.error(\"Machine not found\");\n    }\n  }; // -------------------- Frequency/Usage (unchanged)\n\n\n  const calculateItemFrequencyAndUsage = async pn => {\n    const db = firebase.firestore();\n    const currentDate = new Date();\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(currentDate.getFullYear() - 1);\n    const itemsSnapshot = await db.collection(\"Test\").where(\"pn\", \"==\", pn).get();\n    setFreqItem(itemsSnapshot.size);\n    let usagePastYear = 0;\n    itemsSnapshot.forEach(doc => {\n      const itemData = doc.data();\n      itemData.workOrders.forEach(workOrder => {\n        const workOrderDate = new Date(workOrder.date);\n\n        if (workOrderDate >= oneYearAgo && workOrderDate <= currentDate) {\n          usagePastYear++;\n        }\n      });\n    });\n    setUsagePastYear(usagePastYear);\n  }; // -------------------- Photo Upload (unchanged)\n\n\n  const uploadPhotos = async docID => {\n    const storageRef = firebase.storage().ref();\n\n    for (let i = 0; i < photos.length; i++) {\n      if (photos[i].file) {\n        const photoRef = storageRef.child(`Parts/${docID}/${docID}${i === 0 ? \".jpg\" : `.${i + 1}.jpg`}`);\n        const metadata = {\n          contentType: \"image/png\"\n        };\n        await photoRef.put(photos[i].file, metadata);\n        const url = await photoRef.getDownloadURL();\n        photos[i].url = url;\n      }\n    }\n  }; // -------------------- Submission Handler\n  // For NewItem, only require Name and Description.\n\n\n  async function handleSubmit(event) {\n    var _descriptions$;\n\n    event.preventDefault();\n\n    if (!items.name || !((_descriptions$ = descriptions[0]) !== null && _descriptions$ !== void 0 && _descriptions$.description)) {\n      handleShow();\n    } else {\n      setLoading(true); // start loading before async work\n\n      try {\n        await toSend();\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false); // end loading after async work completes\n      }\n    }\n  }\n\n  async function toSend(redirect = true) {\n    const {\n      id\n    } = router.query; // Ensure id is defined (it may be undefined for a new item)\n\n    const db = firebase.firestore(); // Get the current authenticated user\n\n    const currentUser = firebase.auth().currentUser;\n    const userEmail = currentUser ? currentUser.email : \"unknown\"; // Always use the current state values for OEM, modality, and model.\n\n    const machineData = _objectSpread(_objectSpread({}, TheMachine || {}), {}, {\n      oem: oem,\n      modality: modality,\n      model: model\n    });\n\n    const formattedItems = _objectSpread(_objectSpread({}, items), {}, {\n      descriptions,\n      workOrders\n    }); // Remove any unused fields.\n\n\n    formattedItems.status = items.status || \"\";\n    formattedItems.DOM = DOM; // Date of Manufacture\n\n    formattedItems.localLocFrom = localLocFrom || \"\";\n    formattedItems.localLocCurrent = localLocCurrent || \"\";\n    formattedItems.date = items.date || \"\";\n    formattedItems.arrival_date = items.arrival_date || \"\"; // NEW: Arrival Date\n\n    formattedItems.poNumber = items.poNumber || \"\";\n    formattedItems.trackingNumber = items.trackingNumber || \"\";\n    formattedItems.TheMachine = machineData || {};\n    formattedItems.addedToWebsite = addToWebsite;\n    formattedItems.visible = items.visible; // Add the current user's email under the \"user\" field\n\n    formattedItems.user = userEmail; // Clean pn and sn arrays to replace undefined values with an empty string.\n\n    formattedItems.pn = (items.pn || []).map(value => value === undefined ? \"\" : value);\n    formattedItems.sn = (items.sn || []).map(value => value === undefined ? \"\" : value); // Set machine references for each branch.\n\n    if (selectedMachine && selectedMachine.id) {\n      formattedItems.MachineFrom = db.collection(\"Machine\").doc(selectedMachine.id);\n    }\n\n    if (selectedCurrentMachine && selectedCurrentMachine.id) {\n      formattedItems.MachineCurrent = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n    } // ***** NEW: Set client references for each branch *****\n\n\n    if (selectedClientFrom && selectedClientFrom.id) {\n      formattedItems.ClientFrom = db.collection(\"Client\").doc(selectedClientFrom.id);\n    }\n\n    if (selectedClientCurrent && selectedClientCurrent.id) {\n      formattedItems.ClientCurrent = db.collection(\"Client\").doc(selectedClientCurrent.id);\n    } // ******************************************************\n\n\n    if (selectedParent && selectedParent.id) {\n      formattedItems.Parent = db.collection(\"Test\").doc(selectedParent.id);\n    } // Only add dateCreated if this is a new document\n\n\n    if (!id) {\n      formattedItems.dateCreated = new Date().toISOString().split(\"T\")[0]; // \"YYYY-MM-DD\"\n    } // --- LOCAL SN LOGIC ---\n\n\n    let docId = id || null;\n\n    try {\n      if (docId) {\n        // Check if a localSN is provided and if it differs from the current docId.\n        const newDocId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : docId;\n\n        if (docId !== newDocId) {\n          // Migrate: Create a new document with the newDocId.\n          await db.collection(\"Test\").doc(newDocId).set(formattedItems);\n\n          if (selectedMachine && selectedMachine.id) {\n            const machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n            const machineDoc = await machineRef.get();\n\n            if (machineDoc.exists) {\n              await machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n            }\n          }\n\n          if (selectedCurrentMachine && selectedCurrentMachine.id) {\n            const currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n            const currentMachineDoc = await currentMachineRef.get();\n\n            if (currentMachineDoc.exists) {\n              await currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(newDocId))\n              });\n            }\n          } // Delete the old document.\n\n\n          await db.collection(\"Test\").doc(docId).delete(); // Set docId to the new document ID.\n\n          docId = newDocId;\n        } else {\n          // Deep-clean the formattedItems to remove any undefined nested values.\n          const cleanFormattedItems = shallowClean(formattedItems);\n          await db.collection(\"Test\").doc(docId).update(cleanFormattedItems);\n\n          if (selectedMachine && selectedMachine.id) {\n            const machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n            const machineDoc = await machineRef.get();\n\n            if (machineDoc.exists) {\n              await machineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n            }\n          }\n\n          if (selectedCurrentMachine && selectedCurrentMachine.id) {\n            const currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n            const currentMachineDoc = await currentMachineRef.get();\n\n            if (currentMachineDoc.exists) {\n              await currentMachineRef.update({\n                associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n              });\n            }\n          }\n        }\n      } else {\n        // For a new item, if localSN is provided, use it; otherwise, generate a custom ID.\n        docId = items.localSN && items.localSN.trim() !== \"\" ? items.localSN.trim() : generateCustomID();\n        await db.collection(\"Test\").doc(docId).set(formattedItems);\n\n        if (selectedMachine && selectedMachine.id) {\n          const machineRef = db.collection(\"Machine\").doc(selectedMachine.id);\n          const machineDoc = await machineRef.get();\n\n          if (machineDoc.exists) {\n            await machineRef.update({\n              associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n            });\n          }\n        }\n\n        if (selectedCurrentMachine && selectedCurrentMachine.id) {\n          const currentMachineRef = db.collection(\"Machine\").doc(selectedCurrentMachine.id);\n          const currentMachineDoc = await currentMachineRef.get();\n\n          if (currentMachineDoc.exists) {\n            await currentMachineRef.update({\n              associatedParts: firebase.firestore.FieldValue.arrayUnion(db.collection(\"Test\").doc(docId))\n            });\n          }\n        }\n      } // Upload any new photos to Firebase Storage.\n\n\n      await uploadPhotos(docId);\n      console.log(\"Item saved and associatedParts updated!\"); // Redirect to the new URL using the new document id.\n\n      if (redirect) {\n        router.push(`/NewSearch/item/${docId}`);\n      } else {\n        setRedirect(true);\n      } // Optionally, show a save confirmation modal.\n\n\n      handleShowSaveModal();\n    } catch (error) {\n      console.error(\"Error saving data:\", error);\n    }\n  } // -------------------- Info Modal Handlers (unchanged)\n\n\n  const {\n    0: showInfoModal,\n    1: setShowInfoModal\n  } = useState(false);\n  const {\n    0: itemName,\n    1: setItemName\n  } = useState(\"\");\n\n  const handleShowInfoModal = async () => {\n    const db = firebase.firestore();\n\n    try {\n      const doc = await db.collection(\"Test\").doc(id).get();\n\n      if (doc.exists) {\n        const data = doc.data();\n        setItemName(data.name || \"N/A\");\n        setShowInfoModal(true);\n      } else {\n        console.error(\"Item not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching item info:\", error);\n    }\n  };\n\n  const handleCloseInfoModal = () => setShowInfoModal(false);\n\n  const handleCloseCameraModal = () => {\n    setShowCameraModal(false);\n    setCapturedPhoto(null);\n  };\n\n  const handleChange = field => event => {\n    const value = event.target ? event.target.value : event.value;\n    setItems(prevItems => _objectSpread(_objectSpread({}, prevItems), {}, {\n      [field]: value\n    }));\n  };\n\n  const mostRecentWorkOrder = workOrders && workOrders.length > 0 ? workOrders.reduce((latest, current) => {\n    const latestDate = new Date(latest.date);\n    const currentDate = new Date(current.date);\n    return currentDate > latestDate ? current : latest;\n  }, workOrders[0]) : {};\n\n  const handleShowCameraModal = () => {\n    setShowCameraModal(true);\n  };\n\n  const generateCustomID = () => {\n    const randomNum = Math.floor(10000 + Math.random() * 90000);\n    return `AIS${randomNum}`;\n  };\n\n  const handlePrint = async () => {\n    if (!items.name) {\n      alert(\"Missing name\");\n      return;\n    } // In addItem mode, there is no existing id so generate one\n\n\n    const printId = generateCustomID();\n    const payload = {\n      name: items.name,\n      pn: items.pn,\n      sn: items.sn,\n      wo: workOrders && workOrders.length > 0 ? workOrders[0].workOrder : \"\",\n      status: items.status,\n      local_sn: printId,\n      // Use the generated custom ID\n      descriptions: descriptions,\n      date: items.date || new Date().toISOString().split(\"T\")[0],\n      DOM: DOM,\n      oem: oem,\n      modality: modality,\n      model: model\n    };\n    console.log(\"Payload for printing:\", payload);\n\n    try {\n      const response = await fetch(\"https://cc7e-174-76-22-138.ngrok-free.app/print-label\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      console.log(\"Print result:\", result);\n    } catch (error) {\n      console.error(\"Error printing label:\", error);\n    }\n  };\n\n  const handleAddNewPn = () => {\n    if (newPn.trim() !== \"\") {\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        pn: [...prev.pn, newPn.trim()]\n      }));\n    }\n\n    setNewPn(\"\");\n    setAddingNewPn(false);\n  };\n\n  const handleAddNewSn = () => {\n    if (newSn.trim() !== \"\") {\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        sn: [...prev.sn, newSn.trim()]\n      }));\n    }\n\n    setNewSn(\"\");\n    setAddingNewSn(false);\n  };\n\n  function getPriorityMachineField(field, currentValue, theMachine, currentMachine, fromMachine) {\n    // If the field is already filled in by the user, return it unchanged.\n    if (currentValue && currentValue.trim() !== \"\" && currentValue.trim() !== \"N/A\") {\n      return currentValue;\n    } // Otherwise, prioritize the best available value.\n\n\n    if (theMachine && theMachine[field] && theMachine[field].trim() !== \"\" && theMachine[field] !== \"N/A\") {\n      return theMachine[field];\n    }\n\n    if (currentMachine && currentMachine[field] && currentMachine[field].trim() !== \"\" && currentMachine[field] !== \"N/A\") {\n      return currentMachine[field];\n    }\n\n    if (fromMachine && fromMachine[field] && fromMachine[field].trim() !== \"\" && fromMachine[field] !== \"N/A\") {\n      return fromMachine[field];\n    }\n\n    return currentValue; // Default to keeping the current value\n  }\n\n  function updateMachineFields(theMachine, currentMachine, fromMachine) {\n    return {\n      oem: getValidMachineField(\"oem\", theMachine, currentMachine, fromMachine),\n      modality: getValidMachineField(\"modality\", theMachine, currentMachine, fromMachine),\n      model: getValidMachineField(\"model\", theMachine, currentMachine, fromMachine)\n    };\n  }\n\n  function getValidMachineField(field, theMachine, currentMachine, fromMachine) {\n    if (theMachine && theMachine[field] && theMachine[field].trim() !== \"\" && theMachine[field] !== \"N/A\") {\n      return theMachine[field];\n    }\n\n    if (currentMachine && currentMachine[field] && currentMachine[field].trim() !== \"\" && currentMachine[field] !== \"N/A\") {\n      return currentMachine[field];\n    }\n\n    if (fromMachine && fromMachine[field] && fromMachine[field].trim() !== \"\" && fromMachine[field] !== \"N/A\") {\n      return fromMachine[field];\n    }\n\n    return \"\"; // Keep it empty if no valid data exists\n  }\n\n  const {\n    0: showLocalLocFrom,\n    1: setShowLocalLocFrom\n  } = useState(false);\n  const {\n    0: showLocalLocCurrent,\n    1: setShowLocalLocCurrent\n  } = useState(false);\n\n  async function handleClone() {\n    var _descriptions$2;\n\n    event.preventDefault();\n\n    if (!items.name || !((_descriptions$2 = descriptions[0]) !== null && _descriptions$2 !== void 0 && _descriptions$2.description)) {\n      handleShow(); // your existing error modal\n\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // save but don’t redirect\n      await toSend(false);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const condition = name => {\n    return name && name.toLowerCase() === \"interior socal\";\n  };\n\n  const handleSetSelectedMachine = machine => {\n    const condition = name => name && name.toLowerCase() === \"interior socal\";\n\n    if (machinePick) {\n      setSelectedMachine({\n        id: machine.id,\n        name: machine.name\n      }); // For \"from\", show the local loc input if condition met.\n\n      setShowLocalLocFrom(condition(machine.name));\n    } else {\n      setSelectedCurrentMachine({\n        id: machine.id,\n        name: machine.name\n      }); // For \"current\", you might also want a local loc input:\n\n      setShowLocalLocCurrent(condition(machine.name));\n    }\n\n    fetchMachine(machine.id);\n    setShowMachineModal(false);\n  };\n\n  const {\n    0: currentPnIndex,\n    1: setCurrentPnIndex\n  } = useState(0);\n  const {\n    0: showDropdown,\n    1: setShowDropdown\n  } = useState(false);\n  const {\n    0: currentSnIndex,\n    1: setCurrentSnIndex\n  } = useState(0);\n  const {\n    0: showSnDropdown,\n    1: setShowSnDropdown\n  } = useState(false);\n\n  const handleAddNewClient = () => {\n    // Generate a random client number as part of the URL.\n    const randomNum = Math.floor(10000 + Math.random() * 90000); // When pushing, include a query parameter (from=item) and the current item id if available.\n\n    router.push(`/NewSearch/client/AIS${randomNum}/addClient?from=addItem`);\n  };\n\n  const {\n    0: showMachineSelect,\n    1: setShowMachineSelect\n  } = useState(false);\n  const {\n    0: selectedClientFrom,\n    1: setSelectedClientFrom\n  } = useState(null);\n  const {\n    0: selectedClientCurrent,\n    1: setSelectedClientCurrent\n  } = useState(null);\n  return __jsx(LoggedIn, null, __jsx(MachineSelectionModal, {\n    show: machineSelectionModal,\n    handleClose: () => setMachineSelectionModal(false),\n    setMachine: handleSetSelectedMachine,\n    machineOptions: machineOptions // if your modal needs the list of machines\n\n  }), __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, \"Missing required field: Name and Description\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showErr,\n    onHide: handleCloseErr\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, Err), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseErr\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showSaveModal,\n    onHide: handleCloseSaveModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Save Confirmation\")), __jsx(Modal.Body, null, \"Data has been saved successfully.\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseSaveModal\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showDescModal,\n    onHide: handleCloseDescModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Descriptions\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addDescription\n  }, \"Add Description\"), descriptions.map((desc, index) => __jsx(Row, {\n    key: index,\n    className: \"mb-3\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => selectDescription(index),\n    style: {\n      cursor: \"pointer\"\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex justify-content-between\"\n  }, __jsx(\"span\", null, desc.description || \"Description\"), __jsx(\"span\", {\n    style: {\n      borderLeft: \"1px solid #ccc\",\n      paddingLeft: \"10px\"\n    }\n  }, desc.date || \"Date\"))))), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseDescModal\n  }, \"OK\"))), __jsx(Modal, {\n    show: showWoModal,\n    onHide: handleCloseWoModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Work Orders\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addWorkOrder,\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, \"Add Work Order\"), workOrders.map((wo, index) => __jsx(Row, {\n    key: index,\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Work Order\",\n    value: wo.workOrder,\n    onChange: e => handleWorkOrderChange(index, \"workOrder\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  })), __jsx(Col, null, __jsx(Form.Control, {\n    type: \"date\",\n    placeholder: \"Date\",\n    value: wo.date,\n    onChange: e => handleWorkOrderChange(index, \"date\", e.target.value)\n  })), __jsx(Col, null, __jsx(Button, {\n    variant: \"danger\",\n    onClick: () => removeWorkOrder(index)\n  }, \"Remove\")))), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseWoModal\n  }, \"OK\"))), __jsx(ClientInfoModal, {\n    show: showMachineModal,\n    handleClose: handleCloseMachineModal,\n    selectedClient: selectedClient,\n    machineOptions: machineOptions,\n    setSelectedMachine: handleSetSelectedMachine\n  }), __jsx(Modal, {\n    show: showClientModal,\n    onHide: handleCloseClientModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Client\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: search,\n    onChange: e => setSearch(e.target.value)\n  }), __jsx(ClientTable, {\n    clients: clients.filter(client => client.name.toLowerCase().includes(search.toLowerCase())),\n    onSelectClient: handleClientInfo,\n    onInfoClick: handleClientInfo,\n    clearSelection: () => handleClientInfo(null),\n    onAddClient: handleAddNewClient // new prop\n\n  }))), __jsx(ParentModal, {\n    show: showParentModal,\n    handleClose: handleCloseParentModal,\n    setSelectedParent: setSelectedParent\n  }), __jsx(MachineSelectionModal, {\n    show: machineSelectionModal,\n    handleClose: () => setMachineSelectionModal(false),\n    setMachine: setTheMachine\n  }), __jsx(Modal, {\n    show: showCameraModal,\n    onHide: handleCloseCameraModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Take a Photo\")), __jsx(Modal.Body, null, __jsx(\"div\", {\n    className: \"camera\"\n  }, !capturedPhoto ? __jsx(BarcodeScannerComponent, {\n    width: \"100%\",\n    height: 300,\n    onUpdate: handleCapture,\n    facingMode: cameraFacing\n  }) : __jsx(\"div\", {\n    className: \"photo-preview\"\n  }, __jsx(\"img\", {\n    src: URL.createObjectURL(capturedPhoto),\n    alt: \"captured\",\n    style: {\n      width: \"100%\"\n    }\n  })))), __jsx(Modal.Footer, null, !capturedPhoto ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: capturePhoto,\n    style: {\n      borderRadius: \"50%\",\n      width: \"60px\",\n      height: \"60px\",\n      position: \"absolute\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      bottom: \"10px\"\n    }\n  }, \"\\uD83D\\uDCF7\"), __jsx(Button, {\n    onClick: () => setCameraFacing(prev => prev === \"environment\" ? \"user\" : \"environment\")\n  }, \"Flip Camera\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseCameraModal\n  }, \"Cancel\")) : __jsx(React.Fragment, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: () => setCapturedPhoto(null)\n  }, \"Retake\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: savePhoto\n  }, \"OK\")))), __jsx(Modal, {\n    show: showDescModal,\n    onHide: handleCloseDescModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Descriptions\")), __jsx(Modal.Body, null, __jsx(Button, {\n    variant: \"primary\",\n    className: \"mb-3\",\n    onClick: addDescription\n  }, \"Add Description\"), descriptions.map((desc, index) => __jsx(Row, {\n    key: index,\n    className: \"mb-3\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: () => selectDescription(index),\n    style: {\n      cursor: \"pointer\"\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex justify-content-between\"\n  }, __jsx(\"span\", null, desc.description || \"Description\"), __jsx(\"span\", {\n    style: {\n      borderLeft: \"1px solid #ccc\",\n      paddingLeft: \"10px\"\n    }\n  }, desc.date || \"Date\"))))), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseDescModal\n  }, \"OK\"))), __jsx(InfoModal, {\n    show: showInfoModal,\n    handleClose: handleCloseInfoModal,\n    itemName: items.name,\n    dimensions: `${items.length},${items.width},${items.height}`,\n    price: items.price,\n    freqI: freqItem,\n    freqM: machineFrequency,\n    usage: usagePastYear\n  }), loading && __jsx(\"div\", {\n    style: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"rgba(255, 255, 255, 0.7)\",\n      backdropFilter: \"blur(5px)\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      zIndex: 9999 // Make sure it's above everything else\n\n    }\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    variant: \"primary\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"visually-hidden\"\n  }, \"Loading...\"))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"600px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Add New Item\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"name\"\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items.name,\n    onChange: handleChange(\"name\")\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"pn\"\n  }, __jsx(Form.Label, null, \"Product Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.pn[currentPnIndex] || \"\",\n    onChange: e => handlePnChange(currentPnIndex, e.target.value)\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowDropdown(!showDropdown)\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setAddingNewPn(true)\n  }, \"+\"))), showDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, items.pn.map((pnOption, idx) => __jsx(\"div\", {\n    key: idx,\n    style: {\n      padding: \"8px\",\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setCurrentPnIndex(idx);\n      setShowDropdown(false);\n    }\n  }, pnOption)))), addingNewPn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new PN\",\n    value: newPn,\n    onChange: e => setNewPn(e.target.value),\n    onBlur: handleAddNewPn,\n    onKeyDown: e => {\n      if (e.key === \"Enter\") {\n        handleAddNewPn();\n      }\n    }\n  })))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"sn\"\n  }, __jsx(Form.Label, null, \"Serial Number\"), __jsx(\"div\", {\n    style: {\n      position: \"relative\"\n    }\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    type: \"text\",\n    value: items.sn[currentSnIndex] || \"\",\n    onChange: e => handleSnChange(currentSnIndex, e.target.value)\n  }), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowSnDropdown(!showSnDropdown)\n  }, \"\\u25BE\"), __jsx(InputGroup.Text, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setAddingNewSn(true)\n  }, \"+\"))), showSnDropdown && __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      top: \"100%\",\n      left: 0,\n      right: 0,\n      backgroundColor: \"white\",\n      border: \"1px solid #ccc\",\n      zIndex: 1000,\n      maxHeight: \"150px\",\n      overflowY: \"auto\"\n    }\n  }, items.sn.map((snOption, idx) => __jsx(\"div\", {\n    key: idx,\n    style: {\n      padding: \"8px\",\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setCurrentSnIndex(idx);\n      setShowSnDropdown(false);\n    }\n  }, snOption)))), addingNewSn && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter new SN\",\n    value: newSn,\n    onChange: e => setNewSn(e.target.value),\n    onBlur: handleAddNewSn,\n    onKeyDown: e => {\n      if (e.key === \"Enter\") {\n        handleAddNewSn();\n      }\n    }\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"status\"\n  }, __jsx(Form.Label, null, \"Status\"), __jsx(Form.Select, {\n    value: items.status || \"\",\n    onChange: handleChange(\"status\")\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select status\"), __jsx(\"option\", {\n    value: \"Good\"\n  }, \"Good\"), __jsx(\"option\", {\n    value: \"Bad\"\n  }, \"Bad\"), __jsx(\"option\", {\n    value: \"Unknown\"\n  }, \"Unknown\"))))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"oem\"\n  }, __jsx(Form.Label, null, \"OEM\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"OEM\",\n    value: oem,\n    onChange: e => setOem(e.target.value)\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"modality\"\n  }, __jsx(Form.Label, null, \"Modality\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Modality\",\n    value: modality,\n    onChange: e => setModality(e.target.value)\n  }))), __jsx(Col, null, __jsx(Form.Group, {\n    controlId: \"model\"\n  }, __jsx(Form.Label, null, \"Model\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Model\",\n    value: model,\n    onChange: e => setModel(e.target.value)\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\",\n      marginTop: \"1rem\"\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowWoModal,\n    className: \"me-2\"\n  }, \"Manage Work Orders\"), workOrders.length > 0 && __jsx(\"div\", {\n    className: \"d-flex flex-column align-items-start\"\n  }, __jsx(Form.Label, null, \"Work Order\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Most Recent Work Order\",\n    value: (mostRecentWorkOrder === null || mostRecentWorkOrder === void 0 ? void 0 : mostRecentWorkOrder.workOrder) || \"\",\n    onChange: e => handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"workOrder\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Label, null, \"Date\"), __jsx(Form.Control, {\n    type: \"date\",\n    placeholder: \"Work Order Date\",\n    value: (mostRecentWorkOrder === null || mostRecentWorkOrder === void 0 ? void 0 : mostRecentWorkOrder.date) || \"\",\n    onChange: e => handleWorkOrderChange(workOrders.indexOf(mostRecentWorkOrder), \"date\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Form.Group, {\n    controlId: \"desc\"\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: listDescriptions,\n    className: \"mb-2 me-2\"\n  }, \"List Descriptions\"), __jsx(Form.Control, {\n    as: \"textarea\",\n    rows: 3,\n    placeholder: \"Enter description\",\n    value: ((_descriptions$selecte = descriptions[selectedDesc]) === null || _descriptions$selecte === void 0 ? void 0 : _descriptions$selecte.description) || \"\",\n    onChange: e => handleDescriptionChange(selectedDesc, \"description\", e.target.value),\n    style: {\n      marginBottom: \"0.5rem\"\n    }\n  }), __jsx(Form.Control, {\n    type: \"date\",\n    value: ((_descriptions$selecte2 = descriptions[selectedDesc]) === null || _descriptions$selecte2 === void 0 ? void 0 : _descriptions$selecte2.date) || \"\",\n    onChange: e => handleDescriptionChange(selectedDesc, \"date\", e.target.value),\n    style: {\n      marginTop: \"0.5rem\",\n      marginBottom: \"0.5rem\"\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => {\n      setMachinePick(true);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select From\"), selectedClientFrom && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (From):\"), \" \", selectedClientFrom.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowMachineModal(true)\n  }, \"Select Machine for \", selectedClientFrom.name), selectedMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (From):\"), \" \", selectedMachine.name), showLocalLocFrom && __jsx(Form.Group, {\n    controlId: \"localLocFrom\",\n    className: \"mt-2\"\n  }, __jsx(Form.Label, null, \"Local Loc (From)\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: localLocFrom,\n    onChange: e => setLocalLocFrom(e.target.value)\n  })))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => {\n      setMachinePick(false);\n      handleShowClientModal();\n    },\n    className: \"me-2\"\n  }, \"Select Current\"), selectedClientCurrent && __jsx(\"div\", {\n    style: {\n      border: \"1px solid #ccc\",\n      padding: \"0.75rem\",\n      borderRadius: \"4px\",\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(\"p\", null, __jsx(\"strong\", null, \"Selected Client (Current):\"), \" \", selectedClientCurrent.name), __jsx(\"div\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: () => setShowMachineModal(true)\n  }, \"Select Machine for \", selectedClientCurrent.name), selectedCurrentMachine && __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      marginTop: \"0.5rem\"\n    }\n  }, __jsx(\"strong\", null, \"Selected Machine (Current):\"), \" \", selectedCurrentMachine.name), showLocalLocCurrent && __jsx(Form.Group, {\n    controlId: \"localLocCurrent\",\n    className: \"mt-2\"\n  }, __jsx(Form.Label, null, \"Local Loc (Current)\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: localLocCurrent,\n    onChange: e => setLocalLocCurrent(e.target.value)\n  })))))), __jsx(Col, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowParentModal,\n    className: \"me-2\"\n  }, \"Select Parent\"), selectedParent && __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Selected Parent\",\n    value: selectedParent.name,\n    readOnly: true,\n    style: {\n      cursor: \"default\",\n      marginTop: \"0.5rem\"\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      marginBottom: \"1rem\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, {\n    xs: 6\n  }, __jsx(ButtonGroup, null, __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleShowCameraModal\n  }, \"Take Photo\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleBrowsePhotos\n  }, \"Browse\"))), __jsx(Col, {\n    xs: 6,\n    className: \"d-flex align-items-center\"\n  }, __jsx(Button, {\n    variant: addToWebsite ? \"primary\" : \"outline-primary\",\n    onClick: () => setAddToWebsite(prev => !prev)\n  }, addToWebsite ? \"✓ Add to Website\" : \"Add to Website\"), __jsx(Form.Check, {\n    type: \"checkbox\",\n    id: \"hide-checkbox\",\n    label: \"Hide\" // box is checked when we want visible = false\n    ,\n    checked: !items.visible,\n    onChange: e => {\n      // grab checked immediately\n      const isHidden = e.currentTarget.checked;\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        visible: !isHidden\n      }));\n    },\n    className: \"ms-3\"\n  }))), __jsx(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    multiple: true,\n    ref: browseInputRef,\n    style: {\n      display: \"none\"\n    },\n    onChange: handleFilesSelected\n  })), __jsx(\"div\", {\n    className: \"mt-3 d-flex flex-wrap\"\n  }, photos.map((photo, index) => __jsx(\"div\", {\n    key: index,\n    className: \"d-flex flex-column align-items-center mb-2 me-2\",\n    style: {\n      width: \"100px\",\n      height: \"100px\",\n      position: \"relative\"\n    }\n  }, __jsx(\"img\", {\n    src: photo.url,\n    alt: `Photo ${index + 1}`,\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\"\n    }\n  }), photo.file && __jsx(Button, {\n    variant: \"danger\",\n    size: \"sm\",\n    style: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      padding: \"0 5px\"\n    },\n    onClick: () => removePhoto(index)\n  }, \"X\")))), __jsx(\"div\", {\n    className: \"mt-3 d-flex flex-wrap align-items-center\"\n  }, __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"Save\"), __jsx(Button, {\n    variant: \"info\",\n    onClick: handleClone,\n    style: {\n      marginRight: \"1rem\"\n    }\n  }, \"Clone\"), __jsx(LoadingButton, {\n    type: \"secondary\",\n    name: \"Back\",\n    route: \"NewSearch/mainSearch\"\n  }), __jsx(Button, {\n    variant: \"info\",\n    onClick: handlePrint,\n    style: {\n      marginLeft: \"auto\"\n    }\n  }, \"Print Label\")), __jsx(\"div\", {\n    style: {\n      textAlign: \"center\",\n      margin: \"1rem 0\"\n    }\n  }, __jsx(Button, {\n    variant: \"link\",\n    style: {\n      textDecoration: \"none\",\n      color: \"black\",\n      fontSize: \"24px\"\n    },\n    onClick: () => setShowExtra(!showExtra)\n  }, \"\\u25BC\")), __jsx(Collapse, {\n    in: showExtra\n  }, __jsx(\"div\", {\n    id: \"extra-collapse\",\n    className: \"mt-3\"\n  }, __jsx(Row, null, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"dimensions\"\n  }, __jsx(Form.Label, null, \"Dimensions (L x W x H)\"), __jsx(Row, null, __jsx(Col, null, __jsx(Form.Control, {\n    placeholder: \"Length\",\n    type: \"text\",\n    value: items.length,\n    onChange: handleChange(\"length\")\n  })), \"x\", __jsx(Col, null, __jsx(Form.Control, {\n    placeholder: \"Width\",\n    type: \"text\",\n    value: items.width,\n    onChange: handleChange(\"width\")\n  })), \"x\", __jsx(Col, null, __jsx(Form.Control, {\n    placeholder: \"Height\",\n    type: \"text\",\n    value: items.height,\n    onChange: handleChange(\"height\")\n  })))), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"price\"\n  }, __jsx(Form.Label, null, \"Price\"), __jsx(Form.Control, {\n    placeholder: \"Price\",\n    type: \"text\",\n    value: items.price,\n    onChange: handleChange(\"price\")\n  }))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"DOM\"\n  }, __jsx(Form.Label, null, \"DOM (Date of Manufacture)\"), __jsx(Form.Control, {\n    placeholder: \"Enter DOM\",\n    type: \"date\",\n    value: DOM,\n    onChange: e => setDOM(e.target.value)\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"localSN\"\n  }, __jsx(Form.Label, null, \"Local SN\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"Enter Local SN\",\n    value: items.localSN || \"\",\n    onChange: handleChange(\"localSN\")\n  }))), __jsx(Row, null, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"poNumber\"\n  }, __jsx(Form.Label, null, \"PO Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"PO Number\",\n    value: items.poNumber || \"\",\n    onChange: handleChange(\"poNumber\")\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"arrivalDate\"\n  }, __jsx(Form.Label, null, \"Arrival Date\"), __jsx(Form.Control, {\n    placeholder: \"Enter Arrival Date\",\n    type: \"date\",\n    value: items.arrival_date,\n    onChange: e => {\n      const value = e.target.value;\n      setItems(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        arrival_date: value\n      }));\n    }\n  })))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
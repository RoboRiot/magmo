{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") {\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//   }\n//   const token = process.env.SLACK_BOT_TOKEN;\n//   if (!token) {\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//   }\n//   // ---- Payload from client (your UI already sends these) ----\n//   const {\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\n//     title,              // the thing we want to show in the Task column\n//     linkUrl, bodyText,\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//     photoUrls = [],\n//   } = req.body || {};\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\n//   const LISTS = {\n//     tasks: {\n//       id: process.env.SLACK_LIST_TASKS_ID,\n//       // OPTIONAL: if you know the \"Task\" column id already\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\n//       cols: {\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\n//       },\n//     },\n//     shipping: {\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\n//       },\n//     },\n//     receiving: {\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\n//       },\n//     },\n//   };\n//   const cfg = LISTS[listKey];\n//   if (!cfg?.id) {\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\n//   }\n//   // ---- Slack helpers ----\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\n//     const r = await fetch(`https://slack.com/api/${method}`, {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\n//     });\n//     return r.json();\n//   }\n//   const plain = (v) => (v ?? \"\").toString().trim();\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//   // Never send an empty title\n//   const safeTitle =\n//     plain(title) ||\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\n//     joinArr(pn) ||\n//     \"New Item\";\n//   // Convert plain text to Slack rich_text for text columns\n//   function toRichText(text) {\n//     return [{\n//       type: \"rich_text\",\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\n//     }];\n//   }\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\n//   async function resolveTitleColumnId(listId, provided) {\n//     if (provided) return { colId: provided, source: \"env\" };\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\n//     let candidate = null;\n//     for (const item of probe.items || []) {\n//       for (const f of item.fields || []) {\n//         const key = (f.key || \"\").trim().toLowerCase();\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\n//       }\n//     }\n//     return { colId: candidate, source: \"auto:first_text\" };\n//   }\n//   try {\n//     // 1) Find the column to write the Task name into; fall back to top-level title\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\n//     const createBody = {\n//       list_id: cfg.id,\n//       ...(titleCol.colId\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\n//     };\n//     const created = await slack(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 2) (Optional) Patch other columns you actually have IDs for\n//     const fields = [];\n//     const cols = cfg.cols || {};\n//     const addText = (colId, text) => {\n//       const t = plain(text);\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\n//     };\n//     // Description / Notes column (for tasks we include your assembled bodyText)\n//     if (cols.desc) {\n//       const bits = [\n//         plain(description),\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\n//       ].filter(Boolean).join(\"\\n\");\n//       addText(cols.desc, bits);\n//     }\n//     // Dates and grouped PN/SN/DOM example\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\n//     if (cols.pn) {\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.pn, combo);\n//     }\n//     if (cols.track) {\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.track, t);\n//     }\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\n//     if (fields.length) {\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id: cfg.id,\n//       item_id: created.item.id,\n//       used_title_col: titleCol.colId || null,\n//       title_col_source: titleCol.source || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      ok: false,\n      error: \"method_not_allowed\"\n    });\n  }\n\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    ok: false,\n    error: \"missing_SLACK_BOT_TOKEN\"\n  }); // ---- Client payload (your UI already sends these keys) ----\n\n  const {\n    listKey,\n    // \"shipping\" | \"receiving\" | \"tasks\"\n    title,\n    // item name shown in the list’s Item/Task column\n    linkUrl,\n    bodyText,\n    // optional\n    date,\n    // for shipping: arrival_date (YYYY-MM-DD or any parseable date)\n    pn,\n    sn,\n    dom,\n    // pn,sn can be string or string[]\n    trackingNumber,\n    poNumber,\n    workOrder,\n    // WO text\n    localSN,\n    // item id\n    description,\n    // free text\n    photoUrls = [] // optional photos (kept, not required)\n\n  } = req.body || {}; // ---- ENV: list & column ids (set only the ones you actually have) ----\n\n  const LISTS = {\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      cols: {\n        // notes/description column on tasks list\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\n        // \"Shipping Date\"\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\n        // \"PN and SN and DOM\"\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\n        // \"Tracking Number / WDIM\"\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL || null,\n        // \"WO/SO Number\"\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\n        // \"Local SN\"\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null // attachments\n\n      }\n    },\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL || null,\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null\n      }\n    }\n  };\n  const cfg = LISTS[listKey];\n\n  if (!(cfg !== null && cfg !== void 0 && cfg.id)) {\n    return res.status(400).json({\n      ok: false,\n      error: `unknown_or_unconfigured_listKey_${listKey}`\n    });\n  } // ---- helpers ----\n\n\n  const headersJson = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n\n  const slack = (method, payload) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers: headersJson,\n    body: JSON.stringify(payload)\n  }).then(r => r.json());\n\n  const txt = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(txt).join(\", \") : txt(a); // 1) Create the item with the visible name (Item/Task column)\n\n\n  const safeTitle = txt(title) || (txt(localSN) ? `Item ${txt(localSN)}` : \"\") || joinArr(pn) || \"New Item\";\n  const created = await slack(\"slackLists.items.create\", {\n    list_id: cfg.id,\n    title: safeTitle\n  });\n\n  if (!(created !== null && created !== void 0 && created.ok)) {\n    return res.status(200).json({\n      ok: false,\n      error: (created === null || created === void 0 ? void 0 : created.error) || \"create_failed\",\n      sent: {\n        list_id: cfg.id,\n        title: safeTitle\n      }\n    });\n  }\n\n  const itemId = created.item.id; // 2) Build the field updates for the rest of the columns\n\n  const fields = []; // Description (also include link if you passed it)\n\n  if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n    const textBits = [txt(description), listKey === \"tasks\" ? txt(bodyText) : \"\", txt(linkUrl) ? `<${txt(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n    fields.push({\n      column_id: cfg.cols.desc,\n      value: {\n        text: textBits\n      }\n    });\n  } // Shipping Date (arrival_date from your item page)\n\n\n  if (cfg.cols.date && txt(date)) {\n    // Slack accepts YYYY-MM-DD (it will parse common forms too)\n    const iso = (() => {\n      const d = new Date(txt(date));\n      return isNaN(d) ? txt(date) : d.toISOString().slice(0, 10);\n    })();\n\n    fields.push({\n      column_id: cfg.cols.date,\n      value: {\n        date: iso\n      }\n    });\n  } // PN & SN (same column) — format: \"PN: x, y  SN: a, b\" (+ DOM if provided)\n\n\n  if (cfg.cols.pn && (pn || sn || dom)) {\n    const pnLine = joinArr(pn) ? `PN: ${joinArr(pn)}` : \"\";\n    const snLine = joinArr(sn) ? `SN: ${joinArr(sn)}` : \"\";\n    const domLine = txt(dom) ? `DOM: ${txt(dom)}` : \"\";\n    const combined = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n    if (combined) fields.push({\n      column_id: cfg.cols.pn,\n      value: {\n        text: combined\n      }\n    });\n  } // Tracking / PO\n\n\n  if (cfg.cols.track && (trackingNumber || poNumber)) {\n    const t = [txt(trackingNumber) ? `RL: ${txt(trackingNumber)}` : \"\", txt(poNumber) ? `PO: ${txt(poNumber)}` : \"\"].filter(Boolean).join(\"  \");\n    if (t) fields.push({\n      column_id: cfg.cols.track,\n      value: {\n        text: t\n      }\n    });\n  } // WO/SO Number\n\n\n  if (cfg.cols.wo && txt(workOrder)) {\n    fields.push({\n      column_id: cfg.cols.wo,\n      value: {\n        text: `WO: ${txt(workOrder)}`\n      }\n    });\n  } // Local SN (use your item id)\n\n\n  if (cfg.cols.lsn && txt(localSN)) {\n    fields.push({\n      column_id: cfg.cols.lsn,\n      value: {\n        text: txt(localSN)\n      }\n    });\n  } // 3) Apply the updates (in one call)\n\n\n  if (fields.length) {\n    const updated = await slack(\"slackLists.items.update\", {\n      list_id: cfg.id,\n      item_id: itemId,\n      fields\n    });\n\n    if (!(updated !== null && updated !== void 0 && updated.ok)) {\n      return res.status(200).json({\n        ok: false,\n        error: (updated === null || updated === void 0 ? void 0 : updated.error) || \"update_failed\",\n        where: \"fields\",\n        item_id: itemId,\n        sent_fields: fields.map(f => ({\n          column_id: f.column_id,\n          keys: Object.keys(f.value)\n        }))\n      });\n    }\n  }\n\n  return res.status(200).json({\n    ok: true,\n    mode: \"list\",\n    list_id: cfg.id,\n    item_id: itemId,\n    sent_title: safeTitle\n  });\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","tasks","id","SLACK_LIST_TASKS_ID","cols","desc","SLACK_LIST_TASKS_DESCRIPTION_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","track","SLACK_LIST_SHIPPING_TRACKING_COL","wo","SLACK_LIST_SHIPPING_WO_COL","lsn","SLACK_LIST_SHIPPING_LOCALSN_COL","photos","SLACK_LIST_SHIPPING_PHOTOS_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","SLACK_LIST_RECEIVING_TRACKING_COL","SLACK_LIST_RECEIVING_WO_COL","SLACK_LIST_RECEIVING_LOCALSN_COL","SLACK_LIST_RECEIVING_PHOTOS_COL","cfg","headersJson","Authorization","slack","payload","fetch","headers","JSON","stringify","then","r","txt","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","safeTitle","created","list_id","sent","itemId","item","fields","textBits","push","column_id","value","text","iso","d","Date","isNaN","toISOString","slice","pnLine","snLine","domLine","combined","t","length","updated","item_id","where","sent_fields","f","keys","Object","mode","sent_title"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") {\r\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//   }\r\n\r\n//   const token = process.env.SLACK_BOT_TOKEN;\r\n//   if (!token) {\r\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//   }\r\n\r\n//   // ---- Payload from client (your UI already sends these) ----\r\n//   const {\r\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\r\n//     title,              // the thing we want to show in the Task column\r\n//     linkUrl, bodyText,\r\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//     photoUrls = [],\r\n//   } = req.body || {};\r\n\r\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\r\n//   const LISTS = {\r\n//     tasks: {\r\n//       id: process.env.SLACK_LIST_TASKS_ID,\r\n//       // OPTIONAL: if you know the \"Task\" column id already\r\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\r\n//       cols: {\r\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\r\n//       },\r\n//     },\r\n//     shipping: {\r\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//     receiving: {\r\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//   };\r\n\r\n//   const cfg = LISTS[listKey];\r\n//   if (!cfg?.id) {\r\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\r\n//   }\r\n\r\n//   // ---- Slack helpers ----\r\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\r\n//     const r = await fetch(`https://slack.com/api/${method}`, {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\r\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\r\n//     });\r\n//     return r.json();\r\n//   }\r\n\r\n//   const plain = (v) => (v ?? \"\").toString().trim();\r\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//   // Never send an empty title\r\n//   const safeTitle =\r\n//     plain(title) ||\r\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\r\n//     joinArr(pn) ||\r\n//     \"New Item\";\r\n\r\n//   // Convert plain text to Slack rich_text for text columns\r\n//   function toRichText(text) {\r\n//     return [{\r\n//       type: \"rich_text\",\r\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\r\n//     }];\r\n//   }\r\n\r\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\r\n//   async function resolveTitleColumnId(listId, provided) {\r\n//     if (provided) return { colId: provided, source: \"env\" };\r\n\r\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\r\n\r\n//     let candidate = null;\r\n//     for (const item of probe.items || []) {\r\n//       for (const f of item.fields || []) {\r\n//         const key = (f.key || \"\").trim().toLowerCase();\r\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\r\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\r\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\r\n//       }\r\n//     }\r\n//     return { colId: candidate, source: \"auto:first_text\" };\r\n//   }\r\n\r\n//   try {\r\n//     // 1) Find the column to write the Task name into; fall back to top-level title\r\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\r\n\r\n//     const createBody = {\r\n//       list_id: cfg.id,\r\n//       ...(titleCol.colId\r\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\r\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\r\n//     };\r\n\r\n//     const created = await slack(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 2) (Optional) Patch other columns you actually have IDs for\r\n//     const fields = [];\r\n//     const cols = cfg.cols || {};\r\n//     const addText = (colId, text) => {\r\n//       const t = plain(text);\r\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\r\n//     };\r\n\r\n//     // Description / Notes column (for tasks we include your assembled bodyText)\r\n//     if (cols.desc) {\r\n//       const bits = [\r\n//         plain(description),\r\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n//       ].filter(Boolean).join(\"\\n\");\r\n//       addText(cols.desc, bits);\r\n//     }\r\n\r\n//     // Dates and grouped PN/SN/DOM example\r\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\r\n//     if (cols.pn) {\r\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\r\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.pn, combo);\r\n//     }\r\n//     if (cols.track) {\r\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.track, t);\r\n//     }\r\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\r\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\r\n\r\n//     if (fields.length) {\r\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id: cfg.id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleCol.colId || null,\r\n//       title_col_source: titleCol.source || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n  }\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n\r\n  // ---- Client payload (your UI already sends these keys) ----\r\n  const {\r\n    listKey,            // \"shipping\" | \"receiving\" | \"tasks\"\r\n    title,              // item name shown in the list’s Item/Task column\r\n    linkUrl, bodyText,  // optional\r\n    date,               // for shipping: arrival_date (YYYY-MM-DD or any parseable date)\r\n    pn, sn, dom,        // pn,sn can be string or string[]\r\n    trackingNumber, poNumber,\r\n    workOrder,          // WO text\r\n    localSN,            // item id\r\n    description,        // free text\r\n    photoUrls = [],     // optional photos (kept, not required)\r\n  } = req.body || {};\r\n\r\n  // ---- ENV: list & column ids (set only the ones you actually have) ----\r\n  const LISTS = {\r\n    tasks: {\r\n      id: process.env.SLACK_LIST_TASKS_ID,\r\n      cols: {\r\n        // notes/description column on tasks list\r\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\r\n      },\r\n    },\r\n    shipping: {\r\n      id: process.env.SLACK_LIST_SHIPPING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\r\n        date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,      // \"Shipping Date\"\r\n        pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,      // \"PN and SN and DOM\"\r\n        track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,  // \"Tracking Number / WDIM\"\r\n        wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,        // \"WO/SO Number\"\r\n        lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,   // \"Local SN\"\r\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,    // attachments\r\n      },\r\n    },\r\n    receiving: {\r\n      id: process.env.SLACK_LIST_RECEIVING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\r\n        date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\r\n        pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\r\n        track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\r\n        wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\r\n        lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\r\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\r\n      },\r\n    },\r\n  };\r\n\r\n  const cfg = LISTS[listKey];\r\n  if (!cfg?.id) {\r\n    return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\r\n  }\r\n\r\n  // ---- helpers ----\r\n  const headersJson = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n  };\r\n  const slack = (method, payload) =>\r\n    fetch(`https://slack.com/api/${method}`, {\r\n      method: \"POST\",\r\n      headers: headersJson,\r\n      body: JSON.stringify(payload),\r\n    }).then(r => r.json());\r\n\r\n  const txt = v => (v ?? \"\").toString().trim();\r\n  const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(txt).join(\", \") : txt(a);\r\n\r\n  // 1) Create the item with the visible name (Item/Task column)\r\n  const safeTitle =\r\n    txt(title) ||\r\n    (txt(localSN) ? `Item ${txt(localSN)}` : \"\") ||\r\n    joinArr(pn) ||\r\n    \"New Item\";\r\n\r\n  const created = await slack(\"slackLists.items.create\", {\r\n    list_id: cfg.id,\r\n    title: safeTitle,\r\n  });\r\n\r\n  if (!created?.ok) {\r\n    return res.status(200).json({\r\n      ok: false,\r\n      error: created?.error || \"create_failed\",\r\n      sent: { list_id: cfg.id, title: safeTitle }\r\n    });\r\n  }\r\n\r\n  const itemId = created.item.id;\r\n\r\n  // 2) Build the field updates for the rest of the columns\r\n  const fields = [];\r\n\r\n  // Description (also include link if you passed it)\r\n  if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n    const textBits = [\r\n      txt(description),\r\n      listKey === \"tasks\" ? txt(bodyText) : \"\",\r\n      txt(linkUrl) ? `<${txt(linkUrl)}|Open in Magmo>` : \"\",\r\n    ].filter(Boolean).join(\"\\n\");\r\n    fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n  }\r\n\r\n  // Shipping Date (arrival_date from your item page)\r\n  if (cfg.cols.date && txt(date)) {\r\n    // Slack accepts YYYY-MM-DD (it will parse common forms too)\r\n    const iso = (() => {\r\n      const d = new Date(txt(date)); return isNaN(d) ? txt(date) : d.toISOString().slice(0,10);\r\n    })();\r\n    fields.push({ column_id: cfg.cols.date, value: { date: iso } });\r\n  }\r\n\r\n  // PN & SN (same column) — format: \"PN: x, y  SN: a, b\" (+ DOM if provided)\r\n  if (cfg.cols.pn && (pn || sn || dom)) {\r\n    const pnLine  = joinArr(pn) ? `PN: ${joinArr(pn)}` : \"\";\r\n    const snLine  = joinArr(sn) ? `SN: ${joinArr(sn)}` : \"\";\r\n    const domLine = txt(dom)    ? `DOM: ${txt(dom)}`    : \"\";\r\n    const combined = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n    if (combined) fields.push({ column_id: cfg.cols.pn, value: { text: combined } });\r\n  }\r\n\r\n  // Tracking / PO\r\n  if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n    const t = [\r\n      txt(trackingNumber) ? `RL: ${txt(trackingNumber)}` : \"\",\r\n      txt(poNumber)       ? `PO: ${txt(poNumber)}`       : \"\",\r\n    ].filter(Boolean).join(\"  \");\r\n    if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n  }\r\n\r\n  // WO/SO Number\r\n  if (cfg.cols.wo && txt(workOrder)) {\r\n    fields.push({ column_id: cfg.cols.wo, value: { text: `WO: ${txt(workOrder)}` } });\r\n  }\r\n\r\n  // Local SN (use your item id)\r\n  if (cfg.cols.lsn && txt(localSN)) {\r\n    fields.push({ column_id: cfg.cols.lsn, value: { text: txt(localSN) } });\r\n  }\r\n\r\n  // 3) Apply the updates (in one call)\r\n  if (fields.length) {\r\n    const updated = await slack(\"slackLists.items.update\", {\r\n      list_id: cfg.id,\r\n      item_id: itemId,\r\n      fields,\r\n    });\r\n    if (!updated?.ok) {\r\n      return res.status(200).json({\r\n        ok: false,\r\n        error: updated?.error || \"update_failed\",\r\n        where: \"fields\",\r\n        item_id: itemId,\r\n        sent_fields: fields.map(f => ({ column_id: f.column_id, keys: Object.keys(f.value) })),\r\n      });\r\n    }\r\n  }\r\n\r\n  return res.status(200).json({\r\n    ok: true, mode: \"list\", list_id: cfg.id, item_id: itemId, sent_title: safeTitle\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   try {\n//     if (req.method !== \"POST\") {\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//     }\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) {\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//     }\n//     // payload from client\n//     const {\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\n//       title,               // item title (what shows in the primary column)\n//       // keeping minimal per your request: PN/SN only for now\n//       pn, sn,\n//     } = req.body || {};\n//     // list ids from env\n//     const LIST_IDS = {\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\n//     };\n//     const list_id = LIST_IDS[listKey];\n//     if (!list_id) {\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\n//     }\n//     // ---- Slack helpers ----\n//     async function slackJson(method, payload) {\n//       const r = await fetch(`https://slack.com/api/${method}`, {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json; charset=utf-8\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n//       return r.json();\n//     }\n//     const plain = (v) => (v ?? \"\").toString().trim();\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     function toRichText(text) {\n//       const t = plain(text);\n//       return [{\n//         type: \"rich_text\",\n//         elements: [{\n//           type: \"rich_text_section\",\n//           elements: [{ type: \"text\", text: t }],\n//         }],\n//       }];\n//     }\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\n//     async function resolveTitleColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//       if (!probe?.ok) return null;\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\n//       let fallback = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           const key = (f.key || \"\").toLowerCase();\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\n//           if (f.column_id && hasText) {\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\n//             if (!fallback) fallback = f.column_id;\n//           }\n//         }\n//       }\n//       return fallback; // first text-like field if we didn't find a perfect match\n//     }\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\n//     async function resolvePnSnColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\n//       if (!probe?.ok) return null;\n//       let candidate = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           if (!f.column_id) continue;\n//           const key = (f.key || \"\").toLowerCase();\n//           const text = (f.text || \"\").toLowerCase();\n//           const looksPnSn =\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\n//           if (looksPnSn) return f.column_id;\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\n//             candidate = f.column_id;\n//           }\n//         }\n//       }\n//       return candidate;\n//     }\n//     // 1) Resolve columns\n//     const titleColId = await resolveTitleColId(list_id);\n//     if (!titleColId) {\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\n//     }\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\n//     const safeTitle = plain(title) || \"New Item\";\n//     const createBody = {\n//       list_id,\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\n//     };\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 3) (Minimal) update: PN/SN only, per your request\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n//     let updated = null;\n//     let usedPnSnCol = null;\n//     if (pnSnText) {\n//       const pnSnColId = await resolvePnSnColId(list_id);\n//       if (pnSnColId) {\n//         const cells = [{\n//           row_id: created.item.id,\n//           column_id: pnSnColId,\n//           rich_text: toRichText(pnSnText),\n//         }];\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\n//         usedPnSnCol = pnSnColId;\n//         // If update fails, we still return ok:false so you can see the error\n//         if (!updated?.ok) {\n//           return res.status(200).json({\n//             ok: false,\n//             error: updated?.error || \"update_failed\",\n//             mode: \"list\",\n//             list_id,\n//             item_id: created.item.id,\n//             used_title_col: titleColId,\n//             used_pnsn_col: usedPnSnCol,\n//           });\n//         }\n//       }\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id,\n//       item_id: created.item.id,\n//       used_title_col: titleColId,\n//       used_pnsn_col: usedPnSnCol || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  try {\n    if (req.method !== \"POST\") {\n      return res.status(405).json({\n        ok: false,\n        error: \"method_not_allowed\"\n      });\n    }\n\n    const token = process.env.SLACK_BOT_TOKEN;\n\n    if (!token) {\n      return res.status(500).json({\n        ok: false,\n        error: \"missing_SLACK_BOT_TOKEN\"\n      });\n    } // Payload from client\n\n\n    const {\n      listKey,\n      // \"shipping\" | \"receiving\" | \"tasks\"\n      title,\n      // primary title\n      pn,\n      sn,\n      // PN/SN\n      linkUrl,\n      // optional link\n      shippingDate,\n      // arrival_date || date\n      tracking,\n      // tracking / WDIM\n      workOrder,\n      // most recent WO/SO\n      localSN,\n      // item id\n      description,\n      // free text\n      photoUrls = [],\n      // optional\n      parties // left untouched (you said this path is already perfect)\n\n    } = req.body || {}; // List IDs\n\n    const LIST_IDS = {\n      tasks: process.env.SLACK_LIST_TASKS_ID,\n      shipping: process.env.SLACK_LIST_SHIPPING_ID,\n      receiving: process.env.SLACK_LIST_RECEIVING_ID\n    };\n    const list_id = LIST_IDS[listKey];\n\n    if (!list_id) {\n      return res.status(400).json({\n        ok: false,\n        error: `unknown_listKey_${listKey}`\n      });\n    } // Slack helpers\n\n\n    async function slackJson(method, payload) {\n      const r = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return r.json();\n    }\n\n    const isObj = v => v && typeof v === \"object\";\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim(); // Best-effort normalization to avoid Slack \"invalid_arguments\" on odd values\n\n\n    function normalizeValue(v, hint) {\n      // Firestore Timestamp-like\n      if (isObj(v) && typeof v.seconds === \"number\") {\n        try {\n          const iso = new Date(v.seconds * 1000).toISOString();\n          return hint === \"date\" ? iso.slice(0, 10) : iso;\n        } catch (_) {}\n      } // Firestore DocumentReference-like\n\n\n      if (isObj(v) && v._delegate && v._delegate.path) {\n        return `ref:${v._delegate.path}`;\n      } // Arrays -> comma list\n\n\n      if (Array.isArray(v)) {\n        return v.map(x => normalizeValue(x)).join(\", \");\n      } // Objects -> JSON (trimmed)\n\n\n      if (isObj(v)) {\n        try {\n          const s = JSON.stringify(v);\n          return s.length > 500 ? s.slice(0, 500) + \"…\" : s;\n        } catch {\n          return \"[object]\";\n        }\n      } // Strings — trim\n\n\n      const s = (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n      if (hint === \"url\") {\n        // Only pass well-formed http(s) URL; otherwise skip by returning \"\"\n        if (!/^https?:\\/\\//i.test(s)) return \"\";\n      }\n\n      return s;\n    } // Correct rich_text SHAPE (single object)\n\n\n    const toRichText = text => ({\n      type: \"rich_text\",\n      elements: [{\n        type: \"rich_text_section\",\n        elements: [{\n          type: \"text\",\n          text: plain(text)\n        }]\n      }]\n    });\n\n    const extractRTText = rt => {\n      try {\n        var _rt$elements$0$elemen, _rt$elements, _rt$elements$, _rt$elements$$element, _rt$elements$$element2;\n\n        return (_rt$elements$0$elemen = rt === null || rt === void 0 ? void 0 : (_rt$elements = rt.elements) === null || _rt$elements === void 0 ? void 0 : (_rt$elements$ = _rt$elements[0]) === null || _rt$elements$ === void 0 ? void 0 : (_rt$elements$$element = _rt$elements$.elements) === null || _rt$elements$$element === void 0 ? void 0 : (_rt$elements$$element2 = _rt$elements$$element[0]) === null || _rt$elements$$element2 === void 0 ? void 0 : _rt$elements$$element2.text) !== null && _rt$elements$0$elemen !== void 0 ? _rt$elements$0$elemen : \"\";\n      } catch {\n        return \"\";\n      }\n    }; // Column discovery via sampling existing rows\n\n\n    async function listProbe(listId) {\n      const probe = await slackJson(\"slackLists.items.list\", {\n        list_id: listId,\n        limit: 200\n      });\n      return probe !== null && probe !== void 0 && probe.ok ? probe : null;\n    }\n\n    async function resolveTitleColId(listId) {\n      const probe = await listProbe(listId);\n      if (!probe) return null;\n      let fallback = null;\n\n      for (const it of probe.items || []) {\n        for (const f of it.fields || []) {\n          const key = (f.key || \"\").toLowerCase();\n          const hasText = !!f.text || !!f.rich_text;\n\n          if (f.column_id && hasText) {\n            if (key.includes(\"item\") || key.includes(\"task\") || key.includes(\"name\")) return f.column_id;\n            if (!fallback) fallback = f.column_id;\n          }\n        }\n      }\n\n      return fallback;\n    }\n\n    async function resolveByKeywords(listId, keywords = [], loose = []) {\n      const probe = await listProbe(listId);\n      if (!probe) return null;\n      let candidate = null;\n      const kw = (keywords || []).map(k => k.toLowerCase());\n      const looseKw = (loose || []).map(k => k.toLowerCase());\n\n      for (const it of probe.items || []) {\n        for (const f of it.fields || []) {\n          if (!f.column_id) continue;\n          const key = (f.key || \"\").toLowerCase();\n          const text = (f.text || extractRTText(f.rich_text) || \"\").toLowerCase();\n          const hit = kw.some(k => key.includes(k) || text.includes(k));\n          if (hit) return f.column_id;\n\n          if (!candidate) {\n            const maybe = looseKw.some(k => key.includes(k) || text.includes(k));\n            if (maybe) candidate = f.column_id;\n          }\n        }\n      }\n\n      return candidate;\n    } // 1) Create the row with title (your working behavior)\n\n\n    const titleColId = await resolveTitleColId(list_id);\n\n    if (!titleColId) {\n      return res.status(400).json({\n        ok: false,\n        error: \"could_not_resolve_title_column\"\n      });\n    }\n\n    const safeTitle = normalizeValue(title);\n    const created = await slackJson(\"slackLists.items.create\", {\n      list_id,\n      initial_fields: [{\n        column_id: titleColId,\n        rich_text: toRichText(safeTitle)\n      }]\n    });\n\n    if (!(created !== null && created !== void 0 && created.ok)) {\n      return res.status(200).json({\n        ok: false,\n        error: (created === null || created === void 0 ? void 0 : created.error) || \"create_failed\"\n      });\n    } // 2) Resolve target columns\n\n\n    const pnSnColId = await resolveByKeywords(list_id, [\"pn\", \"sn\", \"part number\", \"serial\"], [\"pn:\", \"sn:\"]);\n    const shipDateColId = await resolveByKeywords(list_id, [\"shipping date\", \"ship date\"], [\"date\"]);\n    const trackingColId = await resolveByKeywords(list_id, [\"tracking\", \"wdim\"], [\"tracking number\", \"tn\", \"wdim\"]);\n    const woColId = await resolveByKeywords(list_id, [\"wo/so\", \"work order\", \"sales order\"], [\"wo\", \"so\"]);\n    const localSnColId = await resolveByKeywords(list_id, [\"local sn\", \"localsn\", \"ais\"], [\"local\", \"sn\"]);\n    const descriptionColId = await resolveByKeywords(list_id, [\"description\", \"notes\"], [\"desc\", \"note\"]);\n    const linkColId = await resolveByKeywords(list_id, [\"link\", \"url\", \"page\"], []);\n    const photosColId = await resolveByKeywords(list_id, [\"shipping photos\", \"photos\", \"images\", \"pics\"], [\"photo\", \"image\", \"pic\"]); // 3) Build candidate cells (normalize each value by intent)\n\n    const pn0 = Array.isArray(pn) ? pn[0] : pn;\n    const sn0 = Array.isArray(sn) ? sn[0] : sn;\n    const pnSnText = [normalizeValue(pn0), normalizeValue(sn0)].filter(Boolean).map((v, i) => i === 0 ? `PN: ${v}` : `SN: ${v}`).join(\"  \");\n    const candidates = [];\n    if (pnSnText && pnSnColId) candidates.push({\n      colId: pnSnColId,\n      hint: \"text\",\n      value: pnSnText\n    });\n\n    if (shipDateColId) {\n      const v = normalizeValue(shippingDate, \"date\");\n      if (v) candidates.push({\n        colId: shipDateColId,\n        hint: \"date\",\n        value: v\n      });\n    }\n\n    if (trackingColId) {\n      const v = normalizeValue(tracking);\n      if (v) candidates.push({\n        colId: trackingColId,\n        hint: \"text\",\n        value: v\n      });\n    }\n\n    if (woColId) {\n      const v = normalizeValue(workOrder);\n      if (v) candidates.push({\n        colId: woColId,\n        hint: \"text\",\n        value: v\n      });\n    }\n\n    if (localSnColId) {\n      const v = normalizeValue(localSN);\n      if (v) candidates.push({\n        colId: localSnColId,\n        hint: \"text\",\n        value: v\n      });\n    }\n\n    if (descriptionColId) {\n      const v = normalizeValue(description);\n      if (v) candidates.push({\n        colId: descriptionColId,\n        hint: \"text\",\n        value: v\n      });\n    }\n\n    if (linkColId) {\n      const v = normalizeValue(linkUrl, \"url\"); // only http(s)\n\n      if (v) candidates.push({\n        colId: linkColId,\n        hint: \"url\",\n        value: v\n      });\n    }\n\n    if (photosColId && photoUrls !== null && photoUrls !== void 0 && photoUrls.length) {\n      const v = normalizeValue(photoUrls);\n      if (v) candidates.push({\n        colId: photosColId,\n        hint: \"text\",\n        value: v\n      });\n    } // 4) Update each cell individually: rich_text → text fallback; collect failures\n\n\n    const failures = [];\n    let successCount = 0;\n\n    for (const c of candidates) {\n      var _r, _r2, _r3;\n\n      const cellRich = {\n        row_id: created.item.id,\n        column_id: c.colId,\n        rich_text: toRichText(c.value)\n      };\n      let r = await slackJson(\"slackLists.items.update\", {\n        list_id,\n        cells: [cellRich]\n      });\n\n      if ((_r = r) !== null && _r !== void 0 && _r.ok) {\n        successCount++;\n        continue;\n      }\n\n      const cellText = {\n        row_id: created.item.id,\n        column_id: c.colId,\n        text: c.value\n      };\n      r = await slackJson(\"slackLists.items.update\", {\n        list_id,\n        cells: [cellText]\n      });\n\n      if ((_r2 = r) !== null && _r2 !== void 0 && _r2.ok) {\n        successCount++;\n        continue;\n      }\n\n      failures.push({\n        column_id: c.colId,\n        value: c.value,\n        rich_error: ((_r3 = r) === null || _r3 === void 0 ? void 0 : _r3.error) || \"invalid_arguments\"\n      });\n    } // If PN/SN failed completely, append to title so the row is still useful\n\n\n    if (pnSnText && pnSnColId && failures.some(f => f.column_id === pnSnColId)) {\n      await slackJson(\"slackLists.items.update\", {\n        list_id,\n        cells: [{\n          row_id: created.item.id,\n          column_id: titleColId,\n          text: `${safeTitle} — ${pnSnText}`\n        }]\n      });\n    }\n\n    if (failures.length) {\n      return res.status(200).json({\n        ok: false,\n        error: \"invalid_arguments\",\n        list_id,\n        item_id: created.item.id,\n        failures,\n        // <-- tells you exactly what Slack rejected\n        wrote_cells: successCount\n      });\n    }\n\n    return res.status(200).json({\n      ok: true,\n      list_id,\n      item_id: created.item.id,\n      wrote_cells: successCount\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n    return res.status(500).json({\n      ok: false,\n      error: \"exception\",\n      message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","pn","sn","linkUrl","shippingDate","tracking","workOrder","localSN","description","photoUrls","parties","body","LIST_IDS","tasks","SLACK_LIST_TASKS_ID","shipping","SLACK_LIST_SHIPPING_ID","receiving","SLACK_LIST_RECEIVING_ID","list_id","slackJson","payload","r","fetch","headers","Authorization","JSON","stringify","isObj","v","plain","toString","trim","normalizeValue","hint","seconds","iso","Date","toISOString","slice","_","_delegate","path","Array","isArray","map","x","join","s","length","test","toRichText","text","type","elements","extractRTText","rt","listProbe","listId","probe","limit","resolveTitleColId","fallback","it","items","f","fields","key","toLowerCase","hasText","rich_text","column_id","includes","resolveByKeywords","keywords","loose","candidate","kw","k","looseKw","hit","some","maybe","titleColId","safeTitle","created","initial_fields","pnSnColId","shipDateColId","trackingColId","woColId","localSnColId","descriptionColId","linkColId","photosColId","pn0","sn0","pnSnText","filter","Boolean","i","candidates","push","colId","value","failures","successCount","c","cellRich","row_id","item","id","cells","cellText","rich_error","item_id","wrote_cells","err","console","message","String"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   try {\r\n//     if (req.method !== \"POST\") {\r\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//     }\r\n\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) {\r\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//     }\r\n\r\n//     // payload from client\r\n//     const {\r\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\r\n//       title,               // item title (what shows in the primary column)\r\n//       // keeping minimal per your request: PN/SN only for now\r\n//       pn, sn,\r\n//     } = req.body || {};\r\n\r\n//     // list ids from env\r\n//     const LIST_IDS = {\r\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\r\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\r\n//     };\r\n\r\n//     const list_id = LIST_IDS[listKey];\r\n//     if (!list_id) {\r\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n//     }\r\n\r\n//     // ---- Slack helpers ----\r\n//     async function slackJson(method, payload) {\r\n//       const r = await fetch(`https://slack.com/api/${method}`, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json; charset=utf-8\",\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       return r.json();\r\n//     }\r\n\r\n//     const plain = (v) => (v ?? \"\").toString().trim();\r\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     function toRichText(text) {\r\n//       const t = plain(text);\r\n//       return [{\r\n//         type: \"rich_text\",\r\n//         elements: [{\r\n//           type: \"rich_text_section\",\r\n//           elements: [{ type: \"text\", text: t }],\r\n//         }],\r\n//       }];\r\n//     }\r\n\r\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\r\n//     async function resolveTitleColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\r\n//       let fallback = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\r\n//           if (f.column_id && hasText) {\r\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\r\n//             if (!fallback) fallback = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return fallback; // first text-like field if we didn't find a perfect match\r\n//     }\r\n\r\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\r\n//     async function resolvePnSnColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       let candidate = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           if (!f.column_id) continue;\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const text = (f.text || \"\").toLowerCase();\r\n\r\n//           const looksPnSn =\r\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\r\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\r\n\r\n//           if (looksPnSn) return f.column_id;\r\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\r\n//             candidate = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return candidate;\r\n//     }\r\n\r\n//     // 1) Resolve columns\r\n//     const titleColId = await resolveTitleColId(list_id);\r\n//     if (!titleColId) {\r\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\r\n//     }\r\n\r\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\r\n//     const safeTitle = plain(title) || \"New Item\";\r\n//     const createBody = {\r\n//       list_id,\r\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\r\n//     };\r\n\r\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 3) (Minimal) update: PN/SN only, per your request\r\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\r\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\r\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\r\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\r\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n\r\n//     let updated = null;\r\n//     let usedPnSnCol = null;\r\n\r\n//     if (pnSnText) {\r\n//       const pnSnColId = await resolvePnSnColId(list_id);\r\n//       if (pnSnColId) {\r\n//         const cells = [{\r\n//           row_id: created.item.id,\r\n//           column_id: pnSnColId,\r\n//           rich_text: toRichText(pnSnText),\r\n//         }];\r\n\r\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\r\n//         usedPnSnCol = pnSnColId;\r\n//         // If update fails, we still return ok:false so you can see the error\r\n//         if (!updated?.ok) {\r\n//           return res.status(200).json({\r\n//             ok: false,\r\n//             error: updated?.error || \"update_failed\",\r\n//             mode: \"list\",\r\n//             list_id,\r\n//             item_id: created.item.id,\r\n//             used_title_col: titleColId,\r\n//             used_pnsn_col: usedPnSnCol,\r\n//           });\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleColId,\r\n//       used_pnsn_col: usedPnSnCol || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  try {\r\n    if (req.method !== \"POST\") {\r\n      return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n    }\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) {\r\n      return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n    }\r\n\r\n    // Payload from client\r\n    const {\r\n      listKey,            // \"shipping\" | \"receiving\" | \"tasks\"\r\n      title,              // primary title\r\n      pn, sn,             // PN/SN\r\n      linkUrl,            // optional link\r\n      shippingDate,       // arrival_date || date\r\n      tracking,           // tracking / WDIM\r\n      workOrder,          // most recent WO/SO\r\n      localSN,            // item id\r\n      description,        // free text\r\n      photoUrls = [],     // optional\r\n      parties,            // left untouched (you said this path is already perfect)\r\n    } = req.body || {};\r\n\r\n    // List IDs\r\n    const LIST_IDS = {\r\n      tasks: process.env.SLACK_LIST_TASKS_ID,\r\n      shipping: process.env.SLACK_LIST_SHIPPING_ID,\r\n      receiving: process.env.SLACK_LIST_RECEIVING_ID,\r\n    };\r\n    const list_id = LIST_IDS[listKey];\r\n    if (!list_id) {\r\n      return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n    }\r\n\r\n    // Slack helpers\r\n    async function slackJson(method, payload) {\r\n      const r = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json; charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      return r.json();\r\n    }\r\n\r\n    const isObj = (v) => v && typeof v === \"object\";\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n\r\n    // Best-effort normalization to avoid Slack \"invalid_arguments\" on odd values\r\n    function normalizeValue(v, hint) {\r\n      // Firestore Timestamp-like\r\n      if (isObj(v) && typeof v.seconds === \"number\") {\r\n        try {\r\n          const iso = new Date(v.seconds * 1000).toISOString();\r\n          return hint === \"date\" ? iso.slice(0, 10) : iso;\r\n        } catch (_) {}\r\n      }\r\n      // Firestore DocumentReference-like\r\n      if (isObj(v) && v._delegate && v._delegate.path) {\r\n        return `ref:${v._delegate.path}`;\r\n      }\r\n      // Arrays -> comma list\r\n      if (Array.isArray(v)) {\r\n        return v.map((x) => normalizeValue(x)).join(\", \");\r\n      }\r\n      // Objects -> JSON (trimmed)\r\n      if (isObj(v)) {\r\n        try {\r\n          const s = JSON.stringify(v);\r\n          return s.length > 500 ? s.slice(0, 500) + \"…\" : s;\r\n        } catch {\r\n          return \"[object]\";\r\n        }\r\n      }\r\n      // Strings — trim\r\n      const s = (v ?? \"\").toString().trim();\r\n      if (hint === \"url\") {\r\n        // Only pass well-formed http(s) URL; otherwise skip by returning \"\"\r\n        if (!/^https?:\\/\\//i.test(s)) return \"\";\r\n      }\r\n      return s;\r\n    }\r\n\r\n    // Correct rich_text SHAPE (single object)\r\n    const toRichText = (text) => ({\r\n      type: \"rich_text\",\r\n      elements: [\r\n        {\r\n          type: \"rich_text_section\",\r\n          elements: [{ type: \"text\", text: plain(text) }],\r\n        },\r\n      ],\r\n    });\r\n\r\n    const extractRTText = (rt) => {\r\n      try { return rt?.elements?.[0]?.elements?.[0]?.text ?? \"\"; } catch { return \"\"; }\r\n    };\r\n\r\n    // Column discovery via sampling existing rows\r\n    async function listProbe(listId) {\r\n      const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 200 });\r\n      return probe?.ok ? probe : null;\r\n    }\r\n\r\n    async function resolveTitleColId(listId) {\r\n      const probe = await listProbe(listId);\r\n      if (!probe) return null;\r\n      let fallback = null;\r\n      for (const it of probe.items || []) {\r\n        for (const f of it.fields || []) {\r\n          const key = (f.key || \"\").toLowerCase();\r\n          const hasText = !!f.text || !!f.rich_text;\r\n          if (f.column_id && hasText) {\r\n            if (key.includes(\"item\") || key.includes(\"task\") || key.includes(\"name\")) return f.column_id;\r\n            if (!fallback) fallback = f.column_id;\r\n          }\r\n        }\r\n      }\r\n      return fallback;\r\n    }\r\n\r\n    async function resolveByKeywords(listId, keywords = [], loose = []) {\r\n      const probe = await listProbe(listId);\r\n      if (!probe) return null;\r\n      let candidate = null;\r\n      const kw = (keywords || []).map((k) => k.toLowerCase());\r\n      const looseKw = (loose || []).map((k) => k.toLowerCase());\r\n\r\n      for (const it of probe.items || []) {\r\n        for (const f of it.fields || []) {\r\n          if (!f.column_id) continue;\r\n          const key = (f.key || \"\").toLowerCase();\r\n          const text = (f.text || extractRTText(f.rich_text) || \"\").toLowerCase();\r\n\r\n          const hit = kw.some((k) => key.includes(k) || text.includes(k));\r\n          if (hit) return f.column_id;\r\n\r\n          if (!candidate) {\r\n            const maybe = looseKw.some((k) => key.includes(k) || text.includes(k));\r\n            if (maybe) candidate = f.column_id;\r\n          }\r\n        }\r\n      }\r\n      return candidate;\r\n    }\r\n\r\n    // 1) Create the row with title (your working behavior)\r\n    const titleColId = await resolveTitleColId(list_id);\r\n    if (!titleColId) {\r\n      return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\r\n    }\r\n\r\n    const safeTitle = normalizeValue(title);\r\n    const created = await slackJson(\"slackLists.items.create\", {\r\n      list_id,\r\n      initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\r\n    });\r\n    if (!created?.ok) {\r\n      return res.status(200).json({ ok: false, error: created?.error || \"create_failed\" });\r\n    }\r\n\r\n    // 2) Resolve target columns\r\n    const pnSnColId     = await resolveByKeywords(list_id, [\"pn\", \"sn\", \"part number\", \"serial\"], [\"pn:\", \"sn:\"]);\r\n    const shipDateColId = await resolveByKeywords(list_id, [\"shipping date\", \"ship date\"], [\"date\"]);\r\n    const trackingColId = await resolveByKeywords(list_id, [\"tracking\", \"wdim\"], [\"tracking number\", \"tn\", \"wdim\"]);\r\n    const woColId       = await resolveByKeywords(list_id, [\"wo/so\", \"work order\", \"sales order\"], [\"wo\", \"so\"]);\r\n    const localSnColId  = await resolveByKeywords(list_id, [\"local sn\", \"localsn\", \"ais\"], [\"local\", \"sn\"]);\r\n    const descriptionColId = await resolveByKeywords(list_id, [\"description\", \"notes\"], [\"desc\", \"note\"]);\r\n    const linkColId     = await resolveByKeywords(list_id, [\"link\", \"url\", \"page\"], []);\r\n    const photosColId   = await resolveByKeywords(list_id, [\"shipping photos\", \"photos\", \"images\", \"pics\"], [\"photo\", \"image\", \"pic\"]);\r\n\r\n    // 3) Build candidate cells (normalize each value by intent)\r\n    const pn0 = Array.isArray(pn) ? pn[0] : pn;\r\n    const sn0 = Array.isArray(sn) ? sn[0] : sn;\r\n    const pnSnText = [normalizeValue(pn0), normalizeValue(sn0)]\r\n      .filter(Boolean)\r\n      .map((v, i) => (i === 0 ? `PN: ${v}` : `SN: ${v}`))\r\n      .join(\"  \");\r\n\r\n    const candidates = [];\r\n    if (pnSnText && pnSnColId)                 candidates.push({ colId: pnSnColId,     hint: \"text\", value: pnSnText });\r\n    if (shipDateColId) {\r\n      const v = normalizeValue(shippingDate, \"date\");\r\n      if (v)                                candidates.push({ colId: shipDateColId,  hint: \"date\", value: v });\r\n    }\r\n    if (trackingColId) {\r\n      const v = normalizeValue(tracking);\r\n      if (v)                                candidates.push({ colId: trackingColId,  hint: \"text\", value: v });\r\n    }\r\n    if (woColId) {\r\n      const v = normalizeValue(workOrder);\r\n      if (v)                                candidates.push({ colId: woColId,        hint: \"text\", value: v });\r\n    }\r\n    if (localSnColId) {\r\n      const v = normalizeValue(localSN);\r\n      if (v)                                candidates.push({ colId: localSnColId,   hint: \"text\", value: v });\r\n    }\r\n    if (descriptionColId) {\r\n      const v = normalizeValue(description);\r\n      if (v)                                candidates.push({ colId: descriptionColId, hint: \"text\", value: v });\r\n    }\r\n    if (linkColId) {\r\n      const v = normalizeValue(linkUrl, \"url\"); // only http(s)\r\n      if (v)                                candidates.push({ colId: linkColId,      hint: \"url\",  value: v });\r\n    }\r\n    if (photosColId && photoUrls?.length) {\r\n      const v = normalizeValue(photoUrls);\r\n      if (v)                                candidates.push({ colId: photosColId,    hint: \"text\", value: v });\r\n    }\r\n\r\n    // 4) Update each cell individually: rich_text → text fallback; collect failures\r\n    const failures = [];\r\n    let successCount = 0;\r\n\r\n    for (const c of candidates) {\r\n      const cellRich = { row_id: created.item.id, column_id: c.colId, rich_text: toRichText(c.value) };\r\n      let r = await slackJson(\"slackLists.items.update\", { list_id, cells: [cellRich] });\r\n      if (r?.ok) { successCount++; continue; }\r\n\r\n      const cellText = { row_id: created.item.id, column_id: c.colId, text: c.value };\r\n      r = await slackJson(\"slackLists.items.update\", { list_id, cells: [cellText] });\r\n      if (r?.ok) { successCount++; continue; }\r\n\r\n      failures.push({ column_id: c.colId, value: c.value, rich_error: r?.error || \"invalid_arguments\" });\r\n    }\r\n\r\n    // If PN/SN failed completely, append to title so the row is still useful\r\n    if (pnSnText && pnSnColId && failures.some(f => f.column_id === pnSnColId)) {\r\n      await slackJson(\"slackLists.items.update\", {\r\n        list_id,\r\n        cells: [{ row_id: created.item.id, column_id: titleColId, text: `${safeTitle} — ${pnSnText}` }],\r\n      });\r\n    }\r\n\r\n    if (failures.length) {\r\n      return res.status(200).json({\r\n        ok: false,\r\n        error: \"invalid_arguments\",\r\n        list_id,\r\n        item_id: created.item.id,\r\n        failures,               // <-- tells you exactly what Slack rejected\r\n        wrote_cells: successCount,\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      ok: true,\r\n      list_id,\r\n      item_id: created.item.id,\r\n      wrote_cells: successCount,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API /slack/add-to-list crashed:\", err);\r\n    return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
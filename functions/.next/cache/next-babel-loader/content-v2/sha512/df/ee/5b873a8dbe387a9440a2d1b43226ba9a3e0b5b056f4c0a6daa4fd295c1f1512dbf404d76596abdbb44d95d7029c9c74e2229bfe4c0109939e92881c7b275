{"ast":null,"code":"import _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport LoggedIn from \"../../LoggedIn\";\nimport firebase from \"../../../context/Firebase\";\nimport { Table, Form, Button, Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Link from \"next/link\";\nexport default function InventoryManage() {\n  var _useState = useState([]),\n      items = _useState[0],\n      setItems = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(new Set()),\n      selectedIds = _useState3[0],\n      setSelectedIds = _useState3[1];\n\n  var _useState4 = useState({\n    region: \"\",\n    section: \"\",\n    bin: \"\",\n    pallet: \"\",\n    localSN: \"\"\n  }),\n      filters = _useState4[0],\n      setFilters = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      bulkField = _useState5[0],\n      setBulkField = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      bulkValue = _useState6[0],\n      setBulkValue = _useState6[1]; // ---- load data once ----\n\n\n  useEffect(function () {\n    var db = firebase.firestore();\n    db.collection(\"Test\").get().then(function (snap) {\n      var data = snap.docs.map(function (d) {\n        var _loc$region$toString, _loc$region, _loc$section$toString, _loc$section, _loc$bin$toString, _loc$bin, _loc$pallet$toString, _loc$pallet;\n\n        var doc = d.data();\n        var loc = doc.newLocalCurrent || {};\n        return {\n          id: d.id,\n          name: doc.name || \"\",\n          pn: doc.pn || \"\",\n          sn: doc.sn || \"\",\n          localSN: doc.localSN || \"\",\n          region: (_loc$region$toString = (_loc$region = loc.region) === null || _loc$region === void 0 ? void 0 : _loc$region.toString()) !== null && _loc$region$toString !== void 0 ? _loc$region$toString : \"\",\n          section: (_loc$section$toString = (_loc$section = loc.section) === null || _loc$section === void 0 ? void 0 : _loc$section.toString()) !== null && _loc$section$toString !== void 0 ? _loc$section$toString : \"\",\n          bin: (_loc$bin$toString = (_loc$bin = loc.bin) === null || _loc$bin === void 0 ? void 0 : _loc$bin.toString()) !== null && _loc$bin$toString !== void 0 ? _loc$bin$toString : \"\",\n          pallet: (_loc$pallet$toString = (_loc$pallet = loc.pallet) === null || _loc$pallet === void 0 ? void 0 : _loc$pallet.toString()) !== null && _loc$pallet$toString !== void 0 ? _loc$pallet$toString : \"\"\n        };\n      });\n      setItems(data);\n    })[\"finally\"](function () {\n      return setLoading(false);\n    });\n  }, []); // ---- derive distinct filter options ----\n\n  var distinct = function distinct(arr) {\n    return Array.from(new Set(arr.filter(function (v) {\n      return v;\n    }))).sort();\n  };\n\n  var regions = useMemo(function () {\n    return distinct(items.map(function (i) {\n      return i.region;\n    }));\n  }, [items]);\n  var sections = useMemo(function () {\n    return distinct(items.map(function (i) {\n      return i.section;\n    }));\n  }, [items]);\n  var bins = useMemo(function () {\n    return distinct(items.map(function (i) {\n      return i.bin;\n    }));\n  }, [items]);\n  var pallets = useMemo(function () {\n    return distinct(items.map(function (i) {\n      return i.pallet;\n    }));\n  }, [items]); // ---- toggles ----\n\n  var toggleSelect = function toggleSelect(id) {\n    setSelectedIds(function (prev) {\n      var next = new Set(prev);\n      next.has(id) ? next[\"delete\"](id) : next.add(id);\n      return next;\n    });\n  };\n\n  var toggleSelectAll = function toggleSelectAll() {\n    var visibleIds = filteredItems.map(function (i) {\n      return i.id;\n    });\n    setSelectedIds(function (prev) {\n      var next = new Set(prev);\n\n      if (visibleIds.every(function (id) {\n        return next.has(id);\n      })) {\n        visibleIds.forEach(function (id) {\n          return next[\"delete\"](id);\n        });\n      } else {\n        visibleIds.forEach(function (id) {\n          return next.add(id);\n        });\n      }\n\n      return next;\n    });\n  }; // ---- filtered list ----\n\n\n  var filteredItems = items.filter(function (it) {\n    return [\"region\", \"section\", \"bin\", \"pallet\", \"localSN\"].every(function (f) {\n      return !filters[f] || it[f] === filters[f];\n    });\n  }); // ---- bulk update handler ----\n\n  var applyBulkUpdate = function applyBulkUpdate() {\n    if (!bulkField || !bulkValue) return;\n    var db = firebase.firestore();\n    var updates = Array.from(selectedIds).map(function (id) {\n      var orig = items.find(function (i) {\n        return i.id === id;\n      }) || {};\n      var newRegion = bulkField === \"region\" ? bulkValue : orig.region;\n      var newSection = bulkField === \"section\" ? bulkValue : orig.section;\n      var newBin = bulkField === \"bin\" ? bulkValue : orig.bin;\n      var newPallet = bulkField === \"pallet\" ? bulkValue : orig.pallet;\n      var parts = [];\n      if (newRegion) parts.push(newRegion);\n      if (newSection) parts.push(newSection);\n      if (newBin) parts.push(\"B\".concat(newBin));\n      if (newPallet) parts.push(\"P\".concat(newPallet));\n      var newLocString = parts.join(\"-\");\n      var updateObj = {\n        region: newRegion,\n        section: newSection,\n        bin: newBin,\n        pallet: newPallet,\n        localLocCurrent: newLocString,\n        newLocalCurrent: {\n          region: newRegion,\n          section: newSection,\n          bin: newBin,\n          pallet: newPallet\n        }\n      };\n      return db.collection(\"Test\").doc(id).update(updateObj).then(function () {\n        setItems(function (prev) {\n          return prev.map(function (item) {\n            return item.id === id ? _objectSpread(_objectSpread({}, item), {}, {\n              region: newRegion,\n              section: newSection,\n              bin: newBin,\n              pallet: newPallet\n            }) : item;\n          });\n        });\n      });\n    });\n    Promise.all(updates).then(function () {\n      setSelectedIds(new Set());\n      setBulkField(\"\");\n      setBulkValue(\"\");\n    });\n  }; // ---- loading state ----\n\n\n  if (loading) {\n    return __jsx(Container, {\n      className: \"py-5 text-center\"\n    }, __jsx(Spinner, {\n      animation: \"border\"\n    }));\n  }\n\n  function LoadingButton(_ref) {\n    var type = _ref.type,\n        name = _ref.name,\n        route = _ref.route;\n\n    var _useState7 = useState(false),\n        isLoading = _useState7[0],\n        setLoading = _useState7[1];\n\n    useEffect(function () {\n      if (isLoading) {\n        simulateNetworkRequest().then(function () {\n          return setLoading(false);\n        });\n      }\n    }, [isLoading]);\n\n    var handleClick = function handleClick() {\n      return setLoading(true);\n    };\n\n    return __jsx(Link, {\n      href: \"/\".concat(route)\n    }, __jsx(\"a\", {\n      className: \"btn btn-\".concat(type),\n      disabled: isLoading,\n      onClick: !isLoading ? handleClick : null\n    }, isLoading ? \"Loadingâ€¦\" : name));\n  }\n\n  function simulateNetworkRequest() {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, 2000);\n    });\n  }\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"py-4\"\n  }, __jsx(\"h2\", null, \"Inventory Management\"), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"Warehousedb/WarehouseSelect\"\n  }), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Col, null, __jsx(Form.Label, null, \"Region\"), __jsx(Form.Select, {\n    value: filters.region,\n    onChange: function onChange(e) {\n      var v = e.target.value;\n      setFilters(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          region: v\n        });\n      });\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All regions\"), regions.map(function (r) {\n    return __jsx(\"option\", {\n      key: r,\n      value: r\n    }, r);\n  }))), __jsx(Col, null, __jsx(Form.Label, null, \"Section\"), __jsx(Form.Select, {\n    value: filters.section,\n    onChange: function onChange(e) {\n      var v = e.target.value;\n      setFilters(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          section: v\n        });\n      });\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All sections\"), sections.map(function (s) {\n    return __jsx(\"option\", {\n      key: s,\n      value: s\n    }, s);\n  }))), __jsx(Col, null, __jsx(Form.Label, null, \"Bin\"), __jsx(Form.Select, {\n    value: filters.bin,\n    onChange: function onChange(e) {\n      var v = e.target.value;\n      setFilters(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          bin: v\n        });\n      });\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All bins\"), bins.map(function (b) {\n    return __jsx(\"option\", {\n      key: b,\n      value: b\n    }, b);\n  }))), __jsx(Col, null, __jsx(Form.Label, null, \"Pallet\"), __jsx(Form.Select, {\n    value: filters.pallet,\n    onChange: function onChange(e) {\n      var v = e.target.value;\n      setFilters(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          pallet: v\n        });\n      });\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All pallets\"), pallets.map(function (p) {\n    return __jsx(\"option\", {\n      key: p,\n      value: p\n    }, p);\n  }))), __jsx(Col, null, __jsx(Form.Label, null, \"Local SN\"), __jsx(Form.Control, {\n    placeholder: \"Search SN\",\n    value: filters.localSN,\n    onChange: function onChange(e) {\n      var v = e.target.value;\n      setFilters(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          localSN: v\n        });\n      });\n    }\n  }))), __jsx(\"div\", {\n    className: \"d-flex mb-2 align-items-center\"\n  }, __jsx(Form.Check, {\n    type: \"checkbox\",\n    label: \"Select All\",\n    onChange: toggleSelectAll,\n    checked: filteredItems.length > 0 && filteredItems.every(function (i) {\n      return selectedIds.has(i.id);\n    })\n  }), selectedIds.size > 0 && __jsx(React.Fragment, null, __jsx(Form.Select, {\n    className: \"mx-2\",\n    value: bulkField,\n    onChange: function onChange(e) {\n      return setBulkField(e.target.value);\n    },\n    style: {\n      width: \"150px\"\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Change\\u2026\"), __jsx(\"option\", {\n    value: \"region\"\n  }, \"Region\"), __jsx(\"option\", {\n    value: \"section\"\n  }, \"Section\"), __jsx(\"option\", {\n    value: \"bin\"\n  }, \"Bin\"), __jsx(\"option\", {\n    value: \"pallet\"\n  }, \"Pallet\")), __jsx(Form.Control, {\n    style: {\n      width: \"100px\"\n    },\n    placeholder: \"New value\",\n    value: bulkValue,\n    onChange: function onChange(e) {\n      return setBulkValue(e.target.value);\n    }\n  }), __jsx(Button, {\n    className: \"ms-2\",\n    onClick: applyBulkUpdate\n  }, \"Apply\"))), __jsx(Table, {\n    bordered: true,\n    hover: true,\n    responsive: true\n  }, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null), __jsx(\"th\", null, \"Name\"), __jsx(\"th\", null, \"PN\"), __jsx(\"th\", null, \"SN\"), __jsx(\"th\", null, \"LocalSN\"), __jsx(\"th\", null, \"Region\"), __jsx(\"th\", null, \"Section\"), __jsx(\"th\", null, \"Bin\"), __jsx(\"th\", null, \"Pallet\"))), __jsx(\"tbody\", null, filteredItems.map(function (it) {\n    return __jsx(\"tr\", {\n      key: it.id\n    }, __jsx(\"td\", null, __jsx(Form.Check, {\n      type: \"checkbox\",\n      checked: selectedIds.has(it.id),\n      onChange: function onChange() {\n        return toggleSelect(it.id);\n      }\n    })), __jsx(\"td\", null, it.name), __jsx(\"td\", null, it.pn), __jsx(\"td\", null, it.sn), __jsx(\"td\", null, it.localSN), __jsx(\"td\", null, it.region), __jsx(\"td\", null, it.section), __jsx(\"td\", null, it.bin), __jsx(\"td\", null, it.pallet));\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}
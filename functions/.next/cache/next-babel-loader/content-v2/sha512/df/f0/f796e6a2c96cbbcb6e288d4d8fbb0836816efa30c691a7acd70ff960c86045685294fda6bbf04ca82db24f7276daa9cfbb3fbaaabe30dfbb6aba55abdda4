{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n// NewLocal.js\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button, Stack } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\nexport default function NewLocal(_ref) {\n  var _ref$onSave = _ref.onSave,\n      onSave = _ref$onSave === void 0 ? function () {} : _ref$onSave,\n      _ref$onCancel = _ref.onCancel,\n      onCancel = _ref$onCancel === void 0 ? function () {} : _ref$onCancel,\n      selectedClient = _ref.selectedClient,\n      showLocalLoc = _ref.showLocalLoc,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? {} : _ref$value,\n      onChange = _ref.onChange;\n\n  var _useState = useState([]),\n      regionOptions = _useState[0],\n      setRegionOptions = _useState[1];\n\n  var _useState2 = useState({}),\n      sectionMap = _useState2[0],\n      setSectionMap = _useState2[1];\n\n  var _useState3 = useState(0),\n      binCount = _useState3[0],\n      setBinCount = _useState3[1];\n\n  var _useState4 = useState(0),\n      palletCount = _useState4[0],\n      setPalletCount = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      region = _useState5[0],\n      setRegion = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      sectionLetter = _useState6[0],\n      setSectionLetter = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      sectionNumber = _useState7[0],\n      setSectionNumber = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      binSelected = _useState8[0],\n      setBinSelected = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      palletSelected = _useState9[0],\n      setPalletSelected = _useState9[1]; // 1) load directory exactly as before\n\n\n  useEffect(function () {\n    if (!showLocalLoc) return;\n    var db = firebase.firestore();\n    db.collection(\"Warehouse\").doc(\"directory\").get().then(function (doc) {\n      var d = doc.data() || {};\n      setRegionOptions(d.Region || []);\n      setSectionMap(d.Section || {});\n      setBinCount(d.Bin || 0);\n      setPalletCount(d.Pallet || 0);\n    });\n  }, [showLocalLoc]); // 2) when we open the modal (or value changes), initialize from value\n\n  useEffect(function () {\n    var _value$section, _value$section2, _value$bin, _value$pallet;\n\n    if (!showLocalLoc) return;\n    setRegion(value.region || \"\");\n    setSectionLetter(((_value$section = value.section) === null || _value$section === void 0 ? void 0 : _value$section.letter) || \"\");\n    setSectionNumber(((_value$section2 = value.section) === null || _value$section2 === void 0 ? void 0 : _value$section2.number) || \"\");\n    setBinSelected(((_value$bin = value.bin) === null || _value$bin === void 0 ? void 0 : _value$bin.toString()) || \"\");\n    setPalletSelected(((_value$pallet = value.pallet) === null || _value$pallet === void 0 ? void 0 : _value$pallet.toString()) || \"\");\n  }, [showLocalLoc]); // 3) notify parent on any change\n\n  useEffect(function () {\n    var p = {};\n    if (region) p.region = region;\n    if (sectionLetter && sectionNumber) p.section = {\n      letter: sectionLetter,\n      number: sectionNumber\n    };\n    if (binSelected) p.bin = parseInt(binSelected, 10);\n    if (palletSelected) p.pallet = parseInt(palletSelected, 10);\n    onChange(p);\n  }, [region, sectionLetter, sectionNumber, binSelected, palletSelected]); // helpers:\n\n  var letters = Array.from({\n    length: 26\n  }, function (_, i) {\n    return String.fromCharCode(65 + i);\n  });\n  var numbers = Array.from({\n    length: 50\n  }, function (_, i) {\n    return i + 1;\n  });\n  var binOptions = Array.from({\n    length: binCount\n  }, function (_, i) {\n    return i + 1;\n  });\n  var palletOptions = Array.from({\n    length: palletCount\n  }, function (_, i) {\n    return i + 1;\n  }); // bump and persist bin count\n\n  var handleAddBin = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var next;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              next = binCount + 1;\n              _context.next = 3;\n              return firebase.firestore().collection(\"Warehouse\").doc(\"directory\").update({\n                Bin: next\n              });\n\n            case 3:\n              setBinCount(next);\n              setBinSelected(next.toString());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleAddBin() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // bump and persist pallet count\n\n\n  var handleAddPallet = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var next;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              next = palletCount + 1;\n              _context2.next = 3;\n              return firebase.firestore().collection(\"Warehouse\").doc(\"directory\").update({\n                Pallet: next\n              });\n\n            case 3:\n              setPalletCount(next);\n              setPalletSelected(next.toString());\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleAddPallet() {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // only fire parent when they click OK\n\n\n  var handleOk = function handleOk() {\n    var p = {};\n    if (region) p.region = region;\n    if (sectionLetter && sectionNumber) p.section = {\n      letter: sectionLetter,\n      number: sectionNumber\n    };\n    if (binSelected) p.bin = parseInt(binSelected, 10);\n    if (palletSelected) p.pallet = parseInt(palletSelected, 10);\n    onSave(p);\n  };\n\n  return __jsx(\"div\", null, __jsx(Row, null, __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Region\"), __jsx(Form.Select, {\n    value: region,\n    onChange: function onChange(e) {\n      return setRegion(e.target.value);\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select region\"), regionOptions.map(function (r) {\n    return __jsx(\"option\", {\n      key: r,\n      value: r\n    }, r);\n  })))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Section Letter\"), __jsx(Form.Select, {\n    value: sectionLetter,\n    onChange: function onChange(e) {\n      return setSectionLetter(e.target.value);\n    } // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Letter\"), letters.map(function (l) {\n    return __jsx(\"option\", {\n      key: l,\n      value: l\n    }, l);\n  })))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Section Number\"), __jsx(Form.Select, {\n    value: sectionNumber,\n    onChange: function onChange(e) {\n      return setSectionNumber(e.target.value);\n    } // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Number\"), numbers.map(function (n) {\n    return __jsx(\"option\", {\n      key: n,\n      value: n\n    }, n);\n  }))))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Bin\"), __jsx(Stack, {\n    direction: \"horizontal\",\n    gap: 2\n  }, __jsx(Form.Select, {\n    value: binSelected,\n    onChange: function onChange(e) {\n      return setBinSelected(e.target.value);\n    } // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select bin\"), binOptions.map(function (b) {\n    return __jsx(\"option\", {\n      key: b,\n      value: b\n    }, b);\n  })), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleAddBin\n  }, \"+ Bin\")))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Pallet\"), __jsx(Stack, {\n    direction: \"horizontal\",\n    gap: 2\n  }, __jsx(Form.Select, {\n    value: palletSelected,\n    onChange: function onChange(e) {\n      return setPalletSelected(e.target.value);\n    } // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select pallet\"), palletOptions.map(function (p) {\n    return __jsx(\"option\", {\n      key: p,\n      value: p\n    }, p);\n  })), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleAddPallet\n  }, \"+ Pallet\"))))), __jsx(Row, {\n    className: \"mt-4\"\n  }, __jsx(Col, null, __jsx(\"div\", {\n    className: \"mt-3 text-end\"\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: onCancel\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleOk\n  }, \"OK\")))));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   try {\n//     if (req.method !== \"POST\") {\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//     }\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) {\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//     }\n//     // payload from client\n//     const {\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\n//       title,               // item title (what shows in the primary column)\n//       // keeping minimal per your request: PN/SN only for now\n//       pn, sn,\n//     } = req.body || {};\n//     // list ids from env\n//     const LIST_IDS = {\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\n//     };\n//     const list_id = LIST_IDS[listKey];\n//     if (!list_id) {\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\n//     }\n//     // ---- Slack helpers ----\n//     async function slackJson(method, payload) {\n//       const r = await fetch(`https://slack.com/api/${method}`, {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json; charset=utf-8\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n//       return r.json();\n//     }\n//     const plain = (v) => (v ?? \"\").toString().trim();\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     function toRichText(text) {\n//       const t = plain(text);\n//       return [{\n//         type: \"rich_text\",\n//         elements: [{\n//           type: \"rich_text_section\",\n//           elements: [{ type: \"text\", text: t }],\n//         }],\n//       }];\n//     }\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\n//     async function resolveTitleColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//       if (!probe?.ok) return null;\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\n//       let fallback = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           const key = (f.key || \"\").toLowerCase();\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\n//           if (f.column_id && hasText) {\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\n//             if (!fallback) fallback = f.column_id;\n//           }\n//         }\n//       }\n//       return fallback; // first text-like field if we didn't find a perfect match\n//     }\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\n//     async function resolvePnSnColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\n//       if (!probe?.ok) return null;\n//       let candidate = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           if (!f.column_id) continue;\n//           const key = (f.key || \"\").toLowerCase();\n//           const text = (f.text || \"\").toLowerCase();\n//           const looksPnSn =\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\n//           if (looksPnSn) return f.column_id;\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\n//             candidate = f.column_id;\n//           }\n//         }\n//       }\n//       return candidate;\n//     }\n//     // 1) Resolve columns\n//     const titleColId = await resolveTitleColId(list_id);\n//     if (!titleColId) {\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\n//     }\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\n//     const safeTitle = plain(title) || \"New Item\";\n//     const createBody = {\n//       list_id,\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\n//     };\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 3) (Minimal) update: PN/SN only, per your request\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n//     let updated = null;\n//     let usedPnSnCol = null;\n//     if (pnSnText) {\n//       const pnSnColId = await resolvePnSnColId(list_id);\n//       if (pnSnColId) {\n//         const cells = [{\n//           row_id: created.item.id,\n//           column_id: pnSnColId,\n//           rich_text: toRichText(pnSnText),\n//         }];\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\n//         usedPnSnCol = pnSnColId;\n//         // If update fails, we still return ok:false so you can see the error\n//         if (!updated?.ok) {\n//           return res.status(200).json({\n//             ok: false,\n//             error: updated?.error || \"update_failed\",\n//             mode: \"list\",\n//             list_id,\n//             item_id: created.item.id,\n//             used_title_col: titleColId,\n//             used_pnsn_col: usedPnSnCol,\n//           });\n//         }\n//       }\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id,\n//       item_id: created.item.id,\n//       used_title_col: titleColId,\n//       used_pnsn_col: usedPnSnCol || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  try {\n    var _created, _created2, _created3;\n\n    if (req.method !== \"POST\") {\n      return res.status(405).json({\n        ok: false,\n        error: \"method_not_allowed\"\n      });\n    }\n\n    const token = process.env.SLACK_BOT_TOKEN;\n\n    if (!token) {\n      return res.status(500).json({\n        ok: false,\n        error: \"missing_SLACK_BOT_TOKEN\"\n      });\n    }\n\n    const {\n      listKey,\n      title,\n      pn,\n      sn,\n      workOrder,\n      localSN,\n      description,\n      photoUrls = [],\n      tracking,\n      linkUrl // ship date omitted on purpose (you want it blank)\n\n    } = req.body || {}; // Helpers to safely read & trim envs\n\n    const clean = s => (s !== null && s !== void 0 ? s : \"\").trim() || undefined;\n\n    const get = k => clean(process.env[k]);\n\n    const anyOf = (...keys) => keys.map(get).find(Boolean); // Per-list config (only writes to columns you actually define)\n\n\n    const CFG = {\n      tasks: {\n        list_id: get(\"SLACK_LIST_TASKS_ID\"),\n        title_col: get(\"SLACK_LIST_TASKS_TITLE_COL\"),\n        pnsn_col: get(\"SLACK_LIST_TASKS_PNSN_COL\"),\n        wo_col: anyOf(\"SLACK_LIST_TASKS_WORKORDER_COL\", \"SLACK_LIST_TASKS_WO_COL\"),\n        localsn_col: get(\"SLACK_LIST_TASKS_LOCALSN_COL\"),\n        desc_col: anyOf(\"SLACK_LIST_TASKS_DESCRIPTION_COL\", \"SLACK_LIST_TASKS_DESC_COL\"),\n        photos_col: get(\"SLACK_LIST_TASKS_PHOTOS_COL\"),\n        // FILES column\n        tracking_col: get(\"SLACK_LIST_TASKS_TRACKING_COL\"),\n        link_col: get(\"SLACK_LIST_TASKS_LINK_COL\")\n      },\n      shipping: {\n        list_id: get(\"SLACK_LIST_SHIPPING_ID\"),\n        title_col: get(\"SLACK_LIST_SHIPPING_TITLE_COL\"),\n        pnsn_col: get(\"SLACK_LIST_SHIPPING_PNSN_COL\"),\n        wo_col: anyOf(\"SLACK_LIST_SHIPPING_WORKORDER_COL\", \"SLACK_LIST_SHIPPING_WO_COL\"),\n        localsn_col: get(\"SLACK_LIST_SHIPPING_LOCALSN_COL\"),\n        desc_col: anyOf(\"SLACK_LIST_SHIPPING_DESCRIPTION_COL\", \"SLACK_LIST_SHIPPING_DESC_COL\"),\n        photos_col: get(\"SLACK_LIST_SHIPPING_PHOTOS_COL\"),\n        // FILES column\n        tracking_col: get(\"SLACK_LIST_SHIPPING_TRACKING_COL\"),\n        link_col: get(\"SLACK_LIST_SHIPPING_LINK_COL\")\n      },\n      receiving: {\n        list_id: get(\"SLACK_LIST_RECEIVING_ID\"),\n        title_col: get(\"SLACK_LIST_RECEIVING_TITLE_COL\"),\n        pnsn_col: get(\"SLACK_LIST_RECEIVING_PNSN_COL\"),\n        wo_col: anyOf(\"SLACK_LIST_RECEIVING_WORKORDER_COL\", \"SLACK_LIST_RECEIVING_WO_COL\"),\n        localsn_col: get(\"SLACK_LIST_RECEIVING_LOCALSN_COL\"),\n        desc_col: anyOf(\"SLACK_LIST_RECEIVING_DESCRIPTION_COL\", \"SLACK_LIST_RECEIVING_DESC_COL\"),\n        photos_col: get(\"SLACK_LIST_RECEIVING_PHOTOS_COL\"),\n        // FILES column\n        tracking_col: get(\"SLACK_LIST_RECEIVING_TRACKING_COL\"),\n        link_col: get(\"SLACK_LIST_RECEIVING_LINK_COL\")\n      }\n    }[listKey || \"\"];\n    if (!(CFG !== null && CFG !== void 0 && CFG.list_id)) return res.status(400).json({\n      ok: false,\n      error: `unknown_listKey_${listKey}`\n    });\n\n    if (!CFG.title_col) {\n      return res.status(400).json({\n        ok: false,\n        error: \"missing_title_column_in_env\",\n        fix: `Set SLACK_LIST_${(listKey || \"\").toUpperCase()}_TITLE_COL in .env.local`\n      });\n    } // ── Slack helpers\n\n\n    async function slackJson(method, payload) {\n      const r = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return r.json();\n    }\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const toRichText = text => [{\n      type: \"rich_text\",\n      elements: [{\n        type: \"rich_text_section\",\n        elements: [{\n          type: \"text\",\n          text: plain(text)\n        }]\n      }]\n    }];\n\n    async function setTextCell(list_id, row_id, column_id, value) {\n      var _r, _r2, _r3;\n\n      const val = plain(value);\n      if (!val || !column_id) return {\n        ok: true,\n        skipped: true\n      }; // try rich_text first\n\n      let r = await slackJson(\"slackLists.items.update\", {\n        list_id,\n        cells: [{\n          row_id,\n          column_id,\n          rich_text: toRichText(val)\n        }]\n      });\n      if ((_r = r) !== null && _r !== void 0 && _r.ok) return r; // fallback to plain text\n\n      if (((_r2 = r) === null || _r2 === void 0 ? void 0 : _r2.error) === \"invalid_arguments\" || ((_r3 = r) === null || _r3 === void 0 ? void 0 : _r3.error) === \"invalid_input_type\") {\n        r = await slackJson(\"slackLists.items.update\", {\n          list_id,\n          cells: [{\n            row_id,\n            column_id,\n            text: val\n          }]\n        });\n      }\n\n      return r;\n    } // === PHOTOS: create remote files → attach via `attachment: [F...]` ===\n\n\n    async function setFilesCell(list_id, row_id, column_id, urls = []) {\n      var _r4, _r5, _r6;\n\n      if (!column_id || !Array.isArray(urls) || urls.length === 0) return {\n        ok: true,\n        skipped: true\n      };\n      const ids = [];\n\n      for (let i = 0; i < urls.length; i++) {\n        var _added$file;\n\n        const external_url = plain(urls[i]);\n        if (!external_url) continue;\n        const added = await slackJson(\"files.remote.add\", {\n          external_url,\n          title: `Photo ${i + 1}`\n        });\n        if (added !== null && added !== void 0 && added.ok && added !== null && added !== void 0 && (_added$file = added.file) !== null && _added$file !== void 0 && _added$file.id) ids.push(added.file.id);\n      }\n\n      if (!ids.length) return {\n        ok: true,\n        skipped: true\n      }; // Correct shape for a Files column is `attachment: [ \"F...\" ]`\n\n      let r = await slackJson(\"slackLists.items.update\", {\n        list_id,\n        cells: [{\n          row_id,\n          column_id,\n          attachment: ids\n        }]\n      });\n      if ((_r4 = r) !== null && _r4 !== void 0 && _r4.ok) return r; // Fallback: if your column is a Reference field (not Files), use `reference.file.file_id`\n\n      if (((_r5 = r) === null || _r5 === void 0 ? void 0 : _r5.error) === \"invalid_arguments\" || ((_r6 = r) === null || _r6 === void 0 ? void 0 : _r6.error) === \"invalid_input_type\") {\n        r = await slackJson(\"slackLists.items.update\", {\n          list_id,\n          cells: [{\n            row_id,\n            column_id,\n            reference: ids.map(id => ({\n              file: {\n                file_id: id\n              }\n            }))\n          }]\n        });\n      }\n\n      return r;\n    } // ── 1) Create the row with Title\n\n\n    const safeTitle = plain(title) || \"New Item\";\n    let created = await slackJson(\"slackLists.items.create\", {\n      list_id: CFG.list_id,\n      initial_fields: [{\n        column_id: CFG.title_col,\n        rich_text: toRichText(safeTitle)\n      }]\n    });\n\n    if (!((_created = created) !== null && _created !== void 0 && _created.ok) && ((_created2 = created) === null || _created2 === void 0 ? void 0 : _created2.error) === \"invalid_arguments\") {\n      created = await slackJson(\"slackLists.items.create\", {\n        list_id: CFG.list_id,\n        initial_fields: [{\n          column_id: CFG.title_col,\n          text: safeTitle\n        }]\n      });\n    }\n\n    if (!((_created3 = created) !== null && _created3 !== void 0 && _created3.ok)) {\n      var _created4;\n\n      return res.status(200).json({\n        ok: false,\n        error: ((_created4 = created) === null || _created4 === void 0 ? void 0 : _created4.error) || \"create_failed\",\n        list_id: CFG.list_id,\n        title_col: CFG.title_col,\n        sent_title: safeTitle\n      });\n    }\n\n    const rowId = created.item.id; // ── 2) PN/SN\n\n    if (CFG.pnsn_col) {\n      const pnPart = pn ? `PN: ${plain(pn)}` : \"\";\n      const snPart = sn ? `SN: ${plain(sn)}` : \"\";\n      const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n\n      if (pnSnText) {\n        const r = await setTextCell(CFG.list_id, rowId, CFG.pnsn_col, pnSnText);\n        if (!(r !== null && r !== void 0 && r.ok)) return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_pnsn\",\n          list_id: CFG.list_id,\n          item_id: rowId,\n          used_pnsn_col: CFG.pnsn_col\n        });\n      }\n    } // ── 3) Work Order\n\n\n    if (CFG.wo_col && workOrder) {\n      const r = await setTextCell(CFG.list_id, rowId, CFG.wo_col, workOrder);\n      if (!(r !== null && r !== void 0 && r.ok)) return res.status(200).json({\n        ok: false,\n        error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_workorder\",\n        list_id: CFG.list_id,\n        item_id: rowId,\n        used_workorder_col: CFG.wo_col\n      });\n    } // ── 4) LocalSN (ID)\n\n\n    if (CFG.localsn_col && localSN) {\n      const r = await setTextCell(CFG.list_id, rowId, CFG.localsn_col, localSN);\n      if (!(r !== null && r !== void 0 && r.ok)) return res.status(200).json({\n        ok: false,\n        error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_localsn\",\n        list_id: CFG.list_id,\n        item_id: rowId,\n        used_localsn_col: CFG.localsn_col\n      });\n    } // ── 5) Description\n\n\n    if (CFG.desc_col && description) {\n      const r = await setTextCell(CFG.list_id, rowId, CFG.desc_col, description);\n      if (!(r !== null && r !== void 0 && r.ok)) return res.status(200).json({\n        ok: false,\n        error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_description\",\n        list_id: CFG.list_id,\n        item_id: rowId,\n        used_description_col: CFG.desc_col\n      });\n    } // ── 6) Tracking (optional)\n\n\n    if (CFG.tracking_col && tracking) {\n      const r = await setTextCell(CFG.list_id, rowId, CFG.tracking_col, tracking);\n      if (!(r !== null && r !== void 0 && r.ok)) return res.status(200).json({\n        ok: false,\n        error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_tracking\",\n        list_id: CFG.list_id,\n        item_id: rowId,\n        used_tracking_col: CFG.tracking_col\n      });\n    } // ── 7) Link back (optional)\n\n\n    if (CFG.link_col && linkUrl) {\n      const r = await setTextCell(CFG.list_id, rowId, CFG.link_col, linkUrl);\n      if (!(r !== null && r !== void 0 && r.ok)) return res.status(200).json({\n        ok: false,\n        error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_link\",\n        list_id: CFG.list_id,\n        item_id: rowId,\n        used_link_col: CFG.link_col\n      });\n    } // ── 8) Photos (FILES column)\n\n\n    if (CFG.photos_col && Array.isArray(photoUrls) && photoUrls.length) {\n      const r = await setFilesCell(CFG.list_id, rowId, CFG.photos_col, photoUrls);\n\n      if (!(r !== null && r !== void 0 && r.ok)) {\n        // As a last resort, tack URLs into Description so you don’t lose the info\n        if (CFG.desc_col) {\n          const joined = `Photos:\\n${photoUrls.map(plain).filter(Boolean).join(\"\\n\")}`;\n          await setTextCell(CFG.list_id, rowId, CFG.desc_col, [description, joined].filter(Boolean).join(\"\\n\\n\"));\n        }\n\n        return res.status(200).json({\n          ok: false,\n          error: (r === null || r === void 0 ? void 0 : r.error) || \"update_failed_photos\",\n          list_id: CFG.list_id,\n          item_id: rowId,\n          used_photos_col: CFG.photos_col\n        });\n      }\n    } // Ship date intentionally left blank\n\n\n    return res.status(200).json({\n      ok: true,\n      list_id: CFG.list_id,\n      item_id: rowId,\n      used_cols: {\n        title_col: CFG.title_col,\n        pnsn_col: CFG.pnsn_col || null,\n        workorder_col: CFG.wo_col || null,\n        localsn_col: CFG.localsn_col || null,\n        description_col: CFG.desc_col || null,\n        tracking_col: CFG.tracking_col || null,\n        photos_col: CFG.photos_col || null,\n        link_col: CFG.link_col || null\n      }\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n    return res.status(500).json({\n      ok: false,\n      error: \"exception\",\n      message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","pn","sn","workOrder","localSN","description","photoUrls","tracking","linkUrl","body","clean","s","trim","undefined","get","k","anyOf","keys","map","find","Boolean","CFG","tasks","list_id","title_col","pnsn_col","wo_col","localsn_col","desc_col","photos_col","tracking_col","link_col","shipping","receiving","fix","toUpperCase","slackJson","payload","r","fetch","headers","Authorization","JSON","stringify","plain","v","toString","toRichText","text","type","elements","setTextCell","row_id","column_id","value","val","skipped","cells","rich_text","setFilesCell","urls","Array","isArray","length","ids","i","external_url","added","file","id","push","attachment","reference","file_id","safeTitle","created","initial_fields","sent_title","rowId","item","pnPart","snPart","pnSnText","filter","join","item_id","used_pnsn_col","used_workorder_col","used_localsn_col","used_description_col","used_tracking_col","used_link_col","joined","used_photos_col","used_cols","workorder_col","description_col","err","console","message","String"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   try {\r\n//     if (req.method !== \"POST\") {\r\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//     }\r\n\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) {\r\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//     }\r\n\r\n//     // payload from client\r\n//     const {\r\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\r\n//       title,               // item title (what shows in the primary column)\r\n//       // keeping minimal per your request: PN/SN only for now\r\n//       pn, sn,\r\n//     } = req.body || {};\r\n\r\n//     // list ids from env\r\n//     const LIST_IDS = {\r\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\r\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\r\n//     };\r\n\r\n//     const list_id = LIST_IDS[listKey];\r\n//     if (!list_id) {\r\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n//     }\r\n\r\n//     // ---- Slack helpers ----\r\n//     async function slackJson(method, payload) {\r\n//       const r = await fetch(`https://slack.com/api/${method}`, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json; charset=utf-8\",\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       return r.json();\r\n//     }\r\n\r\n//     const plain = (v) => (v ?? \"\").toString().trim();\r\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     function toRichText(text) {\r\n//       const t = plain(text);\r\n//       return [{\r\n//         type: \"rich_text\",\r\n//         elements: [{\r\n//           type: \"rich_text_section\",\r\n//           elements: [{ type: \"text\", text: t }],\r\n//         }],\r\n//       }];\r\n//     }\r\n\r\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\r\n//     async function resolveTitleColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\r\n//       let fallback = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\r\n//           if (f.column_id && hasText) {\r\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\r\n//             if (!fallback) fallback = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return fallback; // first text-like field if we didn't find a perfect match\r\n//     }\r\n\r\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\r\n//     async function resolvePnSnColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       let candidate = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           if (!f.column_id) continue;\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const text = (f.text || \"\").toLowerCase();\r\n\r\n//           const looksPnSn =\r\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\r\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\r\n\r\n//           if (looksPnSn) return f.column_id;\r\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\r\n//             candidate = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return candidate;\r\n//     }\r\n\r\n//     // 1) Resolve columns\r\n//     const titleColId = await resolveTitleColId(list_id);\r\n//     if (!titleColId) {\r\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\r\n//     }\r\n\r\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\r\n//     const safeTitle = plain(title) || \"New Item\";\r\n//     const createBody = {\r\n//       list_id,\r\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\r\n//     };\r\n\r\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 3) (Minimal) update: PN/SN only, per your request\r\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\r\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\r\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\r\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\r\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n\r\n//     let updated = null;\r\n//     let usedPnSnCol = null;\r\n\r\n//     if (pnSnText) {\r\n//       const pnSnColId = await resolvePnSnColId(list_id);\r\n//       if (pnSnColId) {\r\n//         const cells = [{\r\n//           row_id: created.item.id,\r\n//           column_id: pnSnColId,\r\n//           rich_text: toRichText(pnSnText),\r\n//         }];\r\n\r\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\r\n//         usedPnSnCol = pnSnColId;\r\n//         // If update fails, we still return ok:false so you can see the error\r\n//         if (!updated?.ok) {\r\n//           return res.status(200).json({\r\n//             ok: false,\r\n//             error: updated?.error || \"update_failed\",\r\n//             mode: \"list\",\r\n//             list_id,\r\n//             item_id: created.item.id,\r\n//             used_title_col: titleColId,\r\n//             used_pnsn_col: usedPnSnCol,\r\n//           });\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleColId,\r\n//       used_pnsn_col: usedPnSnCol || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  try {\r\n    if (req.method !== \"POST\") {\r\n      return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n    }\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) {\r\n      return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n    }\r\n\r\n    const {\r\n      listKey, title, pn, sn, workOrder, localSN, description,\r\n      photoUrls = [], tracking, linkUrl\r\n      // ship date omitted on purpose (you want it blank)\r\n    } = req.body || {};\r\n\r\n    // Helpers to safely read & trim envs\r\n    const clean = (s) => (s ?? \"\").trim() || undefined;\r\n    const get = (k) => clean(process.env[k]);\r\n    const anyOf = (...keys) => keys.map(get).find(Boolean);\r\n\r\n    // Per-list config (only writes to columns you actually define)\r\n    const CFG = ({\r\n      tasks: {\r\n        list_id:   get(\"SLACK_LIST_TASKS_ID\"),\r\n        title_col: get(\"SLACK_LIST_TASKS_TITLE_COL\"),\r\n        pnsn_col:  get(\"SLACK_LIST_TASKS_PNSN_COL\"),\r\n        wo_col:    anyOf(\"SLACK_LIST_TASKS_WORKORDER_COL\",\"SLACK_LIST_TASKS_WO_COL\"),\r\n        localsn_col: get(\"SLACK_LIST_TASKS_LOCALSN_COL\"),\r\n        desc_col:    anyOf(\"SLACK_LIST_TASKS_DESCRIPTION_COL\",\"SLACK_LIST_TASKS_DESC_COL\"),\r\n        photos_col:  get(\"SLACK_LIST_TASKS_PHOTOS_COL\"),      // FILES column\r\n        tracking_col:get(\"SLACK_LIST_TASKS_TRACKING_COL\"),\r\n        link_col:    get(\"SLACK_LIST_TASKS_LINK_COL\"),\r\n      },\r\n      shipping: {\r\n        list_id:   get(\"SLACK_LIST_SHIPPING_ID\"),\r\n        title_col: get(\"SLACK_LIST_SHIPPING_TITLE_COL\"),\r\n        pnsn_col:  get(\"SLACK_LIST_SHIPPING_PNSN_COL\"),\r\n        wo_col:    anyOf(\"SLACK_LIST_SHIPPING_WORKORDER_COL\",\"SLACK_LIST_SHIPPING_WO_COL\"),\r\n        localsn_col: get(\"SLACK_LIST_SHIPPING_LOCALSN_COL\"),\r\n        desc_col:    anyOf(\"SLACK_LIST_SHIPPING_DESCRIPTION_COL\",\"SLACK_LIST_SHIPPING_DESC_COL\"),\r\n        photos_col:  get(\"SLACK_LIST_SHIPPING_PHOTOS_COL\"),   // FILES column\r\n        tracking_col:get(\"SLACK_LIST_SHIPPING_TRACKING_COL\"),\r\n        link_col:    get(\"SLACK_LIST_SHIPPING_LINK_COL\"),\r\n      },\r\n      receiving: {\r\n        list_id:   get(\"SLACK_LIST_RECEIVING_ID\"),\r\n        title_col: get(\"SLACK_LIST_RECEIVING_TITLE_COL\"),\r\n        pnsn_col:  get(\"SLACK_LIST_RECEIVING_PNSN_COL\"),\r\n        wo_col:    anyOf(\"SLACK_LIST_RECEIVING_WORKORDER_COL\",\"SLACK_LIST_RECEIVING_WO_COL\"),\r\n        localsn_col: get(\"SLACK_LIST_RECEIVING_LOCALSN_COL\"),\r\n        desc_col:    anyOf(\"SLACK_LIST_RECEIVING_DESCRIPTION_COL\",\"SLACK_LIST_RECEIVING_DESC_COL\"),\r\n        photos_col:  get(\"SLACK_LIST_RECEIVING_PHOTOS_COL\"),  // FILES column\r\n        tracking_col:get(\"SLACK_LIST_RECEIVING_TRACKING_COL\"),\r\n        link_col:    get(\"SLACK_LIST_RECEIVING_LINK_COL\"),\r\n      },\r\n    })[listKey || \"\"];\r\n\r\n    if (!CFG?.list_id) return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n    if (!CFG.title_col) {\r\n      return res.status(400).json({\r\n        ok: false,\r\n        error: \"missing_title_column_in_env\",\r\n        fix: `Set SLACK_LIST_${(listKey || \"\").toUpperCase()}_TITLE_COL in .env.local`,\r\n      });\r\n    }\r\n\r\n    // ── Slack helpers\r\n    async function slackJson(method, payload) {\r\n      const r = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json; charset=utf-8\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      return r.json();\r\n    }\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n    const toRichText = (text) => [{\r\n      type: \"rich_text\",\r\n      elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text: plain(text) }] }],\r\n    }];\r\n\r\n    async function setTextCell(list_id, row_id, column_id, value) {\r\n      const val = plain(value);\r\n      if (!val || !column_id) return { ok: true, skipped: true };\r\n      // try rich_text first\r\n      let r = await slackJson(\"slackLists.items.update\", {\r\n        list_id, cells: [{ row_id, column_id, rich_text: toRichText(val) }],\r\n      });\r\n      if (r?.ok) return r;\r\n      // fallback to plain text\r\n      if (r?.error === \"invalid_arguments\" || r?.error === \"invalid_input_type\") {\r\n        r = await slackJson(\"slackLists.items.update\", {\r\n          list_id, cells: [{ row_id, column_id, text: val }],\r\n        });\r\n      }\r\n      return r;\r\n    }\r\n\r\n    // === PHOTOS: create remote files → attach via `attachment: [F...]` ===\r\n    async function setFilesCell(list_id, row_id, column_id, urls = []) {\r\n      if (!column_id || !Array.isArray(urls) || urls.length === 0) return { ok: true, skipped: true };\r\n\r\n      const ids = [];\r\n      for (let i = 0; i < urls.length; i++) {\r\n        const external_url = plain(urls[i]);\r\n        if (!external_url) continue;\r\n        const added = await slackJson(\"files.remote.add\", {\r\n          external_url,\r\n          title: `Photo ${i + 1}`,\r\n        });\r\n        if (added?.ok && added?.file?.id) ids.push(added.file.id);\r\n      }\r\n      if (!ids.length) return { ok: true, skipped: true };\r\n\r\n      // Correct shape for a Files column is `attachment: [ \"F...\" ]`\r\n      let r = await slackJson(\"slackLists.items.update\", {\r\n        list_id,\r\n        cells: [{ row_id, column_id, attachment: ids }],\r\n      });\r\n      if (r?.ok) return r;\r\n\r\n      // Fallback: if your column is a Reference field (not Files), use `reference.file.file_id`\r\n      if (r?.error === \"invalid_arguments\" || r?.error === \"invalid_input_type\") {\r\n        r = await slackJson(\"slackLists.items.update\", {\r\n          list_id,\r\n          cells: [{\r\n            row_id,\r\n            column_id,\r\n            reference: ids.map((id) => ({ file: { file_id: id } })),\r\n          }],\r\n        });\r\n      }\r\n      return r;\r\n    }\r\n\r\n    // ── 1) Create the row with Title\r\n    const safeTitle = plain(title) || \"New Item\";\r\n    let created = await slackJson(\"slackLists.items.create\", {\r\n      list_id: CFG.list_id,\r\n      initial_fields: [{ column_id: CFG.title_col, rich_text: toRichText(safeTitle) }],\r\n    });\r\n    if (!created?.ok && created?.error === \"invalid_arguments\") {\r\n      created = await slackJson(\"slackLists.items.create\", {\r\n        list_id: CFG.list_id,\r\n        initial_fields: [{ column_id: CFG.title_col, text: safeTitle }],\r\n      });\r\n    }\r\n    if (!created?.ok) {\r\n      return res.status(200).json({\r\n        ok: false, error: created?.error || \"create_failed\",\r\n        list_id: CFG.list_id, title_col: CFG.title_col, sent_title: safeTitle,\r\n      });\r\n    }\r\n    const rowId = created.item.id;\r\n\r\n    // ── 2) PN/SN\r\n    if (CFG.pnsn_col) {\r\n      const pnPart = pn ? `PN: ${plain(pn)}` : \"\";\r\n      const snPart = sn ? `SN: ${plain(sn)}` : \"\";\r\n      const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n      if (pnSnText) {\r\n        const r = await setTextCell(CFG.list_id, rowId, CFG.pnsn_col, pnSnText);\r\n        if (!r?.ok) return res.status(200).json({ ok: false, error: r?.error || \"update_failed_pnsn\", list_id: CFG.list_id, item_id: rowId, used_pnsn_col: CFG.pnsn_col });\r\n      }\r\n    }\r\n\r\n    // ── 3) Work Order\r\n    if (CFG.wo_col && workOrder) {\r\n      const r = await setTextCell(CFG.list_id, rowId, CFG.wo_col, workOrder);\r\n      if (!r?.ok) return res.status(200).json({ ok: false, error: r?.error || \"update_failed_workorder\", list_id: CFG.list_id, item_id: rowId, used_workorder_col: CFG.wo_col });\r\n    }\r\n\r\n    // ── 4) LocalSN (ID)\r\n    if (CFG.localsn_col && localSN) {\r\n      const r = await setTextCell(CFG.list_id, rowId, CFG.localsn_col, localSN);\r\n      if (!r?.ok) return res.status(200).json({ ok: false, error: r?.error || \"update_failed_localsn\", list_id: CFG.list_id, item_id: rowId, used_localsn_col: CFG.localsn_col });\r\n    }\r\n\r\n    // ── 5) Description\r\n    if (CFG.desc_col && description) {\r\n      const r = await setTextCell(CFG.list_id, rowId, CFG.desc_col, description);\r\n      if (!r?.ok) return res.status(200).json({ ok: false, error: r?.error || \"update_failed_description\", list_id: CFG.list_id, item_id: rowId, used_description_col: CFG.desc_col });\r\n    }\r\n\r\n    // ── 6) Tracking (optional)\r\n    if (CFG.tracking_col && tracking) {\r\n      const r = await setTextCell(CFG.list_id, rowId, CFG.tracking_col, tracking);\r\n      if (!r?.ok) return res.status(200).json({ ok: false, error: r?.error || \"update_failed_tracking\", list_id: CFG.list_id, item_id: rowId, used_tracking_col: CFG.tracking_col });\r\n    }\r\n\r\n    // ── 7) Link back (optional)\r\n    if (CFG.link_col && linkUrl) {\r\n      const r = await setTextCell(CFG.list_id, rowId, CFG.link_col, linkUrl);\r\n      if (!r?.ok) return res.status(200).json({ ok: false, error: r?.error || \"update_failed_link\", list_id: CFG.list_id, item_id: rowId, used_link_col: CFG.link_col });\r\n    }\r\n\r\n    // ── 8) Photos (FILES column)\r\n    if (CFG.photos_col && Array.isArray(photoUrls) && photoUrls.length) {\r\n      const r = await setFilesCell(CFG.list_id, rowId, CFG.photos_col, photoUrls);\r\n      if (!r?.ok) {\r\n        // As a last resort, tack URLs into Description so you don’t lose the info\r\n        if (CFG.desc_col) {\r\n          const joined = `Photos:\\n${photoUrls.map(plain).filter(Boolean).join(\"\\n\")}`;\r\n          await setTextCell(CFG.list_id, rowId, CFG.desc_col, [description, joined].filter(Boolean).join(\"\\n\\n\"));\r\n        }\r\n        return res.status(200).json({\r\n          ok: false, error: r?.error || \"update_failed_photos\", list_id: CFG.list_id, item_id: rowId, used_photos_col: CFG.photos_col,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Ship date intentionally left blank\r\n    return res.status(200).json({\r\n      ok: true,\r\n      list_id: CFG.list_id,\r\n      item_id: rowId,\r\n      used_cols: {\r\n        title_col: CFG.title_col,\r\n        pnsn_col: CFG.pnsn_col || null,\r\n        workorder_col: CFG.wo_col || null,\r\n        localsn_col: CFG.localsn_col || null,\r\n        description_col: CFG.desc_col || null,\r\n        tracking_col: CFG.tracking_col || null,\r\n        photos_col: CFG.photos_col || null,\r\n        link_col: CFG.link_col || null,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API /slack/add-to-list crashed:\", err);\r\n    return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
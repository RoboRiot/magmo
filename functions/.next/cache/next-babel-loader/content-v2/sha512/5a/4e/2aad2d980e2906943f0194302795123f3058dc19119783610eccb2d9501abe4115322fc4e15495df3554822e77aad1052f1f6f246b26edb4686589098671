{"ast":null,"code":"var __jsx = React.createElement;\n// pages/index.js\nimport Head from \"next/head\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button, Card, Container, Alert } from \"react-bootstrap\";\nimport styles from \"../styles/Home.module.css\";\nimport { useRouter } from \"next/router\";\nimport firebase from \"../context/Firebase\"; // compat default export ONLY\n\nexport default function Home() {\n  const router = useRouter();\n  const {\n    0: error,\n    1: setError\n  } = useState(\"\");\n  const {\n    0: hasMounted,\n    1: setHasMounted\n  } = useState(false);\n  const {\n    0: authReady,\n    1: setAuthReady\n  } = useState(false);\n  const unsubRef = useRef(null);\n\n  const getDestination = () => {\n    var _router$query;\n\n    const q = router === null || router === void 0 ? void 0 : (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.redirect;\n    return Array.isArray(q) ? q[0] || \"/NewSearch/mainSearch\" : q || \"/NewSearch/mainSearch\";\n  };\n\n  const isIosSafari = () => {\n    if (typeof navigator === \"undefined\") return false;\n    const ua = navigator.userAgent;\n    const isIOS = /iP(hone|ad|od)/i.test(ua);\n    const isSafari = /Safari/i.test(ua) && !/Chrome|CriOS|FxiOS|EdgiOS/i.test(ua);\n    return isIOS && isSafari;\n  };\n\n  useEffect(() => setHasMounted(true), []); // One-time auth listener\n\n  useEffect(() => {\n    if (!hasMounted) return;\n\n    (async () => {\n      try {\n        await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL); // simple storage probe to detect hostile environments\n\n        try {\n          localStorage.setItem(\"__magmo_probe\", \"1\");\n        } catch (e) {\n          console.warn(\"[auth] localStorage not available; redirects may fail\");\n        }\n\n        unsubRef.current = firebase.auth().onAuthStateChanged(user => {\n          console.log(\"[auth] onAuthStateChanged:\", user);\n          setAuthReady(true);\n\n          if (user) {\n            const dest = getDestination();\n            router.replace(dest);\n          }\n        });\n      } catch (e) {\n        console.error(\"[auth] persistence setup error:\", e);\n        setError(\"Authentication init failed.\");\n      }\n    })();\n\n    return () => {\n      if (unsubRef.current) unsubRef.current();\n    };\n  }, [hasMounted, router]);\n  if (!hasMounted) return null;\n\n  const handleGoogleSignIn = async () => {\n    setError(\"\");\n\n    try {\n      await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n      const provider = new firebase.auth.GoogleAuthProvider();\n      provider.addScope(\"email\");\n      provider.addScope(\"profile\");\n      provider.setCustomParameters({\n        prompt: \"select_account\"\n      }); // prefer popup (no redirect state), fallback to redirect only where needed\n\n      if (isIosSafari()) {\n        console.log(\"[auth] Using redirect (iOS Safari)\"); // mark that we attempted sign-in (to detect storage loss)\n\n        try {\n          localStorage.setItem(\"__magmo_signin_attempt\", Date.now().toString());\n        } catch (_) {}\n\n        await firebase.auth().signInWithRedirect(provider);\n      } else {\n        console.log(\"[auth] Using popup\");\n        const result = await firebase.auth().signInWithPopup(provider);\n        console.log(\"[auth] popup result:\", result && result.user); // onAuthStateChanged will route; but we can route immediately too:\n\n        if (result && result.user) {\n          const dest = getDestination();\n          router.replace(dest);\n        }\n      }\n    } catch (err) {\n      console.error(\"[auth] sign-in error:\", err);\n      setError(\"Failed to log in with Google: \" + (err && err.message ? err.message : String(err)));\n    }\n  };\n\n  const handleTestLogin = async () => {\n    setError(\"\");\n    const password = prompt(\"Enter password:\");\n    if (!password) return;\n\n    try {\n      await firebase.auth().signInWithEmailAndPassword(\"test@test.com\", password);\n      router.replace(\"/NewSearch/searchTest\");\n    } catch (err) {\n      setError(\"Test login failed: \" + (err && err.message ? err.message : String(err)));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Head, null, __jsx(\"title\", null, \"magmo\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\"\n  }), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1.0\"\n  })), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"MAGMO\"), !authReady && __jsx(\"div\", {\n    className: \"mb-2 small text-muted\"\n  }, \"Initializing\\u2026\"), error && __jsx(Alert, {\n    variant: \"danger\"\n  }, error), __jsx(Button, {\n    variant: \"light\",\n    className: \"w-100 d-flex align-items-center justify-content-center\",\n    onClick: handleGoogleSignIn,\n    style: {\n      border: \"1px solid #dadce0\",\n      borderRadius: \"0.375rem\",\n      color: \"#757575\",\n      padding: \"0.5rem 1rem\"\n    }\n  }, __jsx(\"img\", {\n    src: \"https://www.svgrepo.com/show/355037/google.svg\",\n    alt: \"Google logo\",\n    width: \"20\",\n    height: \"20\",\n    className: \"me-2\"\n  }), \"Sign in with Google\"), __jsx(Button, {\n    variant: \"secondary\",\n    className: \"w-100 mt-3\",\n    onClick: handleTestLogin\n  }, \"Test Login\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n\n  try {\n    const {\n      listKey,\n      title,\n      linkUrl,\n      bodyText\n    } = req.body;\n    const LIST_IDS = {\n      receiving: process.env.SLACK_LIST_RECEIVING_ID,\n      shipping: process.env.SLACK_LIST_SHIPPING_ID,\n      tasks: process.env.SLACK_LIST_TASKS_ID\n    };\n    const list_id = LIST_IDS[listKey];\n    if (!list_id) return res.status(400).json({\n      error: \"Unknown listKey\"\n    });\n    const token = process.env.SLACK_BOT_TOKEN;\n    if (!token) return res.status(500).json({\n      error: \"Missing bot token\"\n    }); // --- helpers ---\n\n    const api = async (method, formBody) => {\n      const resp = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        body: formBody instanceof URLSearchParams ? formBody : new URLSearchParams(formBody)\n      }).then(r => r.json());\n      return resp;\n    };\n\n    const makeSectionsFromLines = lines => lines.map(line => ({\n      type: \"rich_text_section\",\n      elements: [{\n        type: \"text\",\n        text: line\n      }]\n    }));\n\n    const ensureLinkAppended = sections => {\n      const out = [...sections];\n\n      if (linkUrl) {\n        out.push({\n          type: \"rich_text_section\",\n          elements: [{\n            type: \"link\",\n            url: linkUrl,\n            text: \"Open in Magmo\"\n          }]\n        });\n      }\n\n      return out;\n    }; // --- discover columns (primary + optional Description for shipping) ---\n\n\n    let primaryColumnId = process.env[`SLACK_LIST_${listKey.toUpperCase()}_PRIMARY_COL`];\n    let descriptionColumnId = process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL; // optional override for shipping\n    // Try to discover primary by peeking at first item (as before)\n\n    if (!primaryColumnId) {\n      var _probe$items, _probe$items$0$fields;\n\n      const probe = await api(\"slackLists.items.list\", {\n        list_id,\n        limit: \"1\"\n      });\n\n      if (probe !== null && probe !== void 0 && probe.ok && probe !== null && probe !== void 0 && (_probe$items = probe.items) !== null && _probe$items !== void 0 && _probe$items.length && (_probe$items$0$fields = probe.items[0].fields) !== null && _probe$items$0$fields !== void 0 && _probe$items$0$fields.length) {\n        const rt = probe.items[0].fields.find(f => Array.isArray(f.rich_text));\n        if (rt !== null && rt !== void 0 && rt.column_id) primaryColumnId = rt.column_id;\n      }\n    }\n\n    if (!primaryColumnId) {\n      return res.status(500).json({\n        error: \"Could not determine primary column id. Configure SLACK_LIST_*_PRIMARY_COL.\"\n      });\n    } // Only for SHIPPING we also try to locate a “Description” column by title\n\n\n    if (listKey === \"shipping\" && !descriptionColumnId) {\n      const cols = await api(\"slackLists.columns.list\", {\n        list_id\n      });\n\n      if (cols !== null && cols !== void 0 && cols.ok && Array.isArray(cols.columns)) {\n        const desc = cols.columns.find(c => typeof c.title === \"string\" && c.title.toLowerCase().includes(\"description\"));\n        if (desc !== null && desc !== void 0 && desc.id) descriptionColumnId = desc.id;\n      } // It's fine if we still don't find it—we'll only set primary in that case\n\n    } // --- build rich_text content ---\n\n\n    const titleText = (title || \"Untitled item\").trim(); // Text blob the UI sends (PN/SN/WO/RL/etc.)\n\n    let descriptionSections = [];\n\n    if (bodyText && bodyText.trim()) {\n      const lines = bodyText.replace(/\\r\\n/g, \"\\n\").split(\"\\n\").map(s => s.trim()).filter(Boolean);\n      descriptionSections = makeSectionsFromLines(lines);\n    } // link goes at the bottom of the Description (and always appended here)\n\n\n    descriptionSections = ensureLinkAppended(descriptionSections); // primary field shows ONLY the title (no link)\n\n    const primarySections = [{\n      type: \"rich_text_section\",\n      elements: [{\n        type: \"text\",\n        text: titleText\n      }]\n    }]; // --- build payload ---\n\n    const initial_fields = [{\n      column_id: primaryColumnId,\n      rich_text: [{\n        type: \"rich_text\",\n        elements: primarySections\n      }]\n    }]; // If this is the SHIPPING list and we found a Description column, set it too\n\n    if (listKey === \"shipping\" && descriptionColumnId) {\n      initial_fields.push({\n        column_id: descriptionColumnId,\n        rich_text: [{\n          type: \"rich_text\",\n          elements: descriptionSections\n        }]\n      });\n    } else if (listKey !== \"shipping\") {\n      // for tasks/receiving: put all content in primary (back-compat)\n      // If you still want the link in Tasks/Receiving, the UI can pass bodyText and we already append it there\n      initial_fields[0].rich_text = [{\n        type: \"rich_text\",\n        elements: descriptionSections.length ? descriptionSections : primarySections\n      }];\n    }\n\n    const resp = await fetch(\"https://slack.com/api/slackLists.items.create\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        list_id,\n        initial_fields\n      })\n    }).then(r => r.json());\n    if (!resp.ok) return res.status(400).json({\n      error: resp.error || \"Slack API error\",\n      raw: resp\n    });\n    return res.status(200).json({\n      ok: true,\n      item: resp.item\n    });\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({\n      error: \"Server error\"\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","listKey","title","linkUrl","bodyText","body","LIST_IDS","receiving","process","env","SLACK_LIST_RECEIVING_ID","shipping","SLACK_LIST_SHIPPING_ID","tasks","SLACK_LIST_TASKS_ID","list_id","token","SLACK_BOT_TOKEN","api","formBody","resp","fetch","headers","Authorization","URLSearchParams","then","r","makeSectionsFromLines","lines","map","line","type","elements","text","ensureLinkAppended","sections","out","push","url","primaryColumnId","toUpperCase","descriptionColumnId","SLACK_LIST_SHIPPING_DESCRIPTION_COL","probe","limit","ok","items","length","fields","rt","find","f","Array","isArray","rich_text","column_id","cols","columns","desc","c","toLowerCase","includes","id","titleText","trim","descriptionSections","replace","split","s","filter","Boolean","primarySections","initial_fields","JSON","stringify","raw","item","e","console"],"mappings":"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","sourcesContent":["// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  try {\r\n    const { listKey, title, linkUrl, bodyText } = req.body;\r\n\r\n    const LIST_IDS = {\r\n      receiving: process.env.SLACK_LIST_RECEIVING_ID,\r\n      shipping:  process.env.SLACK_LIST_SHIPPING_ID,\r\n      tasks:     process.env.SLACK_LIST_TASKS_ID,\r\n    };\r\n\r\n    const list_id = LIST_IDS[listKey];\r\n    if (!list_id) return res.status(400).json({ error: \"Unknown listKey\" });\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) return res.status(500).json({ error: \"Missing bot token\" });\r\n\r\n    // --- helpers ---\r\n    const api = async (method, formBody) => {\r\n      const resp = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: { Authorization: `Bearer ${token}` },\r\n        body: formBody instanceof URLSearchParams ? formBody : new URLSearchParams(formBody),\r\n      }).then(r => r.json());\r\n      return resp;\r\n    };\r\n\r\n    const makeSectionsFromLines = (lines) => lines.map(line => ({\r\n      type: \"rich_text_section\",\r\n      elements: [{ type: \"text\", text: line }],\r\n    }));\r\n\r\n    const ensureLinkAppended = (sections) => {\r\n      const out = [...sections];\r\n      if (linkUrl) {\r\n        out.push({\r\n          type: \"rich_text_section\",\r\n          elements: [{ type: \"link\", url: linkUrl, text: \"Open in Magmo\" }],\r\n        });\r\n      }\r\n      return out;\r\n    };\r\n\r\n    // --- discover columns (primary + optional Description for shipping) ---\r\n    let primaryColumnId = process.env[`SLACK_LIST_${listKey.toUpperCase()}_PRIMARY_COL`];\r\n    let descriptionColumnId = process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL; // optional override for shipping\r\n\r\n    // Try to discover primary by peeking at first item (as before)\r\n    if (!primaryColumnId) {\r\n      const probe = await api(\"slackLists.items.list\", { list_id, limit: \"1\" });\r\n      if (probe?.ok && probe?.items?.length && probe.items[0].fields?.length) {\r\n        const rt = probe.items[0].fields.find(f => Array.isArray(f.rich_text));\r\n        if (rt?.column_id) primaryColumnId = rt.column_id;\r\n      }\r\n    }\r\n    if (!primaryColumnId) {\r\n      return res.status(500).json({ error: \"Could not determine primary column id. Configure SLACK_LIST_*_PRIMARY_COL.\" });\r\n    }\r\n\r\n    // Only for SHIPPING we also try to locate a “Description” column by title\r\n    if (listKey === \"shipping\" && !descriptionColumnId) {\r\n      const cols = await api(\"slackLists.columns.list\", { list_id });\r\n      if (cols?.ok && Array.isArray(cols.columns)) {\r\n        const desc = cols.columns.find(c =>\r\n          typeof c.title === \"string\" && c.title.toLowerCase().includes(\"description\")\r\n        );\r\n        if (desc?.id) descriptionColumnId = desc.id;\r\n      }\r\n      // It's fine if we still don't find it—we'll only set primary in that case\r\n    }\r\n\r\n    // --- build rich_text content ---\r\n    const titleText = (title || \"Untitled item\").trim();\r\n\r\n    // Text blob the UI sends (PN/SN/WO/RL/etc.)\r\n    let descriptionSections = [];\r\n    if (bodyText && bodyText.trim()) {\r\n      const lines = bodyText.replace(/\\r\\n/g, \"\\n\").split(\"\\n\").map(s => s.trim()).filter(Boolean);\r\n      descriptionSections = makeSectionsFromLines(lines);\r\n    }\r\n    // link goes at the bottom of the Description (and always appended here)\r\n    descriptionSections = ensureLinkAppended(descriptionSections);\r\n\r\n    // primary field shows ONLY the title (no link)\r\n    const primarySections = [{\r\n      type: \"rich_text_section\",\r\n      elements: [{ type: \"text\", text: titleText }],\r\n    }];\r\n\r\n    // --- build payload ---\r\n    const initial_fields = [\r\n      {\r\n        column_id: primaryColumnId,\r\n        rich_text: [{ type: \"rich_text\", elements: primarySections }],\r\n      },\r\n    ];\r\n\r\n    // If this is the SHIPPING list and we found a Description column, set it too\r\n    if (listKey === \"shipping\" && descriptionColumnId) {\r\n      initial_fields.push({\r\n        column_id: descriptionColumnId,\r\n        rich_text: [{ type: \"rich_text\", elements: descriptionSections }],\r\n      });\r\n    } else if (listKey !== \"shipping\") {\r\n      // for tasks/receiving: put all content in primary (back-compat)\r\n      // If you still want the link in Tasks/Receiving, the UI can pass bodyText and we already append it there\r\n      initial_fields[0].rich_text = [{ type: \"rich_text\", elements: descriptionSections.length ? descriptionSections : primarySections }];\r\n    }\r\n\r\n    const resp = await fetch(\"https://slack.com/api/slackLists.items.create\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json; charset=utf-8\",\r\n      },\r\n      body: JSON.stringify({ list_id, initial_fields }),\r\n    }).then(r => r.json());\r\n\r\n    if (!resp.ok) return res.status(400).json({ error: resp.error || \"Slack API error\", raw: resp });\r\n    return res.status(200).json({ ok: true, item: resp.item });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return res.status(500).json({ error: \"Server error\" });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
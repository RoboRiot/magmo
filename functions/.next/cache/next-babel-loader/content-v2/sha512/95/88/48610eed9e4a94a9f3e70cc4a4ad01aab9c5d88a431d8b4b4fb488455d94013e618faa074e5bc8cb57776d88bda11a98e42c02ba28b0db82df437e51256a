{"ast":null,"code":"import _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Table, Button, Form } from \"react-bootstrap\";\nimport { formatDate } from \"./fetchAssociations\";\nimport styles from \"../styles/PartTable.module.css\";\nexport default function PartTable(_ref) {\n  var info = _ref.info,\n      labels = _ref.labels,\n      ids = _ref.ids,\n      hoverStyle = _ref.hoverStyle,\n      sortCheckAll = _ref.sortCheckAll,\n      checkDelete = _ref.checkDelete,\n      isDeleting = _ref.isDeleting,\n      rowSelect = _ref.rowSelect,\n      setHoverIndex = _ref.setHoverIndex,\n      hoverIndex = _ref.hoverIndex,\n      selectedItems = _ref.selectedItems,\n      setSelectedItems = _ref.setSelectedItems;\n\n  // const [selectedItems, setSelectedItems] = useState([]);\n  // Toggle selection of items\n  var handleSelectItem = function handleSelectItem(id) {\n    setSelectedItems(function (prevSelectedItems) {\n      return prevSelectedItems.includes(id) ? prevSelectedItems.filter(function (itemId) {\n        return itemId !== id;\n      }) : [].concat(_toConsumableArray(prevSelectedItems), [id]);\n    });\n  }; // Handle delete button click for selected items\n\n\n  var handleDeleteSelected = function handleDeleteSelected() {\n    if (selectedItems.length > 0) {\n      checkDelete(null, null, selectedItems, \"selected items\");\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: styles.scrollableTable\n  }, __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    className: \"mb-0\"\n  }, __jsx(\"thead\", {\n    className: styles.stickyHeader\n  }, __jsx(\"tr\", null, labels.map(function (item, index) {\n    return __jsx(\"th\", {\n      style: hoverStyle(index),\n      onMouseOver: function onMouseOver() {\n        return setHoverIndex(index);\n      },\n      onMouseOut: function onMouseOut() {\n        return setHoverIndex(null);\n      },\n      onClick: function onClick() {\n        return sortCheckAll(index);\n      },\n      key: index\n    }, item);\n  }), __jsx(\"th\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, selectedItems.length > 0 ? __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected,\n    disabled: isDeleting,\n    size: \"sm\"\n  }, \"Delete Selected (\", selectedItems.length, \")\") : \"select\"))), __jsx(\"tbody\", null, info.map(function (item, index) {\n    return __jsx(\"tr\", {\n      key: index,\n      onClick: function onClick(e) {\n        // Only trigger rowSelect if the target is not a checkbox\n        if (e.target.type !== \"checkbox\") {\n          rowSelect(item);\n        }\n      },\n      className: \"clickable-row\"\n    }, __jsx(\"td\", {\n      style: {\n        textAlign: \"center\",\n        cursor: \"default\"\n      }\n    }, item.name), __jsx(\"td\", {\n      style: {\n        textAlign: \"center\",\n        cursor: \"default\"\n      }\n    }, formatDate(item.date)), __jsx(\"td\", {\n      style: {\n        textAlign: \"center\",\n        cursor: \"default\"\n      }\n    }, item.workOrders && item.workOrders.length > 0 ? item.workOrders[item.workOrders.length - 1].workOrder : \"N/A\"), __jsx(\"td\", {\n      style: {\n        textAlign: \"center\",\n        cursor: \"default\"\n      }\n    }, item.pn), __jsx(\"td\", {\n      style: {\n        textAlign: \"center\",\n        cursor: \"default\"\n      }\n    }, item.sn), __jsx(\"td\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, __jsx(Form.Check, {\n      type: \"checkbox\",\n      checked: selectedItems.includes(item.id),\n      onChange: function onChange(e) {\n        e.stopPropagation(); // Prevent row click when checkbox is clicked\n        // Toggle selection using item.id directly\n\n        setSelectedItems(function (prevSelectedItems) {\n          return prevSelectedItems.includes(item.id) ? prevSelectedItems.filter(function (id) {\n            return id !== item.id;\n          }) : [].concat(_toConsumableArray(prevSelectedItems), [item.id]);\n        });\n      },\n      \"aria-label\": \"Select \".concat(item.name)\n    })));\n  }), info.length < 10 && Array.from({\n    length: 10 - info.length\n  }).map(function (_, index) {\n    return __jsx(\"tr\", {\n      key: \"empty-\".concat(index)\n    }, __jsx(\"td\", {\n      colSpan: labels.length + 1,\n      style: {\n        textAlign: \"center\"\n      }\n    }, \"\\xA0\"));\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}
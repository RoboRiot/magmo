{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      error: \"Method not allowed\"\n    });\n  }\n\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    error: \"Missing SLACK_BOT_TOKEN\"\n  }); // ----- incoming payload -----\n\n  const {\n    listKey,\n    // \"receiving\" | \"shipping\" | \"tasks\"\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body || {}; // ----- config (IDs you already have) -----\n\n  const LISTS = {\n    receiving: {\n      list_id: process.env.SLACK_LIST_RECEIVING_ID\n    },\n    shipping: {\n      list_id: process.env.SLACK_LIST_SHIPPING_ID\n    },\n    tasks: {\n      list_id: process.env.SLACK_LIST_TASKS_ID\n    }\n  }; // Optional: if you know the exact column_id for the title column, put it here.\n  // If not set, we’ll fall back to using the column **key** (the column name in the UI).\n\n  const TITLE_COL = {\n    tasks: {\n      column_id: process.env.SLACK_LIST_TASKS_TITLE_COL,\n      // e.g. \"Col10000001\" (optional)\n      key: process.env.SLACK_LIST_TASKS_TITLE_KEY || \"Task\" // falls back to the visible column name\n\n    },\n    shipping: {\n      column_id: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\n      // optional\n      key: process.env.SLACK_LIST_SHIPPING_TITLE_KEY || \"item\"\n    },\n    receiving: {\n      column_id: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\n      // optional\n      key: process.env.SLACK_LIST_RECEIVING_TITLE_KEY || \"item\"\n    }\n  }; // Helpers\n\n  const slack = (method, body, headers = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  }) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers,\n    body\n  }).then(r => r.json());\n\n  const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim(); // Slack Lists text must be \"rich_text\"\n\n\n  const rt = text => ({\n    rich_text: [{\n      type: \"rich_text_section\",\n      elements: [{\n        type: \"text\",\n        text: plain(text)\n      }]\n    }]\n  }); // Build a non-empty name to avoid creating a blank/untitled row\n\n\n  const safeName = plain(title) || plain(localSN) || (Array.isArray(pn) ? pn.filter(Boolean).join(\", \") : plain(pn)) || \"New Item\"; // ---------- PATH A: create a List item ----------\n\n  try {\n    var _TITLE_COL$listKey, _TITLE_COL$listKey2, _created$item;\n\n    const cfg = LISTS[listKey];\n\n    if (!(cfg !== null && cfg !== void 0 && cfg.list_id)) {\n      return res.status(400).json({\n        error: \"Unknown listKey (list not configured)\"\n      });\n    } // Build the title field using either column_id (preferred if you have it) or key (column name)\n\n\n    const titleField = _objectSpread({\n      value: rt(safeName)\n    }, (_TITLE_COL$listKey = TITLE_COL[listKey]) !== null && _TITLE_COL$listKey !== void 0 && _TITLE_COL$listKey.column_id ? {\n      column_id: TITLE_COL[listKey].column_id\n    } : {\n      key: ((_TITLE_COL$listKey2 = TITLE_COL[listKey]) === null || _TITLE_COL$listKey2 === void 0 ? void 0 : _TITLE_COL$listKey2.key) || \"item\"\n    }); // Start with just the title so we at least see a non-empty row\n\n\n    const initial_fields = [titleField]; // (Optional) Add more fields ONLY if you have their column IDs or exact keys.\n    // Example of safely appending a Description column by key:\n\n    if (plain(description)) {\n      initial_fields.push({\n        key: listKey === \"tasks\" ? \"Description\" : \"Description\",\n        value: rt(description)\n      });\n    } else if (listKey === \"tasks\" && plain(bodyText)) {\n      initial_fields.push({\n        key: \"Description\",\n        value: rt(bodyText)\n      });\n    } // You can add other columns here in the same pattern, once you know their keys\n    // e.g. { key: \"Local SN\", value: rt(localSN) }, etc.\n\n\n    const createBody = {\n      list_id: cfg.list_id,\n      initial_fields\n    };\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n\n    if (!(created !== null && created !== void 0 && created.ok)) {\n      // Surface Slack's exact error to help you fix mis-keyed columns, scopes, etc.\n      return res.status(400).json({\n        error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n        raw: created\n      });\n    } // (Optional) photos: to attach later you’d upload files and call slackLists.items.update\n    // to set an attachment column. Skipping here to keep this minimal & reliable.\n\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.list_id,\n      item_id: (_created$item = created.item) === null || _created$item === void 0 ? void 0 : _created$item.id\n    });\n  } catch (err) {\n    console.error(\"Slack add-to-list failed\", err);\n    return res.status(500).json({\n      error: \"Server error\"\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","receiving","list_id","SLACK_LIST_RECEIVING_ID","shipping","SLACK_LIST_SHIPPING_ID","tasks","SLACK_LIST_TASKS_ID","TITLE_COL","column_id","SLACK_LIST_TASKS_TITLE_COL","key","SLACK_LIST_TASKS_TITLE_KEY","SLACK_LIST_SHIPPING_TITLE_COL","SLACK_LIST_SHIPPING_TITLE_KEY","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_TITLE_KEY","slack","headers","Authorization","fetch","then","r","plain","v","toString","trim","rt","text","rich_text","type","elements","safeName","Array","isArray","filter","Boolean","join","cfg","titleField","value","initial_fields","push","createBody","created","JSON","stringify","ok","raw","mode","item_id","item","id","err","console"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method not allowed\" });\r\n  }\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n  // ----- incoming payload -----\r\n  const {\r\n    listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n    title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body || {};\r\n\r\n  // ----- config (IDs you already have) -----\r\n  const LISTS = {\r\n    receiving: { list_id: process.env.SLACK_LIST_RECEIVING_ID },\r\n    shipping:  { list_id: process.env.SLACK_LIST_SHIPPING_ID },\r\n    tasks:     { list_id: process.env.SLACK_LIST_TASKS_ID },\r\n  };\r\n\r\n  // Optional: if you know the exact column_id for the title column, put it here.\r\n  // If not set, we’ll fall back to using the column **key** (the column name in the UI).\r\n  const TITLE_COL = {\r\n    tasks: {\r\n      column_id: process.env.SLACK_LIST_TASKS_TITLE_COL, // e.g. \"Col10000001\" (optional)\r\n      key: process.env.SLACK_LIST_TASKS_TITLE_KEY || \"Task\", // falls back to the visible column name\r\n    },\r\n    shipping: {\r\n      column_id: process.env.SLACK_LIST_SHIPPING_TITLE_COL, // optional\r\n      key: process.env.SLACK_LIST_SHIPPING_TITLE_KEY || \"item\",\r\n    },\r\n    receiving: {\r\n      column_id: process.env.SLACK_LIST_RECEIVING_TITLE_COL, // optional\r\n      key: process.env.SLACK_LIST_RECEIVING_TITLE_KEY || \"item\",\r\n    },\r\n  };\r\n\r\n  // Helpers\r\n  const slack = (method, body, headers = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n  }) => fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n        .then(r => r.json());\r\n\r\n  const plain = v => (v ?? \"\").toString().trim();\r\n\r\n  // Slack Lists text must be \"rich_text\"\r\n  const rt = (text) => ({\r\n    rich_text: [{\r\n      type: \"rich_text_section\",\r\n      elements: [{ type: \"text\", text: plain(text) }]\r\n    }]\r\n  });\r\n\r\n  // Build a non-empty name to avoid creating a blank/untitled row\r\n  const safeName =\r\n    plain(title) ||\r\n    plain(localSN) ||\r\n    (Array.isArray(pn) ? pn.filter(Boolean).join(\", \") : plain(pn)) ||\r\n    \"New Item\";\r\n\r\n  // ---------- PATH A: create a List item ----------\r\n  try {\r\n    const cfg = LISTS[listKey];\r\n    if (!cfg?.list_id) {\r\n      return res.status(400).json({ error: \"Unknown listKey (list not configured)\" });\r\n    }\r\n\r\n    // Build the title field using either column_id (preferred if you have it) or key (column name)\r\n    const titleField = {\r\n      value: rt(safeName),\r\n      ...(TITLE_COL[listKey]?.column_id\r\n        ? { column_id: TITLE_COL[listKey].column_id }\r\n        : { key: TITLE_COL[listKey]?.key || \"item\" })\r\n    };\r\n\r\n    // Start with just the title so we at least see a non-empty row\r\n    const initial_fields = [titleField];\r\n\r\n    // (Optional) Add more fields ONLY if you have their column IDs or exact keys.\r\n    // Example of safely appending a Description column by key:\r\n    if (plain(description)) {\r\n      initial_fields.push({\r\n        key: listKey === \"tasks\" ? \"Description\" : \"Description\",\r\n        value: rt(description)\r\n      });\r\n    } else if (listKey === \"tasks\" && plain(bodyText)) {\r\n      initial_fields.push({ key: \"Description\", value: rt(bodyText) });\r\n    }\r\n\r\n    // You can add other columns here in the same pattern, once you know their keys\r\n    // e.g. { key: \"Local SN\", value: rt(localSN) }, etc.\r\n\r\n    const createBody = {\r\n      list_id: cfg.list_id,\r\n      initial_fields\r\n    };\r\n\r\n    const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n    if (!created?.ok) {\r\n      // Surface Slack's exact error to help you fix mis-keyed columns, scopes, etc.\r\n      return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n    }\r\n\r\n    // (Optional) photos: to attach later you’d upload files and call slackLists.items.update\r\n    // to set an attachment column. Skipping here to keep this minimal & reliable.\r\n\r\n    return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.list_id, item_id: created.item?.id });\r\n  } catch (err) {\r\n    console.error(\"Slack add-to-list failed\", err);\r\n    return res.status(500).json({ error: \"Server error\" });\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Tab, Row, Col, ListGroup } from \"react-bootstrap\";\nimport styles from \"../styles/Home.module.css\";\nimport { useAuth } from \"../context/AuthUserContext\";\nimport LoggedIn from \"./LoggedIn\";\nimport { getStorage, ref, listAll } from \"firebase/storage\";\nexport default function dashboard() {\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: items,\n    1: setItems\n  } = useState([]);\n  const storage = getStorage();\n  const listRef = ref(storage, \"/\");\n  const list = useRef(); // const buttonList = items.map((itemName) => loadingButton(\"primary\",itemName.folder,\"/\"))\n\n  if (false) {\n    window.addEventListener(\"load\", () => {\n      console.log(\"enter 1\");\n      fetchData();\n    });\n  } // Find all the prefixes and items.\n\n\n  async function fetchStuff() {\n    console.log(\"enter 1 \");\n    let itemList = [];\n    await listAll(listRef).then(res => {\n      res.prefixes.forEach(folderRef => {\n        // All the prefixes under listRef.\n        // You may call listAll() recursively on them.\n        console.log(\"enter 2\");\n        console.log(itemList);\n        itemList.push(folderRef.name);\n      });\n      res.items.forEach(itemRef => {\n        // All the items under listRef.\n        //   setItems(\"item\", itemRef.name);\n        console.log(\"enter 3\");\n        console.log(itemRef.name);\n      });\n    }).catch(error => {\n      // Uh-oh, an error occurred!\n      alert(error.message);\n    });\n    return itemList;\n  }\n\n  ;\n\n  async function fetchData() {\n    let data = await fetchStuff();\n    console.log(data);\n    setItems(oldArray => [...oldArray, ...data]);\n    console.log(items);\n  }\n\n  function simulateNetworkRequest() {\n    return new Promise(resolve => setTimeout(resolve, 2000));\n  }\n\n  function LoadingButton(type, name, route) {\n    const {\n      0: isLoading,\n      1: setLoading\n    } = useState({\n      name: false\n    });\n    useEffect(() => {\n      if (isLoading.name) {\n        simulateNetworkRequest().then(() => {\n          setLoading({\n            name: false\n          });\n        });\n      }\n    }, [isLoading.name]);\n\n    const handleClick = () => setLoading({\n      name: true\n    });\n\n    return __jsx(\"a\", {\n      class: \"btn btn-\" + type,\n      variant: type,\n      href: \"/\" + route,\n      disabled: isLoading.name,\n      onClick: !isLoading.name ? handleClick : null\n    }, isLoading.name ? \"Loadingâ€¦\" : name);\n  }\n\n  return __jsx(LoggedIn, null, __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"600px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, {\n    ref: list\n  }, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Drive\"), __jsx(\"div\", {\n    class: \"d-grid gap-3\"\n  }, LoadingButton(\"primary\", \"Info\", \"#\"), __jsx(Tab.Container, {\n    id: \"list-group-tabs-example\",\n    defaultActiveKey: \"#link1\"\n  }, __jsx(Row, null, __jsx(Col, {\n    sm: 4\n  }, __jsx(ListGroup, null, __jsx(ListGroup.Item, {\n    action: true,\n    href: \"#link1\"\n  }, \"Link 1\"), __jsx(ListGroup.Item, {\n    action: true,\n    href: \"#link2\"\n  }, \"Link 2\"), __jsx(Button, null, \"List\"), items.map(val => __jsx(\"h2\", null, val)))))), __jsx(Button, {\n    variant: \"link\",\n    onClick: signOut\n  }, \"Sign out\")))))));\n}","map":null,"metadata":{},"sourceType":"module"}
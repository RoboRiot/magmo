{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport Firebase, { auth } from \"./Firebase\";\n\nconst formatAuthUser = user => ({\n  uid: user.uid,\n  email: user.email\n});\n\nexport default function useFirebaseAuth() {\n  const {\n    0: authUser,\n    1: setAuthUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const authStateChanged = async authState => {\n    if (!authState) {\n      setAuthUser(null);\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    const formattedUser = formatAuthUser(authState);\n    setAuthUser(formattedUser);\n    setLoading(false);\n  };\n\n  const clear = () => {\n    setAuthUser(null);\n    setLoading(true);\n  }; //sign in with google\n\n\n  const signInWithGoogle = () => {\n    const provider = new Firebase.auth.GoogleAuthProvider();\n    provider.setCustomParameters({\n      prompt: \"select_account\"\n    });\n    return auth.signInWithRedirect(provider).catch(error => {\n      console.error(\"Google Sign-In Error:\", error);\n      throw error;\n    });\n  };\n\n  const signOut = () => auth.signOut().then(clear); // Listen for Firebase auth state changes\n  // useEffect(() => {\n  //   const unsubscribe = auth.onAuthStateChanged(authStateChanged);\n  //   return () => unsubscribe();\n  // }, []);\n\n\n  useEffect(() => {\n    let unsubscribe;\n    auth.setPersistence(Firebase.auth.Auth.Persistence.LOCAL).then(() => {\n      // Now set up the listener\n      unsubscribe = auth.onAuthStateChanged(authStateChanged);\n    }).catch(error => console.error(\"Error setting persistence:\", error));\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, []);\n  return {\n    authUser,\n    loading,\n    signInWithGoogle,\n    signOut\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
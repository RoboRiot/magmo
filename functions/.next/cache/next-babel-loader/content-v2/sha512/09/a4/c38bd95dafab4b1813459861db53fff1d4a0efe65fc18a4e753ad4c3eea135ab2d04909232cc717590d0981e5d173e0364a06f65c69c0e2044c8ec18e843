{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n\n  try {\n    const token = process.env.SLACK_BOT_TOKEN;\n    if (!token) return res.status(500).json({\n      error: \"Missing SLACK_BOT_TOKEN\"\n    });\n    const {\n      listKey,\n      // \"receiving\" | \"shipping\" | \"tasks\"\n      title,\n      linkUrl,\n      bodyText,\n      // common\n      date,\n      pn,\n      sn,\n      dom,\n      trackingNumber,\n      poNumber,\n      workOrder,\n      localSN,\n      description,\n      photoUrls = []\n    } = req.body || {}; // ---- ENV mapping (Lists + columns) ----\n\n    const LISTS = {\n      receiving: {\n        id: process.env.SLACK_LIST_RECEIVING_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n          date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n          pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n          track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n          wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n          lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n          photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment column\n\n        }\n      },\n      shipping: {\n        id: process.env.SLACK_LIST_SHIPPING_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n          date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n          pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n          track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n          wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n          lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n          photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment column\n\n        }\n      },\n      tasks: {\n        id: process.env.SLACK_LIST_TASKS_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n        }\n      }\n    }; // Optional channel fallback\n\n    const CHANNELS = {\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n      shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n      tasks: process.env.SLACK_CHANNEL_TASKS_ID\n    }; // ---- helpers ----\n\n    const slackJson = (method, body) => fetch(`https://slack.com/api/${method}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify(body)\n    }).then(r => r.json());\n\n    const slackForm = (method, form) => fetch(`https://slack.com/api/${method}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams(form)\n    }).then(r => r.json());\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // Build a safe, non-empty title\n\n\n    const safeId = plain(localSN) || plain(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop());\n    const safeTitle = plain(title) || joinArr(pn) || safeId || \"New Item\"; // ---------- PATH A: Write to a LIST ----------\n\n    const cfg = LISTS[listKey];\n\n    if (cfg !== null && cfg !== void 0 && cfg.id) {\n      var _created, _created2, _created3;\n\n      // Build fields using only configured column ids\n      const fields = []; // Description column (Tasks: put bodyText here if provided)\n\n      if (cfg.cols.desc && (description || listKey === \"tasks\" && bodyText || linkUrl)) {\n        const textBits = [plain(description), listKey === \"tasks\" ? plain(bodyText) : \"\", plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n        if (textBits) fields.push({\n          column_id: cfg.cols.desc,\n          value: {\n            text: textBits\n          }\n        });\n      }\n\n      if (cfg.cols.date && plain(date)) fields.push({\n        column_id: cfg.cols.date,\n        value: {\n          date: plain(date)\n        }\n      });\n\n      if (cfg.cols.pn && (pn || sn || dom)) {\n        const pnStr = joinArr(pn);\n        const snStr = joinArr(sn);\n        const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`].filter(Boolean).join(\"  \");\n        if (combo) fields.push({\n          column_id: cfg.cols.pn,\n          value: {\n            text: combo\n          }\n        });\n      }\n\n      if (cfg.cols.track && (trackingNumber || poNumber)) {\n        const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`].filter(Boolean).join(\"  \");\n        if (t) fields.push({\n          column_id: cfg.cols.track,\n          value: {\n            text: t\n          }\n        });\n      }\n\n      if (cfg.cols.wo && plain(workOrder)) fields.push({\n        column_id: cfg.cols.wo,\n        value: {\n          text: `WO: ${plain(workOrder)}`\n        }\n      });\n      if (cfg.cols.lsn && plain(localSN)) fields.push({\n        column_id: cfg.cols.lsn,\n        value: {\n          text: plain(localSN)\n        }\n      }); // 1) Create with a guaranteed non-empty **plain string** title.\n\n      let created = await slackJson(\"slackLists.items.create\", {\n        list_id: cfg.id,\n        title: safeTitle\n      }); // If that fails with invalid_arguments, retry with rich_text title\n\n      if (!((_created = created) !== null && _created !== void 0 && _created.ok) && ((_created2 = created) === null || _created2 === void 0 ? void 0 : _created2.error) === \"invalid_arguments\") {\n        created = await slackJson(\"slackLists.items.create\", {\n          list_id: cfg.id,\n          title: [{\n            type: \"rich_text\",\n            elements: [{\n              type: \"rich_text_section\",\n              elements: [{\n                type: \"text\",\n                text: safeTitle\n              }]\n            }]\n          }]\n        });\n      }\n\n      if (!((_created3 = created) !== null && _created3 !== void 0 && _created3.ok)) {\n        var _created4;\n\n        console.error(\"slackLists.items.create failed:\", created);\n        return res.status(400).json({\n          error: ((_created4 = created) === null || _created4 === void 0 ? void 0 : _created4.error) || \"Slack Lists API error (create)\",\n          raw: created\n        });\n      } // 2) Patch the fields after create (works even if some column ids are missing)\n\n\n      if (fields.length) {\n        const upd = await slackJson(\"slackLists.items.update\", {\n          list_id: cfg.id,\n          item_id: created.item.id,\n          fields\n        });\n\n        if (!(upd !== null && upd !== void 0 && upd.ok)) {\n          console.warn(\"slackLists.items.update (fields) failed:\", upd); // don't fail the whole request if fields couldn't be set\n        }\n      } // 3) Upload & attach photos (if you have an attachment column)\n\n\n      if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n        const fileIds = [];\n\n        for (const url of photoUrls) {\n          var _complete$files, _complete$files$;\n\n          const init = await slackForm(\"files.getUploadURLExternal\", {\n            filename: url.split(\"/\").pop() || \"image.jpg\"\n          });\n          if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n          try {\n            const img = await fetch(url);\n            const buf = await img.arrayBuffer();\n            await fetch(init.upload_url, {\n              method: \"PUT\",\n              body: Buffer.from(buf)\n            });\n          } catch (_) {\n            /* ignore per-file upload errors */\n          }\n\n          const complete = await slackJson(\"files.completeUploadExternal\", {\n            files: [{\n              id: init.file_id,\n              title: \"photo\"\n            }]\n          });\n          if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) fileIds.push(complete.files[0].id);\n        }\n\n        if (fileIds.length) {\n          await slackJson(\"slackLists.items.update\", {\n            list_id: cfg.id,\n            item_id: created.item.id,\n            fields: [{\n              column_id: cfg.cols.photos,\n              value: {\n                attachment: {\n                  file_ids: fileIds\n                }\n              }\n            }]\n          });\n        }\n      }\n\n      console.log(\"add-to-list payload\", {\n        listKey,\n        title: safeTitle,\n        localSN,\n        pn,\n        sn,\n        hasPhotos: (photoUrls === null || photoUrls === void 0 ? void 0 : photoUrls.length) || 0\n      });\n      return res.status(200).json({\n        ok: true,\n        mode: \"list\",\n        list_id: cfg.id,\n        item_id: created.item.id\n      });\n    } // ---------- PATH B: Fallback to a channel post ----------\n\n\n    const channel = CHANNELS[listKey];\n    if (!channel) return res.status(400).json({\n      error: \"Unknown listKey (no list or channel configured)\"\n    }); // Join public channel defensively (prevents channel_not_found)\n\n    await slackForm(\"conversations.join\", {\n      channel\n    });\n    const lines = [];\n    lines.push(`*${safeTitle}*`);\n    const pnStr = joinArr(pn);\n    const snStr = joinArr(sn);\n    if (pnStr) lines.push(`PN: ${pnStr}`);\n    if (snStr) lines.push(`SN: ${snStr}`);\n    if (plain(workOrder)) lines.push(`WO: ${plain(workOrder)}`);\n    if (plain(poNumber)) lines.push(`PO: ${plain(poNumber)}`);\n    if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\n    if (plain(dom)) lines.push(`DOM: ${plain(dom)}`);\n    if (plain(localSN)) lines.push(`Local SN: ${plain(localSN)}`);\n    if (plain(date)) lines.push(`Date: ${plain(date)}`);\n    const desc = plain(description);\n    if (desc) lines.push(desc);else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\n    if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\n    const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n    const posted = await slackJson(\"chat.postMessage\", {\n      channel,\n      text\n    });\n\n    if (!(posted !== null && posted !== void 0 && posted.ok)) {\n      console.error(\"chat.postMessage failed:\", posted);\n      return res.status(400).json({\n        error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error (chat.postMessage)\",\n        raw: posted\n      });\n    }\n\n    console.log(\"add-to-list payload\", {\n      listKey,\n      title: safeTitle,\n      localSN,\n      pn,\n      sn,\n      hasPhotos: (photoUrls === null || photoUrls === void 0 ? void 0 : photoUrls.length) || 0\n    });\n    return res.status(200).json({\n      ok: true,\n      mode: \"channel\",\n      channel,\n      ts: posted.ts\n    });\n  } catch (e) {\n    console.error(\"add-to-list: server error\", e);\n    return res.status(500).json({\n      error: \"Server error\"\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","receiving","id","SLACK_LIST_RECEIVING_ID","cols","desc","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","track","SLACK_LIST_RECEIVING_TRACKING_COL","wo","SLACK_LIST_RECEIVING_WO_COL","lsn","SLACK_LIST_RECEIVING_LOCALSN_COL","photos","SLACK_LIST_RECEIVING_PHOTOS_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_TRACKING_COL","SLACK_LIST_SHIPPING_WO_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_DESCRIPTION_COL","CHANNELS","SLACK_CHANNEL_RECEIVING_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_TASKS_ID","slackJson","fetch","headers","Authorization","JSON","stringify","then","r","slackForm","form","URLSearchParams","plain","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","safeId","split","pop","safeTitle","cfg","fields","textBits","push","column_id","value","text","pnStr","snStr","combo","t","created","list_id","ok","type","elements","console","raw","length","upd","item_id","item","warn","fileIds","url","init","filename","upload_url","img","buf","arrayBuffer","Buffer","from","_","complete","files","file_id","attachment","file_ids","log","hasPhotos","mode","channel","lines","posted","ts","e"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  try {\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n    const {\r\n      listKey,                         // \"receiving\" | \"shipping\" | \"tasks\"\r\n      title, linkUrl, bodyText,        // common\r\n      date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n      photoUrls = [],\r\n    } = req.body || {};\r\n\r\n    // ---- ENV mapping (Lists + columns) ----\r\n    const LISTS = {\r\n      receiving: {\r\n        id: process.env.SLACK_LIST_RECEIVING_ID,\r\n        cols: {\r\n          desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n          date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n          pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n          track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n          wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n          lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n          photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,  // attachment column\r\n        },\r\n      },\r\n      shipping: {\r\n        id: process.env.SLACK_LIST_SHIPPING_ID,\r\n        cols: {\r\n          desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n          date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n          pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n          track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n          wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n          lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n          photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,   // attachment column\r\n        },\r\n      },\r\n      tasks: {\r\n        id: process.env.SLACK_LIST_TASKS_ID,\r\n        cols: {\r\n          desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n        },\r\n      },\r\n    };\r\n\r\n    // Optional channel fallback\r\n    const CHANNELS = {\r\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n      shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n      tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n    };\r\n\r\n    // ---- helpers ----\r\n    const slackJson = (method, body) =>\r\n      fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json; charset=utf-8\" },\r\n        body: JSON.stringify(body),\r\n      }).then(r => r.json());\r\n\r\n    const slackForm = (method, form) =>\r\n      fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n        body: new URLSearchParams(form),\r\n      }).then(r => r.json());\r\n\r\n    const plain = v => (v ?? \"\").toString().trim();\r\n    const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n    // Build a safe, non-empty title\r\n    const safeId    = plain(localSN) || plain(linkUrl?.split(\"/\").pop());\r\n    const safeTitle = plain(title) || joinArr(pn) || safeId || \"New Item\";\r\n\r\n    // ---------- PATH A: Write to a LIST ----------\r\n    const cfg = LISTS[listKey];\r\n    if (cfg?.id) {\r\n      // Build fields using only configured column ids\r\n      const fields = [];\r\n\r\n      // Description column (Tasks: put bodyText here if provided)\r\n      if (cfg.cols.desc && (description || (listKey === \"tasks\" && bodyText) || linkUrl)) {\r\n        const textBits = [\r\n          plain(description),\r\n          listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n          plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n        ].filter(Boolean).join(\"\\n\");\r\n        if (textBits) fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n      }\r\n\r\n      if (cfg.cols.date && plain(date)) fields.push({ column_id: cfg.cols.date, value: { date: plain(date) } });\r\n\r\n      if (cfg.cols.pn && (pn || sn || dom)) {\r\n        const pnStr = joinArr(pn);\r\n        const snStr = joinArr(sn);\r\n        const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n          .filter(Boolean).join(\"  \");\r\n        if (combo) fields.push({ column_id: cfg.cols.pn, value: { text: combo } });\r\n      }\r\n\r\n      if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n        const t = [\r\n          plain(trackingNumber) && `RL: ${plain(trackingNumber)}`,\r\n          plain(poNumber) && `PO: ${plain(poNumber)}`\r\n        ].filter(Boolean).join(\"  \");\r\n        if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n      }\r\n\r\n      if (cfg.cols.wo  && plain(workOrder)) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${plain(workOrder)}` } });\r\n      if (cfg.cols.lsn && plain(localSN))   fields.push({ column_id: cfg.cols.lsn, value: { text: plain(localSN) } });\r\n\r\n      // 1) Create with a guaranteed non-empty **plain string** title.\r\n      let created = await slackJson(\"slackLists.items.create\", {\r\n        list_id: cfg.id,\r\n        title: safeTitle,\r\n      });\r\n\r\n      // If that fails with invalid_arguments, retry with rich_text title\r\n      if (!created?.ok && created?.error === \"invalid_arguments\") {\r\n        created = await slackJson(\"slackLists.items.create\", {\r\n          list_id: cfg.id,\r\n          title: [{\r\n            type: \"rich_text\",\r\n            elements: [{\r\n              type: \"rich_text_section\",\r\n              elements: [{ type: \"text\", text: safeTitle }],\r\n            }],\r\n          }],\r\n        });\r\n      }\r\n\r\n      if (!created?.ok) {\r\n        console.error(\"slackLists.items.create failed:\", created);\r\n        return res.status(400).json({ error: created?.error || \"Slack Lists API error (create)\", raw: created });\r\n      }\r\n\r\n      // 2) Patch the fields after create (works even if some column ids are missing)\r\n      if (fields.length) {\r\n        const upd = await slackJson(\"slackLists.items.update\", {\r\n          list_id: cfg.id,\r\n          item_id: created.item.id,\r\n          fields,\r\n        });\r\n        if (!upd?.ok) {\r\n          console.warn(\"slackLists.items.update (fields) failed:\", upd);\r\n          // don't fail the whole request if fields couldn't be set\r\n        }\r\n      }\r\n\r\n      // 3) Upload & attach photos (if you have an attachment column)\r\n      if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n        const fileIds = [];\r\n        for (const url of photoUrls) {\r\n          const init = await slackForm(\"files.getUploadURLExternal\", {\r\n            filename: url.split(\"/\").pop() || \"image.jpg\",\r\n          });\r\n          if (!init?.ok || !init?.upload_url) continue;\r\n\r\n          try {\r\n            const img = await fetch(url);\r\n            const buf = await img.arrayBuffer();\r\n            await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n          } catch (_) { /* ignore per-file upload errors */ }\r\n\r\n          const complete = await slackJson(\"files.completeUploadExternal\", {\r\n            files: [{ id: init.file_id, title: \"photo\" }],\r\n          });\r\n          if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n        }\r\n\r\n        if (fileIds.length) {\r\n          await slackJson(\"slackLists.items.update\", {\r\n            list_id: cfg.id,\r\n            item_id: created.item.id,\r\n            fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n          });\r\n        }\r\n      }\r\n\r\n      console.log(\"add-to-list payload\", {\r\n        listKey, title: safeTitle, localSN, pn, sn, hasPhotos: photoUrls?.length || 0\r\n      });\r\n\r\n      return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n    }\r\n\r\n    // ---------- PATH B: Fallback to a channel post ----------\r\n    const channel = CHANNELS[listKey];\r\n    if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n    // Join public channel defensively (prevents channel_not_found)\r\n    await slackForm(\"conversations.join\", { channel });\r\n\r\n    const lines = [];\r\n    lines.push(`*${safeTitle}*`);\r\n    const pnStr = joinArr(pn);\r\n    const snStr = joinArr(sn);\r\n    if (pnStr) lines.push(`PN: ${pnStr}`);\r\n    if (snStr) lines.push(`SN: ${snStr}`);\r\n    if (plain(workOrder))      lines.push(`WO: ${plain(workOrder)}`);\r\n    if (plain(poNumber))       lines.push(`PO: ${plain(poNumber)}`);\r\n    if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\r\n    if (plain(dom))            lines.push(`DOM: ${plain(dom)}`);\r\n    if (plain(localSN))        lines.push(`Local SN: ${plain(localSN)}`);\r\n    if (plain(date))           lines.push(`Date: ${plain(date)}`);\r\n    const desc = plain(description);\r\n    if (desc) lines.push(desc);\r\n    else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\r\n    if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\r\n\r\n    const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n    const posted = await slackJson(\"chat.postMessage\", { channel, text });\r\n    if (!posted?.ok) {\r\n      console.error(\"chat.postMessage failed:\", posted);\r\n      return res.status(400).json({ error: posted?.error || \"Slack API error (chat.postMessage)\", raw: posted });\r\n    }\r\n\r\n    console.log(\"add-to-list payload\", {\r\n      listKey, title: safeTitle, localSN, pn, sn, hasPhotos: photoUrls?.length || 0\r\n    });\r\n\r\n    return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n  } catch (e) {\r\n    console.error(\"add-to-list: server error\", e);\r\n    return res.status(500).json({ error: \"Server error\" });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
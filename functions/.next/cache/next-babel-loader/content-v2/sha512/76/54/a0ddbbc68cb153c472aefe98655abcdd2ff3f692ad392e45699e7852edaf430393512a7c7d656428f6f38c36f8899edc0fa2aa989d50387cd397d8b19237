{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mack2\\\\Desktop\\\\code\\\\utils\\\\PartTable.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Table, Button, Form } from \"react-bootstrap\";\nimport { formatDate } from \"./fetchAssociations\";\nimport styles from \"../styles/PartTable.module.css\";\nexport default function PartTable({\n  info,\n  labels,\n  ids,\n  hoverStyle,\n  sortCheckAll,\n  checkDelete,\n  isDeleting,\n  rowSelect,\n  setHoverIndex,\n  hoverIndex,\n  selectedItems,\n  setSelectedItems\n}) {\n  // const [selectedItems, setSelectedItems] = useState([]);\n  // Toggle selection of items\n  const handleSelectItem = id => {\n    setSelectedItems(prevSelectedItems => prevSelectedItems.includes(id) ? prevSelectedItems.filter(itemId => itemId !== id) : [...prevSelectedItems, id]);\n  }; // Handle delete button click for selected items\n\n\n  const handleDeleteSelected = () => {\n    if (selectedItems.length > 0) {\n      checkDelete(null, null, selectedItems, \"selected items\");\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: styles.scrollableTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    size: \"sm\",\n    className: \"mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(\"thead\", {\n    className: styles.stickyHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, labels.map((item, index) => __jsx(\"th\", {\n    style: hoverStyle(index),\n    onMouseOver: () => setHoverIndex(index),\n    onMouseOut: () => setHoverIndex(null),\n    onClick: () => sortCheckAll(index),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, item)), __jsx(\"th\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, selectedItems.length > 0 ? __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected,\n    disabled: isDeleting,\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Delete Selected (\", selectedItems.length, \")\") : \"select\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, info.map((item, index) => __jsx(\"tr\", {\n    key: index,\n    onClick: e => {\n      // Only trigger rowSelect if the target is not a checkbox\n      if (e.target.type !== \"checkbox\") {\n        rowSelect(item);\n      }\n    },\n    className: \"clickable-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, item.name), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, formatDate(item.date)), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, item.workOrders && item.workOrders.length > 0 ? item.workOrders[item.workOrders.length - 1].workOrder : \"N/A\"), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, item.pn), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\",\n      cursor: \"default\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, item.sn), __jsx(\"td\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, __jsx(Form.Check, {\n    type: \"checkbox\",\n    checked: selectedItems.includes(item.id),\n    onChange: e => {\n      e.stopPropagation(); // Prevent row click when checkbox is clicked\n      // Toggle selection using item.id directly\n\n      setSelectedItems(prevSelectedItems => prevSelectedItems.includes(item.id) ? prevSelectedItems.filter(id => id !== item.id) : [...prevSelectedItems, item.id]);\n    },\n    \"aria-label\": `Select ${item.name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  })))), info.length < 10 && Array.from({\n    length: 10 - info.length\n  }).map((_, index) => __jsx(\"tr\", {\n    key: `empty-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    colSpan: labels.length + 1,\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"\\xA0\"))))));\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/utils/PartTable.js"],"names":["React","useState","Table","Button","Form","formatDate","styles","PartTable","info","labels","ids","hoverStyle","sortCheckAll","checkDelete","isDeleting","rowSelect","setHoverIndex","hoverIndex","selectedItems","setSelectedItems","handleSelectItem","id","prevSelectedItems","includes","filter","itemId","handleDeleteSelected","length","scrollableTable","stickyHeader","map","item","index","textAlign","e","target","type","cursor","name","date","workOrders","workOrder","pn","sn","stopPropagation","Array","from","_"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Table, Button, Form } from \"react-bootstrap\";\nimport { formatDate } from \"./fetchAssociations\";\nimport styles from \"../styles/PartTable.module.css\";\n\nexport default function PartTable({\n  info,\n  labels,\n  ids,\n  hoverStyle,\n  sortCheckAll,\n  checkDelete,\n  isDeleting,\n  rowSelect,\n  setHoverIndex,\n  hoverIndex,\n  selectedItems,\n  setSelectedItems,\n}) {\n  // const [selectedItems, setSelectedItems] = useState([]);\n\n  // Toggle selection of items\n  const handleSelectItem = (id) => {\n    setSelectedItems((prevSelectedItems) =>\n      prevSelectedItems.includes(id)\n        ? prevSelectedItems.filter((itemId) => itemId !== id)\n        : [...prevSelectedItems, id]\n    );\n  };\n\n  // Handle delete button click for selected items\n  const handleDeleteSelected = () => {\n    if (selectedItems.length > 0) {\n      checkDelete(null, null, selectedItems, \"selected items\");\n    }\n  };\n\n  return (\n    <div className={styles.scrollableTable}>\n      <Table striped bordered hover size=\"sm\" className=\"mb-0\">\n        <thead className={styles.stickyHeader}>\n          <tr>\n            {labels.map((item, index) => (\n              <th\n                style={hoverStyle(index)}\n                onMouseOver={() => setHoverIndex(index)}\n                onMouseOut={() => setHoverIndex(null)}\n                onClick={() => sortCheckAll(index)}\n                key={index}\n              >\n                {item}\n              </th>\n            ))}\n            <th style={{ textAlign: \"center\" }}>\n              {selectedItems.length > 0 ? (\n                <Button\n                  variant=\"danger\"\n                  onClick={handleDeleteSelected}\n                  disabled={isDeleting}\n                  size=\"sm\"\n                >\n                  Delete Selected ({selectedItems.length})\n                </Button>\n              ) : (\n                \"select\"\n              )}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {info.map((item, index) => (\n            <tr\n              key={index}\n              onClick={(e) => {\n                // Only trigger rowSelect if the target is not a checkbox\n                if (e.target.type !== \"checkbox\") {\n                  rowSelect(item);\n                }\n              }}\n              className=\"clickable-row\"\n            >\n              <td style={{ textAlign: \"center\", cursor: \"default\" }}>\n                {item.name}\n              </td>\n              <td style={{ textAlign: \"center\", cursor: \"default\" }}>\n                {formatDate(item.date)}\n              </td>\n              <td style={{ textAlign: \"center\", cursor: \"default\" }}>\n                {item.workOrders && item.workOrders.length > 0\n                  ? item.workOrders[item.workOrders.length - 1].workOrder\n                  : \"N/A\"}\n              </td>\n              <td style={{ textAlign: \"center\", cursor: \"default\" }}>\n                {item.pn}\n              </td>\n              <td style={{ textAlign: \"center\", cursor: \"default\" }}>\n                {item.sn}\n              </td>\n              <td style={{ textAlign: \"center\" }}>\n                <Form.Check\n                  type=\"checkbox\"\n                  checked={selectedItems.includes(item.id)}\n                  onChange={(e) => {\n                    e.stopPropagation(); // Prevent row click when checkbox is clicked\n                    // Toggle selection using item.id directly\n                    setSelectedItems((prevSelectedItems) =>\n                      prevSelectedItems.includes(item.id)\n                        ? prevSelectedItems.filter((id) => id !== item.id)\n                        : [...prevSelectedItems, item.id]\n                    );\n                  }}\n                  aria-label={`Select ${item.name}`}\n                />\n              </td>\n            </tr>\n          ))}\n          {info.length < 10 &&\n            Array.from({ length: 10 - info.length }).map((_, index) => (\n              <tr key={`empty-${index}`}>\n                <td colSpan={labels.length + 1} style={{ textAlign: \"center\" }}>\n                  &nbsp;\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") {\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//   }\n//   const token = process.env.SLACK_BOT_TOKEN;\n//   if (!token) {\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//   }\n//   // ---- Payload from client (your UI already sends these) ----\n//   const {\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\n//     title,              // the thing we want to show in the Task column\n//     linkUrl, bodyText,\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//     photoUrls = [],\n//   } = req.body || {};\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\n//   const LISTS = {\n//     tasks: {\n//       id: process.env.SLACK_LIST_TASKS_ID,\n//       // OPTIONAL: if you know the \"Task\" column id already\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\n//       cols: {\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\n//       },\n//     },\n//     shipping: {\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\n//       },\n//     },\n//     receiving: {\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\n//       cols: {\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\n//       },\n//     },\n//   };\n//   const cfg = LISTS[listKey];\n//   if (!cfg?.id) {\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\n//   }\n//   // ---- Slack helpers ----\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\n//     const r = await fetch(`https://slack.com/api/${method}`, {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\n//     });\n//     return r.json();\n//   }\n//   const plain = (v) => (v ?? \"\").toString().trim();\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//   // Never send an empty title\n//   const safeTitle =\n//     plain(title) ||\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\n//     joinArr(pn) ||\n//     \"New Item\";\n//   // Convert plain text to Slack rich_text for text columns\n//   function toRichText(text) {\n//     return [{\n//       type: \"rich_text\",\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\n//     }];\n//   }\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\n//   async function resolveTitleColumnId(listId, provided) {\n//     if (provided) return { colId: provided, source: \"env\" };\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\n//     let candidate = null;\n//     for (const item of probe.items || []) {\n//       for (const f of item.fields || []) {\n//         const key = (f.key || \"\").trim().toLowerCase();\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\n//       }\n//     }\n//     return { colId: candidate, source: \"auto:first_text\" };\n//   }\n//   try {\n//     // 1) Find the column to write the Task name into; fall back to top-level title\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\n//     const createBody = {\n//       list_id: cfg.id,\n//       ...(titleCol.colId\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\n//     };\n//     const created = await slack(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 2) (Optional) Patch other columns you actually have IDs for\n//     const fields = [];\n//     const cols = cfg.cols || {};\n//     const addText = (colId, text) => {\n//       const t = plain(text);\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\n//     };\n//     // Description / Notes column (for tasks we include your assembled bodyText)\n//     if (cols.desc) {\n//       const bits = [\n//         plain(description),\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\n//       ].filter(Boolean).join(\"\\n\");\n//       addText(cols.desc, bits);\n//     }\n//     // Dates and grouped PN/SN/DOM example\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\n//     if (cols.pn) {\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.pn, combo);\n//     }\n//     if (cols.track) {\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\n//         .filter(Boolean).join(\"  \");\n//       addText(cols.track, t);\n//     }\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\n//     if (fields.length) {\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id: cfg.id,\n//       item_id: created.item.id,\n//       used_title_col: titleCol.colId || null,\n//       title_col_source: titleCol.source || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      ok: false,\n      error: \"method_not_allowed\"\n    });\n  }\n\n  try {\n    var _cfg$cols;\n\n    const token = process.env.SLACK_BOT_TOKEN;\n\n    if (!token) {\n      return res.status(500).json({\n        ok: false,\n        error: \"missing_SLACK_BOT_TOKEN\"\n      });\n    } // Payload from client\n\n\n    const {\n      listKey,\n      // \"shipping\" | \"receiving\" | \"tasks\"\n      title,\n      // what appears in the Task column\n      pn,\n      sn,\n      // arrays or strings\n      localSN // fallback id\n\n    } = req.body || {}; // List config (IDs come from your .env). Only id is required.\n\n    const LISTS = {\n      shipping: {\n        id: process.env.SLACK_LIST_SHIPPING_ID,\n        titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\n        // optional\n        cols: {\n          pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL || null\n        }\n      },\n      receiving: {\n        id: process.env.SLACK_LIST_RECEIVING_ID,\n        titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\n        cols: {\n          pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL || null\n        }\n      },\n      tasks: {\n        id: process.env.SLACK_LIST_TASKS_ID,\n        titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\n        cols: {}\n      }\n    };\n    const cfg = LISTS[listKey];\n\n    if (!(cfg !== null && cfg !== void 0 && cfg.id)) {\n      return res.status(400).json({\n        ok: false,\n        error: `unknown_or_unconfigured_listKey_${listKey}`\n      });\n    } // Helpers\n\n\n    const slack = async (method, payload, headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }) => {\n      const r = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: _objectSpread({\n          Authorization: `Bearer ${token}`\n        }, headers),\n        body: typeof payload === \"string\" ? payload : JSON.stringify(payload)\n      });\n      return r.json();\n    };\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // Never send an empty title\n\n\n    const safeTitle = plain(title) || (plain(localSN) ? `Item ${plain(localSN)}` : \"\") || joinArr(pn) || \"New Item\"; // Convert text to rich_text for the name column when we know its column_id\n\n    function toRichText(text) {\n      return [{\n        type: \"rich_text\",\n        elements: [{\n          type: \"rich_text_section\",\n          elements: [{\n            type: \"text\",\n            text\n          }]\n        }]\n      }];\n    } // Auto-discover a text column that already shows the item name (works even if you don't know the id)\n\n\n    async function resolveTitleColumnId(listId, provided) {\n      if (provided) return {\n        colId: provided,\n        source: \"env\"\n      };\n      const probe = await slack(\"slackLists.items.list\", {\n        list_id: listId,\n        limit: 50\n      });\n      if (!(probe !== null && probe !== void 0 && probe.ok)) return {\n        colId: null,\n        source: \"auto\",\n        error: (probe === null || probe === void 0 ? void 0 : probe.error) || \"items.list_failed\"\n      };\n      let candidate = null;\n\n      for (const item of probe.items || []) {\n        for (const f of item.fields || []) {\n          const key = (f.key || \"\").trim().toLowerCase();\n          const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\n          if (key === \"task\" && f.column_id && hasText) return {\n            colId: f.column_id,\n            source: \"auto:key_task\"\n          };\n          if (!candidate && f.column_id && hasText) candidate = f.column_id;\n        }\n      }\n\n      return {\n        colId: candidate,\n        source: \"auto:first_text\"\n      };\n    } // 1) Create the item with the title only\n\n\n    const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\n\n    const createBody = _objectSpread({\n      list_id: cfg.id\n    }, titleCol.colId ? {\n      initial_fields: [{\n        column_id: titleCol.colId,\n        rich_text: toRichText(safeTitle)\n      }]\n    } : {\n      title: safeTitle\n    });\n\n    const created = await slack(\"slackLists.items.create\", createBody);\n\n    if (!(created !== null && created !== void 0 && created.ok)) {\n      return res.status(200).json({\n        ok: false,\n        error: (created === null || created === void 0 ? void 0 : created.error) || \"create_failed\",\n        mode: \"list\",\n        sent: createBody\n      });\n    } // 2) Patch PN/SN (ONLY) after creation — this actually sticks\n\n\n    const fields = [];\n    const pnCol = ((_cfg$cols = cfg.cols) === null || _cfg$cols === void 0 ? void 0 : _cfg$cols.pn) || null;\n    const pnStr = joinArr(pn);\n    const snStr = joinArr(sn);\n    const pnBlock = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`].filter(Boolean).join(\"  \");\n\n    if (pnCol && pnBlock) {\n      fields.push({\n        column_id: pnCol,\n        value: {\n          text: pnBlock\n        }\n      });\n    }\n\n    if (fields.length) {\n      const upd = await slack(\"slackLists.items.update\", {\n        list_id: cfg.id,\n        item_id: created.item.id,\n        fields\n      });\n\n      if (!(upd !== null && upd !== void 0 && upd.ok)) {\n        // Not fatal for the creation itself — return both ids so you can see the row\n        return res.status(200).json({\n          ok: false,\n          error: (upd === null || upd === void 0 ? void 0 : upd.error) || \"update_failed\",\n          mode: \"list\",\n          list_id: cfg.id,\n          item_id: created.item.id,\n          sent_title: safeTitle\n        });\n      }\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.id,\n      item_id: created.item.id,\n      used_title_col: titleCol.colId || null,\n      title_col_source: titleCol.source || null,\n      sent_title: safeTitle\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n    return res.status(500).json({\n      ok: false,\n      error: \"exception\",\n      message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","ok","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","pn","sn","localSN","body","LISTS","shipping","id","SLACK_LIST_SHIPPING_ID","titleColId","SLACK_LIST_SHIPPING_TITLE_COL","cols","SLACK_LIST_SHIPPING_PNSN_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_PNSN_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_TITLE_COL","cfg","slack","payload","headers","r","fetch","Authorization","JSON","stringify","plain","v","toString","trim","joinArr","a","Array","isArray","filter","Boolean","map","join","safeTitle","toRichText","text","type","elements","resolveTitleColumnId","listId","provided","colId","source","probe","list_id","limit","candidate","item","items","f","fields","key","toLowerCase","hasText","rich_text","column_id","titleCol","createBody","initial_fields","created","mode","sent","pnCol","pnStr","snStr","pnBlock","push","value","length","upd","item_id","sent_title","used_title_col","title_col_source","err","console","message","String"],"mappingseAAe,eAAeA,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,KAAK,EAAE;AAApB,KAArB,CAAP;AACD;;AAED,MAAI;AAAA;;AACF,UAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAA1B;;AACA,QAAI,CAACH,KAAL,EAAY;AACV,aAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE,KAAN;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAArB,CAAP;AACD,KAJC,CAMF;;;AACA,UAAM;AACJK,MAAAA,OADI;AACmB;AACvBC,MAAAA,KAFI;AAEmB;AACvBC,MAAAA,EAHI;AAGAC,MAAAA,EAHA;AAGmB;AACvBC,MAAAA,OAJI,CAImB;;AAJnB,QAKFf,GAAG,CAACgB,IAAJ,IAAY,EALhB,CAPE,CAcF;;AACA,UAAMC,KAAK,GAAG;AACZC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAEX,OAAO,CAACC,GAAR,CAAYW,sBADR;AAERC,QAAAA,UAAU,EAAEb,OAAO,CAACC,GAAR,CAAYa,6BAAZ,IAA6C,IAFjD;AAEuD;AAC/DC,QAAAA,IAAI,EAAE;AACJV,UAAAA,EAAE,EAAEL,OAAO,CAACC,GAAR,CAAYe,4BAAZ,IAA4C;AAD5C;AAHE,OADE;AAQZC,MAAAA,SAAS,EAAE;AACTN,QAAAA,EAAE,EAAEX,OAAO,CAACC,GAAR,CAAYiB,uBADP;AAETL,QAAAA,UAAU,EAAEb,OAAO,CAACC,GAAR,CAAYkB,8BAAZ,IAA8C,IAFjD;AAGTJ,QAAAA,IAAI,EAAE;AACJV,UAAAA,EAAE,EAAEL,OAAO,CAACC,GAAR,CAAYmB,6BAAZ,IAA6C;AAD7C;AAHG,OARC;AAeZC,MAAAA,KAAK,EAAE;AACLV,QAAAA,EAAE,EAAEX,OAAO,CAACC,GAAR,CAAYqB,mBADX;AAELT,QAAAA,UAAU,EAAEb,OAAO,CAACC,GAAR,CAAYsB,0BAAZ,IAA0C,IAFjD;AAGLR,QAAAA,IAAI,EAAE;AAHD;AAfK,KAAd;AAsBA,UAAMS,GAAG,GAAGf,KAAK,CAACN,OAAD,CAAjB;;AACA,QAAI,EAACqB,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEb,EAAN,CAAJ,EAAc;AACZ,aAAOlB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE,KAAN;AAAaC,QAAAA,KAAK,EAAG,mCAAkCK,OAAQ;AAA/D,OAArB,CAAP;AACD,KAxCC,CA0CF;;;AACA,UAAMsB,KAAK,GAAG,OAAO/B,MAAP,EAAegC,OAAf,EAAwBC,OAAO,GAAG;AAAE,sBAAgB;AAAlB,KAAlC,KAA4F;AACxG,YAAMC,CAAC,GAAG,MAAMC,KAAK,CAAE,yBAAwBnC,MAAO,EAAjC,EAAoC;AACvDA,QAAAA,MAAM,EAAE,MAD+C;AAEvDiC,QAAAA,OAAO;AAAIG,UAAAA,aAAa,EAAG,UAAS/B,KAAM;AAAnC,WAAyC4B,OAAzC,CAFgD;AAGvDnB,QAAAA,IAAI,EAAE,OAAOkB,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCK,IAAI,CAACC,SAAL,CAAeN,OAAf;AAHS,OAApC,CAArB;AAKA,aAAOE,CAAC,CAAChC,IAAF,EAAP;AACD,KAPD;;AAQA,UAAMqC,KAAK,GAAIC,CAAD,IAAO,CAACA,CAAD,aAACA,CAAD,cAACA,CAAD,GAAM,EAAN,EAAUC,QAAV,GAAqBC,IAArB,EAArB;;AACA,UAAMC,OAAO,GAAIC,CAAD,IAAOC,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmBA,CAAC,CAACG,MAAF,CAASC,OAAT,EAAkBC,GAAlB,CAAsBV,KAAtB,EAA6BW,IAA7B,CAAkC,IAAlC,CAAnB,GAA6DX,KAAK,CAACK,CAAD,CAAzF,CApDE,CAsDF;;;AACA,UAAMO,SAAS,GACbZ,KAAK,CAAC7B,KAAD,CAAL,KACC6B,KAAK,CAAC1B,OAAD,CAAL,GAAkB,QAAO0B,KAAK,CAAC1B,OAAD,CAAU,EAAxC,GAA4C,EAD7C,KAEA8B,OAAO,CAAChC,EAAD,CAFP,IAGA,UAJF,CAvDE,CA6DF;;AACA,aAASyC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,aAAO,CAAC;AACNC,QAAAA,IAAI,EAAE,WADA;AAENC,QAAAA,QAAQ,EAAE,CAAC;AAAED,UAAAA,IAAI,EAAE,mBAAR;AAA6BC,UAAAA,QAAQ,EAAE,CAAC;AAAED,YAAAA,IAAI,EAAE,MAAR;AAAgBD,YAAAA;AAAhB,WAAD;AAAvC,SAAD;AAFJ,OAAD,CAAP;AAID,KAnEC,CAqEF;;;AACA,mBAAeG,oBAAf,CAAoCC,MAApC,EAA4CC,QAA5C,EAAsD;AACpD,UAAIA,QAAJ,EAAc,OAAO;AAAEC,QAAAA,KAAK,EAAED,QAAT;AAAmBE,QAAAA,MAAM,EAAE;AAA3B,OAAP;AAEd,YAAMC,KAAK,GAAG,MAAM9B,KAAK,CAAC,uBAAD,EAA0B;AAAE+B,QAAAA,OAAO,EAAEL,MAAX;AAAmBM,QAAAA,KAAK,EAAE;AAA1B,OAA1B,CAAzB;AACA,UAAI,EAACF,KAAD,aAACA,KAAD,eAACA,KAAK,CAAE1D,EAAR,CAAJ,EAAgB,OAAO;AAAEwD,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,MAAM,EAAE,MAAvB;AAA+BxD,QAAAA,KAAK,EAAE,CAAAyD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEzD,KAAP,KAAgB;AAAtD,OAAP;AAEhB,UAAI4D,SAAS,GAAG,IAAhB;;AACA,WAAK,MAAMC,IAAX,IAAmBJ,KAAK,CAACK,KAAN,IAAe,EAAlC,EAAsC;AACpC,aAAK,MAAMC,CAAX,IAAgBF,IAAI,CAACG,MAAL,IAAe,EAA/B,EAAmC;AACjC,gBAAMC,GAAG,GAAG,CAACF,CAAC,CAACE,GAAF,IAAS,EAAV,EAAc3B,IAAd,GAAqB4B,WAArB,EAAZ;AACA,gBAAMC,OAAO,GAAGvB,OAAO,CAACmB,CAAC,CAACd,IAAH,CAAP,IAAmBR,KAAK,CAACC,OAAN,CAAcqB,CAAC,CAACK,SAAhB,CAAnC;AACA,cAAIH,GAAG,KAAK,MAAR,IAAkBF,CAAC,CAACM,SAApB,IAAiCF,OAArC,EAA8C,OAAO;AAAEZ,YAAAA,KAAK,EAAEQ,CAAC,CAACM,SAAX;AAAsBb,YAAAA,MAAM,EAAE;AAA9B,WAAP;AAC9C,cAAI,CAACI,SAAD,IAAcG,CAAC,CAACM,SAAhB,IAA6BF,OAAjC,EAA0CP,SAAS,GAAGG,CAAC,CAACM,SAAd;AAC3C;AACF;;AACD,aAAO;AAAEd,QAAAA,KAAK,EAAEK,SAAT;AAAoBJ,QAAAA,MAAM,EAAE;AAA5B,OAAP;AACD,KAtFC,CAwFF;;;AACA,UAAMc,QAAQ,GAAG,MAAMlB,oBAAoB,CAAC1B,GAAG,CAACb,EAAL,EAASa,GAAG,CAACX,UAAb,CAA3C;;AACA,UAAMwD,UAAU;AACdb,MAAAA,OAAO,EAAEhC,GAAG,CAACb;AADC,OAEVyD,QAAQ,CAACf,KAAT,GACA;AAAEiB,MAAAA,cAAc,EAAE,CAAC;AAAEH,QAAAA,SAAS,EAAEC,QAAQ,CAACf,KAAtB;AAA6Ba,QAAAA,SAAS,EAAEpB,UAAU,CAACD,SAAD;AAAlD,OAAD;AAAlB,KADA,GAEA;AAAEzC,MAAAA,KAAK,EAAEyC;AAAT,KAJU,CAAhB;;AAMA,UAAM0B,OAAO,GAAG,MAAM9C,KAAK,CAAC,yBAAD,EAA4B4C,UAA5B,CAA3B;;AACA,QAAI,EAACE,OAAD,aAACA,OAAD,eAACA,OAAO,CAAE1E,EAAV,CAAJ,EAAkB;AAChB,aAAOJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,EAAE,EAAE,KADsB;AAE1BC,QAAAA,KAAK,EAAE,CAAAyE,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEzE,KAAT,KAAkB,eAFC;AAG1B0E,QAAAA,IAAI,EAAE,MAHoB;AAI1BC,QAAAA,IAAI,EAAEJ;AAJoB,OAArB,CAAP;AAMD,KAxGC,CA0GF;;;AACA,UAAMP,MAAM,GAAG,EAAf;AACA,UAAMY,KAAK,GAAG,cAAAlD,GAAG,CAACT,IAAJ,wDAAUV,EAAV,KAAgB,IAA9B;AACA,UAAMsE,KAAK,GAAGtC,OAAO,CAAChC,EAAD,CAArB;AACA,UAAMuE,KAAK,GAAGvC,OAAO,CAAC/B,EAAD,CAArB;AACA,UAAMuE,OAAO,GAAG,CAACF,KAAK,IAAK,OAAMA,KAAM,EAAvB,EAA0BC,KAAK,IAAK,OAAMA,KAAM,EAAhD,EAAmDnC,MAAnD,CAA0DC,OAA1D,EAAmEE,IAAnE,CAAwE,IAAxE,CAAhB;;AACA,QAAI8B,KAAK,IAAIG,OAAb,EAAsB;AACpBf,MAAAA,MAAM,CAACgB,IAAP,CAAY;AAAEX,QAAAA,SAAS,EAAEO,KAAb;AAAoBK,QAAAA,KAAK,EAAE;AAAEhC,UAAAA,IAAI,EAAE8B;AAAR;AAA3B,OAAZ;AACD;;AAED,QAAIf,MAAM,CAACkB,MAAX,EAAmB;AACjB,YAAMC,GAAG,GAAG,MAAMxD,KAAK,CAAC,yBAAD,EAA4B;AACjD+B,QAAAA,OAAO,EAAEhC,GAAG,CAACb,EADoC;AAEjDuE,QAAAA,OAAO,EAAEX,OAAO,CAACZ,IAAR,CAAahD,EAF2B;AAGjDmD,QAAAA;AAHiD,OAA5B,CAAvB;;AAKA,UAAI,EAACmB,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEpF,EAAN,CAAJ,EAAc;AACZ;AACA,eAAOJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,EAAE,EAAE,KADsB;AAE1BC,UAAAA,KAAK,EAAE,CAAAmF,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEnF,KAAL,KAAc,eAFK;AAG1B0E,UAAAA,IAAI,EAAE,MAHoB;AAI1BhB,UAAAA,OAAO,EAAEhC,GAAG,CAACb,EAJa;AAK1BuE,UAAAA,OAAO,EAAEX,OAAO,CAACZ,IAAR,CAAahD,EALI;AAM1BwE,UAAAA,UAAU,EAAEtC;AANc,SAArB,CAAP;AAQD;AACF;;AAED,WAAOpD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,EAAE,EAAE,IADsB;AAE1B2E,MAAAA,IAAI,EAAE,MAFoB;AAG1BhB,MAAAA,OAAO,EAAEhC,GAAG,CAACb,EAHa;AAI1BuE,MAAAA,OAAO,EAAEX,OAAO,CAACZ,IAAR,CAAahD,EAJI;AAK1ByE,MAAAA,cAAc,EAAEhB,QAAQ,CAACf,KAAT,IAAkB,IALR;AAM1BgC,MAAAA,gBAAgB,EAAEjB,QAAQ,CAACd,MAAT,IAAmB,IANX;AAO1B6B,MAAAA,UAAU,EAAEtC;AAPc,KAArB,CAAP;AASD,GAhJD,CAgJE,OAAOyC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACzF,KAAR,CAAc,iCAAd,EAAiDwF,GAAjD;AACA,WAAO7F,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,EAAE,EAAE,KAAN;AAAaC,MAAAA,KAAK,EAAE,WAApB;AAAiC0F,MAAAA,OAAO,EAAE,CAAAF,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEE,OAAL,KAAgBC,MAAM,CAACH,GAAD;AAAhE,KAArB,CAAP;AACD;AACF","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") {\r\n//     return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//   }\r\n\r\n//   const token = process.env.SLACK_BOT_TOKEN;\r\n//   if (!token) {\r\n//     return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//   }\r\n\r\n//   // ---- Payload from client (your UI already sends these) ----\r\n//   const {\r\n//     listKey,            // \"tasks\" | \"shipping\" | \"receiving\"\r\n//     title,              // the thing we want to show in the Task column\r\n//     linkUrl, bodyText,\r\n//     date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//     photoUrls = [],\r\n//   } = req.body || {};\r\n\r\n//   // ---- Lists (IDs from .env). Only `id` is required to push a title. ----\r\n//   const LISTS = {\r\n//     tasks: {\r\n//       id: process.env.SLACK_LIST_TASKS_ID,\r\n//       // OPTIONAL: if you know the \"Task\" column id already\r\n//       titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\r\n//       cols: {\r\n//         desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL || null,\r\n//       },\r\n//     },\r\n//     shipping: {\r\n//       id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_SHIPPING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_SHIPPING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//     receiving: {\r\n//       id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//       titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\r\n//       cols: {\r\n//         desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL || null,\r\n//         date:   process.env.SLACK_LIST_RECEIVING_DATE_COL || null,\r\n//         pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\r\n//         track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL || null,\r\n//         wo:     process.env.SLACK_LIST_RECEIVING_WO_COL || null,\r\n//         lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL || null,\r\n//         photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL || null,\r\n//       },\r\n//     },\r\n//   };\r\n\r\n//   const cfg = LISTS[listKey];\r\n//   if (!cfg?.id) {\r\n//     return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\r\n//   }\r\n\r\n//   // ---- Slack helpers ----\r\n//   async function slack(method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) {\r\n//     const r = await fetch(`https://slack.com/api/${method}`, {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, ...headers },\r\n//       body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\r\n//     });\r\n//     return r.json();\r\n//   }\r\n\r\n//   const plain = (v) => (v ?? \"\").toString().trim();\r\n//   const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//   // Never send an empty title\r\n//   const safeTitle =\r\n//     plain(title) ||\r\n//     (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\r\n//     joinArr(pn) ||\r\n//     \"New Item\";\r\n\r\n//   // Convert plain text to Slack rich_text for text columns\r\n//   function toRichText(text) {\r\n//     return [{\r\n//       type: \"rich_text\",\r\n//       elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\r\n//     }];\r\n//   }\r\n\r\n//   // Try to discover a suitable text column for the “Task” cell if you didn’t provide one\r\n//   async function resolveTitleColumnId(listId, provided) {\r\n//     if (provided) return { colId: provided, source: \"env\" };\r\n\r\n//     const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//     if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\r\n\r\n//     let candidate = null;\r\n//     for (const item of probe.items || []) {\r\n//       for (const f of item.fields || []) {\r\n//         const key = (f.key || \"\").trim().toLowerCase();\r\n//         const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\r\n//         if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\r\n//         if (!candidate && f.column_id && hasText) candidate = f.column_id;\r\n//       }\r\n//     }\r\n//     return { colId: candidate, source: \"auto:first_text\" };\r\n//   }\r\n\r\n//   try {\r\n//     // 1) Find the column to write the Task name into; fall back to top-level title\r\n//     const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\r\n\r\n//     const createBody = {\r\n//       list_id: cfg.id,\r\n//       ...(titleCol.colId\r\n//         ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\r\n//         : { title: safeTitle }), // fallback if we couldn’t resolve a column\r\n//     };\r\n\r\n//     const created = await slack(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 2) (Optional) Patch other columns you actually have IDs for\r\n//     const fields = [];\r\n//     const cols = cfg.cols || {};\r\n//     const addText = (colId, text) => {\r\n//       const t = plain(text);\r\n//       if (colId && t) fields.push({ column_id: colId, value: { text: t } });\r\n//     };\r\n\r\n//     // Description / Notes column (for tasks we include your assembled bodyText)\r\n//     if (cols.desc) {\r\n//       const bits = [\r\n//         plain(description),\r\n//         listKey === \"tasks\" ? plain(bodyText) : \"\",\r\n//         plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\",\r\n//       ].filter(Boolean).join(\"\\n\");\r\n//       addText(cols.desc, bits);\r\n//     }\r\n\r\n//     // Dates and grouped PN/SN/DOM example\r\n//     if (cols.date && plain(date)) fields.push({ column_id: cols.date, value: { date: plain(date) } });\r\n//     if (cols.pn) {\r\n//       const pnStr = joinArr(pn), snStr = joinArr(sn);\r\n//       const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.pn, combo);\r\n//     }\r\n//     if (cols.track) {\r\n//       const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n//         .filter(Boolean).join(\"  \");\r\n//       addText(cols.track, t);\r\n//     }\r\n//     if (cols.wo && plain(workOrder)) addText(cols.wo, `WO: ${plain(workOrder)}`);\r\n//     if (cols.lsn && plain(localSN)) addText(cols.lsn, plain(localSN));\r\n\r\n//     if (fields.length) {\r\n//       await slack(\"slackLists.items.update\", { list_id: cfg.id, item_id: created.item.id, fields });\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id: cfg.id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleCol.colId || null,\r\n//       title_col_source: titleCol.source || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n  }\r\n\r\n  try {\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) {\r\n      return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n    }\r\n\r\n    // Payload from client\r\n    const {\r\n      listKey,               // \"shipping\" | \"receiving\" | \"tasks\"\r\n      title,                 // what appears in the Task column\r\n      pn, sn,                // arrays or strings\r\n      localSN,               // fallback id\r\n    } = req.body || {};\r\n\r\n    // List config (IDs come from your .env). Only id is required.\r\n    const LISTS = {\r\n      shipping: {\r\n        id: process.env.SLACK_LIST_SHIPPING_ID,\r\n        titleColId: process.env.SLACK_LIST_SHIPPING_TITLE_COL || null, // optional\r\n        cols: {\r\n          pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL || null,\r\n        },\r\n      },\r\n      receiving: {\r\n        id: process.env.SLACK_LIST_RECEIVING_ID,\r\n        titleColId: process.env.SLACK_LIST_RECEIVING_TITLE_COL || null,\r\n        cols: {\r\n          pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL || null,\r\n        },\r\n      },\r\n      tasks: {\r\n        id: process.env.SLACK_LIST_TASKS_ID,\r\n        titleColId: process.env.SLACK_LIST_TASKS_TITLE_COL || null,\r\n        cols: {},\r\n      },\r\n    };\r\n\r\n    const cfg = LISTS[listKey];\r\n    if (!cfg?.id) {\r\n      return res.status(400).json({ ok: false, error: `unknown_or_unconfigured_listKey_${listKey}` });\r\n    }\r\n\r\n    // Helpers\r\n    const slack = async (method, payload, headers = { \"Content-Type\": \"application/json; charset=utf-8\" }) => {\r\n      const r = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: { Authorization: `Bearer ${token}`, ...headers },\r\n        body: typeof payload === \"string\" ? payload : JSON.stringify(payload),\r\n      });\r\n      return r.json();\r\n    };\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n    const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n    // Never send an empty title\r\n    const safeTitle =\r\n      plain(title) ||\r\n      (plain(localSN) ? `Item ${plain(localSN)}` : \"\") ||\r\n      joinArr(pn) ||\r\n      \"New Item\";\r\n\r\n    // Convert text to rich_text for the name column when we know its column_id\r\n    function toRichText(text) {\r\n      return [{\r\n        type: \"rich_text\",\r\n        elements: [{ type: \"rich_text_section\", elements: [{ type: \"text\", text }] }],\r\n      }];\r\n    }\r\n\r\n    // Auto-discover a text column that already shows the item name (works even if you don't know the id)\r\n    async function resolveTitleColumnId(listId, provided) {\r\n      if (provided) return { colId: provided, source: \"env\" };\r\n\r\n      const probe = await slack(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n      if (!probe?.ok) return { colId: null, source: \"auto\", error: probe?.error || \"items.list_failed\" };\r\n\r\n      let candidate = null;\r\n      for (const item of probe.items || []) {\r\n        for (const f of item.fields || []) {\r\n          const key = (f.key || \"\").trim().toLowerCase();\r\n          const hasText = Boolean(f.text) || Array.isArray(f.rich_text);\r\n          if (key === \"task\" && f.column_id && hasText) return { colId: f.column_id, source: \"auto:key_task\" };\r\n          if (!candidate && f.column_id && hasText) candidate = f.column_id;\r\n        }\r\n      }\r\n      return { colId: candidate, source: \"auto:first_text\" };\r\n    }\r\n\r\n    // 1) Create the item with the title only\r\n    const titleCol = await resolveTitleColumnId(cfg.id, cfg.titleColId);\r\n    const createBody = {\r\n      list_id: cfg.id,\r\n      ...(titleCol.colId\r\n        ? { initial_fields: [{ column_id: titleCol.colId, rich_text: toRichText(safeTitle) }] }\r\n        : { title: safeTitle }), // fallback if we couldn’t resolve a title column id\r\n    };\r\n    const created = await slack(\"slackLists.items.create\", createBody);\r\n    if (!created?.ok) {\r\n      return res.status(200).json({\r\n        ok: false,\r\n        error: created?.error || \"create_failed\",\r\n        mode: \"list\",\r\n        sent: createBody,\r\n      });\r\n    }\r\n\r\n    // 2) Patch PN/SN (ONLY) after creation — this actually sticks\r\n    const fields = [];\r\n    const pnCol = cfg.cols?.pn || null;\r\n    const pnStr = joinArr(pn);\r\n    const snStr = joinArr(sn);\r\n    const pnBlock = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`].filter(Boolean).join(\"  \");\r\n    if (pnCol && pnBlock) {\r\n      fields.push({ column_id: pnCol, value: { text: pnBlock } });\r\n    }\r\n\r\n    if (fields.length) {\r\n      const upd = await slack(\"slackLists.items.update\", {\r\n        list_id: cfg.id,\r\n        item_id: created.item.id,\r\n        fields,\r\n      });\r\n      if (!upd?.ok) {\r\n        // Not fatal for the creation itself — return both ids so you can see the row\r\n        return res.status(200).json({\r\n          ok: false,\r\n          error: upd?.error || \"update_failed\",\r\n          mode: \"list\",\r\n          list_id: cfg.id,\r\n          item_id: created.item.id,\r\n          sent_title: safeTitle,\r\n        });\r\n      }\r\n    }\r\n\r\n    return res.status(200).json({\r\n      ok: true,\r\n      mode: \"list\",\r\n      list_id: cfg.id,\r\n      item_id: created.item.id,\r\n      used_title_col: titleCol.colId || null,\r\n      title_col_source: titleCol.source || null,\r\n      sent_title: safeTitle,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API /slack/add-to-list crashed:\", err);\r\n    return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
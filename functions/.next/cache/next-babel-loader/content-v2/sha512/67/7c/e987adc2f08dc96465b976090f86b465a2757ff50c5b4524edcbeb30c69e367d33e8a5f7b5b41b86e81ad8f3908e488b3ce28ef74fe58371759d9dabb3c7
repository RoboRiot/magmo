{"ast":null,"code":"var __jsx = React.createElement;\nimport Head from \"next/head\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Card, Container, Alert } from \"react-bootstrap\";\nimport styles from \"../styles/Home.module.css\";\nimport { useAuth } from \"../context/AuthUserContext\";\nimport { useRouter } from \"next/router\";\nimport firebase, { auth } from \"../context/Firebase\";\nexport default function Home() {\n  const {\n    0: error,\n    1: setError\n  } = useState(\"\"); // Prevent our main-useEffect from hijacking the test-login flow:\n\n  const {\n    0: isTestLogin,\n    1: setIsTestLogin\n  } = useState(false);\n  const {\n    authUser,\n    loading,\n    signInWithGoogle\n  } = useAuth();\n  const router = useRouter();\n  const {\n    0: hasMounted,\n    1: setHasMounted\n  } = useState(false); // Ensure we are on the client side\n\n  useEffect(() => {\n    setHasMounted(true);\n  }, []); // Handle redirect result from Google Auth\n  // Handle redirect result from Google Auth (runs everywhere)\n\n  useEffect(() => {\n    if (hasMounted && !loading) {\n      auth.getRedirectResult().then(result => {\n        console.log(\"=== REDIRECT RESULT ===\");\n        console.log(\"Result:\", result);\n\n        if (result.credential) {\n          const destination = router.query.redirect || \"/NewSearch/mainSearch\";\n          console.log(\"User authenticated, redirecting to:\", destination);\n          router.replace(destination);\n        } else {\n          console.log(\"No credential found in redirect result\");\n        }\n      }).catch(error => {\n        console.error(\"Redirect result error:\", error);\n        setError(\"Authentication failed. Please try again.\");\n      });\n    }\n  }, [hasMounted, loading, router]); // If auth status is known and the user is already logged in, redirect them.\n\n  useEffect(() => {\n    if (isTestLogin) return; // ← skip for test login\n\n    if (hasMounted && !loading && authUser) {\n      const destination = router.query.redirect || \"/NewSearch/mainSearch\"; // use replace to avoid stacking multiple entries\n\n      router.replace(destination);\n    }\n  }, [isTestLogin, hasMounted, authUser, loading, router]);\n  if (!hasMounted) return null; // Prevent rendering until mounted\n  // Handle Google Sign-In\n\n  const handleGoogleSignIn = async () => {\n    setError(\"\");\n\n    try {\n      await signInWithGoogle(); // Note: With redirect, the user will be redirected to Google and then back to this page\n      // The redirect result will be handled in the useEffect above\n    } catch (err) {\n      setError(\"Failed to log in with Google\");\n    }\n  };\n\n  const handleTestLogin = async () => {\n    setError(\"\");\n    setIsTestLogin(true);\n    const password = prompt(\"Enter password:\");\n    if (!password) return;\n\n    try {\n      await firebase.auth().signInWithEmailAndPassword(\"test@test.com\", password); // now go to your custom test-search page:\n\n      router.replace(\"/NewSearch/searchTest\");\n    } catch (err) {\n      setError(\"Test login failed: \" + err.message);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Head, null, __jsx(\"title\", null, \"magmo\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\"\n  }), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1.0\"\n  })), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"MAGMO\"), error && __jsx(Alert, {\n    variant: \"danger\"\n  }, error), __jsx(Button, {\n    variant: \"light\",\n    className: \"w-100 d-flex align-items-center justify-content-center\",\n    onClick: handleGoogleSignIn,\n    style: {\n      border: \"1px solid #dadce0\",\n      borderRadius: \"0.375rem\",\n      color: \"#757575\",\n      padding: \"0.5rem 1rem\"\n    }\n  }, __jsx(\"img\", {\n    src: \"https://www.svgrepo.com/show/355037/google.svg\",\n    alt: \"Google logo\",\n    width: \"20\",\n    height: \"20\",\n    className: \"me-2\"\n  }), \"Sign in with Google\"), __jsx(Button, {\n    variant: \"secondary\",\n    className: \"w-100 mt-3\",\n    onClick: handleTestLogin\n  }, \"Test Login\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}
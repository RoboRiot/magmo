{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Modal, Button, Dropdown, FormControl, Spinner } from \"react-bootstrap\";\nimport { fetchModels } from \"../../../../utils/fetchAssociations\"; // Assuming you already have this\n\nexport default function MachineSelectionModal(_ref) {\n  var show = _ref.show,\n      handleClose = _ref.handleClose,\n      setMachine = _ref.setMachine;\n\n  var _useState = useState(null),\n      Modality = _useState[0],\n      setModality = _useState[1];\n\n  var _useState2 = useState(null),\n      OEM = _useState2[0],\n      setOEM = _useState2[1];\n\n  var _useState3 = useState([]),\n      models = _useState3[0],\n      setModels = _useState3[1];\n\n  var _useState4 = useState(null),\n      selectedModel = _useState4[0],\n      setSelectedModel = _useState4[1];\n\n  var _useState5 = useState(false),\n      loadingModels = _useState5[0],\n      setLoadingModels = _useState5[1]; // Fetch models when Modality and OEM are selected\n\n\n  useEffect(function () {\n    if (Modality && OEM) {\n      setLoadingModels(true);\n      fetchModels(OEM, Modality).then(function (fetchedModels) {\n        setModels(fetchedModels);\n        setLoadingModels(false);\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching models: \", error);\n        setLoadingModels(false);\n      });\n    }\n  }, [Modality, OEM]);\n\n  var handleModalitySelect = function handleModalitySelect(selectedModality) {\n    setModality(selectedModality);\n    setOEM(null); // Reset OEM and Model when Modality changes\n\n    setSelectedModel(null);\n  };\n\n  var handleOEMSelect = function handleOEMSelect(selectedOEM) {\n    setOEM(selectedOEM);\n    setSelectedModel(null); // Reset Model when OEM changes\n  };\n\n  var handleModelSelect = function handleModelSelect(model) {\n    setSelectedModel(model);\n  };\n\n  var handleSaveSelection = function handleSaveSelection() {\n    if (selectedModel) {\n      // Pass selected machine data back to the parent\n      setMachine({\n        Modality: Modality,\n        OEM: OEM,\n        Model: selectedModel\n      });\n      handleClose(); // Close the modal\n    }\n  };\n\n  return __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Machine\")), __jsx(Modal.Body, null, __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(Dropdown, {\n    onSelect: handleModalitySelect\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    className: \"w-100\"\n  }, Modality || \"Select Modality\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n    eventKey: \"CT\"\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\"\n  }, \"MRI\")))), Modality && __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(Dropdown, {\n    onSelect: handleOEMSelect\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    className: \"w-100\"\n  }, OEM || \"Select OEM\"), __jsx(Dropdown.Menu, null, __jsx(Dropdown.Item, {\n    eventKey: \"GE\"\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\"\n  }, \"Philips\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\"\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\"\n  }, \"Toshiba\")))), Modality && OEM && __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(FormControl, {\n    placeholder: \"Search models\",\n    \"aria-label\": \"Search models\",\n    \"aria-describedby\": \"basic-addon2\",\n    onChange: function onChange(e) {\n      return setSelectedModel(e.target.value);\n    }\n  }), loadingModels ? __jsx(Spinner, {\n    animation: \"border\"\n  }) : models.length > 0 && __jsx(Dropdown, {\n    onSelect: handleModelSelect\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    className: \"w-100\"\n  }, selectedModel || \"Select Model\"), __jsx(Dropdown.Menu, null, models.map(function (model) {\n    return __jsx(Dropdown.Item, {\n      key: model,\n      eventKey: model\n    }, model);\n  }))))), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleClose\n  }, \"Close\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleSaveSelection,\n    disabled: !selectedModel\n  }, \"Save Selection\")));\n}","map":null,"metadata":{},"sourceType":"module"}
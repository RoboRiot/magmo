{"ast":null,"code":"import _toConsumableArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Card, Row, Col, InputGroup, Dropdown, FormControl, Button, NavDropdown, Form, Modal, Spinner } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { fetchTestItemsWithMachineData, fetchClients, fetchModels, formatDate } from \"../../utils/testFetch\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport LoggedIn from \"../LoggedIn\";\nimport ClientTable from \"../../utils/ClientTable\";\nimport ModelTable from \"../../utils/ModelTable\";\nimport PartTable from \"../../utils/PartTable\";\nimport styles from \"../../styles/MainSearch.module.css\";\nimport firebase from \"../../context/Firebase\"; // Predefined warehouse client IDs and display names\n\nvar SOCAL_CLIENT_ID = \"AIS17182\";\nvar NORCAL_CLIENT_ID = \"AIS25097\";\nvar UNASSIGNED_CLIENT_ID = \"AIS00404\"; // Simulates a network request delay\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n} // Custom LoadingButton component\n\n\nfunction LoadingButton(_ref) {\n  var type = _ref.type,\n      name = _ref.name,\n      route = _ref.route;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1];\n\n  useEffect(function () {\n    if (isLoading) {\n      simulateNetworkRequest().then(function () {\n        return setLoading(false);\n      });\n    }\n  }, [isLoading]);\n  return __jsx(Link, {\n    href: \"/\".concat(route)\n  }, __jsx(\"a\", {\n    className: \"btn btn-\".concat(type),\n    disabled: isLoading,\n    onClick: function onClick() {\n      return !isLoading && setLoading(true);\n    }\n  }, isLoading ? \"Loadingâ€¦\" : name));\n}\n\nexport default function searchTest() {\n  var _useAuth = useAuth(),\n      signOut = _useAuth.signOut;\n\n  var _useState2 = useState([]),\n      info = _useState2[0],\n      setInfo = _useState2[1];\n\n  var _useState3 = useState([]),\n      backupInfo = _useState3[0],\n      setBackupInfo = _useState3[1];\n\n  var _useState4 = useState([]),\n      ids = _useState4[0],\n      setID = _useState4[1];\n\n  var _useState5 = useState(false),\n      show = _useState5[0],\n      setShow = _useState5[1];\n\n  var _useState6 = useState(),\n      dItem = _useState6[0],\n      setDItem = _useState6[1];\n\n  var _useState7 = useState(\"Name\"),\n      select = _useState7[0],\n      setSelect = _useState7[1];\n\n  var _useState8 = useState(false),\n      showList = _useState8[0],\n      setShowList = _useState8[1];\n\n  var _useState9 = useState(\"text\"),\n      showListSearch = _useState9[0],\n      setShowListSearch = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      search = _useState10[0],\n      setSearch = _useState10[1];\n\n  var _useState11 = useState(null),\n      selectedOEM = _useState11[0],\n      setSelectedOEM = _useState11[1];\n\n  var _useState12 = useState(null),\n      selectedModality = _useState12[0],\n      setSelectedModality = _useState12[1]; // Replace the old single client state with two sets:\n\n\n  var _useState13 = useState(null),\n      selectedClientFrom = _useState13[0],\n      setSelectedClientFrom = _useState13[1];\n\n  var _useState14 = useState(\"Select Option\"),\n      clientFromButtonText = _useState14[0],\n      setClientFromButtonText = _useState14[1];\n\n  var _useState15 = useState(null),\n      selectedClientCurrent = _useState15[0],\n      setSelectedClientCurrent = _useState15[1];\n\n  var _useState16 = useState(\"Select Option\"),\n      clientCurrentButtonText = _useState16[0],\n      setClientCurrentButtonText = _useState16[1];\n\n  var _useState17 = useState([]),\n      clients = _useState17[0],\n      setClients = _useState17[1];\n\n  var _useState18 = useState(false),\n      showClientModal = _useState18[0],\n      setShowClientModal = _useState18[1]; // This state tells the modal which client box is being updated: \"from\" or \"current\"\n\n\n  var _useState19 = useState(null),\n      clientSelectionType = _useState19[0],\n      setClientSelectionType = _useState19[1];\n\n  var router = useRouter();\n  var labelBase = [\"name\", \"date\", \"w/o\", \"p/n\", \"s/n\"];\n  var labelBaseNames = [\"name\", \"date\", \"wo\", \"pn\", \"sn\"];\n  var sortCheckBase = [false, false, false, false, false, false];\n\n  var _useState20 = useState(labelBase),\n      labels = _useState20[0],\n      setLabels = _useState20[1];\n\n  var _useState21 = useState(sortCheckBase),\n      sortCheck = _useState21[0],\n      setSortCheck = _useState21[1];\n\n  var _useState22 = useState(null),\n      hoverIndex = _useState22[0],\n      setHoverIndex = _useState22[1];\n\n  var _useState23 = useState(null),\n      selectedModel = _useState23[0],\n      setSelectedModel = _useState23[1];\n\n  var _useState24 = useState(null),\n      gPos = _useState24[0],\n      setGPos = _useState24[1];\n\n  var _useState25 = useState(null),\n      gIde = _useState25[0],\n      setGIde = _useState25[1];\n\n  var _useState26 = useState(false),\n      isDeleting = _useState26[0],\n      setIsDeleting = _useState26[1]; // Fetch data on component mount and route change\n\n\n  useEffect(function () {\n    fetchData();\n  }, [router.route]);\n\n  function fetchData() {\n    return _fetchData.apply(this, arguments);\n  }\n\n  function _fetchData() {\n    _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (router.query.inputText && router.query.selectedType) {\n                setSelect(router.query.selectedType);\n                setSearch(router.query.inputText);\n              }\n\n              _context9.next = 3;\n              return fetchTestItemsWithMachineData();\n\n            case 3:\n              data = _context9.sent;\n              setInfo(data);\n              setBackupInfo(data);\n              setID(data.map(function (item) {\n                return item.id;\n              })); // Ensure IDs are correctly set here\n\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _fetchData.apply(this, arguments);\n  }\n\n  var searchChangeHandler = function searchChangeHandler(event) {\n    return setSearch(event.target.value);\n  }; // Asynchronous filter function that loops through backupInfo and,\n  // for each item, fetches its Machine and CurrentMachine documents,\n  // then compares the client id (from machineData.client.id) to the selected client.\n\n\n  useEffect(function () {\n    function filterParts() {\n      return _filterParts.apply(this, arguments);\n    }\n\n    function _filterParts() {\n      _filterParts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var filtered, filteredResults;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(\"filterParts called with selectedClientFrom:\", selectedClientFrom, \"selectedClientCurrent:\", selectedClientCurrent);\n                _context2.next = 3;\n                return Promise.all(backupInfo.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {\n                    var passes, machineSnap, machineData, clientFromId, currentMachineSnap, currentMachineData, clientCurrentId, _item$date$split, _item$date$split2, month, day, year, reformattedDate;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (item.visible) {\n                              _context.next = 2;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", null);\n\n                          case 2:\n                            passes = true; // Check OEM, Modality, and Model from machineData (if available)\n\n                            if (item.machineData) {\n                              if (selectedOEM && item.machineData.OEM !== selectedOEM) passes = false;\n                              if (selectedModality && item.machineData.Modality !== selectedModality) passes = false;\n                              if (selectedModel && item.machineData.Model !== selectedModel) passes = false;\n                            } // For Client From: use the partâ€™s Machine reference\n\n\n                            if (!(passes && selectedClientFrom)) {\n                              _context.next = 21;\n                              break;\n                            }\n\n                            if (item.Machine) {\n                              _context.next = 10;\n                              break;\n                            }\n\n                            console.log(\"Item \".concat(item.id, \" has no Machine reference.\"));\n                            passes = false;\n                            _context.next = 21;\n                            break;\n\n                          case 10:\n                            _context.prev = 10;\n                            _context.next = 13;\n                            return item.Machine.get();\n\n                          case 13:\n                            machineSnap = _context.sent;\n\n                            if (!machineSnap.exists) {\n                              console.log(\"Item \".concat(item.id, \" Machine document does not exist.\"));\n                              passes = false;\n                            } else {\n                              machineData = machineSnap.data();\n\n                              if (!machineData.client) {\n                                console.log(\"Item \".concat(item.id, \" Machine has no client reference.\"));\n                                passes = false;\n                              } else {\n                                // Get the client id from the DocumentReference\n                                clientFromId = machineData.client.id;\n                                console.log(\"Item \".concat(item.id, \": fetched Client From id = \").concat(clientFromId, \", selectedClientFrom = \").concat(selectedClientFrom));\n                                if (clientFromId !== selectedClientFrom) passes = false;\n                              }\n                            }\n\n                            _context.next = 21;\n                            break;\n\n                          case 17:\n                            _context.prev = 17;\n                            _context.t0 = _context[\"catch\"](10);\n                            console.error(\"Error fetching Machine for item \".concat(item.id, \":\"), _context.t0);\n                            passes = false;\n\n                          case 21:\n                            if (!(passes && selectedClientCurrent)) {\n                              _context.next = 38;\n                              break;\n                            }\n\n                            if (item.CurrentMachine) {\n                              _context.next = 27;\n                              break;\n                            }\n\n                            console.log(\"Item \".concat(item.id, \" has no CurrentMachine reference.\"));\n                            passes = false;\n                            _context.next = 38;\n                            break;\n\n                          case 27:\n                            _context.prev = 27;\n                            _context.next = 30;\n                            return item.CurrentMachine.get();\n\n                          case 30:\n                            currentMachineSnap = _context.sent;\n\n                            if (!currentMachineSnap.exists) {\n                              console.log(\"Item \".concat(item.id, \" CurrentMachine document does not exist.\"));\n                              passes = false;\n                            } else {\n                              currentMachineData = currentMachineSnap.data();\n\n                              if (!currentMachineData.client) {\n                                console.log(\"Item \".concat(item.id, \" CurrentMachine has no client reference.\"));\n                                passes = false;\n                              } else {\n                                clientCurrentId = currentMachineData.client.id;\n                                console.log(\"Item \".concat(item.id, \": fetched Client Current id = \").concat(clientCurrentId, \", selectedClientCurrent = \").concat(selectedClientCurrent));\n                                if (clientCurrentId !== selectedClientCurrent) passes = false;\n                              }\n                            }\n\n                            _context.next = 38;\n                            break;\n\n                          case 34:\n                            _context.prev = 34;\n                            _context.t1 = _context[\"catch\"](27);\n                            console.error(\"Error fetching CurrentMachine for item \".concat(item.id, \":\"), _context.t1);\n                            passes = false;\n\n                          case 38:\n                            // If search text is not empty, apply additional filtering\n                            if (passes && search !== \"\") {\n                              if (select === \"Name\" && !item.name.toLowerCase().includes(search.toLowerCase())) passes = false;\n\n                              if (select === \"Date\") {\n                                _item$date$split = item.date.split(\"/\"), _item$date$split2 = _slicedToArray(_item$date$split, 3), month = _item$date$split2[0], day = _item$date$split2[1], year = _item$date$split2[2];\n                                reformattedDate = \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n                                if (reformattedDate !== search) passes = false;\n                              }\n\n                              if (select === \"Work Order\" && item.wo !== search) passes = false;\n                              if (select === \"Product Number\" && item.pn !== search) passes = false;\n                              if (select === \"Description\" && !item.desc.toLowerCase().includes(search.toLowerCase())) passes = false;\n                              if (select === \"SKU\" && !item.id.toLowerCase().includes(search.toLowerCase())) passes = false;\n                            }\n\n                            return _context.abrupt(\"return\", passes ? item : null);\n\n                          case 40:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[10, 17], [27, 34]]);\n                  }));\n\n                  return function (_x) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n                filtered = _context2.sent;\n                filteredResults = filtered.filter(function (item) {\n                  return item !== null;\n                });\n                console.log(\"Filtered result count:\", filteredResults.length);\n                setInfo(filteredResults);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _filterParts.apply(this, arguments);\n    }\n\n    filterParts();\n  }, [selectedOEM, selectedModality, selectedClientFrom, selectedClientCurrent, selectedModel, search, backupInfo]);\n\n  function sortCheckAll(pos) {\n    var sortedInfo = _toConsumableArray(info).sort(function (a, b) {\n      if (pos === 0 || pos === 5) {\n        return sortCheck[pos] ? b[labelBaseNames[pos]].localeCompare(a[labelBaseNames[pos]]) : a[labelBaseNames[pos]].localeCompare(b[labelBaseNames[pos]]);\n      }\n\n      if (pos === 1) {\n        return sortCheck[pos] ? Date.parse(b[labelBaseNames[pos]]) - Date.parse(a[labelBaseNames[pos]]) : Date.parse(a[labelBaseNames[pos]]) - Date.parse(b[labelBaseNames[pos]]);\n      }\n\n      return sortCheck[pos] ? Number(b[labelBaseNames[pos]]) - Number(a[labelBaseNames[pos]]) : Number(a[labelBaseNames[pos]]) - Number(b[labelBaseNames[pos]]);\n    });\n\n    setInfo(sortedInfo);\n    setSortCheck(function (prevSortCheck) {\n      return prevSortCheck.map(function (_, index) {\n        return index === pos ? !prevSortCheck[pos] : prevSortCheck[index];\n      });\n    });\n  }\n\n  var rowSelect = function rowSelect(item) {\n    if (item && item.id) {\n      console.log(\"Selected item:\", item);\n      router.push(\"./item/\" + item.id);\n    } else {\n      console.error(\"Unable to determine the selected itemâ€™s ID: \", item);\n    }\n  };\n\n  var _useState27 = useState([]),\n      selectedItems = _useState27[0],\n      setSelectedItems = _useState27[1];\n\n  var _useState28 = useState(false),\n      showDeleteModal = _useState28[0],\n      setShowDeleteModal = _useState28[1];\n\n  var handleSelectItem = function handleSelectItem(id) {\n    setSelectedItems(function (prev) {\n      var newSelection = prev.includes(id) ? prev.filter(function (itemId) {\n        return itemId !== id;\n      }) : [].concat(_toConsumableArray(prev), [id]);\n      console.log(\"Selected items:\", newSelection);\n    });\n  };\n\n  var handleShowDeleteModal = function handleShowDeleteModal() {\n    return setShowDeleteModal(true);\n  };\n\n  var handleCloseDeleteModal = function handleCloseDeleteModal() {\n    return setShowDeleteModal(false);\n  };\n\n  var handleDeleteSelected = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var db, _iterator, _step, itemId;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setIsDeleting(true);\n              db = firebase.firestore();\n              _context3.prev = 2;\n              // Loop over each selected item one at a time\n              _iterator = _createForOfIteratorHelper(selectedItems);\n              _context3.prev = 4;\n\n              _iterator.s();\n\n            case 6:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 35;\n                break;\n              }\n\n              itemId = _step.value;\n              console.log(itemId);\n              _context3.prev = 9;\n              _context3.next = 12;\n              return db.collection(\"TestItem\").doc(itemId)[\"delete\"]();\n\n            case 12:\n              _context3.next = 17;\n              break;\n\n            case 14:\n              _context3.prev = 14;\n              _context3.t0 = _context3[\"catch\"](9);\n              console.error(\"Error deleting document \".concat(itemId, \" from TestItem:\"), _context3.t0);\n\n            case 17:\n              _context3.prev = 17;\n              _context3.next = 20;\n              return db.collection(\"Parts\").doc(itemId)[\"delete\"]();\n\n            case 20:\n              _context3.next = 25;\n              break;\n\n            case 22:\n              _context3.prev = 22;\n              _context3.t1 = _context3[\"catch\"](17);\n              console.error(\"Error deleting document \".concat(itemId, \" from Parts:\"), _context3.t1);\n\n            case 25:\n              _context3.prev = 25;\n              _context3.next = 28;\n              return deleteFromStorage(itemId);\n\n            case 28:\n              _context3.next = 33;\n              break;\n\n            case 30:\n              _context3.prev = 30;\n              _context3.t2 = _context3[\"catch\"](25);\n              console.error(\"Error deleting storage for \".concat(itemId, \":\"), _context3.t2);\n\n            case 33:\n              _context3.next = 6;\n              break;\n\n            case 35:\n              _context3.next = 40;\n              break;\n\n            case 37:\n              _context3.prev = 37;\n              _context3.t3 = _context3[\"catch\"](4);\n\n              _iterator.e(_context3.t3);\n\n            case 40:\n              _context3.prev = 40;\n\n              _iterator.f();\n\n              return _context3.finish(40);\n\n            case 43:\n              // Update local state by filtering out the deleted items\n              setInfo(info.filter(function (item) {\n                return !selectedItems.includes(item.id);\n              }));\n              setSelectedItems([]);\n              _context3.next = 50;\n              break;\n\n            case 47:\n              _context3.prev = 47;\n              _context3.t4 = _context3[\"catch\"](2);\n              console.error(\"Error deleting items:\", _context3.t4);\n\n            case 50:\n              _context3.prev = 50;\n              setIsDeleting(false);\n              handleCloseDeleteModal(); // Optionally, reload the page\n              // router.reload();\n\n              return _context3.finish(50);\n\n            case 54:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 47, 50, 54], [4, 37, 40, 43], [9, 14], [17, 22], [25, 30]]);\n    }));\n\n    return function handleDeleteSelected() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  var checkDelete = function checkDelete(event, pos, idsToDelete, name) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    console.log(\"Selected IDs to delete:\", idsToDelete);\n    setSelectedItems(idsToDelete);\n    setDItem(name);\n    setShowDeleteModal(true);\n  }; // const handleDelete = async () => {\n  //   let itemId = gIde;\n  //   try {\n  //     setIsDeleting(true);\n  //     const db = firebase.firestore();\n  //     await db.collection(\"Test\").doc(itemId).delete();\n  //     await deleteFromPartsCollection(itemId);\n  //     await deleteFromStorage(itemId);\n  //     setInfo(info.filter((_, i) => gPos !== i));\n  //     console.log(`Deleted item: ${itemId}`);\n  //   } catch (error) {\n  //     console.error(\"Error deleting item:\", error);\n  //   } finally {\n  //     setIsDeleting(false);\n  //   }\n  //   handleClose();\n  // };\n\n\n  var hoverStyle = function hoverStyle(index) {\n    return {\n      backgroundColor: hoverIndex === index ? \"#ddd\" : \"transparent\",\n      textAlign: \"center\",\n      cursor: \"default\"\n    };\n  };\n\n  var _useState29 = useState(\"Select Option\"),\n      dropdown1Text = _useState29[0],\n      setDropdown1Text = _useState29[1];\n\n  var _useState30 = useState(\"Select Option\"),\n      dropdown2Text = _useState30[0],\n      setDropdown2Text = _useState30[1];\n\n  var handleSelect1 = function handleSelect1(eventKey, event) {\n    if (eventKey === \"unassigned\") {\n      setDropdown1Text(\"Select Option\");\n      setSelectedOEM(null);\n    } else {\n      setDropdown1Text(event.target.textContent);\n      setSelectedOEM(event.target.textContent);\n    }\n  };\n\n  var handleSelect2 = function handleSelect2(eventKey, event) {\n    if (eventKey === \"unassigned\") {\n      setDropdown2Text(\"Select Option\");\n      setSelectedModality(null);\n    } else {\n      setDropdown2Text(event.target.textContent);\n      setSelectedModality(event.target.textContent);\n    }\n  }; // --------------------\n  // CLIENT SELECTION HANDLING\n  // --------------------\n  // This function fetches clients and opens the client modal.\n\n\n  var handleClientClick = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var clientsData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetchClients(selectedOEM, selectedModality);\n\n            case 2:\n              clientsData = _context4.sent;\n              setClients(clientsData);\n              setClientSearchTerm(\"\");\n              setShowClientModal(true);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleClientClick() {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // When a client is selected in the modal, we now assume the parameter is a client ID.\n  // If the passed value is null, we clear the selection.\n\n\n  var handleClientSelect = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(clientId) {\n      var clientSnap, clientData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log(\"User selected client id:\", clientId);\n\n              if (clientId) {\n                _context5.next = 5;\n                break;\n              }\n\n              if (clientSelectionType === \"from\") {\n                setClientFromButtonText(\"Select Option\");\n                setSelectedClientFrom(null);\n              } else if (clientSelectionType === \"current\") {\n                setClientCurrentButtonText(\"Select Option\");\n                setSelectedClientCurrent(null);\n              }\n\n              setShowClientModal(false);\n              return _context5.abrupt(\"return\");\n\n            case 5:\n              _context5.prev = 5;\n              _context5.next = 8;\n              return firebase.firestore().collection(\"Client\").doc(clientId).get();\n\n            case 8:\n              clientSnap = _context5.sent;\n\n              if (clientSnap.exists) {\n                clientData = clientSnap.data();\n\n                if (clientSelectionType === \"from\") {\n                  setClientFromButtonText(clientData.name);\n                  setSelectedClientFrom(clientId);\n                } else if (clientSelectionType === \"current\") {\n                  setClientCurrentButtonText(clientData.name);\n                  setSelectedClientCurrent(clientId);\n                }\n              } else {\n                console.error(\"No client document found for id:\", clientId);\n              }\n\n              _context5.next = 15;\n              break;\n\n            case 12:\n              _context5.prev = 12;\n              _context5.t0 = _context5[\"catch\"](5);\n              console.error(\"Error fetching client data:\", _context5.t0);\n\n            case 15:\n              setShowClientModal(false);\n\n            case 16:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[5, 12]]);\n    }));\n\n    return function handleClientSelect(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var handleClientInfo = function handleClientInfo(clientId, clientName) {\n    console.log(\"Client ID: \".concat(clientId, \", Client Name: \").concat(clientName));\n    router.push(\"client/\" + clientId);\n  };\n\n  var handleClearClientSelection = function handleClearClientSelection() {\n    if (clientSelectionType === \"from\") {\n      setClientFromButtonText(\"Select Option\");\n      setSelectedClientFrom(null);\n    } else if (clientSelectionType === \"current\") {\n      setClientCurrentButtonText(\"Select Option\");\n      setSelectedClientCurrent(null);\n    }\n\n    setShowClientModal(false);\n  }; // --------------------\n  // MODEL SELECTION HANDLING\n  // --------------------\n\n\n  var _useState31 = useState([]),\n      models = _useState31[0],\n      setModels = _useState31[1];\n\n  var _useState32 = useState(false),\n      showModelModal = _useState32[0],\n      setShowModelModal = _useState32[1];\n\n  var _useState33 = useState(\"Select Option\"),\n      modelButtonText = _useState33[0],\n      setModelButtonText = _useState33[1];\n\n  var handleModelClick = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var modelsData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetchModels(selectedOEM, selectedModality, selectedClientFrom);\n\n            case 2:\n              modelsData = _context6.sent;\n              setModels(modelsData);\n              setModelSearchTerm(\"\");\n              setShowModelModal(true);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function handleModelClick() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var handleModelSelect = function handleModelSelect(modelName) {\n    setModelButtonText(modelName || \"Select Option\");\n    setSelectedModel(modelName || null);\n    setShowModelModal(false);\n  };\n\n  var handleClearModelSelection = function handleClearModelSelection() {\n    setModelButtonText(\"Select Option\");\n    setSelectedModel(null);\n    setShowModelModal(false);\n  }; // --------------------\n  // WAREHOUSE BUTTONS (for Client Current)\n  // --------------------\n\n\n  var handleSoCalWarehouseClick = function handleSoCalWarehouseClick() {\n    setClientCurrentButtonText(\"SoCal Warehouse\");\n    setSelectedClientCurrent(SOCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", SOCAL_CLIENT_ID);\n  };\n\n  var handleNorCalWarehouseClick = function handleNorCalWarehouseClick() {\n    setClientCurrentButtonText(\"NorCal Warehouse\");\n    setSelectedClientCurrent(NORCAL_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", NORCAL_CLIENT_ID);\n  };\n\n  var handleWarehouseUnassignedClick = function handleWarehouseUnassignedClick() {\n    setClientCurrentButtonText(\"Unassigned\");\n    setSelectedClientCurrent(UNASSIGNED_CLIENT_ID);\n    console.log(\"Warehouse button clicked: setting Client Current to\", UNASSIGNED_CLIENT_ID);\n  };\n\n  var _useState34 = useState(\"\"),\n      clientSearchTerm = _useState34[0],\n      setClientSearchTerm = _useState34[1];\n\n  var _useState35 = useState(\"\"),\n      modelSearchTerm = _useState35[0],\n      setModelSearchTerm = _useState35[1];\n\n  var deleteFromStorage = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(itemId) {\n      var storageRef, folderRef, listResult, deletePromises;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              storageRef = firebase.storage().ref();\n              folderRef = storageRef.child(\"Parts/\".concat(itemId, \"/\"));\n              _context7.prev = 2;\n              _context7.next = 5;\n              return folderRef.listAll();\n\n            case 5:\n              listResult = _context7.sent;\n              deletePromises = listResult.items.map(function (item) {\n                return item[\"delete\"]();\n              });\n              _context7.next = 9;\n              return Promise.all(deletePromises);\n\n            case 9:\n              _context7.next = 14;\n              break;\n\n            case 11:\n              _context7.prev = 11;\n              _context7.t0 = _context7[\"catch\"](2);\n              console.error(\"Error deleting from storage:\", _context7.t0);\n\n            case 14:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[2, 11]]);\n    }));\n\n    return function deleteFromStorage(_x3) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var deleteFromPartsCollection = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(itemId) {\n      var db;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              db = firebase.firestore();\n              _context8.prev = 1;\n              _context8.next = 4;\n              return db.collection(\"Parts\").doc(itemId)[\"delete\"]();\n\n            case 4:\n              console.log(\"Deleted item from Parts collection: \".concat(itemId));\n              _context8.next = 10;\n              break;\n\n            case 7:\n              _context8.prev = 7;\n              _context8.t0 = _context8[\"catch\"](1);\n              console.error(\"Error deleting from Parts collection:\", _context8.t0);\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[1, 7]]);\n    }));\n\n    return function deleteFromPartsCollection(_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(LoggedIn, null, isDeleting && __jsx(\"div\", {\n    className: \"loading-overlay\"\n  }, __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    className: \"spinner-center\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Loading...\"))), __jsx(Modal, {\n    show: showDeleteModal,\n    onHide: handleCloseDeleteModal\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Confirm Deletion\")), __jsx(Modal.Body, null, \"Are you sure you want to delete \", selectedItems.length, \" item\", selectedItems.length > 1 ? \"s\" : \"\", \"?\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"danger\",\n    onClick: handleDeleteSelected\n  }, \"Yes, delete\"), __jsx(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseDeleteModal\n  }, \"Cancel\"))), __jsx(Modal, {\n    show: showClientModal,\n    onHide: function onHide() {\n      return setShowClientModal(false);\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select \", clientSelectionType === \"from\" ? \"Client From\" : \"Client Current\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: clientSearchTerm,\n    onChange: function onChange(e) {\n      return setClientSearchTerm(e.target.value);\n    }\n  }), __jsx(ClientTable, {\n    clients: clients.filter(function (client) {\n      return client.name.toLowerCase().includes(clientSearchTerm.toLowerCase());\n    }),\n    onSelectClient: handleClientSelect,\n    onInfoClick: handleClientInfo,\n    isClientSearch: false,\n    clearSelection: function clearSelection() {\n      return handleClientSelect(null);\n    }\n  }))), __jsx(Modal, {\n    show: showModelModal,\n    onHide: function onHide() {\n      return setShowModelModal(false);\n    }\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Select Model\")), __jsx(Modal.Body, null, __jsx(FormControl, {\n    type: \"text\",\n    placeholder: \"Search by name\",\n    className: \"mb-3\",\n    value: modelSearchTerm,\n    onChange: function onChange(e) {\n      return setModelSearchTerm(e.target.value);\n    }\n  }), __jsx(ModelTable, {\n    models: models.filter(function (model) {\n      return typeof model === \"string\" ? model.toLowerCase().includes(modelSearchTerm.toLowerCase()) : false;\n    }),\n    onSelectModel: handleModelSelect,\n    clearSelection: function clearSelection() {\n      return handleModelSelect(null);\n    }\n  }))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"1200px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Magmo\"), __jsx(Row, null, __jsx(Col, {\n    md: 4\n  }, __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"OEM\"), __jsx(Dropdown, {\n    onSelect: handleSelect1\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-1\",\n    className: \"w-100\"\n  }, dropdown1Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"GE\"\n  }, \"GE\"), __jsx(Dropdown.Item, {\n    eventKey: \"Toshiba\"\n  }, \"Toshiba\"), __jsx(Dropdown.Item, {\n    eventKey: \"Siemens\"\n  }, \"Siemens\"), __jsx(Dropdown.Item, {\n    eventKey: \"Philips\"\n  }, \"Philips\")))), __jsx(InputGroup, {\n    className: \"mb-5\"\n  }, __jsx(InputGroup.Text, null, \"Modality\"), __jsx(Dropdown, {\n    onSelect: handleSelect2\n  }, __jsx(Dropdown.Toggle, {\n    variant: \"outline-secondary\",\n    id: \"dropdown-button-2\",\n    className: \"w-100\"\n  }, dropdown2Text), __jsx(Dropdown.Menu, {\n    className: \"w-100\"\n  }, __jsx(Dropdown.Item, {\n    eventKey: \"unassigned\"\n  }, \"Select Option\"), __jsx(Dropdown.Item, {\n    eventKey: \"CT\"\n  }, \"CT\"), __jsx(Dropdown.Item, {\n    eventKey: \"MRI\"\n  }, \"MRI\"))))), __jsx(\"div\", {\n    className: styles.divider\n  }), __jsx(\"div\", null, __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client From\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: function onClick() {\n      setClientSelectionType(\"from\");\n      handleClientClick();\n    }\n  }, clientFromButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Client Current\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: function onClick() {\n      setClientSelectionType(\"current\");\n      handleClientClick();\n    }\n  }, clientCurrentButtonText)), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Model\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: \"w-100\",\n    onClick: handleModelClick\n  }, modelButtonText)), __jsx(\"div\", {\n    className: styles.divider\n  }), __jsx(InputGroup, {\n    className: \"mb-3\"\n  }, __jsx(InputGroup.Text, null, \"Warehouse\"), __jsx(\"div\", {\n    className: styles.buttonGroup\n  }, __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleSoCalWarehouseClick\n  }, \"SoCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleNorCalWarehouseClick\n  }, \"NorCal Warehouse\"), __jsx(Button, {\n    variant: \"outline-secondary\",\n    className: styles.flexButton,\n    onClick: handleWarehouseUnassignedClick\n  }, \"Unassigned\"))))), __jsx(Col, {\n    md: 8\n  }, __jsx(\"div\", {\n    className: styles.tableContainer\n  }, __jsx(PartTable, {\n    info: info,\n    labels: labels,\n    ids: ids,\n    hoverStyle: hoverStyle,\n    sortCheckAll: sortCheckAll,\n    checkDelete: checkDelete,\n    isDeleting: isDeleting,\n    rowSelect: rowSelect,\n    setHoverIndex: setHoverIndex,\n    hoverIndex: hoverIndex,\n    selectedItems: selectedItems // Pass selectedItems state\n    ,\n    setSelectedItems: setSelectedItems // Pass its setter\n\n  }), __jsx(\"div\", {\n    className: styles.searchContainer\n  }, __jsx(Form, {\n    className: \"d-flex pb-2\"\n  }, __jsx(FormControl, {\n    type: showListSearch,\n    placeholder: \"Search\",\n    className: \"me-2 flex-grow-1\",\n    \"aria-label\": \"Search\",\n    value: search,\n    onChange: searchChangeHandler,\n    style: {\n      flex: \"1\"\n    }\n  }), __jsx(NavDropdown, {\n    title: select,\n    id: \"collasible-nav-dropdown\",\n    show: showList,\n    onMouseEnter: function onMouseEnter() {\n      return setShowList(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setShowList(false);\n    },\n    style: {\n      marginTop: \"-5px\"\n    }\n  }, __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      setSelect(\"Name\");\n      setShowListSearch(\"text\");\n    }\n  }, \"Name\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      setSelect(\"Date\");\n      setShowListSearch(\"date\");\n    }\n  }, \"Date\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      setSelect(\"Work Order\");\n      setShowListSearch(\"number\");\n    }\n  }, \"Work Order\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      setSelect(\"Product Number\");\n      setShowListSearch(\"number\");\n    }\n  }, \"Product Number\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      setSelect(\"Description\");\n      setShowListSearch(\"text\");\n    }\n  }, \"Description\"), __jsx(NavDropdown.Item, {\n    onClick: function onClick() {\n      setSelect(\"SKU\");\n      setShowListSearch(\"text\");\n    }\n  }, \"SKU\"))), __jsx(\"div\", {\n    className: \"d-flex justify-content-between\"\n  }, __jsx(LoadingButton, {\n    type: \"secondary\",\n    name: \"Add New Item\",\n    route: \"NewSearch/AddItem/NewItem\"\n  }), __jsx(LoadingButton, {\n    type: \"primary\",\n    name: \"Back\",\n    route: \"Warehousedb/WarehouseSelect\"\n  })))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
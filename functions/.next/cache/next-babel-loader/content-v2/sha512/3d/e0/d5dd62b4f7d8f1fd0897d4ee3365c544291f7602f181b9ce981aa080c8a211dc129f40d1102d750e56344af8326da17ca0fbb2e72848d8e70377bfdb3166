{"ast":null,"code":"// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n\n  try {\n    var _req$body;\n\n    const token = process.env.SLACK_BOT_TOKEN;\n    if (!token) return res.status(500).json({\n      error: \"Missing SLACK_BOT_TOKEN\"\n    });\n    const {\n      listKey,\n      // \"receiving\" | \"shipping\" | \"tasks\"\n      title,\n      linkUrl,\n      bodyText,\n      date,\n      pn,\n      sn,\n      dom,\n      trackingNumber,\n      poNumber,\n      workOrder,\n      localSN,\n      description,\n      photoUrls = []\n    } = req.body;\n    const LISTS = {\n      receiving: {\n        id: process.env.SLACK_LIST_RECEIVING_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n          date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n          pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n          track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n          wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n          lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n          photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment\n\n        }\n      },\n      shipping: {\n        id: process.env.SLACK_LIST_SHIPPING_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n          date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n          pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n          track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n          wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n          lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n          photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment\n\n        }\n      },\n      tasks: {\n        id: process.env.SLACK_LIST_TASKS_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n        }\n      }\n    };\n    const CHANNELS = {\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n      shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n      tasks: process.env.SLACK_CHANNEL_TASKS_ID\n    };\n    const headersJson = {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    };\n\n    const slack = (method, body, headers = headersJson) => fetch(`https://slack.com/api/${method}`, {\n      method: \"POST\",\n      headers,\n      body\n    }).then(r => r.json());\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const safe = plain;\n\n    const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // ---------- PATH A: Write to a LIST ----------\n\n\n    const cfg = LISTS[listKey];\n\n    if (cfg !== null && cfg !== void 0 && cfg.id) {\n      const fields = []; // Description column\n\n      if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n        const textBits = [description, listKey === \"tasks\" && bodyText ? bodyText : null, linkUrl ? `<${linkUrl}|Open in Magmo>` : null].filter(Boolean).join(\"\\n\");\n        fields.push({\n          column_id: cfg.cols.desc,\n          value: {\n            text: textBits\n          }\n        });\n      }\n\n      if (cfg.cols.date && date) fields.push({\n        column_id: cfg.cols.date,\n        value: {\n          date\n        }\n      });\n\n      if (cfg.cols.pn && (pn || sn || dom)) {\n        const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : pn ? `PN: ${pn}` : \"\";\n        const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : sn ? `SN: ${sn}` : \"\";\n        const domLine = dom ? `DOM: ${dom}` : \"\";\n        const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n        if (pnBlock) fields.push({\n          column_id: cfg.cols.pn,\n          value: {\n            text: pnBlock\n          }\n        });\n      }\n\n      if (cfg.cols.track && (trackingNumber || poNumber)) {\n        const t = [trackingNumber ? `RL: ${trackingNumber}` : \"\", poNumber ? `PO: ${poNumber}` : \"\"].filter(Boolean).join(\"  \");\n        if (t) fields.push({\n          column_id: cfg.cols.track,\n          value: {\n            text: t\n          }\n        });\n      }\n\n      if (cfg.cols.wo && workOrder) fields.push({\n        column_id: cfg.cols.wo,\n        value: {\n          text: `WO: ${workOrder}`\n        }\n      });\n      if (cfg.cols.lsn && localSN) fields.push({\n        column_id: cfg.cols.lsn,\n        value: {\n          text: localSN\n        }\n      }); // NOW build the create body (cfg & fields exist)\n\n      const createBody = {\n        list_id: cfg.id,\n        title: plain(title) || plain(localSN) || \"Untitled\",\n        fields\n      };\n      const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n\n      if (!(created !== null && created !== void 0 && created.ok)) {\n        console.error(\"slackLists.items.create error:\", created);\n        return res.status(400).json({\n          error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n          raw: created\n        });\n      } // Photos -> attachment column\n\n\n      if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n        const fileIds = [];\n\n        for (const url of photoUrls) {\n          var _complete$files, _complete$files$;\n\n          const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n            method: \"POST\",\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: new URLSearchParams({\n              filename: url.split(\"/\").pop() || \"image.jpg\"\n            })\n          }).then(r => r.json());\n          if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n          try {\n            const img = await fetch(url);\n            const buf = await img.arrayBuffer();\n            await fetch(init.upload_url, {\n              method: \"PUT\",\n              body: Buffer.from(buf)\n            });\n          } catch (_) {}\n\n          const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n            files: [{\n              id: init.file_id,\n              title: \"photo\"\n            }]\n          }));\n          if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) fileIds.push(complete.files[0].id);\n        }\n\n        if (fileIds.length) {\n          await slack(\"slackLists.items.update\", JSON.stringify({\n            list_id: cfg.id,\n            item_id: created.item.id,\n            fields: [{\n              column_id: cfg.cols.photos,\n              value: {\n                attachment: {\n                  file_ids: fileIds\n                }\n              }\n            }]\n          }));\n        }\n      }\n\n      return res.status(200).json({\n        ok: true,\n        mode: \"list\",\n        list_id: cfg.id,\n        item_id: created.item.id\n      });\n    } // ---------- PATH B: Fallback to a channel post ----------\n\n\n    const channel = CHANNELS[listKey];\n    if (!channel) return res.status(400).json({\n      error: \"Unknown listKey (no list or channel configured)\"\n    }); // Try to join public channels to avoid channel_not_found\n\n    await fetch(\"https://slack.com/api/conversations.join\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        channel\n      })\n    });\n    const safeId = plain(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop()) || plain(localSN) || \"\";\n    const safeTitle = plain(title) || plain((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n    const lines = [];\n    lines.push(`*${safeTitle}*`);\n    const pnStr = joinArr(pn);\n    const snStr = joinArr(sn);\n    if (pnStr) lines.push(`PN: ${pnStr}`);\n    if (snStr) lines.push(`SN: ${snStr}`);\n    if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n    if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n    if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n    if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n    if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n    if (safe(date)) lines.push(`Date: ${safe(date)}`);\n    const desc = safe(description);\n    if (desc) lines.push(desc);else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n    if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n    const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n    const posted = await slack(\"chat.postMessage\", JSON.stringify({\n      channel,\n      text\n    }));\n\n    if (!(posted !== null && posted !== void 0 && posted.ok)) {\n      console.error(\"chat.postMessage error:\", posted);\n      return res.status(400).json({\n        error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error\",\n        raw: posted\n      });\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"channel\",\n      channel,\n      ts: posted.ts\n    });\n  } catch (e) {\n    console.error(\"API /slack/add-to-list crashed:\", e);\n    return res.status(500).json({\n      error: \"Server error\"\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","receiving","id","SLACK_LIST_RECEIVING_ID","cols","desc","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","track","SLACK_LIST_RECEIVING_TRACKING_COL","wo","SLACK_LIST_RECEIVING_WO_COL","lsn","SLACK_LIST_RECEIVING_LOCALSN_COL","photos","SLACK_LIST_RECEIVING_PHOTOS_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_TRACKING_COL","SLACK_LIST_SHIPPING_WO_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_DESCRIPTION_COL","CHANNELS","SLACK_CHANNEL_RECEIVING_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_TASKS_ID","headersJson","Authorization","slack","headers","fetch","then","r","plain","v","toString","trim","safe","joinArr","a","Array","isArray","filter","Boolean","map","join","cfg","fields","textBits","push","column_id","value","text","pnLine","snLine","domLine","pnBlock","t","createBody","list_id","created","JSON","stringify","ok","console","raw","length","fileIds","url","init","URLSearchParams","filename","split","pop","upload_url","img","buf","arrayBuffer","Buffer","from","_","complete","files","file_id","item_id","item","attachment","file_ids","mode","channel","safeId","safeTitle","lines","pnStr","snStr","posted","ts","e"],"mappings":"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","sourcesContent":["// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  try {\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n    const {\r\n      listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n      title, linkUrl, bodyText,\r\n      date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n      photoUrls = [],\r\n    } = req.body;\r\n\r\n    const LISTS = {\r\n      receiving: {\r\n        id: process.env.SLACK_LIST_RECEIVING_ID,\r\n        cols: {\r\n          desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n          date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n          pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n          track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n          wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n          lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n          photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n        },\r\n      },\r\n      shipping: {\r\n        id: process.env.SLACK_LIST_SHIPPING_ID,\r\n        cols: {\r\n          desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n          date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n          pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n          track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n          wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n          lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n          photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n        },\r\n      },\r\n      tasks: {\r\n        id: process.env.SLACK_LIST_TASKS_ID,\r\n        cols: {\r\n          desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n        },\r\n      },\r\n    };\r\n\r\n    const CHANNELS = {\r\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n      shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n      tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n    };\r\n\r\n    const headersJson = {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json; charset=utf-8\",\r\n    };\r\n    const slack = (method, body, headers = headersJson) =>\r\n      fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n        .then(r => r.json());\r\n\r\n    const plain = v => (v ?? \"\").toString().trim();\r\n    const safe  = plain;\r\n    const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n    // ---------- PATH A: Write to a LIST ----------\r\n    const cfg = LISTS[listKey];\r\n    if (cfg?.id) {\r\n      const fields = [];\r\n\r\n      // Description column\r\n      if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n        const textBits = [\r\n          description,\r\n          (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n          linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n        ].filter(Boolean).join(\"\\n\");\r\n        fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n      }\r\n\r\n      if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n      if (cfg.cols.pn && (pn || sn || dom)) {\r\n        const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n        const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n        const domLine = dom ? `DOM: ${dom}` : \"\";\r\n        const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n        if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n      }\r\n\r\n      if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n        const t = [\r\n          trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n          poNumber ? `PO: ${poNumber}` : \"\",\r\n        ].filter(Boolean).join(\"  \");\r\n        if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n      }\r\n\r\n      if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n      if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n      // NOW build the create body (cfg & fields exist)\r\n      const createBody = {\r\n        list_id: cfg.id,\r\n        title: plain(title) || plain(localSN) || \"Untitled\",\r\n        fields,\r\n      };\r\n\r\n      const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n      if (!created?.ok) {\r\n        console.error(\"slackLists.items.create error:\", created);\r\n        return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n      }\r\n\r\n      // Photos -> attachment column\r\n      if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n        const fileIds = [];\r\n        for (const url of photoUrls) {\r\n          const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n            method: \"POST\",\r\n            headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n            body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n          }).then(r => r.json());\r\n\r\n          if (!init?.ok || !init?.upload_url) continue;\r\n\r\n          try {\r\n            const img = await fetch(url);\r\n            const buf = await img.arrayBuffer();\r\n            await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n          } catch (_) {}\r\n\r\n          const complete = await slack(\"files.completeUploadExternal\",\r\n            JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n          );\r\n          if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n        }\r\n\r\n        if (fileIds.length) {\r\n          await slack(\"slackLists.items.update\", JSON.stringify({\r\n            list_id: cfg.id,\r\n            item_id: created.item.id,\r\n            fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n          }));\r\n        }\r\n      }\r\n\r\n      return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n    }\r\n\r\n    // ---------- PATH B: Fallback to a channel post ----------\r\n    const channel = CHANNELS[listKey];\r\n    if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n    // Try to join public channels to avoid channel_not_found\r\n    await fetch(\"https://slack.com/api/conversations.join\", {\r\n      method: \"POST\",\r\n      headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: new URLSearchParams({ channel }),\r\n    });\r\n\r\n    const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n    const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n    const lines = [];\r\n    lines.push(`*${safeTitle}*`);\r\n\r\n    const pnStr = joinArr(pn);\r\n    const snStr = joinArr(sn);\r\n    if (pnStr) lines.push(`PN: ${pnStr}`);\r\n    if (snStr) lines.push(`SN: ${snStr}`);\r\n    if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n    if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n    if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n    if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n    if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n    if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n    const desc = safe(description);\r\n    if (desc) lines.push(desc);\r\n    else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n    if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n    const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n    const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n    if (!posted?.ok) {\r\n      console.error(\"chat.postMessage error:\", posted);\r\n      return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n  } catch (e) {\r\n    console.error(\"API /slack/add-to-list crashed:\", e);\r\n    return res.status(500).json({ error: \"Server error\" });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
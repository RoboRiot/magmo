{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Card, Container, Alert } from \"react-bootstrap\";\nimport styles from \"../styles/Home.module.css\";\nimport { useAuth } from \"../context/AuthUserContext\";\nimport { useRouter } from \"next/router\";\nimport firebase, { auth } from \"../context/Firebase\";\nexport default function Home() {\n  var _useState = useState(\"\"),\n      error = _useState[0],\n      setError = _useState[1]; // Prevent our main-useEffect from hijacking the test-login flow:\n\n\n  var _useState2 = useState(false),\n      isTestLogin = _useState2[0],\n      setIsTestLogin = _useState2[1];\n\n  var _useAuth = useAuth(),\n      authUser = _useAuth.authUser,\n      loading = _useAuth.loading,\n      signInWithGoogle = _useAuth.signInWithGoogle;\n\n  var router = useRouter();\n\n  var _useState3 = useState(false),\n      hasMounted = _useState3[0],\n      setHasMounted = _useState3[1]; // Ensure we are on the client side\n\n\n  useEffect(function () {\n    setHasMounted(true);\n  }, []); // Handle redirect result from Google Auth\n  // Handle redirect result from Google Auth (runs everywhere)\n\n  useEffect(function () {\n    if (hasMounted && !loading) {\n      auth.getRedirectResult().then(function (result) {\n        console.log(\"=== REDIRECT RESULT ===\");\n        console.log(\"Result:\", result);\n\n        if (result.credential) {\n          var destination = router.query.redirect || \"/NewSearch/mainSearch\";\n          console.log(\"User authenticated, redirecting to:\", destination);\n          router.replace(destination);\n        } else {\n          console.log(\"No credential found in redirect result\");\n        }\n      })[\"catch\"](function (error) {\n        console.error(\"Redirect result error:\", error);\n        setError(\"Authentication failed. Please try again.\");\n      });\n    }\n  }, [hasMounted, loading, router]); // If auth status is known and the user is already logged in, redirect them.\n\n  useEffect(function () {\n    if (isTestLogin) return; // ‚Üê skip for test login\n\n    if (hasMounted && !loading && authUser) {\n      var destination = router.query.redirect || \"/NewSearch/mainSearch\"; // use replace to avoid stacking multiple entries\n\n      router.replace(destination);\n    }\n  }, [isTestLogin, hasMounted, authUser, loading, router]);\n  if (!hasMounted) return null; // Prevent rendering until mounted\n  // Handle Google Sign-In\n\n  var handleGoogleSignIn = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setError(\"\");\n              _context.prev = 1;\n              _context.next = 4;\n              return signInWithGoogle();\n\n            case 4:\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n              setError(\"Failed to log in with Google\");\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 6]]);\n    }));\n\n    return function handleGoogleSignIn() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleTestLogin = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var password;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setError(\"\");\n              setIsTestLogin(true);\n              password = prompt(\"Enter password:\");\n\n              if (password) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 5:\n              _context2.prev = 5;\n              _context2.next = 8;\n              return firebase.auth().signInWithEmailAndPassword(\"test@test.com\", password);\n\n            case 8:\n              // now go to your custom test-search page:\n              router.replace(\"/NewSearch/searchTest\");\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](5);\n              setError(\"Test login failed: \" + _context2.t0.message);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[5, 11]]);\n    }));\n\n    return function handleTestLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: styles.container\n  }, __jsx(Head, null, __jsx(\"title\", null, \"magmo\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\"\n  }), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1.0\"\n  })), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"MAGMO\"), error && __jsx(Alert, {\n    variant: \"danger\"\n  }, error), __jsx(Button, {\n    variant: \"light\",\n    className: \"w-100 d-flex align-items-center justify-content-center\",\n    onClick: handleGoogleSignIn,\n    style: {\n      border: \"1px solid #dadce0\",\n      borderRadius: \"0.375rem\",\n      color: \"#757575\",\n      padding: \"0.5rem 1rem\"\n    }\n  }, __jsx(\"img\", {\n    src: \"https://www.svgrepo.com/show/355037/google.svg\",\n    alt: \"Google logo\",\n    width: \"20\",\n    height: \"20\",\n    className: \"me-2\"\n  }), \"Sign in with Google\"), __jsx(Button, {\n    variant: \"secondary\",\n    className: \"w-100 mt-3\",\n    onClick: handleTestLogin\n  }, \"Test Login\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n// NewLocal.js\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button, Stack } from \"react-bootstrap\";\nimport firebase from \"../../../../context/Firebase\";\nexport default function NewLocal({\n  onSave = () => {},\n  onCancel = () => {},\n  selectedClient,\n  showLocalLoc,\n  value = {},\n  onChange\n}) {\n  const {\n    0: regionOptions,\n    1: setRegionOptions\n  } = useState([]);\n  const {\n    0: sectionMap,\n    1: setSectionMap\n  } = useState({});\n  const {\n    0: binCount,\n    1: setBinCount\n  } = useState(0);\n  const {\n    0: palletCount,\n    1: setPalletCount\n  } = useState(0);\n  const {\n    0: region,\n    1: setRegion\n  } = useState(\"\");\n  const {\n    0: sectionLetter,\n    1: setSectionLetter\n  } = useState(\"\");\n  const {\n    0: sectionNumber,\n    1: setSectionNumber\n  } = useState(\"\");\n  const {\n    0: binSelected,\n    1: setBinSelected\n  } = useState(\"\");\n  const {\n    0: palletSelected,\n    1: setPalletSelected\n  } = useState(\"\"); // 1) load directory exactly as before\n\n  useEffect(() => {\n    if (!showLocalLoc) return;\n    const db = firebase.firestore();\n    db.collection(\"Warehouse\").doc(\"directory\").get().then(doc => {\n      const d = doc.data() || {};\n      setRegionOptions(d.Region || []);\n      setSectionMap(d.Section || {});\n      setBinCount(d.Bin || 0);\n      setPalletCount(d.Pallet || 0);\n    });\n  }, [showLocalLoc]); // 2) when we open the modal (or value changes), initialize from value\n\n  useEffect(() => {\n    var _value$section, _value$section2, _value$bin, _value$pallet;\n\n    if (!showLocalLoc) return;\n    setRegion(value.region || \"\");\n    setSectionLetter(((_value$section = value.section) === null || _value$section === void 0 ? void 0 : _value$section.letter) || \"\");\n    setSectionNumber(((_value$section2 = value.section) === null || _value$section2 === void 0 ? void 0 : _value$section2.number) || \"\");\n    setBinSelected(((_value$bin = value.bin) === null || _value$bin === void 0 ? void 0 : _value$bin.toString()) || \"\");\n    setPalletSelected(((_value$pallet = value.pallet) === null || _value$pallet === void 0 ? void 0 : _value$pallet.toString()) || \"\");\n  }, [showLocalLoc]); // 3) notify parent on any change\n\n  useEffect(() => {\n    const p = {};\n    if (region) p.region = region;\n    if (sectionLetter && sectionNumber) p.section = {\n      letter: sectionLetter,\n      number: sectionNumber\n    };\n    if (binSelected) p.bin = parseInt(binSelected, 10);\n    if (palletSelected) p.pallet = parseInt(palletSelected, 10);\n    onChange(p);\n  }, [region, sectionLetter, sectionNumber, binSelected, palletSelected]); // helpers:\n\n  const letters = Array.from({\n    length: 26\n  }, (_, i) => String.fromCharCode(65 + i));\n  const numbers = Array.from({\n    length: 50\n  }, (_, i) => i + 1);\n  const binOptions = Array.from({\n    length: binCount\n  }, (_, i) => i + 1);\n  const palletOptions = Array.from({\n    length: palletCount\n  }, (_, i) => i + 1); // bump and persist bin count\n\n  const handleAddBin = async () => {\n    const next = binCount + 1;\n    await firebase.firestore().collection(\"Warehouse\").doc(\"directory\").update({\n      Bin: next\n    });\n    setBinCount(next);\n    setBinSelected(next.toString());\n  }; // bump and persist pallet count\n\n\n  const handleAddPallet = async () => {\n    const next = palletCount + 1;\n    await firebase.firestore().collection(\"Warehouse\").doc(\"directory\").update({\n      Pallet: next\n    });\n    setPalletCount(next);\n    setPalletSelected(next.toString());\n  }; // only fire parent when they click OK\n\n\n  const handleOk = () => {\n    const p = {};\n    if (region) p.region = region;\n    if (sectionLetter && sectionNumber) p.section = {\n      letter: sectionLetter,\n      number: sectionNumber\n    };\n    if (binSelected) p.bin = parseInt(binSelected, 10);\n    if (palletSelected) p.pallet = parseInt(palletSelected, 10);\n    onSave(p);\n  };\n\n  return __jsx(\"div\", null, __jsx(Row, null, __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Region\"), __jsx(Form.Select, {\n    value: region,\n    onChange: e => setRegion(e.target.value)\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select region\"), regionOptions.map(r => __jsx(\"option\", {\n    key: r,\n    value: r\n  }, r))))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Section Letter\"), __jsx(Form.Select, {\n    value: sectionLetter,\n    onChange: e => setSectionLetter(e.target.value) // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Letter\"), letters.map(l => __jsx(\"option\", {\n    key: l,\n    value: l\n  }, l))))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Section Number\"), __jsx(Form.Select, {\n    value: sectionNumber,\n    onChange: e => setSectionNumber(e.target.value) // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Number\"), numbers.map(n => __jsx(\"option\", {\n    key: n,\n    value: n\n  }, n)))))), __jsx(Row, {\n    className: \"mt-3\"\n  }, __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Bin\"), __jsx(Stack, {\n    direction: \"horizontal\",\n    gap: 2\n  }, __jsx(Form.Select, {\n    value: binSelected,\n    onChange: e => setBinSelected(e.target.value) // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select bin\"), binOptions.map(b => __jsx(\"option\", {\n    key: b,\n    value: b\n  }, b))), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleAddBin\n  }, \"+ Bin\")))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Pallet\"), __jsx(Stack, {\n    direction: \"horizontal\",\n    gap: 2\n  }, __jsx(Form.Select, {\n    value: palletSelected,\n    onChange: e => setPalletSelected(e.target.value) // disabled={!region}\n\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Select pallet\"), palletOptions.map(p => __jsx(\"option\", {\n    key: p,\n    value: p\n  }, p))), __jsx(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleAddPallet\n  }, \"+ Pallet\"))))), __jsx(Row, {\n    className: \"mt-4\"\n  }, __jsx(Col, null, __jsx(\"div\", {\n    className: \"mt-3 text-end\"\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: onCancel\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleOk\n  }, \"OK\")))));\n}","map":null,"metadata":{},"sourceType":"module"}
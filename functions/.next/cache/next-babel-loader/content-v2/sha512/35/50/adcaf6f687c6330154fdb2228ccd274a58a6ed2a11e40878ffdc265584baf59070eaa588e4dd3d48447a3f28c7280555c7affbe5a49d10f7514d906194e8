{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/Users/mack2/Desktop/code/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// BluefolderService.js\nexport var API_TOKEN = \"9b224624-44db-49dd-9042-c3b15e9a39d4\"; // your token\n\nexport var ITEMS_URL = \"https://app.bluefolder.com/api/2.0/items/add.aspx\";\nexport var MATERIALS_URL = \"https://app.bluefolder.com/api/2.0/serviceRequests/addMaterial.aspx\";\nexport var HEADERS = {\n  \"Content-Type\": \"text/xml\"\n};\nexport function addServiceItem(_x, _x2) {\n  return _addServiceItem.apply(this, arguments);\n}\n\nfunction _addServiceItem() {\n  _addServiceItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(serviceRequestId, item) {\n    var uniqueName, itemPayload, itemResponse, itemText, parser, itemXml, itemIdElem, itemId, nowStr, comment, materialPayload, materialResponse, materialText, materialXml;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Use \"Service Item\" for name and description\n            uniqueName = \"Service Item\"; // Step 1: Create a new material item in BlueFolder\n\n            itemPayload = \"\\n    <request>\\n      <itemAdd>\\n        <itemType>materials</itemType>\\n        <itemName>\".concat(uniqueName, \"</itemName>\\n        <description>Service Item</description>\\n        <accountName></accountName>\\n        <isFlatRate>false</isFlatRate>\\n        <mfrDescription></mfrDescription>\\n        <mfrItemNo></mfrItemNo>\\n        <mfrName>BlueFolderTestManufacturer</mfrName>\\n        <notes>Service Item</notes>\\n        <taxableDefault>true</taxableDefault>\\n        <unitCost>0.00</unitCost>\\n        <unitPrice>0.00</unitPrice>\\n        <unitListPrice>0.00</unitListPrice>\\n      </itemAdd>\\n    </request>\\n  \");\n            _context.next = 4;\n            return fetch(ITEMS_URL, {\n              method: \"POST\",\n              headers: _objectSpread(_objectSpread({}, HEADERS), {}, {\n                Authorization: \"Basic \" + btoa(API_TOKEN + \":x\")\n              }),\n              body: itemPayload\n            });\n\n          case 4:\n            itemResponse = _context.sent;\n            _context.next = 7;\n            return itemResponse.text();\n\n          case 7:\n            itemText = _context.sent;\n            parser = new DOMParser();\n            itemXml = parser.parseFromString(itemText, \"application/xml\");\n\n            if (!(itemXml.documentElement.getAttribute(\"status\") !== \"ok\")) {\n              _context.next = 12;\n              break;\n            }\n\n            throw new Error(\"Failed to create material item in BlueFolder\");\n\n          case 12:\n            itemIdElem = itemXml.getElementsByTagName(\"itemId\")[0];\n            itemId = itemIdElem ? itemIdElem.textContent : null; // Step 2: Add the material to the specified work order\n\n            nowStr = new Date().toLocaleString(\"en-US\", {\n              year: \"numeric\",\n              month: \"2-digit\",\n              day: \"2-digit\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              hour12: true\n            });\n            comment = \"Name: \".concat(item.name, \"\\nPN: \").concat(item.pn, \"\\nSN: \").concat(item.sn, \"\\nStatus: \").concat(item.status, \"\\nDescription: \").concat(item.description);\n            materialPayload = \"\\n    <request>\\n      <serviceRequestAddMaterial>\\n        <serviceRequestId>\".concat(serviceRequestId, \"</serviceRequestId>\\n        <dateUsed>\").concat(nowStr, \"</dateUsed>\\n        <quantity>1</quantity>\\n        <billingStatus>billable</billingStatus>\\n        <itemNo>\").concat(uniqueName, \"</itemNo>\\n        <itemDescription>Service Item</itemDescription>\\n        <itemUnitCost>0.00</itemUnitCost>\\n        <itemUnitPrice>0.00</itemUnitPrice>\\n        <comment>\").concat(comment, \"</comment>\\n        <commentIsPublic>false</commentIsPublic>\\n        <taxable>true</taxable>\\n      </serviceRequestAddMaterial>\\n    </request>\\n  \");\n            _context.next = 19;\n            return fetch(MATERIALS_URL, {\n              method: \"POST\",\n              headers: _objectSpread(_objectSpread({}, HEADERS), {}, {\n                Authorization: \"Basic \" + btoa(API_TOKEN + \":x\")\n              }),\n              body: materialPayload\n            });\n\n          case 19:\n            materialResponse = _context.sent;\n            _context.next = 22;\n            return materialResponse.text();\n\n          case 22:\n            materialText = _context.sent;\n            materialXml = parser.parseFromString(materialText, \"application/xml\");\n\n            if (!(materialXml.documentElement.getAttribute(\"status\") !== \"ok\")) {\n              _context.next = 26;\n              break;\n            }\n\n            throw new Error(\"Failed to add material to work order in BlueFolder\");\n\n          case 26:\n            return _context.abrupt(\"return\", {\n              itemId: itemId,\n              materialResponse: materialText\n            });\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _addServiceItem.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}
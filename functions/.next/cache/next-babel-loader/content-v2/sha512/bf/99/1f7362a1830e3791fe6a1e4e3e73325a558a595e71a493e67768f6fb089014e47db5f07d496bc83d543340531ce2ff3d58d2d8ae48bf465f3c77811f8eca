{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Button, Card, Container, Row, Col } from \"react-bootstrap\";\nimport styles from \"../../styles/Home.module.css\";\nimport Link from \"next/link\";\nimport { useAuth } from \"../../context/AuthUserContext\";\nimport firebase from \"../../context/Firebase\";\nimport LoggedIn from \"../LoggedIn\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useRouter } from \"next/router\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nfunction LoadingButton(type, name, route) {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState({\n    name: false\n  });\n  useEffect(() => {\n    if (isLoading.name) {\n      simulateNetworkRequest().then(() => {\n        setLoading({\n          name: false\n        });\n      });\n    }\n  }, [isLoading.name]);\n\n  const handleClick = () => setLoading({\n    name: true\n  });\n\n  return __jsx(Link, {\n    href: `/${route}`\n  }, __jsx(\"a\", {\n    className: `btn btn-${type}`,\n    disabled: isLoading.name,\n    onClick: !isLoading.name ? handleClick : null\n  }, isLoading.name ? \"Loadingâ€¦\" : name));\n}\n\nexport default function dashboard() {\n  const router = useRouter();\n  const {\n    signOut\n  } = useAuth();\n  const {\n    0: items,\n    1: setItems\n  } = useState({});\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const {\n    0: showErr,\n    1: setShowErr\n  } = useState(false);\n  const {\n    0: Err,\n    1: setErr\n  } = useState(\"N/A\");\n\n  const handleCloseErr = () => setShowErr(false);\n\n  const handleShowErr = () => setShowErr(true);\n\n  async function toSend() {\n    const db = firebase.firestore();\n    let tempDate = items.date;\n    const [year, month, day] = tempDate.split(\"-\").map(Number);\n    tempDate = new Date(year, month - 1, day); // Note: month is 0-indexed in JavaScript\n\n    let returnData = Object.assign({}, items, {\n      date: tempDate\n    });\n    console.log(returnData.date.toString());\n    await db.collection(\"Test\").add(returnData).then(() => {\n      console.log(\"Items added!\"); // router.reload(\"WarehouseList\")\n\n      router.push(\"WarehouseList\");\n    }).then(() => {\n      console.log(\"Items updated successfully!\"); // setErr(\"Success\");\n      // handleShowErr();\n    }).catch(error => {\n      console.error(\"Error updating data: \", error); // setErr(\"Fail\");\n      // handleShowErr();\n    });\n  }\n\n  async function handleSubmit(event) {\n    // const router = useRouter()\n    event.preventDefault();\n    console.log(\"enter handle submit\");\n    console.log(items);\n    var check = false;\n\n    if (items[\"name\"] == \"\") {\n      console.log(\"error!!!!! name\");\n      check = true;\n    }\n\n    if (items[\"wo\"] == \"\") {\n      console.log(\"error!!!!! work order\");\n      check = true;\n    }\n\n    if (items[\"pn\"] == \"\") {\n      console.log(\"error!!!!! product number\");\n      check = true;\n    }\n\n    if (items[\"sn\"] == \"\") {\n      console.log(\"error!!!!! serial number\");\n      check = true;\n    } // if (items[\"date\"] == \"\") {\n    //   console.log(\"error!!!!! date\");\n    //   check = true;\n    // }\n\n\n    if (items[\"desc\"] == \"\") {\n      console.log(\"error!!!!! description\");\n      check = true;\n    }\n\n    if (check) {\n      console.log(\"entered\");\n      handleShow();\n    } else {\n      console.log(\"try submit\");\n      console.log(items);\n      toSend();\n    }\n\n    event.preventDefault();\n  }\n\n  const nameChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      name: event.target.value\n    })); // setItems(prevState => {\n    //   let jasper = Object.assign({}, prevState.jasper);  // creating copy of state variable jasper\n    //   jasper.name = event.target.value;                     // update the name property, assign a new value\n    //   return { jasper };                                 // return new object jasper object\n    // })\n  };\n\n  const woChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      wo: event.target.value\n    })); // setItems(prevState => {\n    //   let jasper = Object.assign({}, prevState.jasper);  // creating copy of state variable jasper\n    //   jasper.wo = event.target.value;                     // update the name property, assign a new value\n    //   return { jasper };                                 // return new object jasper object\n    // })\n  };\n\n  const pnChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      pn: event.target.value\n    })); // setItems(prevState => {\n    //   let jasper = Object.assign({}, prevState.jasper);  // creating copy of state variable jasper\n    //   jasper.pn = event.target.value;                     // update the name property, assign a new value\n    //   return { jasper };                                 // return new object jasper object\n    // })\n  };\n\n  const snChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      sn: event.target.value\n    })); // setItems(prevState => {\n    //   let jasper = Object.assign({}, prevState.jasper);  // creating copy of state variable jasper\n    //   jasper.sn = event.target.value;                     // update the name property, assign a new value\n    //   return { jasper };                                 // return new object jasper object\n    // })\n  };\n\n  const dateChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      date: event.target.value\n    }));\n    console.log(items.date); // setItems(prevState => {\n    //   let jasper = Object.assign({}, prevState.jasper);  // creating copy of state variable jasper\n    //   // jasper.date = event.target.value;                     // update the name property, assign a new value\n    //   const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0))\n    //   jasper.date = date\n    //   return { jasper };                                 // return new object jasper object\n    // })\n  };\n\n  const descChangeHandler = event => {\n    setItems(Object.assign({}, items, {\n      desc: event.target.value\n    })); // setItems(prevState => {\n    //   let jasper = Object.assign({}, prevState.jasper);  // creating copy of state variable jasper\n    //   jasper.desc = event.target.value;                     // update the name property, assign a new value\n    //   return { jasper };                                 // return new object jasper object\n    // })\n  };\n\n  return __jsx(LoggedIn, null, __jsx(Modal, {\n    show: show,\n    onHide: handleClose\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, \"Missing field\"), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleClose\n  }, \"Ok\"))), __jsx(Modal, {\n    show: showErr,\n    onHide: handleCloseErr\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Error\")), __jsx(Modal.Body, null, Err), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: handleCloseErr\n  }, \"Ok\"))), __jsx(Container, {\n    className: \"d-flex align-items-center justify-content-center\",\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, __jsx(\"div\", {\n    className: \"w-100\",\n    style: {\n      maxWidth: \"400px\"\n    }\n  }, __jsx(Card, {\n    className: \"align-items-center justify-content-center\"\n  }, __jsx(Card.Body, null, __jsx(\"h2\", {\n    className: \"text-center mb-4\"\n  }, \"Item\"), __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"name\"\n  }, __jsx(Form.Label, null, \"Name\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"name\"],\n    onChange: nameChangeHandler\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"wo\"\n  }, __jsx(Form.Label, null, \"Work Order\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"wo\"],\n    onChange: woChangeHandler\n  }))), __jsx(Row, {\n    className: \"mb-3\"\n  }, __jsx(Form.Group, {\n    as: Col,\n    controlId: \"pn\"\n  }, __jsx(Form.Label, null, \"Product Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"pn\"],\n    onChange: pnChangeHandler\n  })), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"sn\"\n  }, __jsx(Form.Label, null, \"Serial Number\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"sn\"],\n    onChange: snChangeHandler\n  }))), __jsx(Form.Group, {\n    as: Col,\n    controlId: \"date\"\n  }, __jsx(Form.Label, null, \"Date\"), __jsx(Form.Control, {\n    type: \"date\",\n    value: items[\"date\"],\n    onChange: dateChangeHandler\n  })), __jsx(Form.Label, null), __jsx(Form.Group, {\n    className: \"mb-3\",\n    controlId: \"desc\"\n  }, __jsx(Form.Label, null, \"Description\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: items[\"desc\"],\n    onChange: descChangeHandler\n  })), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\"\n  }, \"Submit\"), __jsx(Link, {\n    href: \"WarehouseList\"\n  }, __jsx(Button, {\n    className: \"m-3\",\n    variant: \"secondary\"\n  }, \"Go Back\"))))))));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   try {\n//     if (req.method !== \"POST\") {\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//     }\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) {\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//     }\n//     // payload from client\n//     const {\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\n//       title,               // item title (what shows in the primary column)\n//       // keeping minimal per your request: PN/SN only for now\n//       pn, sn,\n//     } = req.body || {};\n//     // list ids from env\n//     const LIST_IDS = {\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\n//     };\n//     const list_id = LIST_IDS[listKey];\n//     if (!list_id) {\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\n//     }\n//     // ---- Slack helpers ----\n//     async function slackJson(method, payload) {\n//       const r = await fetch(`https://slack.com/api/${method}`, {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json; charset=utf-8\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n//       return r.json();\n//     }\n//     const plain = (v) => (v ?? \"\").toString().trim();\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     function toRichText(text) {\n//       const t = plain(text);\n//       return [{\n//         type: \"rich_text\",\n//         elements: [{\n//           type: \"rich_text_section\",\n//           elements: [{ type: \"text\", text: t }],\n//         }],\n//       }];\n//     }\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\n//     async function resolveTitleColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//       if (!probe?.ok) return null;\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\n//       let fallback = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           const key = (f.key || \"\").toLowerCase();\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\n//           if (f.column_id && hasText) {\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\n//             if (!fallback) fallback = f.column_id;\n//           }\n//         }\n//       }\n//       return fallback; // first text-like field if we didn't find a perfect match\n//     }\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\n//     async function resolvePnSnColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\n//       if (!probe?.ok) return null;\n//       let candidate = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           if (!f.column_id) continue;\n//           const key = (f.key || \"\").toLowerCase();\n//           const text = (f.text || \"\").toLowerCase();\n//           const looksPnSn =\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\n//           if (looksPnSn) return f.column_id;\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\n//             candidate = f.column_id;\n//           }\n//         }\n//       }\n//       return candidate;\n//     }\n//     // 1) Resolve columns\n//     const titleColId = await resolveTitleColId(list_id);\n//     if (!titleColId) {\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\n//     }\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\n//     const safeTitle = plain(title) || \"New Item\";\n//     const createBody = {\n//       list_id,\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\n//     };\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 3) (Minimal) update: PN/SN only, per your request\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n//     let updated = null;\n//     let usedPnSnCol = null;\n//     if (pnSnText) {\n//       const pnSnColId = await resolvePnSnColId(list_id);\n//       if (pnSnColId) {\n//         const cells = [{\n//           row_id: created.item.id,\n//           column_id: pnSnColId,\n//           rich_text: toRichText(pnSnText),\n//         }];\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\n//         usedPnSnCol = pnSnColId;\n//         // If update fails, we still return ok:false so you can see the error\n//         if (!updated?.ok) {\n//           return res.status(200).json({\n//             ok: false,\n//             error: updated?.error || \"update_failed\",\n//             mode: \"list\",\n//             list_id,\n//             item_id: created.item.id,\n//             used_title_col: titleColId,\n//             used_pnsn_col: usedPnSnCol,\n//           });\n//         }\n//       }\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id,\n//       item_id: created.item.id,\n//       used_title_col: titleColId,\n//       used_pnsn_col: usedPnSnCol || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\n// --- Fallback: load .env.local ourselves if Next didn't ---\nif (!process.env.SLACK_BOT_TOKEN) {\n  try {\n    const path = require(\"path\");\n\n    require(\"dotenv\").config({\n      path: path.join(process.cwd(), \".env.local\")\n    });\n  } catch (e) {// ignore\n  }\n}\n\nexport default async function handler(req, res) {\n  const respond = (code, payload) => {\n    if (!res.headersSent) return res.status(code).json(payload);\n  };\n\n  try {\n    var _createTry$created, _createTry$created$it, _updated3, _updated4;\n\n    if (req.method !== \"POST\") {\n      return respond(405, {\n        ok: false,\n        error: \"method_not_allowed\"\n      });\n    }\n\n    const token = process.env.SLACK_BOT_TOKEN;\n\n    if (!token) {\n      return respond(500, {\n        ok: false,\n        error: \"missing_SLACK_BOT_TOKEN\"\n      });\n    } // Body (built from item)\n\n\n    const {\n      listKey,\n      title,\n      pn,\n      sn,\n      workOrder,\n      localSN,\n      tracking,\n      shippingDate,\n      description,\n      linkUrl,\n      photoUrls = []\n    } = req.body || {}; // Per-list env config\n\n    const cfgInput = {\n      tasks: {\n        list_id: process.env.SLACK_LIST_TASKS_ID,\n        title_col: process.env.SLACK_LIST_TASKS_TITLE_COL,\n        description_col: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n      },\n      shipping: {\n        list_id: process.env.SLACK_LIST_SHIPPING_ID,\n        title_col: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\n        description_col: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date_col: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        pnsn_col: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        tracking_col: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        wo_col: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        localsn_col: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        photos_col: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL\n      },\n      receiving: {\n        list_id: process.env.SLACK_LIST_RECEIVING_ID,\n        title_col: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\n        description_col: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date_col: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        pnsn_col: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        tracking_col: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        wo_col: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        localsn_col: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        photos_col: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL\n      }\n    };\n    const cfg = cfgInput[listKey || \"\"];\n\n    if (!(cfg !== null && cfg !== void 0 && cfg.list_id)) {\n      return respond(400, {\n        ok: false,\n        error: `unknown_listKey_${listKey}`\n      });\n    } // Slack helpers\n\n\n    async function slackJson(method, payload) {\n      const r = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return r.json();\n    }\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const first = x => Array.isArray(x) ? x.find(Boolean) || \"\" : plain(x);\n\n    const toRichText = text => ({\n      type: \"rich_text\",\n      elements: [{\n        type: \"rich_text_section\",\n        elements: [{\n          type: \"text\",\n          text: plain(text)\n        }]\n      }]\n    }); // Detect title col if env is missing\n\n\n    async function resolveTitleColId(listId) {\n      const probe = await slackJson(\"slackLists.items.list\", {\n        list_id: listId,\n        limit: 200\n      });\n      if (!(probe !== null && probe !== void 0 && probe.ok)) return null;\n      let fallback = null;\n\n      for (const it of probe.items || []) {\n        for (const f of it.fields || []) {\n          if (!(f !== null && f !== void 0 && f.column_id)) continue;\n          const key = (f.key || \"\").toLowerCase();\n          const hasText = !!f.text || !!f.rich_text;\n          if (!hasText) continue;\n\n          if (key.includes(\"item\") || key.includes(\"task\") || key.includes(\"name\")) {\n            return f.column_id;\n          }\n\n          if (!fallback) fallback = f.column_id;\n        }\n      }\n\n      return fallback;\n    }\n\n    async function createRowWithTitle(list_id, title_col, textValue) {\n      var _r, _r2, _r4;\n\n      const safeTitle = plain(textValue) || \"New Item\";\n      let r = await slackJson(\"slackLists.items.create\", {\n        list_id,\n        initial_fields: [{\n          column_id: title_col,\n          rich_text: toRichText(safeTitle)\n        }]\n      });\n      if ((_r = r) !== null && _r !== void 0 && _r.ok) return {\n        ok: true,\n        created: r,\n        mode: \"rich_text\"\n      };\n\n      if (((_r2 = r) === null || _r2 === void 0 ? void 0 : _r2.error) === \"invalid_arguments\") {\n        var _r3;\n\n        r = await slackJson(\"slackLists.items.create\", {\n          list_id,\n          initial_fields: [{\n            column_id: title_col,\n            text: safeTitle\n          }]\n        });\n        if ((_r3 = r) !== null && _r3 !== void 0 && _r3.ok) return {\n          ok: true,\n          created: r,\n          mode: \"text\"\n        };\n      }\n\n      return {\n        ok: false,\n        error: ((_r4 = r) === null || _r4 === void 0 ? void 0 : _r4.error) || \"create_failed\",\n        last: r\n      };\n    }\n\n    const pushTextCell = (cells, row_id, column_id, value) => {\n      const v = plain(value);\n      if (column_id && v) cells.push({\n        row_id,\n        column_id,\n        text: v\n      });\n    };\n\n    const pushRichCell = (cells, row_id, column_id, value) => {\n      const v = plain(value);\n      if (column_id && v) cells.push({\n        row_id,\n        column_id,\n        rich_text: toRichText(v)\n      });\n    }; // Title column (env → detect)\n\n\n    let titleCol = cfg.title_col || (await resolveTitleColId(cfg.list_id));\n\n    if (!titleCol) {\n      return respond(400, {\n        ok: false,\n        error: \"could_not_resolve_title_column\",\n        hint: \"Set SLACK_LIST_*_TITLE_COL in .env.local or add a few rows so we can infer a text-like column.\"\n      });\n    } // Create row\n\n\n    const linkSuffix = linkUrl ? ` — ${linkUrl}` : \"\";\n    const titleForCreate = plain(title) || (localSN ? `Item (${localSN})` : \"New Item\");\n    const createTry = await createRowWithTitle(cfg.list_id, titleCol, titleForCreate + (!cfg.description_col ? linkSuffix : \"\"));\n\n    if (!createTry.ok) {\n      return respond(200, {\n        ok: false,\n        error: \"title_create_failed\",\n        detail: createTry.error,\n        last_response: createTry.last || null,\n        list_id: cfg.list_id,\n        title_col: titleCol,\n        sent_title: titleForCreate\n      });\n    }\n\n    const itemId = (_createTry$created = createTry.created) === null || _createTry$created === void 0 ? void 0 : (_createTry$created$it = _createTry$created.item) === null || _createTry$created$it === void 0 ? void 0 : _createTry$created$it.id; // Build cells from the item data\n\n    const cells = [];\n    const pn0 = first(pn);\n    const sn0 = first(sn);\n    const pnSnText = [pn0 && `PN: ${pn0}`, sn0 && `SN: ${sn0}`].filter(Boolean).join(\"\\n\");\n\n    const addRT = (colId, val) => pushRichCell(cells, itemId, colId, val);\n\n    const addTX = (colId, val) => pushTextCell(cells, itemId, colId, val);\n\n    if (cfg.description_col) {\n      const descWithLink = description && linkUrl ? `${description}\\nLink: ${linkUrl}` : description || (linkUrl ? `Link: ${linkUrl}` : \"\");\n      addRT(cfg.description_col, descWithLink);\n    }\n\n    if (cfg.pnsn_col && pnSnText) addRT(cfg.pnsn_col, pnSnText);\n    if (cfg.wo_col && workOrder) addRT(cfg.wo_col, workOrder);\n    if (cfg.localsn_col && localSN) addRT(cfg.localsn_col, localSN);\n    if (cfg.tracking_col && tracking) addRT(cfg.tracking_col, tracking);\n    if (cfg.date_col && shippingDate) addRT(cfg.date_col, shippingDate);\n\n    if (cfg.photos_col && photoUrls !== null && photoUrls !== void 0 && photoUrls.length) {\n      const urlsBlock = photoUrls.map(plain).filter(Boolean).join(\"\\n\");\n      if (urlsBlock) addTX(cfg.photos_col, urlsBlock);\n    }\n\n    let updated = null;\n\n    if (cells.length) {\n      var _updated, _updated2;\n\n      updated = await slackJson(\"slackLists.items.update\", {\n        list_id: cfg.list_id,\n        cells\n      });\n\n      if (!((_updated = updated) !== null && _updated !== void 0 && _updated.ok) && ((_updated2 = updated) === null || _updated2 === void 0 ? void 0 : _updated2.error) === \"invalid_arguments\") {\n        const textified = cells.map(c => {\n          var _c$text, _c$rich_text, _c$rich_text$elements, _c$rich_text$elements2, _c$rich_text$elements3, _c$rich_text$elements4;\n\n          return {\n            row_id: c.row_id,\n            column_id: c.column_id,\n            text: (_c$text = c.text) !== null && _c$text !== void 0 ? _c$text : ((_c$rich_text = c.rich_text) === null || _c$rich_text === void 0 ? void 0 : (_c$rich_text$elements = _c$rich_text.elements) === null || _c$rich_text$elements === void 0 ? void 0 : (_c$rich_text$elements2 = _c$rich_text$elements[0]) === null || _c$rich_text$elements2 === void 0 ? void 0 : (_c$rich_text$elements3 = _c$rich_text$elements2.elements) === null || _c$rich_text$elements3 === void 0 ? void 0 : (_c$rich_text$elements4 = _c$rich_text$elements3[0]) === null || _c$rich_text$elements4 === void 0 ? void 0 : _c$rich_text$elements4.text) || \"\"\n          };\n        });\n        updated = await slackJson(\"slackLists.items.update\", {\n          list_id: cfg.list_id,\n          cells: textified\n        });\n      }\n    }\n\n    return respond(200, {\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.list_id,\n      item_id: itemId,\n      used_title_col: titleCol,\n      used_columns: Object.fromEntries(Object.entries(cfg).filter(([k, v]) => k.endsWith(\"_col\") && v)),\n      title_mode: createTry.mode,\n      update_ok: updated ? !!updated.ok : true,\n      update_error: (_updated3 = updated) !== null && _updated3 !== void 0 && _updated3.ok ? null : ((_updated4 = updated) === null || _updated4 === void 0 ? void 0 : _updated4.error) || null\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n\n    if (!res.headersSent) {\n      return res.status(500).json({\n        ok: false,\n        error: \"exception\",\n        message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n      });\n    } // already responded\n\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["process","env","SLACK_BOT_TOKEN","path","require","config","join","cwd","e","handler","req","res","respond","code","payload","headersSent","status","json","method","ok","error","token","listKey","title","pn","sn","workOrder","localSN","tracking","shippingDate","description","linkUrl","photoUrls","body","cfgInput","tasks","list_id","SLACK_LIST_TASKS_ID","title_col","SLACK_LIST_TASKS_TITLE_COL","description_col","SLACK_LIST_TASKS_DESCRIPTION_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_TITLE_COL","SLACK_LIST_SHIPPING_DESCRIPTION_COL","date_col","SLACK_LIST_SHIPPING_DATE_COL","pnsn_col","SLACK_LIST_SHIPPING_PNSN_COL","tracking_col","SLACK_LIST_SHIPPING_TRACKING_COL","wo_col","SLACK_LIST_SHIPPING_WO_COL","localsn_col","SLACK_LIST_SHIPPING_LOCALSN_COL","photos_col","SLACK_LIST_SHIPPING_PHOTOS_COL","receiving","SLACK_LIST_RECEIVING_ID","SLACK_LIST_RECEIVING_TITLE_COL","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","SLACK_LIST_RECEIVING_TRACKING_COL","SLACK_LIST_RECEIVING_WO_COL","SLACK_LIST_RECEIVING_LOCALSN_COL","SLACK_LIST_RECEIVING_PHOTOS_COL","cfg","slackJson","r","fetch","headers","Authorization","JSON","stringify","plain","v","toString","trim","first","x","Array","isArray","find","Boolean","toRichText","text","type","elements","resolveTitleColId","listId","probe","limit","fallback","it","items","f","fields","column_id","key","toLowerCase","hasText","rich_text","includes","createRowWithTitle","textValue","safeTitle","initial_fields","created","mode","last","pushTextCell","cells","row_id","value","push","pushRichCell","titleCol","hint","linkSuffix","titleForCreate","createTry","detail","last_response","sent_title","itemId","item","id","pn0","sn0","pnSnText","filter","addRT","colId","val","addTX","descWithLink","length","urlsBlock","map","updated","textified","c","item_id","used_title_col","used_columns","Object","fromEntries","entries","k","endsWith","title_mode","update_ok","update_error","err","console","message","String"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   try {\r\n//     if (req.method !== \"POST\") {\r\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\r\n//     }\r\n\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) {\r\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n//     }\r\n\r\n//     // payload from client\r\n//     const {\r\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\r\n//       title,               // item title (what shows in the primary column)\r\n//       // keeping minimal per your request: PN/SN only for now\r\n//       pn, sn,\r\n//     } = req.body || {};\r\n\r\n//     // list ids from env\r\n//     const LIST_IDS = {\r\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\r\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\r\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\r\n//     };\r\n\r\n//     const list_id = LIST_IDS[listKey];\r\n//     if (!list_id) {\r\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\r\n//     }\r\n\r\n//     // ---- Slack helpers ----\r\n//     async function slackJson(method, payload) {\r\n//       const r = await fetch(`https://slack.com/api/${method}`, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//           \"Content-Type\": \"application/json; charset=utf-8\",\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n//       return r.json();\r\n//     }\r\n\r\n//     const plain = (v) => (v ?? \"\").toString().trim();\r\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     function toRichText(text) {\r\n//       const t = plain(text);\r\n//       return [{\r\n//         type: \"rich_text\",\r\n//         elements: [{\r\n//           type: \"rich_text_section\",\r\n//           elements: [{ type: \"text\", text: t }],\r\n//         }],\r\n//       }];\r\n//     }\r\n\r\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\r\n//     async function resolveTitleColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\r\n//       let fallback = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\r\n//           if (f.column_id && hasText) {\r\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\r\n//             if (!fallback) fallback = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return fallback; // first text-like field if we didn't find a perfect match\r\n//     }\r\n\r\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\r\n//     async function resolvePnSnColId(listId) {\r\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\r\n//       if (!probe?.ok) return null;\r\n\r\n//       let candidate = null;\r\n//       for (const it of probe.items || []) {\r\n//         for (const f of it.fields || []) {\r\n//           if (!f.column_id) continue;\r\n//           const key = (f.key || \"\").toLowerCase();\r\n//           const text = (f.text || \"\").toLowerCase();\r\n\r\n//           const looksPnSn =\r\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\r\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\r\n\r\n//           if (looksPnSn) return f.column_id;\r\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\r\n//             candidate = f.column_id;\r\n//           }\r\n//         }\r\n//       }\r\n//       return candidate;\r\n//     }\r\n\r\n//     // 1) Resolve columns\r\n//     const titleColId = await resolveTitleColId(list_id);\r\n//     if (!titleColId) {\r\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\r\n//     }\r\n\r\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\r\n//     const safeTitle = plain(title) || \"New Item\";\r\n//     const createBody = {\r\n//       list_id,\r\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\r\n//     };\r\n\r\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\r\n//     if (!created?.ok) {\r\n//       return res.status(200).json({\r\n//         ok: false,\r\n//         error: created?.error || \"create_failed\",\r\n//         mode: \"list\",\r\n//         sent: createBody,\r\n//       });\r\n//     }\r\n\r\n//     // 3) (Minimal) update: PN/SN only, per your request\r\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\r\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\r\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\r\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\r\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\r\n\r\n//     let updated = null;\r\n//     let usedPnSnCol = null;\r\n\r\n//     if (pnSnText) {\r\n//       const pnSnColId = await resolvePnSnColId(list_id);\r\n//       if (pnSnColId) {\r\n//         const cells = [{\r\n//           row_id: created.item.id,\r\n//           column_id: pnSnColId,\r\n//           rich_text: toRichText(pnSnText),\r\n//         }];\r\n\r\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\r\n//         usedPnSnCol = pnSnColId;\r\n//         // If update fails, we still return ok:false so you can see the error\r\n//         if (!updated?.ok) {\r\n//           return res.status(200).json({\r\n//             ok: false,\r\n//             error: updated?.error || \"update_failed\",\r\n//             mode: \"list\",\r\n//             list_id,\r\n//             item_id: created.item.id,\r\n//             used_title_col: titleColId,\r\n//             used_pnsn_col: usedPnSnCol,\r\n//           });\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     return res.status(200).json({\r\n//       ok: true,\r\n//       mode: \"list\",\r\n//       list_id,\r\n//       item_id: created.item.id,\r\n//       used_title_col: titleColId,\r\n//       used_pnsn_col: usedPnSnCol || null,\r\n//       sent_title: safeTitle,\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", err);\r\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\n\r\n// --- Fallback: load .env.local ourselves if Next didn't ---\r\nif (!process.env.SLACK_BOT_TOKEN) {\r\n  try {\r\n    const path = require(\"path\");\r\n    require(\"dotenv\").config({ path: path.join(process.cwd(), \".env.local\") });\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n}\r\n\r\nexport default async function handler(req, res) {\r\n  const respond = (code, payload) => {\r\n    if (!res.headersSent) return res.status(code).json(payload);\r\n  };\r\n\r\n  try {\r\n    if (req.method !== \"POST\") {\r\n      return respond(405, { ok: false, error: \"method_not_allowed\" });\r\n    }\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) {\r\n      return respond(500, { ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\r\n    }\r\n\r\n    // Body (built from item)\r\n    const {\r\n      listKey,\r\n      title,\r\n      pn,\r\n      sn,\r\n      workOrder,\r\n      localSN,\r\n      tracking,\r\n      shippingDate,\r\n      description,\r\n      linkUrl,\r\n      photoUrls = [],\r\n    } = req.body || {};\r\n\r\n    // Per-list env config\r\n    const cfgInput = {\r\n      tasks: {\r\n        list_id: process.env.SLACK_LIST_TASKS_ID,\r\n        title_col: process.env.SLACK_LIST_TASKS_TITLE_COL,\r\n        description_col: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n      },\r\n      shipping: {\r\n        list_id: process.env.SLACK_LIST_SHIPPING_ID,\r\n        title_col: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\r\n        description_col: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        date_col: process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n        pnsn_col: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        tracking_col: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n        wo_col: process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n        localsn_col: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        photos_col: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,\r\n      },\r\n      receiving: {\r\n        list_id: process.env.SLACK_LIST_RECEIVING_ID,\r\n        title_col: process.env.SLACK_LIST_RECEIVING_TITLE_COL,\r\n        description_col: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        date_col: process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n        pnsn_col: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        tracking_col: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n        wo_col: process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n        localsn_col: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        photos_col: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL,\r\n      },\r\n    };\r\n\r\n    const cfg = cfgInput[listKey || \"\"];\r\n    if (!cfg?.list_id) {\r\n      return respond(400, { ok: false, error: `unknown_listKey_${listKey}` });\r\n    }\r\n\r\n    // Slack helpers\r\n    async function slackJson(method, payload) {\r\n      const r = await fetch(`https://slack.com/api/${method}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json; charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      return r.json();\r\n    }\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n    const first = (x) => (Array.isArray(x) ? x.find(Boolean) || \"\" : plain(x));\r\n    const toRichText = (text) => ({\r\n      type: \"rich_text\",\r\n      elements: [\r\n        { type: \"rich_text_section\", elements: [{ type: \"text\", text: plain(text) }] },\r\n      ],\r\n    });\r\n\r\n    // Detect title col if env is missing\r\n    async function resolveTitleColId(listId) {\r\n      const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 200 });\r\n      if (!probe?.ok) return null;\r\n\r\n      let fallback = null;\r\n      for (const it of probe.items || []) {\r\n        for (const f of it.fields || []) {\r\n          if (!f?.column_id) continue;\r\n          const key = (f.key || \"\").toLowerCase();\r\n          const hasText = !!f.text || !!f.rich_text;\r\n          if (!hasText) continue;\r\n\r\n          if (key.includes(\"item\") || key.includes(\"task\") || key.includes(\"name\")) {\r\n            return f.column_id;\r\n          }\r\n          if (!fallback) fallback = f.column_id;\r\n        }\r\n      }\r\n      return fallback;\r\n    }\r\n\r\n    async function createRowWithTitle(list_id, title_col, textValue) {\r\n      const safeTitle = plain(textValue) || \"New Item\";\r\n      let r = await slackJson(\"slackLists.items.create\", {\r\n        list_id,\r\n        initial_fields: [{ column_id: title_col, rich_text: toRichText(safeTitle) }],\r\n      });\r\n      if (r?.ok) return { ok: true, created: r, mode: \"rich_text\" };\r\n      if (r?.error === \"invalid_arguments\") {\r\n        r = await slackJson(\"slackLists.items.create\", {\r\n          list_id,\r\n          initial_fields: [{ column_id: title_col, text: safeTitle }],\r\n        });\r\n        if (r?.ok) return { ok: true, created: r, mode: \"text\" };\r\n      }\r\n      return { ok: false, error: r?.error || \"create_failed\", last: r };\r\n    }\r\n\r\n    const pushTextCell = (cells, row_id, column_id, value) => {\r\n      const v = plain(value);\r\n      if (column_id && v) cells.push({ row_id, column_id, text: v });\r\n    };\r\n    const pushRichCell = (cells, row_id, column_id, value) => {\r\n      const v = plain(value);\r\n      if (column_id && v) cells.push({ row_id, column_id, rich_text: toRichText(v) });\r\n    };\r\n\r\n    // Title column (env → detect)\r\n    let titleCol = cfg.title_col || (await resolveTitleColId(cfg.list_id));\r\n    if (!titleCol) {\r\n      return respond(400, {\r\n        ok: false,\r\n        error: \"could_not_resolve_title_column\",\r\n        hint:\r\n          \"Set SLACK_LIST_*_TITLE_COL in .env.local or add a few rows so we can infer a text-like column.\",\r\n      });\r\n    }\r\n\r\n    // Create row\r\n    const linkSuffix = linkUrl ? ` — ${linkUrl}` : \"\";\r\n    const titleForCreate = plain(title) || (localSN ? `Item (${localSN})` : \"New Item\");\r\n    const createTry = await createRowWithTitle(\r\n      cfg.list_id,\r\n      titleCol,\r\n      titleForCreate + (!cfg.description_col ? linkSuffix : \"\")\r\n    );\r\n    if (!createTry.ok) {\r\n      return respond(200, {\r\n        ok: false,\r\n        error: \"title_create_failed\",\r\n        detail: createTry.error,\r\n        last_response: createTry.last || null,\r\n        list_id: cfg.list_id,\r\n        title_col: titleCol,\r\n        sent_title: titleForCreate,\r\n      });\r\n    }\r\n    const itemId = createTry.created?.item?.id;\r\n\r\n    // Build cells from the item data\r\n    const cells = [];\r\n    const pn0 = first(pn);\r\n    const sn0 = first(sn);\r\n    const pnSnText = [pn0 && `PN: ${pn0}`, sn0 && `SN: ${sn0}`].filter(Boolean).join(\"\\n\");\r\n\r\n    const addRT = (colId, val) => pushRichCell(cells, itemId, colId, val);\r\n    const addTX = (colId, val) => pushTextCell(cells, itemId, colId, val);\r\n\r\n    if (cfg.description_col) {\r\n      const descWithLink =\r\n        description && linkUrl\r\n          ? `${description}\\nLink: ${linkUrl}`\r\n          : description || (linkUrl ? `Link: ${linkUrl}` : \"\");\r\n      addRT(cfg.description_col, descWithLink);\r\n    }\r\n    if (cfg.pnsn_col && pnSnText) addRT(cfg.pnsn_col, pnSnText);\r\n    if (cfg.wo_col && workOrder) addRT(cfg.wo_col, workOrder);\r\n    if (cfg.localsn_col && localSN) addRT(cfg.localsn_col, localSN);\r\n    if (cfg.tracking_col && tracking) addRT(cfg.tracking_col, tracking);\r\n    if (cfg.date_col && shippingDate) addRT(cfg.date_col, shippingDate);\r\n    if (cfg.photos_col && photoUrls?.length) {\r\n      const urlsBlock = photoUrls.map(plain).filter(Boolean).join(\"\\n\");\r\n      if (urlsBlock) addTX(cfg.photos_col, urlsBlock);\r\n    }\r\n\r\n    let updated = null;\r\n    if (cells.length) {\r\n      updated = await slackJson(\"slackLists.items.update\", { list_id: cfg.list_id, cells });\r\n      if (!updated?.ok && updated?.error === \"invalid_arguments\") {\r\n        const textified = cells.map((c) => ({\r\n          row_id: c.row_id,\r\n          column_id: c.column_id,\r\n          text: c.text ?? (c.rich_text?.elements?.[0]?.elements?.[0]?.text || \"\"),\r\n        }));\r\n        updated = await slackJson(\"slackLists.items.update\", {\r\n          list_id: cfg.list_id,\r\n          cells: textified,\r\n        });\r\n      }\r\n    }\r\n\r\n    return respond(200, {\r\n      ok: true,\r\n      mode: \"list\",\r\n      list_id: cfg.list_id,\r\n      item_id: itemId,\r\n      used_title_col: titleCol,\r\n      used_columns: Object.fromEntries(\r\n        Object.entries(cfg).filter(([k, v]) => k.endsWith(\"_col\") && v)\r\n      ),\r\n      title_mode: createTry.mode,\r\n      update_ok: updated ? !!updated.ok : true,\r\n      update_error: updated?.ok ? null : updated?.error || null,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"API /slack/add-to-list crashed:\", err);\r\n    if (!res.headersSent) {\r\n      return res.status(500).json({\r\n        ok: false,\r\n        error: \"exception\",\r\n        message: err?.message || String(err),\r\n      });\r\n    }\r\n    // already responded\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
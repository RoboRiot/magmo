{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") return res.status(405).json({\n    error: \"Method not allowed\"\n  });\n  const token = process.env.SLACK_BOT_TOKEN;\n  if (!token) return res.status(500).json({\n    error: \"Missing SLACK_BOT_TOKEN\"\n  });\n  const {\n    listKey,\n    // \"receiving\" | \"shipping\" | \"tasks\"\n    title,\n    linkUrl,\n    bodyText,\n    date,\n    pn,\n    sn,\n    dom,\n    trackingNumber,\n    poNumber,\n    workOrder,\n    localSN,\n    description,\n    photoUrls = []\n  } = req.body; // -------- ENV mapping --------\n\n  const LISTS = {\n    receiving: {\n      id: process.env.SLACK_LIST_RECEIVING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n        pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n        track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n        lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment column\n\n      }\n    },\n    shipping: {\n      id: process.env.SLACK_LIST_SHIPPING_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n        date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n        pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n        track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n        wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n        lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment column\n\n      }\n    },\n    tasks: {\n      id: process.env.SLACK_LIST_TASKS_ID,\n      cols: {\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n      }\n    }\n  };\n  const CHANNELS = {\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n    shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n    tasks: process.env.SLACK_CHANNEL_TASKS_ID\n  }; // -------- helpers --------\n\n  const headersJson = {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n\n  const slack = (method, body, headers = headersJson) => fetch(`https://slack.com/api/${method}`, {\n    method: \"POST\",\n    headers,\n    body\n  }).then(r => r.json());\n\n  const str = v => (Array.isArray(v) ? v.filter(Boolean).join(\", \") : v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n  const safe = v => (v !== null && v !== void 0 ? v : \"\").toString().trim(); // Build a safe, non-empty item name (this populates the first column, labeled “Task” or “Item” in the UI)\n\n\n  const fallbackId = str(localSN) || str(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop());\n  const name = str(title) || fallbackId || str(pn) || \"Untitled\"; // -------- PATH A: Slack Lists (preferred) --------\n\n  const cfg = LISTS[listKey];\n\n  if (cfg !== null && cfg !== void 0 && cfg.id) {\n    var _created$item;\n\n    // 1) Create the row with a proper name (this avoids “Untitled item”)\n    const created = await slack(\"slackLists.items.create\", JSON.stringify({\n      list_id: cfg.id,\n      name // <-- THIS is the visible first column (“Task” / “Item”)\n\n    }));\n\n    if (!(created !== null && created !== void 0 && created.ok)) {\n      return res.status(400).json({\n        error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n        raw: created\n      });\n    }\n\n    const itemId = ((_created$item = created.item) === null || _created$item === void 0 ? void 0 : _created$item.id) || created.item_id; // 2) Prepare column updates\n\n    const fields = [];\n\n    if (cfg.cols.desc) {\n      const textBits = [safe(description), listKey === \"tasks\" ? safe(bodyText) : \"\", safe(linkUrl) ? `<${safe(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n      if (textBits) fields.push({\n        column_id: cfg.cols.desc,\n        value: {\n          text: textBits\n        }\n      });\n    }\n\n    if (cfg.cols.date && safe(date)) fields.push({\n      column_id: cfg.cols.date,\n      value: {\n        date: safe(date)\n      }\n    });\n\n    if (cfg.cols.pn) {\n      const pnStr = str(pn);\n      const snStr = str(sn);\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, safe(dom) && `DOM: ${safe(dom)}`].filter(Boolean).join(\"  \");\n      if (combo) fields.push({\n        column_id: cfg.cols.pn,\n        value: {\n          text: combo\n        }\n      });\n    }\n\n    if (cfg.cols.track) {\n      const t = [safe(trackingNumber) && `RL: ${safe(trackingNumber)}`, safe(poNumber) && `PO: ${safe(poNumber)}`].filter(Boolean).join(\"  \");\n      if (t) fields.push({\n        column_id: cfg.cols.track,\n        value: {\n          text: t\n        }\n      });\n    }\n\n    if (cfg.cols.wo && safe(workOrder)) fields.push({\n      column_id: cfg.cols.wo,\n      value: {\n        text: `WO: ${safe(workOrder)}`\n      }\n    });\n    if (cfg.cols.lsn && safe(localSN)) fields.push({\n      column_id: cfg.cols.lsn,\n      value: {\n        text: safe(localSN)\n      }\n    }); // 3) Update the row’s other fields (if any)\n\n    if (fields.length) {\n      const upd = await slack(\"slackLists.items.update\", JSON.stringify({\n        list_id: cfg.id,\n        item_id: itemId,\n        fields\n      }));\n\n      if (!(upd !== null && upd !== void 0 && upd.ok)) {\n        return res.status(400).json({\n          error: (upd === null || upd === void 0 ? void 0 : upd.error) || \"Slack Lists update error\",\n          raw: upd\n        });\n      }\n    } // 4) Optional: upload photos and set the attachment column\n\n\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n      const fileIds = [];\n\n      for (const url of photoUrls) {\n        var _complete$files, _complete$files$;\n\n        // get external upload URL\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: new URLSearchParams({\n            filename: url.split(\"/\").pop() || \"image.jpg\"\n          })\n        }).then(r => r.json());\n        if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n        try {\n          const img = await fetch(url);\n          const buf = await img.arrayBuffer();\n          await fetch(init.upload_url, {\n            method: \"PUT\",\n            body: Buffer.from(buf)\n          });\n        } catch {\n          /* ignore individual image failures */\n        }\n\n        const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n          files: [{\n            id: init.file_id,\n            title: \"photo\"\n          }]\n        }));\n        if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) fileIds.push(complete.files[0].id);\n      }\n\n      if (fileIds.length) {\n        await slack(\"slackLists.items.update\", JSON.stringify({\n          list_id: cfg.id,\n          item_id: itemId,\n          fields: [{\n            column_id: cfg.cols.photos,\n            value: {\n              attachment: {\n                file_ids: fileIds\n              }\n            }\n          }]\n        }));\n      }\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id: cfg.id,\n      item_id: itemId\n    });\n  } // -------- PATH B: Fallback to posting in a channel --------\n\n\n  const channel = CHANNELS[listKey];\n  if (!channel) return res.status(400).json({\n    error: \"Unknown listKey (no list or channel configured)\"\n  }); // join public channels to avoid channel_not_found\n\n  await fetch(\"https://slack.com/api/conversations.join\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      channel\n    })\n  });\n  const lines = [];\n  lines.push(`*${name}*`);\n  const pnStr = str(pn);\n  const snStr = str(sn);\n  if (pnStr) lines.push(`PN: ${pnStr}`);\n  if (snStr) lines.push(`SN: ${snStr}`);\n  if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n  if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n  if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n  if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n  if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n  if (safe(date)) lines.push(`Date: ${safe(date)}`);\n  const desc = safe(description);\n  if (desc) lines.push(desc);else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n  if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({\n    channel,\n    text\n  }));\n  if (!(posted !== null && posted !== void 0 && posted.ok)) return res.status(400).json({\n    error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error\",\n    raw: posted\n  });\n  return res.status(200).json({\n    ok: true,\n    mode: \"channel\",\n    channel,\n    ts: posted.ts\n  });\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","LISTS","receiving","id","SLACK_LIST_RECEIVING_ID","cols","desc","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","track","SLACK_LIST_RECEIVING_TRACKING_COL","wo","SLACK_LIST_RECEIVING_WO_COL","lsn","SLACK_LIST_RECEIVING_LOCALSN_COL","photos","SLACK_LIST_RECEIVING_PHOTOS_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_TRACKING_COL","SLACK_LIST_SHIPPING_WO_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_DESCRIPTION_COL","CHANNELS","SLACK_CHANNEL_RECEIVING_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_TASKS_ID","headersJson","Authorization","slack","headers","fetch","then","r","str","v","Array","isArray","filter","Boolean","join","toString","trim","safe","fallbackId","split","pop","name","cfg","created","JSON","stringify","list_id","ok","raw","itemId","item","item_id","fields","textBits","push","column_id","value","text","pnStr","snStr","combo","t","length","upd","fileIds","url","init","URLSearchParams","filename","upload_url","img","buf","arrayBuffer","Buffer","from","complete","files","file_id","attachment","file_ids","mode","channel","lines","posted","ts"],"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","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\n// pages/api/slack/add-to-list.js\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n  const token = process.env.SLACK_BOT_TOKEN;\r\n  if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n  const {\r\n    listKey,              // \"receiving\" | \"shipping\" | \"tasks\"\r\n    title, linkUrl, bodyText,\r\n    date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n    photoUrls = [],\r\n  } = req.body;\r\n\r\n  // -------- ENV mapping --------\r\n  const LISTS = {\r\n    receiving: {\r\n      id: process.env.SLACK_LIST_RECEIVING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment column\r\n      },\r\n    },\r\n    shipping: {\r\n      id: process.env.SLACK_LIST_SHIPPING_ID,\r\n      cols: {\r\n        desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n        date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n        pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n        track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n        wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n        lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n        photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment column\r\n      },\r\n    },\r\n    tasks: {\r\n      id: process.env.SLACK_LIST_TASKS_ID,\r\n      cols: {\r\n        desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n      },\r\n    },\r\n  };\r\n\r\n  const CHANNELS = {\r\n    receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n    shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n    tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n  };\r\n\r\n  // -------- helpers --------\r\n  const headersJson = {\r\n    Authorization: `Bearer ${token}`,\r\n    \"Content-Type\": \"application/json; charset=utf-8\",\r\n  };\r\n  const slack = (method, body, headers = headersJson) =>\r\n    fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body }).then(r => r.json());\r\n\r\n  const str   = v => (Array.isArray(v) ? v.filter(Boolean).join(\", \") : (v ?? \"\")).toString().trim();\r\n  const safe  = v => (v ?? \"\").toString().trim();\r\n\r\n  // Build a safe, non-empty item name (this populates the first column, labeled “Task” or “Item” in the UI)\r\n  const fallbackId = str(localSN) || str(linkUrl?.split(\"/\").pop());\r\n  const name = str(title) || fallbackId || str(pn) || \"Untitled\";\r\n\r\n  // -------- PATH A: Slack Lists (preferred) --------\r\n  const cfg = LISTS[listKey];\r\n  if (cfg?.id) {\r\n    // 1) Create the row with a proper name (this avoids “Untitled item”)\r\n    const created = await slack(\"slackLists.items.create\", JSON.stringify({\r\n      list_id: cfg.id,\r\n      name,                        // <-- THIS is the visible first column (“Task” / “Item”)\r\n    }));\r\n\r\n    if (!created?.ok) {\r\n      return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n    }\r\n\r\n    const itemId = created.item?.id || created.item_id;\r\n\r\n    // 2) Prepare column updates\r\n    const fields = [];\r\n\r\n    if (cfg.cols.desc) {\r\n      const textBits = [\r\n        safe(description),\r\n        listKey === \"tasks\" ? safe(bodyText) : \"\",\r\n        safe(linkUrl) ? `<${safe(linkUrl)}|Open in Magmo>` : \"\",\r\n      ].filter(Boolean).join(\"\\n\");\r\n      if (textBits) fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n    }\r\n\r\n    if (cfg.cols.date && safe(date)) fields.push({ column_id: cfg.cols.date, value: { date: safe(date) } });\r\n\r\n    if (cfg.cols.pn) {\r\n      const pnStr = str(pn);\r\n      const snStr = str(sn);\r\n      const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, safe(dom) && `DOM: ${safe(dom)}`]\r\n        .filter(Boolean).join(\"  \");\r\n      if (combo) fields.push({ column_id: cfg.cols.pn, value: { text: combo } });\r\n    }\r\n\r\n    if (cfg.cols.track) {\r\n      const t = [safe(trackingNumber) && `RL: ${safe(trackingNumber)}`, safe(poNumber) && `PO: ${safe(poNumber)}`]\r\n        .filter(Boolean).join(\"  \");\r\n      if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n    }\r\n\r\n    if (cfg.cols.wo  && safe(workOrder)) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${safe(workOrder)}` } });\r\n    if (cfg.cols.lsn && safe(localSN))   fields.push({ column_id: cfg.cols.lsn, value: { text: safe(localSN) } });\r\n\r\n    // 3) Update the row’s other fields (if any)\r\n    if (fields.length) {\r\n      const upd = await slack(\"slackLists.items.update\", JSON.stringify({\r\n        list_id: cfg.id,\r\n        item_id: itemId,\r\n        fields,\r\n      }));\r\n      if (!upd?.ok) {\r\n        return res.status(400).json({ error: upd?.error || \"Slack Lists update error\", raw: upd });\r\n      }\r\n    }\r\n\r\n    // 4) Optional: upload photos and set the attachment column\r\n    if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n      const fileIds = [];\r\n      for (const url of photoUrls) {\r\n        // get external upload URL\r\n        const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n          method: \"POST\",\r\n          headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n          body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n        }).then(r => r.json());\r\n        if (!init?.ok || !init?.upload_url) continue;\r\n\r\n        try {\r\n          const img = await fetch(url);\r\n          const buf = await img.arrayBuffer();\r\n          await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n        } catch { /* ignore individual image failures */ }\r\n\r\n        const complete = await slack(\"files.completeUploadExternal\",\r\n          JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }]}));\r\n        if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n      }\r\n\r\n      if (fileIds.length) {\r\n        await slack(\"slackLists.items.update\", JSON.stringify({\r\n          list_id: cfg.id,\r\n          item_id: itemId,\r\n          fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n        }));\r\n      }\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: itemId });\r\n  }\r\n\r\n  // -------- PATH B: Fallback to posting in a channel --------\r\n  const channel = CHANNELS[listKey];\r\n  if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n  // join public channels to avoid channel_not_found\r\n  await fetch(\"https://slack.com/api/conversations.join\", {\r\n    method: \"POST\",\r\n    headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n    body: new URLSearchParams({ channel }),\r\n  });\r\n\r\n  const lines = [];\r\n  lines.push(`*${name}*`);\r\n  const pnStr = str(pn);\r\n  const snStr = str(sn);\r\n  if (pnStr) lines.push(`PN: ${pnStr}`);\r\n  if (snStr) lines.push(`SN: ${snStr}`);\r\n  if (safe(workOrder))      lines.push(`WO: ${safe(workOrder)}`);\r\n  if (safe(poNumber))       lines.push(`PO: ${safe(poNumber)}`);\r\n  if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n  if (safe(dom))            lines.push(`DOM: ${safe(dom)}`);\r\n  if (safe(localSN))        lines.push(`Local SN: ${safe(localSN)}`);\r\n  if (safe(date))           lines.push(`Date: ${safe(date)}`);\r\n  const desc = safe(description);\r\n  if (desc) lines.push(desc);\r\n  else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n  if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n  const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n  const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n  if (!posted?.ok) return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n\r\n  return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
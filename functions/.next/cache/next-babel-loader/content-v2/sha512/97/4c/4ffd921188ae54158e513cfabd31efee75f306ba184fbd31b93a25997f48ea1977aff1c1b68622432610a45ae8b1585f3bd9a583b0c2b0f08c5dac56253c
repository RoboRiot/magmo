{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\n//   try {\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\n//     const {\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\n//       title, linkUrl, bodyText,\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\n//       photoUrls = [],\n//     } = req.body;\n//     const LISTS = {\n//       receiving: {\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\n//         },\n//       },\n//       shipping: {\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\n//         cols: {\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\n//         },\n//       },\n//       tasks: {\n//         id: process.env.SLACK_LIST_TASKS_ID,\n//         cols: {\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\n//         },\n//       },\n//     };\n//     const CHANNELS = {\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\n//     };\n//     const headersJson = {\n//       Authorization: `Bearer ${token}`,\n//       \"Content-Type\": \"application/json; charset=utf-8\",\n//     };\n//     const slack = (method, body, headers = headersJson) =>\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\n//         .then(r => r.json());\n//     const plain = v => (v ?? \"\").toString().trim();\n//     const safe  = plain;\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     // ---------- PATH A: Write to a LIST ----------\n//     const cfg = LISTS[listKey];\n//     if (cfg?.id) {\n//       const fields = [];\n//       // Description column\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\n//         const textBits = [\n//           description,\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\n//         ].filter(Boolean).join(\"\\n\");\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\n//       }\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\n//       if (cfg.cols.pn && (pn || sn || dom)) {\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\n//       }\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\n//         const t = [\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\n//           poNumber ? `PO: ${poNumber}` : \"\",\n//         ].filter(Boolean).join(\"  \");\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\n//       }\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\n//       // NOW build the create body (cfg & fields exist)\n//       const createBody = {\n//         list_id: cfg.id,\n//         title: plain(title) || plain(localSN) || \"Untitled\",\n//         fields,\n//       };\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n//       if (!created?.ok) {\n//         console.error(\"slackLists.items.create error:\", created);\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\n//       }\n//       // Photos -> attachment column\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\n//         const fileIds = [];\n//         for (const url of photoUrls) {\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n//             method: \"POST\",\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\n//           }).then(r => r.json());\n//           if (!init?.ok || !init?.upload_url) continue;\n//           try {\n//             const img = await fetch(url);\n//             const buf = await img.arrayBuffer();\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\n//           } catch (_) {}\n//           const complete = await slack(\"files.completeUploadExternal\",\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\n//           );\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\n//         }\n//         if (fileIds.length) {\n//           await slack(\"slackLists.items.update\", JSON.stringify({\n//             list_id: cfg.id,\n//             item_id: created.item.id,\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\n//           }));\n//         }\n//       }\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\n//     }\n//     // ---------- PATH B: Fallback to a channel post ----------\n//     const channel = CHANNELS[listKey];\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\n//     // Try to join public channels to avoid channel_not_found\n//     await fetch(\"https://slack.com/api/conversations.join\", {\n//       method: \"POST\",\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//       body: new URLSearchParams({ channel }),\n//     });\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\n//     const lines = [];\n//     lines.push(`*${safeTitle}*`);\n//     const pnStr = joinArr(pn);\n//     const snStr = joinArr(sn);\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\n//     if (snStr) lines.push(`SN: ${snStr}`);\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\n//     const desc = safe(description);\n//     if (desc) lines.push(desc);\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\n//     if (!posted?.ok) {\n//       console.error(\"chat.postMessage error:\", posted);\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\n//     }\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\n//   } catch (e) {\n//     console.error(\"API /slack/add-to-list crashed:\", e);\n//     return res.status(500).json({ error: \"Server error\" });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  try {\n    if (req.method !== \"POST\") {\n      return res.status(405).json({\n        error: \"Method not allowed\"\n      });\n    }\n\n    const token = process.env.SLACK_BOT_TOKEN;\n    if (!token) return res.status(500).json({\n      error: \"Missing SLACK_BOT_TOKEN\"\n    });\n    const {\n      listKey,\n      // \"receiving\" | \"shipping\" | \"tasks\"\n      title,\n      linkUrl,\n      bodyText,\n      date,\n      pn,\n      sn,\n      dom,\n      trackingNumber,\n      poNumber,\n      workOrder,\n      localSN,\n      description,\n      photoUrls = []\n    } = req.body || {}; // ---- Debug (safe) ----\n\n    try {\n      console.log(\"add-to-list payload\", {\n        listKey,\n        title,\n        localSN,\n        pn: Array.isArray(pn) ? pn : pn !== null && pn !== void 0 ? pn : \"\",\n        sn: Array.isArray(sn) ? sn : sn !== null && sn !== void 0 ? sn : \"\",\n        hasPhotos: Array.isArray(photoUrls) ? photoUrls.length : 0\n      });\n    } catch {} // ---- ENV mapping: Slack Lists (Canvas Lists) ----\n\n\n    const LISTS = {\n      receiving: {\n        id: process.env.SLACK_LIST_RECEIVING_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\n          date: process.env.SLACK_LIST_RECEIVING_DATE_COL,\n          pn: process.env.SLACK_LIST_RECEIVING_PNSN_COL,\n          track: process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\n          wo: process.env.SLACK_LIST_RECEIVING_WO_COL,\n          lsn: process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\n          photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL // attachment-type column\n\n        }\n      },\n      shipping: {\n        id: process.env.SLACK_LIST_SHIPPING_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\n          date: process.env.SLACK_LIST_SHIPPING_DATE_COL,\n          pn: process.env.SLACK_LIST_SHIPPING_PNSN_COL,\n          track: process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\n          wo: process.env.SLACK_LIST_SHIPPING_WO_COL,\n          lsn: process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\n          photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL // attachment-type column\n\n        }\n      },\n      tasks: {\n        id: process.env.SLACK_LIST_TASKS_ID,\n        cols: {\n          desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL\n        }\n      }\n    }; // ---- ENV mapping: channel fallbacks (optional) ----\n\n    const CHANNELS = {\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\n      shipping: process.env.SLACK_CHANNEL_SHIPPING_ID,\n      tasks: process.env.SLACK_CHANNEL_TASKS_ID\n    }; // ---- helpers ----\n\n    const headersJson = {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    };\n\n    const slack = (method, body, headers = headersJson) => fetch(`https://slack.com/api/${method}`, {\n      method: \"POST\",\n      headers,\n      body\n    }).then(r => r.json());\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim();\n\n    const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a); // Server-side safety net so we never send an empty title\n\n\n    const safeId = plain(localSN) || plain(linkUrl === null || linkUrl === void 0 ? void 0 : linkUrl.split(\"/\").pop());\n    const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\"; // ---------- PATH A: Slack Lists (preferred) ----------\n\n    const cfg = LISTS[listKey];\n\n    if (cfg !== null && cfg !== void 0 && cfg.id) {\n      var _cfg$cols, _cfg$cols2, _cfg$cols3, _cfg$cols4, _cfg$cols5, _cfg$cols6, _cfg$cols7, _created$item2;\n\n      const fields = []; // Keep values as simple strings where possible; Slack will coerce text columns.\n\n      const descText = [plain(description), listKey === \"tasks\" && plain(bodyText) ? plain(bodyText) : \"\", plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\"].filter(Boolean).join(\"\\n\");\n      if ((_cfg$cols = cfg.cols) !== null && _cfg$cols !== void 0 && _cfg$cols.desc && descText) fields.push({\n        column_id: cfg.cols.desc,\n        value: descText\n      });\n      if ((_cfg$cols2 = cfg.cols) !== null && _cfg$cols2 !== void 0 && _cfg$cols2.date && plain(date)) fields.push({\n        column_id: cfg.cols.date,\n        value: plain(date)\n      });\n\n      if ((_cfg$cols3 = cfg.cols) !== null && _cfg$cols3 !== void 0 && _cfg$cols3.pn && (pn || sn || dom)) {\n        const pnStr = joinArr(pn);\n        const snStr = joinArr(sn);\n        const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`].filter(Boolean).join(\"  \");\n        if (combo) fields.push({\n          column_id: cfg.cols.pn,\n          value: combo\n        });\n      }\n\n      if ((_cfg$cols4 = cfg.cols) !== null && _cfg$cols4 !== void 0 && _cfg$cols4.track && (trackingNumber || poNumber)) {\n        const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`].filter(Boolean).join(\"  \");\n        if (t) fields.push({\n          column_id: cfg.cols.track,\n          value: t\n        });\n      }\n\n      if ((_cfg$cols5 = cfg.cols) !== null && _cfg$cols5 !== void 0 && _cfg$cols5.wo && plain(workOrder)) fields.push({\n        column_id: cfg.cols.wo,\n        value: `WO: ${plain(workOrder)}`\n      });\n      if ((_cfg$cols6 = cfg.cols) !== null && _cfg$cols6 !== void 0 && _cfg$cols6.lsn && plain(localSN)) fields.push({\n        column_id: cfg.cols.lsn,\n        value: plain(localSN)\n      }); // IMPORTANT: Slack Lists title must be a plain string; sending rich_text here produced \"Untitled item\".\n\n      const createBody = {\n        list_id: cfg.id,\n        title: safeTitle,\n        fields\n      };\n      const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\n\n      if (!(created !== null && created !== void 0 && created.ok)) {\n        return res.status(400).json({\n          error: (created === null || created === void 0 ? void 0 : created.error) || \"Slack Lists API error\",\n          raw: created\n        });\n      } // Attach photos (optional; requires files:write)\n\n\n      if ((_cfg$cols7 = cfg.cols) !== null && _cfg$cols7 !== void 0 && _cfg$cols7.photos && Array.isArray(photoUrls) && photoUrls.length) {\n        const fileIds = [];\n\n        for (const url of photoUrls) {\n          var _complete$files, _complete$files$;\n\n          // get external upload URL\n          const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\n            method: \"POST\",\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: new URLSearchParams({\n              filename: url.split(\"/\").pop() || \"image.jpg\"\n            })\n          }).then(r => r.json());\n          if (!(init !== null && init !== void 0 && init.ok) || !(init !== null && init !== void 0 && init.upload_url)) continue;\n\n          try {\n            const img = await fetch(url);\n            const buf = await img.arrayBuffer();\n            await fetch(init.upload_url, {\n              method: \"PUT\",\n              body: Buffer.from(buf)\n            });\n          } catch {// ignore individual image failures\n          }\n\n          const complete = await slack(\"files.completeUploadExternal\", JSON.stringify({\n            files: [{\n              id: init.file_id,\n              title: \"photo\"\n            }]\n          }));\n\n          if (complete !== null && complete !== void 0 && complete.ok && complete !== null && complete !== void 0 && (_complete$files = complete.files) !== null && _complete$files !== void 0 && (_complete$files$ = _complete$files[0]) !== null && _complete$files$ !== void 0 && _complete$files$.id) {\n            fileIds.push(complete.files[0].id);\n          }\n        }\n\n        if (fileIds.length) {\n          var _created$item;\n\n          await slack(\"slackLists.items.update\", JSON.stringify({\n            list_id: cfg.id,\n            item_id: (_created$item = created.item) === null || _created$item === void 0 ? void 0 : _created$item.id,\n            fields: [{\n              column_id: cfg.cols.photos,\n              value: {\n                attachment: {\n                  file_ids: fileIds\n                }\n              }\n            }]\n          }));\n        }\n      }\n\n      return res.status(200).json({\n        ok: true,\n        mode: \"list\",\n        list_id: cfg.id,\n        item_id: ((_created$item2 = created.item) === null || _created$item2 === void 0 ? void 0 : _created$item2.id) || null\n      });\n    } // ---------- PATH B: fallback to posting in a channel ----------\n\n\n    const channel = CHANNELS[listKey];\n\n    if (!channel) {\n      return res.status(400).json({\n        error: \"Unknown listKey (no list or channel configured)\"\n      });\n    } // join public channels if needed to avoid channel_not_found\n\n\n    await fetch(\"https://slack.com/api/conversations.join\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        channel\n      })\n    });\n    const lines = [];\n    lines.push(`*${safeTitle}*`);\n    const pnStr = joinArr(pn);\n    const snStr = joinArr(sn);\n    if (pnStr) lines.push(`PN: ${pnStr}`);\n    if (snStr) lines.push(`SN: ${snStr}`);\n    if (plain(workOrder)) lines.push(`WO: ${plain(workOrder)}`);\n    if (plain(poNumber)) lines.push(`PO: ${plain(poNumber)}`);\n    if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\n    if (plain(dom)) lines.push(`DOM: ${plain(dom)}`);\n    if (plain(localSN)) lines.push(`Local SN: ${plain(localSN)}`);\n    if (plain(date)) lines.push(`Date: ${plain(date)}`);\n    const desc = plain(description);\n    if (desc) lines.push(desc);else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\n    if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\n    const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\n    const posted = await slack(\"chat.postMessage\", JSON.stringify({\n      channel,\n      text\n    }));\n\n    if (!(posted !== null && posted !== void 0 && posted.ok)) {\n      return res.status(400).json({\n        error: (posted === null || posted === void 0 ? void 0 : posted.error) || \"Slack API error\",\n        raw: posted\n      });\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"channel\",\n      channel,\n      ts: posted.ts\n    });\n  } catch (err) {\n    console.error(\"add-to-list handler error:\", err);\n    return res.status(500).json({\n      error: \"Server error\",\n      detail: String((err === null || err === void 0 ? void 0 : err.message) || err)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/mack2/Desktop/code/pages/api/slack/add-to-list.js"],"names":["handler","req","res","method","status","json","error","token","process","env","SLACK_BOT_TOKEN","listKey","title","linkUrl","bodyText","date","pn","sn","dom","trackingNumber","poNumber","workOrder","localSN","description","photoUrls","body","console","log","Array","isArray","hasPhotos","length","LISTS","receiving","id","SLACK_LIST_RECEIVING_ID","cols","desc","SLACK_LIST_RECEIVING_DESCRIPTION_COL","SLACK_LIST_RECEIVING_DATE_COL","SLACK_LIST_RECEIVING_PNSN_COL","track","SLACK_LIST_RECEIVING_TRACKING_COL","wo","SLACK_LIST_RECEIVING_WO_COL","lsn","SLACK_LIST_RECEIVING_LOCALSN_COL","photos","SLACK_LIST_RECEIVING_PHOTOS_COL","shipping","SLACK_LIST_SHIPPING_ID","SLACK_LIST_SHIPPING_DESCRIPTION_COL","SLACK_LIST_SHIPPING_DATE_COL","SLACK_LIST_SHIPPING_PNSN_COL","SLACK_LIST_SHIPPING_TRACKING_COL","SLACK_LIST_SHIPPING_WO_COL","SLACK_LIST_SHIPPING_LOCALSN_COL","SLACK_LIST_SHIPPING_PHOTOS_COL","tasks","SLACK_LIST_TASKS_ID","SLACK_LIST_TASKS_DESCRIPTION_COL","CHANNELS","SLACK_CHANNEL_RECEIVING_ID","SLACK_CHANNEL_SHIPPING_ID","SLACK_CHANNEL_TASKS_ID","headersJson","Authorization","slack","headers","fetch","then","r","plain","v","toString","trim","joinArr","a","filter","Boolean","map","join","safeId","split","pop","safeTitle","cfg","fields","descText","push","column_id","value","pnStr","snStr","combo","t","createBody","list_id","created","JSON","stringify","ok","raw","fileIds","url","init","URLSearchParams","filename","upload_url","img","buf","arrayBuffer","Buffer","from","complete","files","file_id","item_id","item","attachment","file_ids","mode","channel","lines","text","posted","ts","err","detail","String","message"],"mappingseAAe,eAAeA,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAI;AACF,QAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,aAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AAED,UAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAA1B;AACA,QAAI,CAACH,KAAL,EAAY,OAAOL,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AAEZ,UAAM;AACJK,MAAAA,OADI;AACqB;AACzBC,MAAAA,KAFI;AAEGC,MAAAA,OAFH;AAEYC,MAAAA,QAFZ;AAGJC,MAAAA,IAHI;AAGEC,MAAAA,EAHF;AAGMC,MAAAA,EAHN;AAGUC,MAAAA,GAHV;AAGeC,MAAAA,cAHf;AAG+BC,MAAAA,QAH/B;AAGyCC,MAAAA,SAHzC;AAGoDC,MAAAA,OAHpD;AAG6DC,MAAAA,WAH7D;AAIJC,MAAAA,SAAS,GAAG;AAJR,QAKFvB,GAAG,CAACwB,IAAJ,IAAY,EALhB,CARE,CAeF;;AACA,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC;AACjChB,QAAAA,OADiC;AAEjCC,QAAAA,KAFiC;AAGjCU,QAAAA,OAHiC;AAIjCN,QAAAA,EAAE,EAAEY,KAAK,CAACC,OAAN,CAAcb,EAAd,IAAoBA,EAApB,GAA0BA,EAA1B,aAA0BA,EAA1B,cAA0BA,EAA1B,GAAgC,EAJH;AAKjCC,QAAAA,EAAE,EAAEW,KAAK,CAACC,OAAN,CAAcZ,EAAd,IAAoBA,EAApB,GAA0BA,EAA1B,aAA0BA,EAA1B,cAA0BA,EAA1B,GAAgC,EALH;AAMjCa,QAAAA,SAAS,EAAEF,KAAK,CAACC,OAAN,CAAcL,SAAd,IAA2BA,SAAS,CAACO,MAArC,GAA8C;AANxB,OAAnC;AAQD,KATD,CASE,MAAM,CAAE,CAzBR,CA2BF;;;AACA,UAAMC,KAAK,GAAG;AACZC,MAAAA,SAAS,EAAE;AACTC,QAAAA,EAAE,EAAE1B,OAAO,CAACC,GAAR,CAAY0B,uBADP;AAETC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAI7B,OAAO,CAACC,GAAR,CAAY6B,oCADhB;AAEJvB,UAAAA,IAAI,EAAIP,OAAO,CAACC,GAAR,CAAY8B,6BAFhB;AAGJvB,UAAAA,EAAE,EAAMR,OAAO,CAACC,GAAR,CAAY+B,6BAHhB;AAIJC,UAAAA,KAAK,EAAGjC,OAAO,CAACC,GAAR,CAAYiC,iCAJhB;AAKJC,UAAAA,EAAE,EAAMnC,OAAO,CAACC,GAAR,CAAYmC,2BALhB;AAMJC,UAAAA,GAAG,EAAKrC,OAAO,CAACC,GAAR,CAAYqC,gCANhB;AAOJC,UAAAA,MAAM,EAAEvC,OAAO,CAACC,GAAR,CAAYuC,+BAPhB,CAOiD;;AAPjD;AAFG,OADC;AAaZC,MAAAA,QAAQ,EAAE;AACRf,QAAAA,EAAE,EAAE1B,OAAO,CAACC,GAAR,CAAYyC,sBADR;AAERd,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAI7B,OAAO,CAACC,GAAR,CAAY0C,mCADhB;AAEJpC,UAAAA,IAAI,EAAIP,OAAO,CAACC,GAAR,CAAY2C,4BAFhB;AAGJpC,UAAAA,EAAE,EAAMR,OAAO,CAACC,GAAR,CAAY4C,4BAHhB;AAIJZ,UAAAA,KAAK,EAAGjC,OAAO,CAACC,GAAR,CAAY6C,gCAJhB;AAKJX,UAAAA,EAAE,EAAMnC,OAAO,CAACC,GAAR,CAAY8C,0BALhB;AAMJV,UAAAA,GAAG,EAAKrC,OAAO,CAACC,GAAR,CAAY+C,+BANhB;AAOJT,UAAAA,MAAM,EAAEvC,OAAO,CAACC,GAAR,CAAYgD,8BAPhB,CAOiD;;AAPjD;AAFE,OAbE;AAyBZC,MAAAA,KAAK,EAAE;AACLxB,QAAAA,EAAE,EAAE1B,OAAO,CAACC,GAAR,CAAYkD,mBADX;AAELvB,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE7B,OAAO,CAACC,GAAR,CAAYmD;AADd;AAFD;AAzBK,KAAd,CA5BE,CA6DF;;AACA,UAAMC,QAAQ,GAAG;AACf5B,MAAAA,SAAS,EAAEzB,OAAO,CAACC,GAAR,CAAYqD,0BADR;AAEfb,MAAAA,QAAQ,EAAGzC,OAAO,CAACC,GAAR,CAAYsD,yBAFR;AAGfL,MAAAA,KAAK,EAAMlD,OAAO,CAACC,GAAR,CAAYuD;AAHR,KAAjB,CA9DE,CAoEF;;AACA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,aAAa,EAAG,UAAS3D,KAAM,EADb;AAElB,sBAAgB;AAFE,KAApB;;AAKA,UAAM4D,KAAK,GAAG,CAAChE,MAAD,EAASsB,IAAT,EAAe2C,OAAO,GAAGH,WAAzB,KACZI,KAAK,CAAE,yBAAwBlE,MAAO,EAAjC,EAAoC;AAAEA,MAAAA,MAAM,EAAE,MAAV;AAAkBiE,MAAAA,OAAlB;AAA2B3C,MAAAA;AAA3B,KAApC,CAAL,CACG6C,IADH,CACQC,CAAC,IAAIA,CAAC,CAAClE,IAAF,EADb,CADF;;AAIA,UAAMmE,KAAK,GAAIC,CAAD,IAAO,CAACA,CAAD,aAACA,CAAD,cAACA,CAAD,GAAM,EAAN,EAAUC,QAAV,GAAqBC,IAArB,EAArB;;AACA,UAAMC,OAAO,GAAIC,CAAD,IAAOjD,KAAK,CAACC,OAAN,CAAcgD,CAAd,IAAmBA,CAAC,CAACC,MAAF,CAASC,OAAT,EAAkBC,GAAlB,CAAsBR,KAAtB,EAA6BS,IAA7B,CAAkC,IAAlC,CAAnB,GAA6DT,KAAK,CAACK,CAAD,CAAzF,CA/EE,CAiFF;;;AACA,UAAMK,MAAM,GAAMV,KAAK,CAAClD,OAAD,CAAL,IAAkBkD,KAAK,CAAC3D,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEsE,KAAT,CAAe,GAAf,EAAoBC,GAApB,EAAD,CAAzC;AACA,UAAMC,SAAS,GAAGb,KAAK,CAAC5D,KAAD,CAAL,IAAgBsE,MAAhB,IAA0BN,OAAO,CAAC5D,EAAD,CAAjC,IAAyC,UAA3D,CAnFE,CAqFF;;AACA,UAAMsE,GAAG,GAAGtD,KAAK,CAACrB,OAAD,CAAjB;;AACA,QAAI2E,GAAJ,aAAIA,GAAJ,eAAIA,GAAG,CAAEpD,EAAT,EAAa;AAAA;;AACX,YAAMqD,MAAM,GAAG,EAAf,CADW,CAGX;;AACA,YAAMC,QAAQ,GAAG,CACfhB,KAAK,CAACjD,WAAD,CADU,EAEdZ,OAAO,KAAK,OAAZ,IAAuB6D,KAAK,CAAC1D,QAAD,CAA7B,GAA2C0D,KAAK,CAAC1D,QAAD,CAAhD,GAA6D,EAF9C,EAGf0D,KAAK,CAAC3D,OAAD,CAAL,GAAkB,IAAG2D,KAAK,CAAC3D,OAAD,CAAU,iBAApC,GAAuD,EAHxC,EAIfiE,MAJe,CAIRC,OAJQ,EAICE,IAJD,CAIM,IAJN,CAAjB;AAKA,UAAI,aAAAK,GAAG,CAAClD,IAAJ,gDAAUC,IAAV,IAAkBmD,QAAtB,EAAgCD,MAAM,CAACE,IAAP,CAAY;AAAEC,QAAAA,SAAS,EAAEJ,GAAG,CAAClD,IAAJ,CAASC,IAAtB;AAA4BsD,QAAAA,KAAK,EAAEH;AAAnC,OAAZ;AAEhC,UAAI,cAAAF,GAAG,CAAClD,IAAJ,kDAAUrB,IAAV,IAAkByD,KAAK,CAACzD,IAAD,CAA3B,EAAmCwE,MAAM,CAACE,IAAP,CAAY;AAAEC,QAAAA,SAAS,EAAEJ,GAAG,CAAClD,IAAJ,CAASrB,IAAtB;AAA4B4E,QAAAA,KAAK,EAAEnB,KAAK,CAACzD,IAAD;AAAxC,OAAZ;;AAEnC,UAAI,cAAAuE,GAAG,CAAClD,IAAJ,kDAAUpB,EAAV,KAAiBA,EAAE,IAAIC,EAAN,IAAYC,GAA7B,CAAJ,EAAuC;AACrC,cAAM0E,KAAK,GAAGhB,OAAO,CAAC5D,EAAD,CAArB;AACA,cAAM6E,KAAK,GAAGjB,OAAO,CAAC3D,EAAD,CAArB;AACA,cAAM6E,KAAK,GAAG,CAACF,KAAK,IAAK,OAAMA,KAAM,EAAvB,EAA0BC,KAAK,IAAK,OAAMA,KAAM,EAAhD,EAAmDrB,KAAK,CAACtD,GAAD,CAAL,IAAe,QAAOsD,KAAK,CAACtD,GAAD,CAAM,EAApF,EACX4D,MADW,CACJC,OADI,EACKE,IADL,CACU,IADV,CAAd;AAEA,YAAIa,KAAJ,EAAWP,MAAM,CAACE,IAAP,CAAY;AAAEC,UAAAA,SAAS,EAAEJ,GAAG,CAAClD,IAAJ,CAASpB,EAAtB;AAA0B2E,UAAAA,KAAK,EAAEG;AAAjC,SAAZ;AACZ;;AAED,UAAI,cAAAR,GAAG,CAAClD,IAAJ,kDAAUK,KAAV,KAAoBtB,cAAc,IAAIC,QAAtC,CAAJ,EAAqD;AACnD,cAAM2E,CAAC,GAAG,CAACvB,KAAK,CAACrD,cAAD,CAAL,IAA0B,OAAMqD,KAAK,CAACrD,cAAD,CAAiB,EAAvD,EAA0DqD,KAAK,CAACpD,QAAD,CAAL,IAAoB,OAAMoD,KAAK,CAACpD,QAAD,CAAW,EAApG,EACP0D,MADO,CACAC,OADA,EACSE,IADT,CACc,IADd,CAAV;AAEA,YAAIc,CAAJ,EAAOR,MAAM,CAACE,IAAP,CAAY;AAAEC,UAAAA,SAAS,EAAEJ,GAAG,CAAClD,IAAJ,CAASK,KAAtB;AAA6BkD,UAAAA,KAAK,EAAEI;AAApC,SAAZ;AACR;;AAED,UAAI,cAAAT,GAAG,CAAClD,IAAJ,kDAAUO,EAAV,IAAiB6B,KAAK,CAACnD,SAAD,CAA1B,EAAuCkE,MAAM,CAACE,IAAP,CAAY;AAAEC,QAAAA,SAAS,EAAEJ,GAAG,CAAClD,IAAJ,CAASO,EAAtB;AAA2BgD,QAAAA,KAAK,EAAG,OAAMnB,KAAK,CAACnD,SAAD,CAAY;AAA1D,OAAZ;AACvC,UAAI,cAAAiE,GAAG,CAAClD,IAAJ,kDAAUS,GAAV,IAAiB2B,KAAK,CAAClD,OAAD,CAA1B,EAAuCiE,MAAM,CAACE,IAAP,CAAY;AAAEC,QAAAA,SAAS,EAAEJ,GAAG,CAAClD,IAAJ,CAASS,GAAtB;AAA2B8C,QAAAA,KAAK,EAAEnB,KAAK,CAAClD,OAAD;AAAvC,OAAZ,EA5B5B,CA8BX;;AACA,YAAM0E,UAAU,GAAG;AACjBC,QAAAA,OAAO,EAAEX,GAAG,CAACpD,EADI;AAEjBtB,QAAAA,KAAK,EAAEyE,SAFU;AAGjBE,QAAAA;AAHiB,OAAnB;AAMA,YAAMW,OAAO,GAAG,MAAM/B,KAAK,CAAC,yBAAD,EAA4BgC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAA5B,CAA3B;;AACA,UAAI,EAACE,OAAD,aAACA,OAAD,eAACA,OAAO,CAAEG,EAAV,CAAJ,EAAkB;AAChB,eAAOnG,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,KAAK,EAAE,CAAA4F,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAE5F,KAAT,KAAkB,uBADC;AAE1BgG,UAAAA,GAAG,EAAEJ;AAFqB,SAArB,CAAP;AAID,OA3CU,CA6CX;;;AACA,UAAI,cAAAZ,GAAG,CAAClD,IAAJ,kDAAUW,MAAV,IAAoBnB,KAAK,CAACC,OAAN,CAAcL,SAAd,CAApB,IAAgDA,SAAS,CAACO,MAA9D,EAAsE;AACpE,cAAMwE,OAAO,GAAG,EAAhB;;AACA,aAAK,MAAMC,GAAX,IAAkBhF,SAAlB,EAA6B;AAAA;;AAC3B;AACA,gBAAMiF,IAAI,GAAG,MAAMpC,KAAK,CAAC,kDAAD,EAAqD;AAC3ElE,YAAAA,MAAM,EAAE,MADmE;AAE3EiE,YAAAA,OAAO,EAAE;AACPF,cAAAA,aAAa,EAAG,UAAS3D,KAAM,EADxB;AAEP,8BAAgB;AAFT,aAFkE;AAM3EkB,YAAAA,IAAI,EAAE,IAAIiF,eAAJ,CAAoB;AAAEC,cAAAA,QAAQ,EAAEH,GAAG,CAACrB,KAAJ,CAAU,GAAV,EAAeC,GAAf,MAAwB;AAApC,aAApB;AANqE,WAArD,CAAL,CAOhBd,IAPgB,CAOXC,CAAC,IAAIA,CAAC,CAAClE,IAAF,EAPM,CAAnB;AASA,cAAI,EAACoG,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEJ,EAAP,KAAa,EAACI,IAAD,aAACA,IAAD,eAACA,IAAI,CAAEG,UAAP,CAAjB,EAAoC;;AAEpC,cAAI;AACF,kBAAMC,GAAG,GAAG,MAAMxC,KAAK,CAACmC,GAAD,CAAvB;AACA,kBAAMM,GAAG,GAAG,MAAMD,GAAG,CAACE,WAAJ,EAAlB;AACA,kBAAM1C,KAAK,CAACoC,IAAI,CAACG,UAAN,EAAkB;AAAEzG,cAAAA,MAAM,EAAE,KAAV;AAAiBsB,cAAAA,IAAI,EAAEuF,MAAM,CAACC,IAAP,CAAYH,GAAZ;AAAvB,aAAlB,CAAX;AACD,WAJD,CAIE,MAAM,CACN;AACD;;AAED,gBAAMI,QAAQ,GAAG,MAAM/C,KAAK,CAC1B,8BAD0B,EAE1BgC,IAAI,CAACC,SAAL,CAAe;AAAEe,YAAAA,KAAK,EAAE,CAAC;AAAEjF,cAAAA,EAAE,EAAEuE,IAAI,CAACW,OAAX;AAAoBxG,cAAAA,KAAK,EAAE;AAA3B,aAAD;AAAT,WAAf,CAF0B,CAA5B;;AAKA,cAAIsG,QAAQ,SAAR,IAAAA,QAAQ,WAAR,IAAAA,QAAQ,CAAEb,EAAV,IAAgBa,QAAhB,aAAgBA,QAAhB,kCAAgBA,QAAQ,CAAEC,KAA1B,gEAAgB,gBAAkB,CAAlB,CAAhB,6CAAgB,iBAAsBjF,EAA1C,EAA8C;AAC5CqE,YAAAA,OAAO,CAACd,IAAR,CAAayB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBjF,EAA/B;AACD;AACF;;AAED,YAAIqE,OAAO,CAACxE,MAAZ,EAAoB;AAAA;;AAClB,gBAAMoC,KAAK,CAAC,yBAAD,EAA4BgC,IAAI,CAACC,SAAL,CAAe;AACpDH,YAAAA,OAAO,EAAEX,GAAG,CAACpD,EADuC;AAEpDmF,YAAAA,OAAO,mBAAEnB,OAAO,CAACoB,IAAV,kDAAE,cAAcpF,EAF6B;AAGpDqD,YAAAA,MAAM,EAAE,CAAC;AAAEG,cAAAA,SAAS,EAAEJ,GAAG,CAAClD,IAAJ,CAASW,MAAtB;AAA8B4C,cAAAA,KAAK,EAAE;AAAE4B,gBAAAA,UAAU,EAAE;AAAEC,kBAAAA,QAAQ,EAAEjB;AAAZ;AAAd;AAArC,aAAD;AAH4C,WAAf,CAA5B,CAAX;AAKD;AACF;;AAED,aAAOrG,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BgG,QAAAA,EAAE,EAAE,IADsB;AAE1BoB,QAAAA,IAAI,EAAE,MAFoB;AAG1BxB,QAAAA,OAAO,EAAEX,GAAG,CAACpD,EAHa;AAI1BmF,QAAAA,OAAO,EAAE,mBAAAnB,OAAO,CAACoB,IAAR,kEAAcpF,EAAd,KAAoB;AAJH,OAArB,CAAP;AAMD,KArLC,CAuLF;;;AACA,UAAMwF,OAAO,GAAG7D,QAAQ,CAAClD,OAAD,CAAxB;;AACA,QAAI,CAAC+G,OAAL,EAAc;AACZ,aAAOxH,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD,KA3LC,CA6LF;;;AACA,UAAM+D,KAAK,CAAC,0CAAD,EAA6C;AACtDlE,MAAAA,MAAM,EAAE,MAD8C;AAEtDiE,MAAAA,OAAO,EAAE;AACPF,QAAAA,aAAa,EAAG,UAAS3D,KAAM,EADxB;AAEP,wBAAgB;AAFT,OAF6C;AAMtDkB,MAAAA,IAAI,EAAE,IAAIiF,eAAJ,CAAoB;AAAEgB,QAAAA;AAAF,OAApB;AANgD,KAA7C,CAAX;AASA,UAAMC,KAAK,GAAG,EAAd;AACAA,IAAAA,KAAK,CAAClC,IAAN,CAAY,IAAGJ,SAAU,GAAzB;AAEA,UAAMO,KAAK,GAAGhB,OAAO,CAAC5D,EAAD,CAArB;AACA,UAAM6E,KAAK,GAAGjB,OAAO,CAAC3D,EAAD,CAArB;AACA,QAAI2E,KAAJ,EAAyB+B,KAAK,CAAClC,IAAN,CAAY,OAAMG,KAAM,EAAxB;AACzB,QAAIC,KAAJ,EAAyB8B,KAAK,CAAClC,IAAN,CAAY,OAAMI,KAAM,EAAxB;AACzB,QAAIrB,KAAK,CAACnD,SAAD,CAAT,EAAyBsG,KAAK,CAAClC,IAAN,CAAY,OAAMjB,KAAK,CAACnD,SAAD,CAAY,EAAnC;AACzB,QAAImD,KAAK,CAACpD,QAAD,CAAT,EAAyBuG,KAAK,CAAClC,IAAN,CAAY,OAAMjB,KAAK,CAACpD,QAAD,CAAW,EAAlC;AACzB,QAAIoD,KAAK,CAACrD,cAAD,CAAT,EAA2BwG,KAAK,CAAClC,IAAN,CAAY,OAAMjB,KAAK,CAACrD,cAAD,CAAiB,EAAxC;AAC3B,QAAIqD,KAAK,CAACtD,GAAD,CAAT,EAAyByG,KAAK,CAAClC,IAAN,CAAY,QAAOjB,KAAK,CAACtD,GAAD,CAAM,EAA9B;AACzB,QAAIsD,KAAK,CAAClD,OAAD,CAAT,EAAyBqG,KAAK,CAAClC,IAAN,CAAY,aAAYjB,KAAK,CAAClD,OAAD,CAAU,EAAvC;AACzB,QAAIkD,KAAK,CAACzD,IAAD,CAAT,EAAyB4G,KAAK,CAAClC,IAAN,CAAY,SAAQjB,KAAK,CAACzD,IAAD,CAAO,EAAhC;AAEzB,UAAMsB,IAAI,GAAGmC,KAAK,CAACjD,WAAD,CAAlB;AACA,QAAIc,IAAJ,EAAUsF,KAAK,CAAClC,IAAN,CAAWpD,IAAX,EAAV,KACK,IAAI1B,OAAO,KAAK,OAAZ,IAAuB6D,KAAK,CAAC1D,QAAD,CAAhC,EAA4C6G,KAAK,CAAClC,IAAN,CAAWjB,KAAK,CAAC1D,QAAD,CAAhB;AAEjD,QAAI0D,KAAK,CAAC3D,OAAD,CAAT,EAAoB8G,KAAK,CAAClC,IAAN,CAAY,IAAGjB,KAAK,CAAC3D,OAAD,CAAU,iBAA9B;AAEpB,UAAM+G,IAAI,GAAGD,KAAK,CAAC7C,MAAN,CAAaC,OAAb,EAAsBE,IAAtB,CAA2B,IAA3B,KAAoC,uBAAjD;AACA,UAAM4C,MAAM,GAAG,MAAM1D,KAAK,CAAC,kBAAD,EAAqBgC,IAAI,CAACC,SAAL,CAAe;AAAEsB,MAAAA,OAAF;AAAWE,MAAAA;AAAX,KAAf,CAArB,CAA1B;;AAEA,QAAI,EAACC,MAAD,aAACA,MAAD,eAACA,MAAM,CAAExB,EAAT,CAAJ,EAAiB;AACf,aAAOnG,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE,CAAAuH,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEvH,KAAR,KAAiB,iBAA1B;AAA6CgG,QAAAA,GAAG,EAAEuB;AAAlD,OAArB,CAAP;AACD;;AAED,WAAO3H,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEgG,MAAAA,EAAE,EAAE,IAAN;AAAYoB,MAAAA,IAAI,EAAE,SAAlB;AAA6BC,MAAAA,OAA7B;AAAsCI,MAAAA,EAAE,EAAED,MAAM,CAACC;AAAjD,KAArB,CAAP;AACD,GAnOD,CAmOE,OAAOC,GAAP,EAAY;AACZrG,IAAAA,OAAO,CAACpB,KAAR,CAAc,4BAAd,EAA4CyH,GAA5C;AACA,WAAO7H,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE,cAAT;AAAyB0H,MAAAA,MAAM,EAAEC,MAAM,CAAC,CAAAF,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,OAAL,KAAgBH,GAAjB;AAAvC,KAArB,CAAP;AACD;AACF","sourcesContent":["// // pages/api/slack/add-to-list.js\r\n// export default async function handler(req, res) {\r\n//   if (req.method !== \"POST\") return res.status(405).json({ error: \"Method not allowed\" });\r\n\r\n//   try {\r\n//     const token = process.env.SLACK_BOT_TOKEN;\r\n//     if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n//     const {\r\n//       listKey,            // \"receiving\" | \"shipping\" | \"tasks\"\r\n//       title, linkUrl, bodyText,\r\n//       date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n//       photoUrls = [],\r\n//     } = req.body;\r\n\r\n//     const LISTS = {\r\n//       receiving: {\r\n//         id: process.env.SLACK_LIST_RECEIVING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment\r\n//         },\r\n//       },\r\n//       shipping: {\r\n//         id: process.env.SLACK_LIST_SHIPPING_ID,\r\n//         cols: {\r\n//           desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n//           date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n//           pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n//           track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n//           wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n//           lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n//           photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment\r\n//         },\r\n//       },\r\n//       tasks: {\r\n//         id: process.env.SLACK_LIST_TASKS_ID,\r\n//         cols: {\r\n//           desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     const CHANNELS = {\r\n//       receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n//       shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n//       tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n//     };\r\n\r\n//     const headersJson = {\r\n//       Authorization: `Bearer ${token}`,\r\n//       \"Content-Type\": \"application/json; charset=utf-8\",\r\n//     };\r\n//     const slack = (method, body, headers = headersJson) =>\r\n//       fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n//         .then(r => r.json());\r\n\r\n//     const plain = v => (v ?? \"\").toString().trim();\r\n//     const safe  = plain;\r\n//     const joinArr = a => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n//     // ---------- PATH A: Write to a LIST ----------\r\n//     const cfg = LISTS[listKey];\r\n//     if (cfg?.id) {\r\n//       const fields = [];\r\n\r\n//       // Description column\r\n//       if (cfg.cols.desc && (description || bodyText || linkUrl)) {\r\n//         const textBits = [\r\n//           description,\r\n//           (listKey === \"tasks\" && bodyText) ? bodyText : null,\r\n//           linkUrl ? `<${linkUrl}|Open in Magmo>` : null,\r\n//         ].filter(Boolean).join(\"\\n\");\r\n//         fields.push({ column_id: cfg.cols.desc, value: { text: textBits } });\r\n//       }\r\n\r\n//       if (cfg.cols.date && date) fields.push({ column_id: cfg.cols.date, value: { date } });\r\n\r\n//       if (cfg.cols.pn && (pn || sn || dom)) {\r\n//         const pnLine = Array.isArray(pn) ? `PN: ${pn.filter(Boolean).join(\", \")}` : (pn ? `PN: ${pn}` : \"\");\r\n//         const snLine = Array.isArray(sn) ? `SN: ${sn.filter(Boolean).join(\", \")}` : (sn ? `SN: ${sn}` : \"\");\r\n//         const domLine = dom ? `DOM: ${dom}` : \"\";\r\n//         const pnBlock = [pnLine, snLine, domLine].filter(Boolean).join(\"  \");\r\n//         if (pnBlock) fields.push({ column_id: cfg.cols.pn, value: { text: pnBlock } });\r\n//       }\r\n\r\n//       if (cfg.cols.track && (trackingNumber || poNumber)) {\r\n//         const t = [\r\n//           trackingNumber ? `RL: ${trackingNumber}` : \"\",\r\n//           poNumber ? `PO: ${poNumber}` : \"\",\r\n//         ].filter(Boolean).join(\"  \");\r\n//         if (t) fields.push({ column_id: cfg.cols.track, value: { text: t } });\r\n//       }\r\n\r\n//       if (cfg.cols.wo && workOrder) fields.push({ column_id: cfg.cols.wo,  value: { text: `WO: ${workOrder}` } });\r\n//       if (cfg.cols.lsn && localSN)  fields.push({ column_id: cfg.cols.lsn, value: { text: localSN } });\r\n\r\n//       // NOW build the create body (cfg & fields exist)\r\n//       const createBody = {\r\n//         list_id: cfg.id,\r\n//         title: plain(title) || plain(localSN) || \"Untitled\",\r\n//         fields,\r\n//       };\r\n\r\n//       const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n//       if (!created?.ok) {\r\n//         console.error(\"slackLists.items.create error:\", created);\r\n//         return res.status(400).json({ error: created?.error || \"Slack Lists API error\", raw: created });\r\n//       }\r\n\r\n//       // Photos -> attachment column\r\n//       if (cfg.cols.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n//         const fileIds = [];\r\n//         for (const url of photoUrls) {\r\n//           const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n//             method: \"POST\",\r\n//             headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//             body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n//           }).then(r => r.json());\r\n\r\n//           if (!init?.ok || !init?.upload_url) continue;\r\n\r\n//           try {\r\n//             const img = await fetch(url);\r\n//             const buf = await img.arrayBuffer();\r\n//             await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n//           } catch (_) {}\r\n\r\n//           const complete = await slack(\"files.completeUploadExternal\",\r\n//             JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }] })\r\n//           );\r\n//           if (complete?.ok && complete?.files?.[0]?.id) fileIds.push(complete.files[0].id);\r\n//         }\r\n\r\n//         if (fileIds.length) {\r\n//           await slack(\"slackLists.items.update\", JSON.stringify({\r\n//             list_id: cfg.id,\r\n//             item_id: created.item.id,\r\n//             fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds } } }],\r\n//           }));\r\n//         }\r\n//       }\r\n\r\n//       return res.status(200).json({ ok: true, mode: \"list\", list_id: cfg.id, item_id: created.item.id });\r\n//     }\r\n\r\n//     // ---------- PATH B: Fallback to a channel post ----------\r\n//     const channel = CHANNELS[listKey];\r\n//     if (!channel) return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n\r\n//     // Try to join public channels to avoid channel_not_found\r\n//     await fetch(\"https://slack.com/api/conversations.join\", {\r\n//       method: \"POST\",\r\n//       headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n//       body: new URLSearchParams({ channel }),\r\n//     });\r\n\r\n//     const safeId = plain(linkUrl?.split(\"/\").pop()) || plain(localSN) || \"\";\r\n//     const safeTitle = plain(title) || plain(req.body?.title) || (safeId ? `Item ${safeId}` : \"New Item\");\r\n\r\n//     const lines = [];\r\n//     lines.push(`*${safeTitle}*`);\r\n\r\n//     const pnStr = joinArr(pn);\r\n//     const snStr = joinArr(sn);\r\n//     if (pnStr) lines.push(`PN: ${pnStr}`);\r\n//     if (snStr) lines.push(`SN: ${snStr}`);\r\n//     if (safe(workOrder)) lines.push(`WO: ${safe(workOrder)}`);\r\n//     if (safe(poNumber)) lines.push(`PO: ${safe(poNumber)}`);\r\n//     if (safe(trackingNumber)) lines.push(`RL: ${safe(trackingNumber)}`);\r\n//     if (safe(dom)) lines.push(`DOM: ${safe(dom)}`);\r\n//     if (safe(localSN)) lines.push(`Local SN: ${safe(localSN)}`);\r\n//     if (safe(date)) lines.push(`Date: ${safe(date)}`);\r\n\r\n//     const desc = safe(description);\r\n//     if (desc) lines.push(desc);\r\n//     else if (listKey === \"tasks\" && safe(bodyText)) lines.push(safe(bodyText));\r\n\r\n//     if (safe(linkUrl)) lines.push(`<${safe(linkUrl)}|Open in Magmo>`);\r\n\r\n//     const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n\r\n//     const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n//     if (!posted?.ok) {\r\n//       console.error(\"chat.postMessage error:\", posted);\r\n//       return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n//     }\r\n\r\n//     return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n//   } catch (e) {\r\n//     console.error(\"API /slack/add-to-list crashed:\", e);\r\n//     return res.status(500).json({ error: \"Server error\" });\r\n//   }\r\n// }\r\n\r\n// pages/api/slack/add-to-list.js\r\n\r\nexport default async function handler(req, res) {\r\n  try {\r\n    if (req.method !== \"POST\") {\r\n      return res.status(405).json({ error: \"Method not allowed\" });\r\n    }\r\n\r\n    const token = process.env.SLACK_BOT_TOKEN;\r\n    if (!token) return res.status(500).json({ error: \"Missing SLACK_BOT_TOKEN\" });\r\n\r\n    const {\r\n      listKey,                 // \"receiving\" | \"shipping\" | \"tasks\"\r\n      title, linkUrl, bodyText,\r\n      date, pn, sn, dom, trackingNumber, poNumber, workOrder, localSN, description,\r\n      photoUrls = [],\r\n    } = req.body || {};\r\n\r\n    // ---- Debug (safe) ----\r\n    try {\r\n      console.log(\"add-to-list payload\", {\r\n        listKey,\r\n        title,\r\n        localSN,\r\n        pn: Array.isArray(pn) ? pn : (pn ?? \"\"),\r\n        sn: Array.isArray(sn) ? sn : (sn ?? \"\"),\r\n        hasPhotos: Array.isArray(photoUrls) ? photoUrls.length : 0,\r\n      });\r\n    } catch {}\r\n\r\n    // ---- ENV mapping: Slack Lists (Canvas Lists) ----\r\n    const LISTS = {\r\n      receiving: {\r\n        id: process.env.SLACK_LIST_RECEIVING_ID,\r\n        cols: {\r\n          desc:   process.env.SLACK_LIST_RECEIVING_DESCRIPTION_COL,\r\n          date:   process.env.SLACK_LIST_RECEIVING_DATE_COL,\r\n          pn:     process.env.SLACK_LIST_RECEIVING_PNSN_COL,\r\n          track:  process.env.SLACK_LIST_RECEIVING_TRACKING_COL,\r\n          wo:     process.env.SLACK_LIST_RECEIVING_WO_COL,\r\n          lsn:    process.env.SLACK_LIST_RECEIVING_LOCALSN_COL,\r\n          photos: process.env.SLACK_LIST_RECEIVING_PHOTOS_COL, // attachment-type column\r\n        },\r\n      },\r\n      shipping: {\r\n        id: process.env.SLACK_LIST_SHIPPING_ID,\r\n        cols: {\r\n          desc:   process.env.SLACK_LIST_SHIPPING_DESCRIPTION_COL,\r\n          date:   process.env.SLACK_LIST_SHIPPING_DATE_COL,\r\n          pn:     process.env.SLACK_LIST_SHIPPING_PNSN_COL,\r\n          track:  process.env.SLACK_LIST_SHIPPING_TRACKING_COL,\r\n          wo:     process.env.SLACK_LIST_SHIPPING_WO_COL,\r\n          lsn:    process.env.SLACK_LIST_SHIPPING_LOCALSN_COL,\r\n          photos: process.env.SLACK_LIST_SHIPPING_PHOTOS_COL,  // attachment-type column\r\n        },\r\n      },\r\n      tasks: {\r\n        id: process.env.SLACK_LIST_TASKS_ID,\r\n        cols: {\r\n          desc: process.env.SLACK_LIST_TASKS_DESCRIPTION_COL,\r\n        },\r\n      },\r\n    };\r\n\r\n    // ---- ENV mapping: channel fallbacks (optional) ----\r\n    const CHANNELS = {\r\n      receiving: process.env.SLACK_CHANNEL_RECEIVING_ID,\r\n      shipping:  process.env.SLACK_CHANNEL_SHIPPING_ID,\r\n      tasks:     process.env.SLACK_CHANNEL_TASKS_ID,\r\n    };\r\n\r\n    // ---- helpers ----\r\n    const headersJson = {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json; charset=utf-8\",\r\n    };\r\n\r\n    const slack = (method, body, headers = headersJson) =>\r\n      fetch(`https://slack.com/api/${method}`, { method: \"POST\", headers, body })\r\n        .then(r => r.json());\r\n\r\n    const plain = (v) => (v ?? \"\").toString().trim();\r\n    const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\r\n\r\n    // Server-side safety net so we never send an empty title\r\n    const safeId    = plain(localSN) || plain(linkUrl?.split(\"/\").pop());\r\n    const safeTitle = plain(title) || safeId || joinArr(pn) || \"New Item\";\r\n\r\n    // ---------- PATH A: Slack Lists (preferred) ----------\r\n    const cfg = LISTS[listKey];\r\n    if (cfg?.id) {\r\n      const fields = [];\r\n\r\n      // Keep values as simple strings where possible; Slack will coerce text columns.\r\n      const descText = [\r\n        plain(description),\r\n        (listKey === \"tasks\" && plain(bodyText)) ? plain(bodyText) : \"\",\r\n        plain(linkUrl) ? `<${plain(linkUrl)}|Open in Magmo>` : \"\"\r\n      ].filter(Boolean).join(\"\\n\");\r\n      if (cfg.cols?.desc && descText) fields.push({ column_id: cfg.cols.desc, value: descText });\r\n\r\n      if (cfg.cols?.date && plain(date)) fields.push({ column_id: cfg.cols.date, value: plain(date) });\r\n\r\n      if (cfg.cols?.pn && (pn || sn || dom)) {\r\n        const pnStr = joinArr(pn);\r\n        const snStr = joinArr(sn);\r\n        const combo = [pnStr && `PN: ${pnStr}`, snStr && `SN: ${snStr}`, plain(dom) && `DOM: ${plain(dom)}`]\r\n          .filter(Boolean).join(\"  \");\r\n        if (combo) fields.push({ column_id: cfg.cols.pn, value: combo });\r\n      }\r\n\r\n      if (cfg.cols?.track && (trackingNumber || poNumber)) {\r\n        const t = [plain(trackingNumber) && `RL: ${plain(trackingNumber)}`, plain(poNumber) && `PO: ${plain(poNumber)}`]\r\n          .filter(Boolean).join(\"  \");\r\n        if (t) fields.push({ column_id: cfg.cols.track, value: t });\r\n      }\r\n\r\n      if (cfg.cols?.wo  && plain(workOrder)) fields.push({ column_id: cfg.cols.wo,  value: `WO: ${plain(workOrder)}` });\r\n      if (cfg.cols?.lsn && plain(localSN))   fields.push({ column_id: cfg.cols.lsn, value: plain(localSN) });\r\n\r\n      // IMPORTANT: Slack Lists title must be a plain string; sending rich_text here produced \"Untitled item\".\r\n      const createBody = {\r\n        list_id: cfg.id,\r\n        title: safeTitle,\r\n        fields,\r\n      };\r\n\r\n      const created = await slack(\"slackLists.items.create\", JSON.stringify(createBody));\r\n      if (!created?.ok) {\r\n        return res.status(400).json({\r\n          error: created?.error || \"Slack Lists API error\",\r\n          raw: created\r\n        });\r\n      }\r\n\r\n      // Attach photos (optional; requires files:write)\r\n      if (cfg.cols?.photos && Array.isArray(photoUrls) && photoUrls.length) {\r\n        const fileIds = [];\r\n        for (const url of photoUrls) {\r\n          // get external upload URL\r\n          const init = await fetch(\"https://slack.com/api/files.getUploadURLExternal\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            },\r\n            body: new URLSearchParams({ filename: url.split(\"/\").pop() || \"image.jpg\" }),\r\n          }).then(r => r.json());\r\n\r\n          if (!init?.ok || !init?.upload_url) continue;\r\n\r\n          try {\r\n            const img = await fetch(url);\r\n            const buf = await img.arrayBuffer();\r\n            await fetch(init.upload_url, { method: \"PUT\", body: Buffer.from(buf) });\r\n          } catch {\r\n            // ignore individual image failures\r\n          }\r\n\r\n          const complete = await slack(\r\n            \"files.completeUploadExternal\",\r\n            JSON.stringify({ files: [{ id: init.file_id, title: \"photo\" }]}),\r\n          );\r\n\r\n          if (complete?.ok && complete?.files?.[0]?.id) {\r\n            fileIds.push(complete.files[0].id);\r\n          }\r\n        }\r\n\r\n        if (fileIds.length) {\r\n          await slack(\"slackLists.items.update\", JSON.stringify({\r\n            list_id: cfg.id,\r\n            item_id: created.item?.id,\r\n            fields: [{ column_id: cfg.cols.photos, value: { attachment: { file_ids: fileIds }}}],\r\n          }));\r\n        }\r\n      }\r\n\r\n      return res.status(200).json({\r\n        ok: true,\r\n        mode: \"list\",\r\n        list_id: cfg.id,\r\n        item_id: created.item?.id || null,\r\n      });\r\n    }\r\n\r\n    // ---------- PATH B: fallback to posting in a channel ----------\r\n    const channel = CHANNELS[listKey];\r\n    if (!channel) {\r\n      return res.status(400).json({ error: \"Unknown listKey (no list or channel configured)\" });\r\n    }\r\n\r\n    // join public channels if needed to avoid channel_not_found\r\n    await fetch(\"https://slack.com/api/conversations.join\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: new URLSearchParams({ channel }),\r\n    });\r\n\r\n    const lines = [];\r\n    lines.push(`*${safeTitle}*`);\r\n\r\n    const pnStr = joinArr(pn);\r\n    const snStr = joinArr(sn);\r\n    if (pnStr)               lines.push(`PN: ${pnStr}`);\r\n    if (snStr)               lines.push(`SN: ${snStr}`);\r\n    if (plain(workOrder))    lines.push(`WO: ${plain(workOrder)}`);\r\n    if (plain(poNumber))     lines.push(`PO: ${plain(poNumber)}`);\r\n    if (plain(trackingNumber)) lines.push(`RL: ${plain(trackingNumber)}`);\r\n    if (plain(dom))          lines.push(`DOM: ${plain(dom)}`);\r\n    if (plain(localSN))      lines.push(`Local SN: ${plain(localSN)}`);\r\n    if (plain(date))         lines.push(`Date: ${plain(date)}`);\r\n\r\n    const desc = plain(description);\r\n    if (desc) lines.push(desc);\r\n    else if (listKey === \"tasks\" && plain(bodyText)) lines.push(plain(bodyText));\r\n\r\n    if (plain(linkUrl)) lines.push(`<${plain(linkUrl)}|Open in Magmo>`);\r\n\r\n    const text = lines.filter(Boolean).join(\"\\n\") || \"(no details provided)\";\r\n    const posted = await slack(\"chat.postMessage\", JSON.stringify({ channel, text }));\r\n\r\n    if (!posted?.ok) {\r\n      return res.status(400).json({ error: posted?.error || \"Slack API error\", raw: posted });\r\n    }\r\n\r\n    return res.status(200).json({ ok: true, mode: \"channel\", channel, ts: posted.ts });\r\n  } catch (err) {\r\n    console.error(\"add-to-list handler error:\", err);\r\n    return res.status(500).json({ error: \"Server error\", detail: String(err?.message || err) });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
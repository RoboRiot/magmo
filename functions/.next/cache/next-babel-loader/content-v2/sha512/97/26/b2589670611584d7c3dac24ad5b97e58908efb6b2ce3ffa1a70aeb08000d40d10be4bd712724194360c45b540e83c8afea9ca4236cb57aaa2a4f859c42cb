{"ast":null,"code":"// // pages/api/slack/add-to-list.js\n// export default async function handler(req, res) {\n//   try {\n//     if (req.method !== \"POST\") {\n//       return res.status(405).json({ ok: false, error: \"method_not_allowed\" });\n//     }\n//     const token = process.env.SLACK_BOT_TOKEN;\n//     if (!token) {\n//       return res.status(500).json({ ok: false, error: \"missing_SLACK_BOT_TOKEN\" });\n//     }\n//     // payload from client\n//     const {\n//       listKey,             // \"tasks\" | \"shipping\" | \"receiving\"\n//       title,               // item title (what shows in the primary column)\n//       // keeping minimal per your request: PN/SN only for now\n//       pn, sn,\n//     } = req.body || {};\n//     // list ids from env\n//     const LIST_IDS = {\n//       tasks: process.env.SLACK_LIST_TASKS_ID,\n//       shipping: process.env.SLACK_LIST_SHIPPING_ID,\n//       receiving: process.env.SLACK_LIST_RECEIVING_ID,\n//     };\n//     const list_id = LIST_IDS[listKey];\n//     if (!list_id) {\n//       return res.status(400).json({ ok: false, error: `unknown_listKey_${listKey}` });\n//     }\n//     // ---- Slack helpers ----\n//     async function slackJson(method, payload) {\n//       const r = await fetch(`https://slack.com/api/${method}`, {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           \"Content-Type\": \"application/json; charset=utf-8\",\n//         },\n//         body: JSON.stringify(payload),\n//       });\n//       return r.json();\n//     }\n//     const plain = (v) => (v ?? \"\").toString().trim();\n//     const joinArr = (a) => Array.isArray(a) ? a.filter(Boolean).map(plain).join(\", \") : plain(a);\n//     function toRichText(text) {\n//       const t = plain(text);\n//       return [{\n//         type: \"rich_text\",\n//         elements: [{\n//           type: \"rich_text_section\",\n//           elements: [{ type: \"text\", text: t }],\n//         }],\n//       }];\n//     }\n//     // Try to resolve primary/text column id (\"Item\"/\"Task\") by scanning existing rows\n//     async function resolveTitleColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 50 });\n//       if (!probe?.ok) return null;\n//       // Heuristics: prefer a text field whose key looks like 'item' or 'task'\n//       let fallback = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           const key = (f.key || \"\").toLowerCase();\n//           const hasText = !!f.text || Array.isArray(f.rich_text);\n//           if (f.column_id && hasText) {\n//             if (key.includes(\"item\") || key.includes(\"task\")) return f.column_id;\n//             if (!fallback) fallback = f.column_id;\n//           }\n//         }\n//       }\n//       return fallback; // first text-like field if we didn't find a perfect match\n//     }\n//     // Find the PN/SN column id by scanning for a field with key or text like \"PN\" / \"SN\"\n//     async function resolvePnSnColId(listId) {\n//       const probe = await slackJson(\"slackLists.items.list\", { list_id: listId, limit: 100 });\n//       if (!probe?.ok) return null;\n//       let candidate = null;\n//       for (const it of probe.items || []) {\n//         for (const f of it.fields || []) {\n//           if (!f.column_id) continue;\n//           const key = (f.key || \"\").toLowerCase();\n//           const text = (f.text || \"\").toLowerCase();\n//           const looksPnSn =\n//             key.includes(\"pn\") || key.includes(\"sn\") ||\n//             text.includes(\"pn:\") || text.includes(\"sn:\");\n//           if (looksPnSn) return f.column_id;\n//           if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\n//             candidate = f.column_id;\n//           }\n//         }\n//       }\n//       return candidate;\n//     }\n//     // 1) Resolve columns\n//     const titleColId = await resolveTitleColId(list_id);\n//     if (!titleColId) {\n//       return res.status(400).json({ ok: false, error: \"could_not_resolve_title_column\" });\n//     }\n//     // 2) Create the item with the title in the title column (must use initial_fields with a real column_id)\n//     const safeTitle = plain(title) || \"New Item\";\n//     const createBody = {\n//       list_id,\n//       initial_fields: [{ column_id: titleColId, rich_text: toRichText(safeTitle) }],\n//     };\n//     const created = await slackJson(\"slackLists.items.create\", createBody);\n//     if (!created?.ok) {\n//       return res.status(200).json({\n//         ok: false,\n//         error: created?.error || \"create_failed\",\n//         mode: \"list\",\n//         sent: createBody,\n//       });\n//     }\n//     // 3) (Minimal) update: PN/SN only, per your request\n//     const pn0 = Array.isArray(pn) ? pn[0] : pn;\n//     const sn0 = Array.isArray(sn) ? sn[0] : sn;\n//     const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\n//     const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\n//     const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \");\n//     let updated = null;\n//     let usedPnSnCol = null;\n//     if (pnSnText) {\n//       const pnSnColId = await resolvePnSnColId(list_id);\n//       if (pnSnColId) {\n//         const cells = [{\n//           row_id: created.item.id,\n//           column_id: pnSnColId,\n//           rich_text: toRichText(pnSnText),\n//         }];\n//         updated = await slackJson(\"slackLists.items.update\", { list_id, cells });\n//         usedPnSnCol = pnSnColId;\n//         // If update fails, we still return ok:false so you can see the error\n//         if (!updated?.ok) {\n//           return res.status(200).json({\n//             ok: false,\n//             error: updated?.error || \"update_failed\",\n//             mode: \"list\",\n//             list_id,\n//             item_id: created.item.id,\n//             used_title_col: titleColId,\n//             used_pnsn_col: usedPnSnCol,\n//           });\n//         }\n//       }\n//     }\n//     return res.status(200).json({\n//       ok: true,\n//       mode: \"list\",\n//       list_id,\n//       item_id: created.item.id,\n//       used_title_col: titleColId,\n//       used_pnsn_col: usedPnSnCol || null,\n//       sent_title: safeTitle,\n//     });\n//   } catch (err) {\n//     console.error(\"API /slack/add-to-list crashed:\", err);\n//     return res.status(500).json({ ok: false, error: \"exception\", message: err?.message || String(err) });\n//   }\n// }\n// pages/api/slack/add-to-list.js\nexport default async function handler(req, res) {\n  try {\n    if (req.method !== \"POST\") {\n      return res.status(405).json({\n        ok: false,\n        error: \"method_not_allowed\"\n      });\n    }\n\n    const token = process.env.SLACK_BOT_TOKEN;\n\n    if (!token) {\n      return res.status(500).json({\n        ok: false,\n        error: \"missing_SLACK_BOT_TOKEN\"\n      });\n    } // Minimal payload we need for this pass\n\n\n    const {\n      listKey,\n      title,\n      pn,\n      sn\n    } = req.body || {};\n    const LIST_IDS = {\n      tasks: process.env.SLACK_LIST_TASKS_ID,\n      shipping: process.env.SLACK_LIST_SHIPPING_ID,\n      receiving: process.env.SLACK_LIST_RECEIVING_ID\n    };\n    const list_id = LIST_IDS[listKey];\n\n    if (!list_id) {\n      return res.status(400).json({\n        ok: false,\n        error: `unknown_listKey_${listKey}`\n      });\n    } // Optional env overrides for title column (use these if you know them)\n\n\n    const TITLE_COL_ENV = {\n      tasks: process.env.SLACK_LIST_TASKS_TITLE_COL,\n      shipping: process.env.SLACK_LIST_SHIPPING_TITLE_COL,\n      receiving: process.env.SLACK_LIST_RECEIVING_TITLE_COL\n    }[listKey]; // ---- Slack helpers ----\n\n    async function slackJson(method, payload) {\n      const r = await fetch(`https://slack.com/api/${method}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify(payload)\n      });\n      return r.json();\n    }\n\n    const plain = v => (v !== null && v !== void 0 ? v : \"\").toString().trim(); // Correct rich_text (single object)\n\n\n    const toRichText = text => ({\n      type: \"rich_text\",\n      elements: [{\n        type: \"rich_text_section\",\n        elements: [{\n          type: \"text\",\n          text: plain(text)\n        }]\n      }]\n    });\n\n    const extractRTText = rt => {\n      try {\n        var _rt$elements$0$elemen, _rt$elements, _rt$elements$, _rt$elements$$element, _rt$elements$$element2;\n\n        return (_rt$elements$0$elemen = rt === null || rt === void 0 ? void 0 : (_rt$elements = rt.elements) === null || _rt$elements === void 0 ? void 0 : (_rt$elements$ = _rt$elements[0]) === null || _rt$elements$ === void 0 ? void 0 : (_rt$elements$$element = _rt$elements$.elements) === null || _rt$elements$$element === void 0 ? void 0 : (_rt$elements$$element2 = _rt$elements$$element[0]) === null || _rt$elements$$element2 === void 0 ? void 0 : _rt$elements$$element2.text) !== null && _rt$elements$0$elemen !== void 0 ? _rt$elements$0$elemen : \"\";\n      } catch {\n        return \"\";\n      }\n    }; // Probe list for existing items/fields\n\n\n    async function listProbe(listId) {\n      const probe = await slackJson(\"slackLists.items.list\", {\n        list_id: listId,\n        limit: 200\n      });\n      return probe !== null && probe !== void 0 && probe.ok ? probe : null;\n    } // Auto-detect a reasonable title column by sampling\n\n\n    async function resolveTitleColId(listId) {\n      const probe = await listProbe(listId);\n      if (!probe) return null;\n      let fallback = null;\n\n      for (const it of probe.items || []) {\n        for (const f of it.fields || []) {\n          if (!f.column_id) continue;\n          const key = (f.key || \"\").toLowerCase();\n          const hasText = !!f.text || !!f.rich_text; // treat rich_text as text-like\n\n          if (!hasText) continue;\n\n          if (key.includes(\"item\") || key.includes(\"task\") || key.includes(\"name\")) {\n            return f.column_id;\n          }\n\n          if (!fallback) fallback = f.column_id;\n        }\n      }\n\n      return fallback;\n    } // Try a list of candidate title columns until one works\n\n\n    async function createWithCandidates(candidateColIds, titleText) {\n      const safeTitle = plain(titleText) || \"New Item\";\n\n      for (const colId of candidateColIds.filter(Boolean)) {\n        var _r, _r2;\n\n        // 1) Try rich_text\n        let r = await slackJson(\"slackLists.items.create\", {\n          list_id,\n          initial_fields: [{\n            column_id: colId,\n            rich_text: toRichText(safeTitle)\n          }]\n        });\n        if ((_r = r) !== null && _r !== void 0 && _r.ok) return {\n          ok: true,\n          created: r,\n          used_col: colId,\n          mode: \"rich_text\"\n        }; // If Slack says invalid_arguments, retry with plain text\n\n        if (((_r2 = r) === null || _r2 === void 0 ? void 0 : _r2.error) === \"invalid_arguments\") {\n          var _r3;\n\n          r = await slackJson(\"slackLists.items.create\", {\n            list_id,\n            initial_fields: [{\n              column_id: colId,\n              text: safeTitle\n            }]\n          });\n          if ((_r3 = r) !== null && _r3 !== void 0 && _r3.ok) return {\n            ok: true,\n            created: r,\n            used_col: colId,\n            mode: \"text\"\n          };\n        }\n      }\n\n      return {\n        ok: false,\n        error: \"invalid_arguments_all_title_cols_failed\"\n      };\n    } // Build candidate list for the title column:\n    // 1) explicit env override (if provided),\n    // 2) auto-detected title-like column,\n    // 3) any text-like fallback from the probe (resolveTitleColId already returns fallback).\n\n\n    const autoTitleCol = await resolveTitleColId(list_id);\n    const candidates = [TITLE_COL_ENV, autoTitleCol].filter(Boolean); // Create the item (robust)\n\n    const createdTry = await createWithCandidates(candidates, title);\n\n    if (!createdTry.ok) {\n      return res.status(200).json({\n        ok: false,\n        error: \"invalid_arguments\",\n        mode: \"list\",\n        hint: \"title_create_failed\",\n        tried_columns: candidates,\n        sent_title: plain(title) || \"New Item\"\n      });\n    }\n\n    const created = createdTry.created;\n    const titleColId = createdTry.used_col; // ----- PN/SN update (rich_text → text fallback) -----\n\n    const pn0 = Array.isArray(pn) ? pn[0] : pn;\n    const sn0 = Array.isArray(sn) ? sn[0] : sn;\n    const pnPart = plain(pn0) ? `PN: ${plain(pn0)}` : \"\";\n    const snPart = plain(sn0) ? `SN: ${plain(sn0)}` : \"\";\n    const pnSnText = [pnPart, snPart].filter(Boolean).join(\"  \"); // Find a PN/SN-ish column by sampling values/keys\n\n    async function resolvePnSnColId(listId) {\n      const probe = await listProbe(listId);\n      if (!probe) return null;\n      let candidate = null;\n\n      for (const it of probe.items || []) {\n        for (const f of it.fields || []) {\n          if (!f.column_id) continue;\n          const key = (f.key || \"\").toLowerCase();\n          const text = (f.text || extractRTText(f.rich_text) || \"\").toLowerCase();\n          const looks = key.includes(\"pn\") || key.includes(\"sn\") || text.includes(\"pn:\") || text.includes(\"sn:\");\n          if (looks) return f.column_id;\n\n          if (!candidate && (key.includes(\"part\") || key.includes(\"serial\"))) {\n            candidate = f.column_id;\n          }\n        }\n      }\n\n      return candidate;\n    }\n\n    let usedPnSnCol = null;\n\n    if (pnSnText) {\n      const pnSnColId = await resolvePnSnColId(list_id);\n\n      if (pnSnColId) {\n        var _r4, _r5;\n\n        // Try rich_text\n        let r = await slackJson(\"slackLists.items.update\", {\n          list_id,\n          cells: [{\n            row_id: created.item.id,\n            column_id: pnSnColId,\n            rich_text: toRichText(pnSnText)\n          }]\n        });\n\n        if (!((_r4 = r) !== null && _r4 !== void 0 && _r4.ok)) {\n          // Fallback to plain text\n          r = await slackJson(\"slackLists.items.update\", {\n            list_id,\n            cells: [{\n              row_id: created.item.id,\n              column_id: pnSnColId,\n              text: pnSnText\n            }]\n          });\n        }\n\n        if (!((_r5 = r) !== null && _r5 !== void 0 && _r5.ok)) {\n          var _r6;\n\n          // As last resort, append PN/SN to title so the row remains useful\n          await slackJson(\"slackLists.items.update\", {\n            list_id,\n            cells: [{\n              row_id: created.item.id,\n              column_id: titleColId,\n              text: `${plain(title) || \"New Item\"} — ${pnSnText}`\n            }]\n          });\n          return res.status(200).json({\n            ok: false,\n            error: ((_r6 = r) === null || _r6 === void 0 ? void 0 : _r6.error) || \"update_failed\",\n            mode: \"list\",\n            list_id,\n            item_id: created.item.id,\n            used_title_col: titleColId\n          });\n        }\n\n        usedPnSnCol = pnSnColId;\n      }\n    }\n\n    return res.status(200).json({\n      ok: true,\n      mode: \"list\",\n      list_id,\n      item_id: created.item.id,\n      used_title_col: titleColId,\n      used_pnsn_col: usedPnSnCol || null,\n      title_mode: createdTry.mode // whether Slack accepted rich_text or text for title\n\n    });\n  } catch (err) {\n    console.error(\"API /slack/add-to-list crashed:\", err);\n    return res.status(500).json({\n      ok: false,\n      error: \"exception\",\n      message: (err === null || err === void 0 ? void 0 : err.message) || String(err)\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}